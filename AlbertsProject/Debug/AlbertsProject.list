
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004178  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004388  08004388  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004390  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  080043f8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080043f8  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007634  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e8  00000000  00000000  0000d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000503  00000000  00000000  0000f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d8f  00000000  00000000  0000fb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e31  00000000  00000000  0002591a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085600  00000000  00000000  0002e74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3d4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000200c  00000000  00000000  000b3d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b5d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004300 	.word	0x08004300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004300 	.word	0x08004300

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <LSM_Init>:
uint16_t _lsm_nssPin;

uint8_t _lsmReadReg(uint8_t reg);
void _lsmWriteReg(uint8_t reg, uint8_t data);

uint8_t LSM_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	80fb      	strh	r3, [r7, #6]
	_lsm_hspi1 = hspi;
 8000dba:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <LSM_Init+0x40>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6013      	str	r3, [r2, #0]
	_lsm_nssPort = port;
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <LSM_Init+0x44>)
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	6013      	str	r3, [r2, #0]
	_lsm_nssPin = pin;
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <LSM_Init+0x48>)
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	8013      	strh	r3, [r2, #0]

	uint8_t whoAmI =_lsmReadReg(LSM_REG_WHO_AM_I);
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f000 f867 	bl	8000ea0 <_lsmReadReg>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	75fb      	strb	r3, [r7, #23]

	if (whoAmI != LSM_SET_WHO_AM_I_VAL) {
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	2b6a      	cmp	r3, #106	@ 0x6a
 8000dda:	d001      	beq.n	8000de0 <LSM_Init+0x34>
		return 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <LSM_Init+0x36>
	}

	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000084 	.word	0x20000084
 8000df0:	20000088 	.word	0x20000088
 8000df4:	2000008c 	.word	0x2000008c

08000df8 <LSM_ReadData>:

void LSM_ReadData(int16_t endBufer[]) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	uint8_t bufer[6];
	for (int i = 0; i < 6; i++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	e008      	b.n	8000e18 <LSM_ReadData+0x20>
		bufer[i] = 0;
 8000e06:	f107 020c 	add.w	r2, r7, #12
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	ddf3      	ble.n	8000e06 <LSM_ReadData+0xe>
	}
	uint8_t dataReg = LSM_REG_OUTX_L_XL;
 8000e1e:	2328      	movs	r3, #40	@ 0x28
 8000e20:	74fb      	strb	r3, [r7, #19]

	for (int i = 0; i < 6; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	e012      	b.n	8000e4e <LSM_ReadData+0x56>
		bufer[i] = _lsmReadReg(dataReg+i);
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	7cfb      	ldrb	r3, [r7, #19]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f834 	bl	8000ea0 <_lsmReadReg>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	4413      	add	r3, r2
 8000e44:	460a      	mov	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	dde9      	ble.n	8000e28 <LSM_ReadData+0x30>
	}
	for (int i=0; i<3; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e019      	b.n	8000e8e <LSM_ReadData+0x96>
		endBufer[i] = (((int16_t)bufer[2*i+1]) << 8) + bufer[2*i];
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	3301      	adds	r3, #1
 8000e60:	3320      	adds	r3, #32
 8000e62:	443b      	add	r3, r7
 8000e64:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	0052      	lsls	r2, r2, #1
 8000e70:	3220      	adds	r2, #32
 8000e72:	443a      	add	r2, r7
 8000e74:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b299      	uxth	r1, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	b20a      	sxth	r2, r1
 8000e86:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<3; i++) {
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	dde2      	ble.n	8000e5a <LSM_ReadData+0x62>
	}
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <_lsmReadReg>:

uint8_t _lsmReadReg(uint8_t reg) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	reg = reg | (1 << 7);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	71fb      	strb	r3, [r7, #7]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <_lsmReadReg+0x68>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <_lsmReadReg+0x6c>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <_lsmReadReg+0x68>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_lsmReadReg+0x70>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	1df9      	adds	r1, r7, #7
 8000ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f002 f812 	bl	8002efe <HAL_SPI_Transmit>
	HAL_SPI_Receive(_lsm_hspi1, &reg, 1, 1000);
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <_lsmReadReg+0x70>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	1df9      	adds	r1, r7, #7
 8000ee0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f002 f94d 	bl	8003184 <HAL_SPI_Receive>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <_lsmReadReg+0x68>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <_lsmReadReg+0x6c>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <_lsmReadReg+0x68>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	615a      	str	r2, [r3, #20]
	return reg;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000088 	.word	0x20000088
 8000f0c:	2000008c 	.word	0x2000008c
 8000f10:	20000084 	.word	0x20000084

08000f14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f18:	b091      	sub	sp, #68	@ 0x44
 8000f1a:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f1c:	f001 f80e 	bl	8001f3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f20:	f000 f928 	bl	8001174 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f24:	f000 f9c6 	bl	80012b4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000f28:	f000 f98e 	bl	8001248 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	LED2_GPIO_Port->ODR |= LED2_Pin;
 8000f2c:	4b88      	ldr	r3, [pc, #544]	@ (8001150 <main+0x23c>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a87      	ldr	r2, [pc, #540]	@ (8001150 <main+0x23c>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 8000f38:	4b85      	ldr	r3, [pc, #532]	@ (8001150 <main+0x23c>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	4a84      	ldr	r2, [pc, #528]	@ (8001150 <main+0x23c>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 8000f44:	4b82      	ldr	r3, [pc, #520]	@ (8001150 <main+0x23c>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a81      	ldr	r2, [pc, #516]	@ (8001150 <main+0x23c>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6153      	str	r3, [r2, #20]

	HAL_Delay(2000);
 8000f50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f54:	f001 f864 	bl	8002020 <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 8000f58:	4b7d      	ldr	r3, [pc, #500]	@ (8001150 <main+0x23c>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a7c      	ldr	r2, [pc, #496]	@ (8001150 <main+0x23c>)
 8000f5e:	f023 0301 	bic.w	r3, r3, #1
 8000f62:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 8000f64:	4b7a      	ldr	r3, [pc, #488]	@ (8001150 <main+0x23c>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	4a79      	ldr	r2, [pc, #484]	@ (8001150 <main+0x23c>)
 8000f6a:	f023 0302 	bic.w	r3, r3, #2
 8000f6e:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 8000f70:	4b77      	ldr	r3, [pc, #476]	@ (8001150 <main+0x23c>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a76      	ldr	r2, [pc, #472]	@ (8001150 <main+0x23c>)
 8000f76:	f023 0304 	bic.w	r3, r3, #4
 8000f7a:	6153      	str	r3, [r2, #20]

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin)) {
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	4975      	ldr	r1, [pc, #468]	@ (8001154 <main+0x240>)
 8000f80:	4875      	ldr	r0, [pc, #468]	@ (8001158 <main+0x244>)
 8000f82:	f000 fa39 	bl	80013f8 <LORA_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <main+0x90>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4870      	ldr	r0, [pc, #448]	@ (8001150 <main+0x23c>)
 8000f90:	f001 faed 	bl	800256e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f98:	f001 f842 	bl	8002020 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	486c      	ldr	r0, [pc, #432]	@ (8001150 <main+0x23c>)
 8000fa0:	f001 fae5 	bl	800256e <HAL_GPIO_TogglePin>
	}

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	496d      	ldr	r1, [pc, #436]	@ (800115c <main+0x248>)
 8000fa8:	486b      	ldr	r0, [pc, #428]	@ (8001158 <main+0x244>)
 8000faa:	f000 fb63 	bl	8001674 <MS_Init>

	if (LSM_Init(&hspi1, LSM_NSS_GPIO_Port, LSM_NSS_Pin)) {
 8000fae:	2204      	movs	r2, #4
 8000fb0:	496a      	ldr	r1, [pc, #424]	@ (800115c <main+0x248>)
 8000fb2:	4869      	ldr	r0, [pc, #420]	@ (8001158 <main+0x244>)
 8000fb4:	f7ff fefa 	bl	8000dac <LSM_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <main+0xc2>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	4863      	ldr	r0, [pc, #396]	@ (8001150 <main+0x23c>)
 8000fc2:	f001 fad4 	bl	800256e <HAL_GPIO_TogglePin>
		HAL_Delay(3000);
 8000fc6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fca:	f001 f829 	bl	8002020 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000fce:	2102      	movs	r1, #2
 8000fd0:	485f      	ldr	r0, [pc, #380]	@ (8001150 <main+0x23c>)
 8000fd2:	f001 facc 	bl	800256e <HAL_GPIO_TogglePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000fd6:	466b      	mov	r3, sp
 8000fd8:	603b      	str	r3, [r7, #0]
		MS_ReadData(MS_Data);
 8000fda:	4861      	ldr	r0, [pc, #388]	@ (8001160 <main+0x24c>)
 8000fdc:	f000 fb70 	bl	80016c0 <MS_ReadData>
		LSM_ReadData(LSM_Data);
 8000fe0:	4860      	ldr	r0, [pc, #384]	@ (8001164 <main+0x250>)
 8000fe2:	f7ff ff09 	bl	8000df8 <LSM_ReadData>

		SensorsData.time = HAL_GetTick();
 8000fe6:	f001 f80f 	bl	8002008 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a5e      	ldr	r2, [pc, #376]	@ (8001168 <main+0x254>)
 8000fee:	6053      	str	r3, [r2, #4]
		SensorsData.press = MS_Data[0];
 8000ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8001160 <main+0x24c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a5c      	ldr	r2, [pc, #368]	@ (8001168 <main+0x254>)
 8000ff6:	60d3      	str	r3, [r2, #12]
		SensorsData.temp = MS_Data[1];
 8000ff8:	4b59      	ldr	r3, [pc, #356]	@ (8001160 <main+0x24c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8001168 <main+0x254>)
 8000ffe:	6113      	str	r3, [r2, #16]
		SensorsData.accel1 = LSM_Data[0];
 8001000:	4b58      	ldr	r3, [pc, #352]	@ (8001164 <main+0x250>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	461a      	mov	r2, r3
 8001008:	4b57      	ldr	r3, [pc, #348]	@ (8001168 <main+0x254>)
 800100a:	615a      	str	r2, [r3, #20]
		SensorsData.accel2 = LSM_Data[1];
 800100c:	4b55      	ldr	r3, [pc, #340]	@ (8001164 <main+0x250>)
 800100e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001012:	461a      	mov	r2, r3
 8001014:	4b54      	ldr	r3, [pc, #336]	@ (8001168 <main+0x254>)
 8001016:	619a      	str	r2, [r3, #24]
		SensorsData.accel3 = LSM_Data[2];
 8001018:	4b52      	ldr	r3, [pc, #328]	@ (8001164 <main+0x250>)
 800101a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800101e:	461a      	mov	r2, r3
 8001020:	4b51      	ldr	r3, [pc, #324]	@ (8001168 <main+0x254>)
 8001022:	61da      	str	r2, [r3, #28]

		char buffer[sizeOfBufferToLora];
 8001024:	4b51      	ldr	r3, [pc, #324]	@ (800116c <main+0x258>)
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	1e4b      	subs	r3, r1, #1
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	460a      	mov	r2, r1
 800102e:	2300      	movs	r3, #0
 8001030:	4614      	mov	r4, r2
 8001032:	461d      	mov	r5, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	00eb      	lsls	r3, r5, #3
 800103e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001042:	00e2      	lsls	r2, r4, #3
 8001044:	460a      	mov	r2, r1
 8001046:	2300      	movs	r3, #0
 8001048:	4690      	mov	r8, r2
 800104a:	4699      	mov	r9, r3
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800105c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001060:	460b      	mov	r3, r1
 8001062:	3307      	adds	r3, #7
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	ebad 0d03 	sub.w	sp, sp, r3
 800106c:	ab06      	add	r3, sp, #24
 800106e:	3300      	adds	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]

		uint8_t sizeOfSnprintf = snprintf(buffer, sizeOfBufferToLora,
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <main+0x258>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	469c      	mov	ip, r3
 8001078:	4b3b      	ldr	r3, [pc, #236]	@ (8001168 <main+0x254>)
 800107a:	6858      	ldr	r0, [r3, #4]
 800107c:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <main+0x254>)
 800107e:	68de      	ldr	r6, [r3, #12]
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <main+0x254>)
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b38      	ldr	r3, [pc, #224]	@ (8001168 <main+0x254>)
 8001088:	6959      	ldr	r1, [r3, #20]
 800108a:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <main+0x254>)
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <main+0x254>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	9305      	str	r3, [sp, #20]
 8001094:	9204      	str	r2, [sp, #16]
 8001096:	9103      	str	r1, [sp, #12]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	9601      	str	r6, [sp, #4]
 800109e:	9000      	str	r0, [sp, #0]
 80010a0:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <main+0x254>)
 80010a2:	4a33      	ldr	r2, [pc, #204]	@ (8001170 <main+0x25c>)
 80010a4:	4661      	mov	r1, ip
 80010a6:	69f8      	ldr	r0, [r7, #28]
 80010a8:	f002 fc76 	bl	8003998 <sniprintf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	76fb      	strb	r3, [r7, #27]
				"%s;%ld;1;%ld;%ld;%ld;%ld;%ld;1;1\n", SensorsData.teamID,
				SensorsData.time, SensorsData.press, SensorsData.temp,
				SensorsData.accel1, SensorsData.accel2, SensorsData.accel3);

		uint8_t bufferToLora[sizeOfSnprintf];
 80010b0:	7ef9      	ldrb	r1, [r7, #27]
 80010b2:	460b      	mov	r3, r1
 80010b4:	3b01      	subs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	b2cb      	uxtb	r3, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	469a      	mov	sl, r3
 80010be:	4693      	mov	fp, r2
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010d4:	b2cb      	uxtb	r3, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	60fa      	str	r2, [r7, #12]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	00c3      	lsls	r3, r0, #3
 80010e8:	68b8      	ldr	r0, [r7, #8]
 80010ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	00c2      	lsls	r2, r0, #3
 80010f2:	460b      	mov	r3, r1
 80010f4:	3307      	adds	r3, #7
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	ebad 0d03 	sub.w	sp, sp, r3
 80010fe:	ab06      	add	r3, sp, #24
 8001100:	3300      	adds	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
		bufferToLora[0] = sizeOfSnprintf;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	7efa      	ldrb	r2, [r7, #27]
 8001108:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < sizeOfSnprintf; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
 800110e:	e00b      	b.n	8001128 <main+0x214>
			bufferToLora[i] = (uint8_t) buffer[i];
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	4413      	add	r3, r2
 8001116:	7819      	ldrb	r1, [r3, #0]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	4413      	add	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeOfSnprintf; i++) {
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3301      	adds	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
 8001128:	7efb      	ldrb	r3, [r7, #27]
 800112a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800112c:	429a      	cmp	r2, r3
 800112e:	dbef      	blt.n	8001110 <main+0x1fc>
		}

		LORA_TransmitData(bufferToLora, sizeOfSnprintf);
 8001130:	7efb      	ldrb	r3, [r7, #27]
 8001132:	4619      	mov	r1, r3
 8001134:	6938      	ldr	r0, [r7, #16]
 8001136:	f000 fa45 	bl	80015c4 <LORA_TransmitData>

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800113a:	2101      	movs	r1, #1
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <main+0x23c>)
 800113e:	f001 fa16 	bl	800256e <HAL_GPIO_TogglePin>

		HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	@ 0x64
 8001144:	f000 ff6c 	bl	8002020 <HAL_Delay>
 8001148:	f8d7 d000 	ldr.w	sp, [r7]
	while (1) {
 800114c:	e743      	b.n	8000fd6 <main+0xc2>
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000
 8001154:	40020800 	.word	0x40020800
 8001158:	20000090 	.word	0x20000090
 800115c:	40020400 	.word	0x40020400
 8001160:	200000e8 	.word	0x200000e8
 8001164:	200000f0 	.word	0x200000f0
 8001168:	200000f8 	.word	0x200000f8
 800116c:	20000000 	.word	0x20000000
 8001170:	08004318 	.word	0x08004318

08001174 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	@ 0x50
 8001178:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	@ 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fc3c 	bl	8003a00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <SystemClock_Config+0xcc>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c0:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <SystemClock_Config+0xd0>)
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80011e8:	2319      	movs	r3, #25
 80011ea:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80011ec:	23a8      	movs	r3, #168	@ 0xa8
 80011ee:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 f9d1 	bl	80025a4 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x98>
		Error_Handler();
 8001208:	f000 f8f0 	bl	80013ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2102      	movs	r1, #2
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fc33 	bl	8002a94 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xc4>
		Error_Handler();
 8001234:	f000 f8da 	bl	80013ec <Error_Handler>
	}
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	@ 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_SPI1_Init+0x64>)
 800124e:	4a18      	ldr	r2, [pc, #96]	@ (80012b0 <MX_SPI1_Init+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001254:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001258:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_SPI1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001278:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_SPI1_Init+0x64>)
 800127c:	2210      	movs	r2, #16
 800127e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_SPI1_Init+0x64>)
 8001294:	220a      	movs	r2, #10
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_SPI1_Init+0x64>)
 800129a:	f001 fda7 	bl	8002dec <HAL_SPI_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80012a4:	f000 f8a2 	bl	80013ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000090 	.word	0x20000090
 80012b0:	40013000 	.word	0x40013000

080012b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <MX_GPIO_Init+0x128>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a42      	ldr	r2, [pc, #264]	@ (80013dc <MX_GPIO_Init+0x128>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b40      	ldr	r3, [pc, #256]	@ (80013dc <MX_GPIO_Init+0x128>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b3c      	ldr	r3, [pc, #240]	@ (80013dc <MX_GPIO_Init+0x128>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a3b      	ldr	r2, [pc, #236]	@ (80013dc <MX_GPIO_Init+0x128>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <MX_GPIO_Init+0x128>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <MX_GPIO_Init+0x128>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a34      	ldr	r2, [pc, #208]	@ (80013dc <MX_GPIO_Init+0x128>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <MX_GPIO_Init+0x128>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <MX_GPIO_Init+0x128>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a2d      	ldr	r2, [pc, #180]	@ (80013dc <MX_GPIO_Init+0x128>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <MX_GPIO_Init+0x128>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin,
 800133a:	2201      	movs	r2, #1
 800133c:	2131      	movs	r1, #49	@ 0x31
 800133e:	4828      	ldr	r0, [pc, #160]	@ (80013e0 <MX_GPIO_Init+0x12c>)
 8001340:	f001 f8fc 	bl	800253c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED2_Pin | LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2107      	movs	r1, #7
 8001348:	4826      	ldr	r0, [pc, #152]	@ (80013e4 <MX_GPIO_Init+0x130>)
 800134a:	f001 f8f7 	bl	800253c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <MX_GPIO_Init+0x130>)
 8001354:	f001 f8f2 	bl	800253c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001358:	2201      	movs	r2, #1
 800135a:	f240 2107 	movw	r1, #519	@ 0x207
 800135e:	4822      	ldr	r0, [pc, #136]	@ (80013e8 <MX_GPIO_Init+0x134>)
 8001360:	f001 f8ec 	bl	800253c <HAL_GPIO_WritePin>
	MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin, GPIO_PIN_SET);

	/*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin;
 8001364:	2331      	movs	r3, #49	@ 0x31
 8001366:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4819      	ldr	r0, [pc, #100]	@ (80013e0 <MX_GPIO_Init+0x12c>)
 800137c:	f000 ff5a 	bl	8002234 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED3_Pin | LED4_Pin | WQ_HOLD_Pin;
 8001380:	2317      	movs	r3, #23
 8001382:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <MX_GPIO_Init+0x130>)
 8001398:	f000 ff4c 	bl	8002234 <HAL_GPIO_Init>

	/*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
	GPIO_InitStruct.Pin = MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin;
 800139c:	f240 2307 	movw	r3, #519	@ 0x207
 80013a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <MX_GPIO_Init+0x134>)
 80013b6:	f000 ff3d 	bl	8002234 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin | JMP_PROG_Pin;
 80013ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <MX_GPIO_Init+0x134>)
 80013d0:	f000 ff30 	bl	8002234 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400

080013ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <Error_Handler+0x8>

080013f8 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 8001406:	4a32      	ldr	r2, [pc, #200]	@ (80014d0 <LORA_Init+0xd8>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 800140c:	4a31      	ldr	r2, [pc, #196]	@ (80014d4 <LORA_Init+0xdc>)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 8001412:	4a31      	ldr	r2, [pc, #196]	@ (80014d8 <LORA_Init+0xe0>)
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 8001418:	2042      	movs	r0, #66	@ 0x42
 800141a:	f000 f861 	bl	80014e0 <_loraReadReg>
 800141e:	4603      	mov	r3, r0
 8001420:	2b12      	cmp	r3, #18
 8001422:	d001      	beq.n	8001428 <LORA_Init+0x30>
		return 1;
 8001424:	2301      	movs	r3, #1
 8001426:	e04e      	b.n	80014c6 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8001428:	2100      	movs	r1, #0
 800142a:	2001      	movs	r0, #1
 800142c:	f000 f88e 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 8001430:	2188      	movs	r1, #136	@ 0x88
 8001432:	2001      	movs	r0, #1
 8001434:	f000 f88a 	bl	800154c <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8001438:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <LORA_Init+0xe4>)
 800143a:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4619      	mov	r1, r3
 8001444:	2006      	movs	r0, #6
 8001446:	f000 f881 	bl	800154c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2007      	movs	r0, #7
 8001454:	f000 f87a 	bl	800154c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4619      	mov	r1, r3
 800145e:	2008      	movs	r0, #8
 8001460:	f000 f874 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8001464:	21ff      	movs	r1, #255	@ 0xff
 8001466:	2009      	movs	r0, #9
 8001468:	f000 f870 	bl	800154c <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 800146c:	210b      	movs	r1, #11
 800146e:	200b      	movs	r0, #11
 8001470:	f000 f86c 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8001474:	2120      	movs	r1, #32
 8001476:	200c      	movs	r0, #12
 8001478:	f000 f868 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 800147c:	21ff      	movs	r1, #255	@ 0xff
 800147e:	200e      	movs	r0, #14
 8001480:	f000 f864 	bl	800154c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8001484:	2100      	movs	r1, #0
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f860 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 800148c:	2182      	movs	r1, #130	@ 0x82
 800148e:	201d      	movs	r0, #29
 8001490:	f000 f85c 	bl	800154c <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8001494:	2170      	movs	r1, #112	@ 0x70
 8001496:	201e      	movs	r0, #30
 8001498:	f000 f858 	bl	800154c <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 800149c:	2100      	movs	r1, #0
 800149e:	2020      	movs	r0, #32
 80014a0:	f000 f854 	bl	800154c <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 80014a4:	2106      	movs	r1, #6
 80014a6:	2021      	movs	r0, #33	@ 0x21
 80014a8:	f000 f850 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 80014ac:	213c      	movs	r1, #60	@ 0x3c
 80014ae:	2022      	movs	r0, #34	@ 0x22
 80014b0:	f000 f84c 	bl	800154c <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 80014b4:	213c      	movs	r1, #60	@ 0x3c
 80014b6:	2023      	movs	r0, #35	@ 0x23
 80014b8:	f000 f848 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 80014bc:	2105      	movs	r1, #5
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 f844 	bl	800154c <_loraWriteReg>

	return 0;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000128 	.word	0x20000128
 80014d4:	2000012c 	.word	0x2000012c
 80014d8:	20000130 	.word	0x20000130
 80014dc:	006c4000 	.word	0x006c4000

080014e0 <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <_loraReadReg+0x60>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <_loraReadReg+0x64>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <_loraReadReg+0x60>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	400a      	ands	r2, r1
 80014fe:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <_loraReadReg+0x68>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	1df9      	adds	r1, r7, #7
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	2201      	movs	r2, #1
 800150c:	f001 fcf7 	bl	8002efe <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <_loraReadReg+0x68>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	1df9      	adds	r1, r7, #7
 8001516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151a:	2201      	movs	r2, #1
 800151c:	f001 fe32 	bl	8003184 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <_loraReadReg+0x60>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <_loraReadReg+0x64>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <_loraReadReg+0x60>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	615a      	str	r2, [r3, #20]
	return reg;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000012c 	.word	0x2000012c
 8001544:	20000130 	.word	0x20000130
 8001548:	20000128 	.word	0x20000128

0800154c <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001562:	b2db      	uxtb	r3, r3
 8001564:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <_loraWriteReg+0x6c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <_loraWriteReg+0x70>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	43db      	mvns	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <_loraWriteReg+0x6c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <_loraWriteReg+0x74>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	1df9      	adds	r1, r7, #7
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	2201      	movs	r2, #1
 8001588:	f001 fcb9 	bl	8002efe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <_loraWriteReg+0x74>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	1db9      	adds	r1, r7, #6
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	2201      	movs	r2, #1
 8001598:	f001 fcb1 	bl	8002efe <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <_loraWriteReg+0x6c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <_loraWriteReg+0x70>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <_loraWriteReg+0x6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	615a      	str	r2, [r3, #20]
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000012c 	.word	0x2000012c
 80015bc:	20000130 	.word	0x20000130
 80015c0:	20000128 	.word	0x20000128

080015c4 <LORA_TransmitData>:
		return packetSize;
	}
	return 0;
}

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 80015d0:	21ff      	movs	r1, #255	@ 0xff
 80015d2:	200d      	movs	r0, #13
 80015d4:	f7ff ffba 	bl	800154c <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	4619      	mov	r1, r3
 80015dc:	2022      	movs	r0, #34	@ 0x22
 80015de:	f7ff ffb5 	bl	800154c <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <LORA_TransmitData+0xa4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <LORA_TransmitData+0xa8>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <LORA_TransmitData+0xa4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	400a      	ands	r2, r1
 80015fa:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <LORA_TransmitData+0xac>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	f107 010f 	add.w	r1, r7, #15
 8001604:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001608:	2201      	movs	r2, #1
 800160a:	f001 fc78 	bl	8002efe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <LORA_TransmitData+0xac>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	b29a      	uxth	r2, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f001 fc6f 	bl	8002efe <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <LORA_TransmitData+0xa4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <LORA_TransmitData+0xa8>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <LORA_TransmitData+0xa4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8001634:	2103      	movs	r1, #3
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff ff88 	bl	800154c <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 800163c:	bf00      	nop
 800163e:	2012      	movs	r0, #18
 8001640:	f7ff ff4e 	bl	80014e0 <_loraReadReg>
 8001644:	4603      	mov	r3, r0
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f7      	beq.n	800163e <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 800164e:	2108      	movs	r1, #8
 8001650:	2012      	movs	r0, #18
 8001652:	f7ff ff7b 	bl	800154c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8001656:	2105      	movs	r1, #5
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff ff77 	bl	800154c <_loraWriteReg>

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000012c 	.word	0x2000012c
 800166c:	20000130 	.word	0x20000130
 8001670:	20000128 	.word	0x20000128

08001674 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	4613      	mov	r3, r2
 8001680:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 8001682:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <MS_Init+0x3c>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 8001688:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <MS_Init+0x40>)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <MS_Init+0x44>)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 8001694:	201e      	movs	r0, #30
 8001696:	f000 fa27 	bl	8001ae8 <_msSendCmd>
	HAL_Delay(100);
 800169a:	2064      	movs	r0, #100	@ 0x64
 800169c:	f000 fcc0 	bl	8002020 <HAL_Delay>

	_msReadProm(_calibrCoeff);
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <MS_Init+0x48>)
 80016a2:	f000 f82d 	bl	8001700 <_msReadProm>

}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000134 	.word	0x20000134
 80016b4:	20000138 	.word	0x20000138
 80016b8:	2000013c 	.word	0x2000013c
 80016bc:	20000140 	.word	0x20000140

080016c0 <MS_ReadData>:

void MS_ReadData(uint32_t endBufer[]) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f80a 	bl	80016e6 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f8c5 	bl	8001868 <_calculate>

}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	2000      	movs	r0, #0
 80016f2:	f000 fa7d 	bl	8001bf0 <_msSendCmdGetData32>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 8001708:	4b4f      	ldr	r3, [pc, #316]	@ (8001848 <_msReadProm+0x148>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	2201      	movs	r2, #1
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fa15 	bl	8001b40 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8001716:	4b4c      	ldr	r3, [pc, #304]	@ (8001848 <_msReadProm+0x148>)
 8001718:	789b      	ldrb	r3, [r3, #2]
 800171a:	2202      	movs	r2, #2
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fa0e 	bl	8001b40 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8001724:	4b48      	ldr	r3, [pc, #288]	@ (8001848 <_msReadProm+0x148>)
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	2203      	movs	r2, #3
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fa07 	bl	8001b40 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 8001732:	4b45      	ldr	r3, [pc, #276]	@ (8001848 <_msReadProm+0x148>)
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fa00 	bl	8001b40 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 8001740:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <_msReadProm+0x148>)
 8001742:	795b      	ldrb	r3, [r3, #5]
 8001744:	2205      	movs	r2, #5
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 f9f9 	bl	8001b40 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <_msReadProm+0x148>)
 8001750:	799b      	ldrb	r3, [r3, #6]
 8001752:	2206      	movs	r2, #6
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f9f2 	bl	8001b40 <_msSendCmdGetData16>

	_realCalibrCoeff.Tref = _calibrCoeff[5] * 256.0;
 800175c:	4b3b      	ldr	r3, [pc, #236]	@ (800184c <_msReadProm+0x14c>)
 800175e:	895b      	ldrh	r3, [r3, #10]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fedf 	bl	8000524 <__aeabi_i2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <_msReadProm+0x150>)
 800176c:	f7fe ff44 	bl	80005f8 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f950 	bl	8000a1c <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a35      	ldr	r2, [pc, #212]	@ (8001854 <_msReadProm+0x154>)
 8001780:	6013      	str	r3, [r2, #0]
	_realCalibrCoeff.TempSens = _calibrCoeff[6] / 8388608.0;
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <_msReadProm+0x14c>)
 8001784:	899b      	ldrh	r3, [r3, #12]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fecc 	bl	8000524 <__aeabi_i2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <_msReadProm+0x158>)
 8001792:	f7ff f85b 	bl	800084c <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff f93d 	bl	8000a1c <__aeabi_d2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <_msReadProm+0x154>)
 80017a6:	6053      	str	r3, [r2, #4]
	_realCalibrCoeff.OffT1 = _calibrCoeff[2] * (65536.0);
 80017a8:	4b28      	ldr	r3, [pc, #160]	@ (800184c <_msReadProm+0x14c>)
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe feb9 	bl	8000524 <__aeabi_i2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <_msReadProm+0x15c>)
 80017b8:	f7fe ff1e 	bl	80005f8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff f92a 	bl	8000a1c <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <_msReadProm+0x154>)
 80017cc:	6093      	str	r3, [r2, #8]
	_realCalibrCoeff.Tco = (_calibrCoeff[4]) / (128.0);
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <_msReadProm+0x14c>)
 80017d0:	891b      	ldrh	r3, [r3, #8]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fea6 	bl	8000524 <__aeabi_i2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <_msReadProm+0x160>)
 80017de:	f7ff f835 	bl	800084c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f917 	bl	8000a1c <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <_msReadProm+0x154>)
 80017f2:	60d3      	str	r3, [r2, #12]
	_realCalibrCoeff.SensT1 = _calibrCoeff[1] * (32768.0);
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <_msReadProm+0x14c>)
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe93 	bl	8000524 <__aeabi_i2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <_msReadProm+0x164>)
 8001804:	f7fe fef8 	bl	80005f8 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f904 	bl	8000a1c <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <_msReadProm+0x154>)
 8001818:	6113      	str	r3, [r2, #16]
	_realCalibrCoeff.Tcs = (_calibrCoeff[3]) / (256.0);
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <_msReadProm+0x14c>)
 800181c:	88db      	ldrh	r3, [r3, #6]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe80 	bl	8000524 <__aeabi_i2d>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <_msReadProm+0x150>)
 800182a:	f7ff f80f 	bl	800084c <__aeabi_ddiv>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f8f1 	bl	8000a1c <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <_msReadProm+0x154>)
 800183e:	6153      	str	r3, [r2, #20]
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000004 	.word	0x20000004
 800184c:	20000140 	.word	0x20000140
 8001850:	40700000 	.word	0x40700000
 8001854:	20000150 	.word	0x20000150
 8001858:	41600000 	.word	0x41600000
 800185c:	40f00000 	.word	0x40f00000
 8001860:	40600000 	.word	0x40600000
 8001864:	40e00000 	.word	0x40e00000

08001868 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], uint32_t bufer[]) {
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b08c      	sub	sp, #48	@ 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	uint32_t D1 = dataWithPressTemp[0];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	61bb      	str	r3, [r7, #24]
	uint32_t D2 = dataWithPressTemp[1];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	617b      	str	r3, [r7, #20]

	float dT = D2 - _realCalibrCoeff.Tref;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001888:	4b90      	ldr	r3, [pc, #576]	@ (8001acc <_calculate+0x264>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	edc7 7a04 	vstr	s15, [r7, #16]
	float TEMP = 2000 + dT * _realCalibrCoeff.TempSens;
 8001896:	4b8d      	ldr	r3, [pc, #564]	@ (8001acc <_calculate+0x264>)
 8001898:	ed93 7a01 	vldr	s14, [r3, #4]
 800189c:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001ad0 <_calculate+0x268>
 80018a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float OFF = _realCalibrCoeff.OffT1 + _realCalibrCoeff.Tco * dT;
 80018b0:	4b86      	ldr	r3, [pc, #536]	@ (8001acc <_calculate+0x264>)
 80018b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018b6:	4b85      	ldr	r3, [pc, #532]	@ (8001acc <_calculate+0x264>)
 80018b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80018bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	float SENS = _realCalibrCoeff.SensT1 + _realCalibrCoeff.Tcs * dT;
 80018cc:	4b7f      	ldr	r3, [pc, #508]	@ (8001acc <_calculate+0x264>)
 80018ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80018d2:	4b7e      	ldr	r3, [pc, #504]	@ (8001acc <_calculate+0x264>)
 80018d4:	edd3 6a05 	vldr	s13, [r3, #20]
 80018d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (TEMP < 2000) {
 80018e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018ec:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001ad0 <_calculate+0x268>
 80018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	f140 80a2 	bpl.w	8001a40 <_calculate+0x1d8>
		float T2 = (dT * dT) / 2147483648.0;
 80018fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001900:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001904:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001ad4 <_calculate+0x26c>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	edc7 7a03 	vstr	s15, [r7, #12]
		float OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2.0;
 8001910:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001914:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001ad0 <_calculate+0x268>
 8001918:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800191c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001924:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001928:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001ad0 <_calculate+0x268>
 800192c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193c:	edc7 7a08 	vstr	s15, [r7, #32]
		float SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4.0;
 8001940:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001944:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001ad0 <_calculate+0x268>
 8001948:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800194c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001950:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001954:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001958:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001ad0 <_calculate+0x268>
 800195c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001964:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	edc7 7a07 	vstr	s15, [r7, #28]

		if (TEMP < -1500) {
 8001970:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001974:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001ad8 <_calculate+0x270>
 8001978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	d546      	bpl.n	8001a10 <_calculate+0x1a8>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8001982:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001986:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001adc <_calculate+0x274>
 800198a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800198e:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001996:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800199a:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001adc <_calculate+0x274>
 800199e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	edc7 7a08 	vstr	s15, [r7, #32]
			SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2.0;
 80019b2:	69f8      	ldr	r0, [r7, #28]
 80019b4:	f7fe fdc8 	bl	8000548 <__aeabi_f2d>
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019c0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001adc <_calculate+0x274>
 80019c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c8:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80019cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019d4:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001adc <_calculate+0x274>
 80019d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	ee17 0a90 	vmov	r0, s15
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f0:	f7fe ff2c 	bl	800084c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc46 	bl	800028c <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f808 	bl	8000a1c <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	61fb      	str	r3, [r7, #28]
		}

		TEMP -= T2;
 8001a10:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		OFF -= OFF2;
 8001a20:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001a24:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		SENS -= SENS2;
 8001a30:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	float PRES = (D1 * SENS / (2097152.0) - OFF) / 32768.0;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a52:	ee17 0a90 	vmov	r0, s15
 8001a56:	f7fe fd77 	bl	8000548 <__aeabi_f2d>
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <_calculate+0x278>)
 8001a60:	f7fe fef4 	bl	800084c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4614      	mov	r4, r2
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a6e:	f7fe fd6b 	bl	8000548 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fc05 	bl	8000288 <__aeabi_dsub>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <_calculate+0x27c>)
 8001a8c:	f7fe fede 	bl	800084c <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7fe ffc0 	bl	8000a1c <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60bb      	str	r3, [r7, #8]

	bufer[0] = PRES;
 8001aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa8:	ee17 2a90 	vmov	r2, s15
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001abc:	ee17 2a90 	vmov	r2, s15
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	@ 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000150 	.word	0x20000150
 8001ad0:	44fa0000 	.word	0x44fa0000
 8001ad4:	4f000000 	.word	0x4f000000
 8001ad8:	c4bb8000 	.word	0xc4bb8000
 8001adc:	44bb8000 	.word	0x44bb8000
 8001ae0:	41400000 	.word	0x41400000
 8001ae4:	40e00000 	.word	0x40e00000

08001ae8 <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <_msSendCmd+0x4c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <_msSendCmd+0x50>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <_msSendCmd+0x4c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	400a      	ands	r2, r1
 8001b06:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <_msSendCmd+0x54>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	1df9      	adds	r1, r7, #7
 8001b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b12:	2201      	movs	r2, #1
 8001b14:	f001 f9f3 	bl	8002efe <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <_msSendCmd+0x4c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <_msSendCmd+0x50>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <_msSendCmd+0x4c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000138 	.word	0x20000138
 8001b38:	2000013c 	.word	0x2000013c
 8001b3c:	20000134 	.word	0x20000134

08001b40 <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <_msSendCmdGetData16+0xa4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <_msSendCmdGetData16+0xa8>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <_msSendCmdGetData16+0xa4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	400a      	ands	r2, r1
 8001b64:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001b66:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <_msSendCmdGetData16+0xac>)
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	1df9      	adds	r1, r7, #7
 8001b6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b70:	2201      	movs	r2, #1
 8001b72:	f001 f9c4 	bl	8002efe <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001b76:	200a      	movs	r0, #10
 8001b78:	f000 fa52 	bl	8002020 <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <_msSendCmdGetData16+0xac>)
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	f107 010d 	add.w	r1, r7, #13
 8001b84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f001 fafb 	bl	8003184 <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <_msSendCmdGetData16+0xac>)
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	f107 010c 	add.w	r1, r7, #12
 8001b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f001 faf2 	bl	8003184 <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <_msSendCmdGetData16+0xa4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_msSendCmdGetData16+0xa8>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <_msSendCmdGetData16+0xa4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	89fb      	ldrh	r3, [r7, #14]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	89fa      	ldrh	r2, [r7, #14]
 8001bd2:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 8001bd4:	2014      	movs	r0, #20
 8001bd6:	f000 fa23 	bl	8002020 <HAL_Delay>

}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000138 	.word	0x20000138
 8001be8:	2000013c 	.word	0x2000013c
 8001bec:	20000134 	.word	0x20000134

08001bf0 <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 8001bfc:	2044      	movs	r0, #68	@ 0x44
 8001bfe:	f7ff ff73 	bl	8001ae8 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001c02:	200c      	movs	r0, #12
 8001c04:	f000 fa0c 	bl	8002020 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001c08:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <_msSendCmdGetData32+0x120>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <_msSendCmdGetData32+0x124>)
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	1df9      	adds	r1, r7, #7
 8001c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f001 f968 	bl	8002efe <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 8001c2e:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <_msSendCmdGetData32+0x124>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f107 010c 	add.w	r1, r7, #12
 8001c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f001 faa2 	bl	8003184 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001c40:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <_msSendCmdGetData32+0x120>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 8001c54:	2054      	movs	r0, #84	@ 0x54
 8001c56:	f7ff ff47 	bl	8001ae8 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f000 f9e0 	bl	8002020 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <_msSendCmdGetData32+0x120>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001c76:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <_msSendCmdGetData32+0x124>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	1df9      	adds	r1, r7, #7
 8001c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c80:	2201      	movs	r2, #1
 8001c82:	f001 f93c 	bl	8002efe <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 8001c86:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <_msSendCmdGetData32+0x124>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	f107 0108 	add.w	r1, r7, #8
 8001c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c92:	2203      	movs	r2, #3
 8001c94:	f001 fa76 	bl	8003184 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <_msSendCmdGetData32+0x120>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <_msSendCmdGetData32+0x11c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 8001cac:	7b3b      	ldrb	r3, [r7, #12]
 8001cae:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 8001cb6:	7b7b      	ldrb	r3, [r7, #13]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 8001cd0:	7a3b      	ldrb	r3, [r7, #8]
 8001cd2:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 8001cda:	7a7b      	ldrb	r3, [r7, #9]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 8001cea:	7abb      	ldrb	r3, [r7, #10]
 8001cec:	461a      	mov	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000138 	.word	0x20000138
 8001d10:	2000013c 	.word	0x2000013c
 8001d14:	20000134 	.word	0x20000134

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_MspInit+0x4c>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_MspInit+0x4c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <HAL_MspInit+0x4c>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_MspInit+0x4c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_SPI_MspInit+0x84>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12b      	bne.n	8001de2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_SPI_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <HAL_SPI_MspInit+0x88>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <HAL_SPI_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dc2:	23e0      	movs	r3, #224	@ 0xe0
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001dde:	f000 fa29 	bl	8002234 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	@ 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40013000 	.word	0x40013000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <NMI_Handler+0x4>

08001e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <MemManage_Handler+0x4>

08001e10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4e:	f000 f8c7 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f001 fdc2 	bl	8003a10 <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20018000 	.word	0x20018000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	20000168 	.word	0x20000168
 8001ec0:	200002b8 	.word	0x200002b8

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001eec:	f7ff ffea 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ef2:	490d      	ldr	r1, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f08:	4c0a      	ldr	r4, [pc, #40]	@ (8001f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f16:	f001 fd81 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1a:	f7fe fffb 	bl	8000f14 <main>
  bx  lr    
 8001f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f2c:	08004390 	.word	0x08004390
  ldr r2, =_sbss
 8001f30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f34:	200002b8 	.word	0x200002b8

08001f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f931 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fed2 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f93b 	bl	800221a <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 f911 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000014 	.word	0x20000014
 8001fdc:	20000010 	.word	0x20000010

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000014 	.word	0x20000014
 8002004:	2000016c 	.word	0x2000016c

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000016c 	.word	0x2000016c

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000014 	.word	0x20000014

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff47 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff5c 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffb0 	bl	8002188 <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e159      	b.n	8002504 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8148 	bne.w	80024fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d005      	beq.n	8002286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	2b02      	cmp	r3, #2
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d017      	beq.n	8002324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a2 	beq.w	80024fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b57      	ldr	r3, [pc, #348]	@ (800251c <HAL_GPIO_Init+0x2e8>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a56      	ldr	r2, [pc, #344]	@ (800251c <HAL_GPIO_Init+0x2e8>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b54      	ldr	r3, [pc, #336]	@ (800251c <HAL_GPIO_Init+0x2e8>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d6:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <HAL_GPIO_Init+0x2ec>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a49      	ldr	r2, [pc, #292]	@ (8002524 <HAL_GPIO_Init+0x2f0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x202>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a48      	ldr	r2, [pc, #288]	@ (8002528 <HAL_GPIO_Init+0x2f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x1fe>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a47      	ldr	r2, [pc, #284]	@ (800252c <HAL_GPIO_Init+0x2f8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x1fa>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a46      	ldr	r2, [pc, #280]	@ (8002530 <HAL_GPIO_Init+0x2fc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x1f6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a45      	ldr	r2, [pc, #276]	@ (8002534 <HAL_GPIO_Init+0x300>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x1f2>
 8002422:	2304      	movs	r3, #4
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x204>
 8002426:	2307      	movs	r3, #7
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x204>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x204>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x204>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x204>
 8002436:	2300      	movs	r3, #0
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002448:	4935      	ldr	r1, [pc, #212]	@ (8002520 <HAL_GPIO_Init+0x2ec>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_GPIO_Init+0x304>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <HAL_GPIO_Init+0x304>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002480:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_GPIO_Init+0x304>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a4:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024aa:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d4:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	f67f aea2 	bls.w	8002250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43d9      	mvns	r1, r3
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	400b      	ands	r3, r1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e267      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b7e      	ldr	r3, [pc, #504]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e242      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b76      	ldr	r3, [pc, #472]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a75      	ldr	r2, [pc, #468]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6f      	ldr	r2, [pc, #444]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6d      	ldr	r3, [pc, #436]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6c      	ldr	r2, [pc, #432]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fcd4 	bl	8002008 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff fcd0 	bl	8002008 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e207      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5b      	ldr	r3, [pc, #364]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fcc0 	bl	8002008 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fcbc 	bl	8002008 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1f3      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b44      	ldr	r3, [pc, #272]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c7      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4937      	ldr	r1, [pc, #220]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7ff fc75 	bl	8002008 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff fc71 	bl	8002008 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a8      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4925      	ldr	r1, [pc, #148]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff fc54 	bl	8002008 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff fc50 	bl	8002008 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e187      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d036      	beq.n	80027fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff fc34 	bl	8002008 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff fc30 	bl	8002008 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e167      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e01b      	b.n	80027fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7ff fc1d 	bl	8002008 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e00e      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7ff fc19 	bl	8002008 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d907      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e150      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470000 	.word	0x42470000
 80027ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ea      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8097 	beq.w	8002938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a7c      	ldr	r2, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b77      	ldr	r3, [pc, #476]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b74      	ldr	r3, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7ff fbd9 	bl	8002008 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7ff fbd5 	bl	8002008 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e10c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x2ea>
 8002880:	4b64      	ldr	r3, [pc, #400]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a63      	ldr	r2, [pc, #396]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x30c>
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 80028b0:	4b58      	ldr	r3, [pc, #352]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a57      	ldr	r2, [pc, #348]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	4b55      	ldr	r3, [pc, #340]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a54      	ldr	r2, [pc, #336]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0304 	bic.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7ff fb9a 	bl	8002008 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7ff fb96 	bl	8002008 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0cb      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7ff fb84 	bl	8002008 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7ff fb80 	bl	8002008 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0b5      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ee      	bne.n	8002904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a1 	beq.w	8002a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002942:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d05c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d141      	bne.n	80029da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff fb54 	bl	8002008 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff fb50 	bl	8002008 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e087      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	491b      	ldr	r1, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7ff fb29 	bl	8002008 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7ff fb25 	bl	8002008 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e05c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x416>
 80029d8:	e054      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff fb12 	bl	8002008 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff fb0e 	bl	8002008 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e045      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
 8002a06:	e03d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e038      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7ff fa40 	bl	8002008 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7ff fa3c 	bl	8002008 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f821 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f9a0 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	0800433c 	.word	0x0800433c
 8002c58:	2000000c 	.word	0x2000000c
 8002c5c:	20000010 	.word	0x20000010

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b090      	sub	sp, #64	@ 0x40
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 80a1 	bhi.w	8002dcc <HAL_RCC_GetSysClockFreq+0x16c>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c92:	e09b      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c98:	e09b      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9e:	e098      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b4d      	ldr	r3, [pc, #308]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ccc:	fb03 f201 	mul.w	r2, r3, r1
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a43      	ldr	r2, [pc, #268]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cda:	fba0 1202 	umull	r1, r2, r0, r2
 8002cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce6:	4413      	add	r3, r2
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cec:	2200      	movs	r2, #0
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	61fa      	str	r2, [r7, #28]
 8002cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cfa:	f7fd fedf 	bl	8000abc <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4613      	mov	r3, r2
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d06:	e053      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	617a      	str	r2, [r7, #20]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d1a:	f04f 0b00 	mov.w	fp, #0
 8002d1e:	4652      	mov	r2, sl
 8002d20:	465b      	mov	r3, fp
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d30:	0150      	lsls	r0, r2, #5
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	ebb2 080a 	subs.w	r8, r2, sl
 8002d3a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d52:	ebb2 0408 	subs.w	r4, r2, r8
 8002d56:	eb63 0509 	sbc.w	r5, r3, r9
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	00eb      	lsls	r3, r5, #3
 8002d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d68:	00e2      	lsls	r2, r4, #3
 8002d6a:	4614      	mov	r4, r2
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	eb14 030a 	adds.w	r3, r4, sl
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	eb45 030b 	adc.w	r3, r5, fp
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d86:	4629      	mov	r1, r5
 8002d88:	028b      	lsls	r3, r1, #10
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d90:	4621      	mov	r1, r4
 8002d92:	028a      	lsls	r2, r1, #10
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	60fa      	str	r2, [r7, #12]
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	f7fd fe8a 	bl	8000abc <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3740      	adds	r7, #64	@ 0x40
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	017d7840 	.word	0x017d7840

08002dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07b      	b.n	8002ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e0e:	d009      	beq.n	8002e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
 8002e16:	e005      	b.n	8002e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe ff92 	bl	8001d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea8:	ea42 0103 	orr.w	r1, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	f003 0104 	and.w	r1, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	f003 0210 	and.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_SPI_Transmit+0x22>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e12d      	b.n	800317c <HAL_SPI_Transmit+0x27e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f28:	f7ff f86e 	bl	8002008 <HAL_GetTick>
 8002f2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f42:	e116      	b.n	8003172 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_SPI_Transmit+0x52>
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f54:	e10d      	b.n	8003172 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9c:	d10f      	bne.n	8002fbe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	d007      	beq.n	8002fdc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe4:	d14f      	bne.n	8003086 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_SPI_Transmit+0xf6>
 8002fee:	8afb      	ldrh	r3, [r7, #22]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d142      	bne.n	800307a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003018:	e02f      	b.n	800307a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d112      	bne.n	800304e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800304c:	e015      	b.n	800307a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304e:	f7fe ffdb 	bl	8002008 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d803      	bhi.n	8003066 <HAL_SPI_Transmit+0x168>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d102      	bne.n	800306c <HAL_SPI_Transmit+0x16e>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003078:	e07b      	b.n	8003172 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ca      	bne.n	800301a <HAL_SPI_Transmit+0x11c>
 8003084:	e050      	b.n	8003128 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Transmit+0x196>
 800308e:	8afb      	ldrh	r3, [r7, #22]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d144      	bne.n	800311e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030ba:	e030      	b.n	800311e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d113      	bne.n	80030f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030f0:	e015      	b.n	800311e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f2:	f7fe ff89 	bl	8002008 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d803      	bhi.n	800310a <HAL_SPI_Transmit+0x20c>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d102      	bne.n	8003110 <HAL_SPI_Transmit+0x212>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800311c:	e029      	b.n	8003172 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1c9      	bne.n	80030bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fbdf 	bl	80038f0 <SPI_EndRxTxTransaction>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e003      	b.n	8003172 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800317a:	7ffb      	ldrb	r3, [r7, #31]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d002      	beq.n	80031aa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
 80031a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a8:	e0fb      	b.n	80033a2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b2:	d112      	bne.n	80031da <HAL_SPI_Receive+0x56>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10e      	bne.n	80031da <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2204      	movs	r2, #4
 80031c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f8ef 	bl	80033b4 <HAL_SPI_TransmitReceive>
 80031d6:	4603      	mov	r3, r0
 80031d8:	e0e8      	b.n	80033ac <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_SPI_Receive+0x64>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0e1      	b.n	80033ac <HAL_SPI_Receive+0x228>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f0:	f7fe ff0a 	bl	8002008 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_Receive+0x7e>
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003206:	e0cc      	b.n	80033a2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2204      	movs	r2, #4
 800320c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324e:	d10f      	bne.n	8003270 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	d007      	beq.n	800328e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d16a      	bne.n	800336c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003296:	e032      	b.n	80032fe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d115      	bne.n	80032d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f103 020c 	add.w	r2, r3, #12
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032d0:	e015      	b.n	80032fe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d2:	f7fe fe99 	bl	8002008 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d803      	bhi.n	80032ea <HAL_SPI_Receive+0x166>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_Receive+0x16c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80032fc:	e051      	b.n	80033a2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1c7      	bne.n	8003298 <HAL_SPI_Receive+0x114>
 8003308:	e035      	b.n	8003376 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d113      	bne.n	8003340 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	b292      	uxth	r2, r2
 8003324:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800333e:	e015      	b.n	800336c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003340:	f7fe fe62 	bl	8002008 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d803      	bhi.n	8003358 <HAL_SPI_Receive+0x1d4>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d102      	bne.n	800335e <HAL_SPI_Receive+0x1da>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800336a:	e01a      	b.n	80033a2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1c9      	bne.n	800330a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	6839      	ldr	r1, [r7, #0]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fa52 	bl	8003824 <SPI_EndRxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
 8003398:	e003      	b.n	80033a2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	@ 0x30
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033c2:	2301      	movs	r3, #1
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_SPI_TransmitReceive+0x26>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e198      	b.n	800370c <HAL_SPI_TransmitReceive+0x358>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e2:	f7fe fe11 	bl	8002008 <HAL_GetTick>
 80033e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003400:	2b01      	cmp	r3, #1
 8003402:	d00f      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x70>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800340a:	d107      	bne.n	800341c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_SPI_TransmitReceive+0x68>
 8003414:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003418:	2b04      	cmp	r3, #4
 800341a:	d003      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800341c:	2302      	movs	r3, #2
 800341e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003422:	e16d      	b.n	8003700 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x82>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x82>
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800343c:	e160      	b.n	8003700 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2205      	movs	r2, #5
 800344e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	887a      	ldrh	r2, [r7, #2]
 800347a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d007      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ae:	d17c      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_TransmitReceive+0x10a>
 80034b8:	8b7b      	ldrh	r3, [r7, #26]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d16a      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	1c9a      	adds	r2, r3, #2
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e2:	e057      	b.n	8003594 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d11b      	bne.n	800352a <HAL_SPI_TransmitReceive+0x176>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_SPI_TransmitReceive+0x176>
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d113      	bne.n	800352a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	1c9a      	adds	r2, r3, #2
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d119      	bne.n	800356c <HAL_SPI_TransmitReceive+0x1b8>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d014      	beq.n	800356c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	b292      	uxth	r2, r2
 800354e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003568:	2301      	movs	r3, #1
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800356c:	f7fe fd4c 	bl	8002008 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003578:	429a      	cmp	r2, r3
 800357a:	d80b      	bhi.n	8003594 <HAL_SPI_TransmitReceive+0x1e0>
 800357c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d007      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003592:	e0b5      	b.n	8003700 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1a2      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x130>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d19d      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x130>
 80035a8:	e080      	b.n	80036ac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x204>
 80035b2:	8b7b      	ldrh	r3, [r7, #26]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d16f      	bne.n	8003698 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035de:	e05b      	b.n	8003698 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d11c      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x274>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x274>
 80035f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d114      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d119      	bne.n	800366a <HAL_SPI_TransmitReceive+0x2b6>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d014      	beq.n	800366a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003666:	2301      	movs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800366a:	f7fe fccd 	bl	8002008 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003676:	429a      	cmp	r2, r3
 8003678:	d803      	bhi.n	8003682 <HAL_SPI_TransmitReceive+0x2ce>
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d102      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x2d4>
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003696:	e033      	b.n	8003700 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d19e      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x22c>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d199      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f91d 	bl	80038f0 <SPI_EndRxTxTransaction>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80036c8:	e01a      	b.n	8003700 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e003      	b.n	8003700 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003708:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800370c:	4618      	mov	r0, r3
 800370e:	3730      	adds	r7, #48	@ 0x30
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003724:	f7fe fc70 	bl	8002008 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4413      	add	r3, r2
 8003732:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003734:	f7fe fc68 	bl	8002008 <HAL_GetTick>
 8003738:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800373a:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	015b      	lsls	r3, r3, #5
 8003740:	0d1b      	lsrs	r3, r3, #20
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800374a:	e054      	b.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d050      	beq.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003754:	f7fe fc58 	bl	8002008 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	429a      	cmp	r2, r3
 8003762:	d902      	bls.n	800376a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d13d      	bne.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003778:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003782:	d111      	bne.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378c:	d004      	beq.n	8003798 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003796:	d107      	bne.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b0:	d10f      	bne.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e017      	b.n	8003816 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d19b      	bne.n	800374c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	2000000c 	.word	0x2000000c

08003824 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003838:	d111      	bne.n	800385e <SPI_EndRxTransaction+0x3a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003842:	d004      	beq.n	800384e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384c:	d107      	bne.n	800385e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003866:	d12a      	bne.n	80038be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003870:	d012      	beq.n	8003898 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff ff49 	bl	8003714 <SPI_WaitFlagStateUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02d      	beq.n	80038e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e026      	b.n	80038e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	2101      	movs	r1, #1
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff ff36 	bl	8003714 <SPI_WaitFlagStateUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01a      	beq.n	80038e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e013      	b.n	80038e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2101      	movs	r1, #1
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ff23 	bl	8003714 <SPI_WaitFlagStateUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e000      	b.n	80038e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2201      	movs	r2, #1
 8003904:	2102      	movs	r1, #2
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff ff04 	bl	8003714 <SPI_WaitFlagStateUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e032      	b.n	8003988 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <SPI_EndRxTxTransaction+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1b      	ldr	r2, [pc, #108]	@ (8003994 <SPI_EndRxTxTransaction+0xa4>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	0d5b      	lsrs	r3, r3, #21
 800392e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003940:	d112      	bne.n	8003968 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	@ 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fee1 	bl	8003714 <SPI_WaitFlagStateUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d016      	beq.n	8003986 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e00f      	b.n	8003988 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3b01      	subs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d0f2      	beq.n	8003968 <SPI_EndRxTxTransaction+0x78>
 8003982:	e000      	b.n	8003986 <SPI_EndRxTxTransaction+0x96>
        break;
 8003984:	bf00      	nop
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	2000000c 	.word	0x2000000c
 8003994:	165e9f81 	.word	0x165e9f81

08003998 <sniprintf>:
 8003998:	b40c      	push	{r2, r3}
 800399a:	b530      	push	{r4, r5, lr}
 800399c:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <sniprintf+0x64>)
 800399e:	1e0c      	subs	r4, r1, #0
 80039a0:	681d      	ldr	r5, [r3, #0]
 80039a2:	b09d      	sub	sp, #116	@ 0x74
 80039a4:	da08      	bge.n	80039b8 <sniprintf+0x20>
 80039a6:	238b      	movs	r3, #139	@ 0x8b
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	f04f 30ff 	mov.w	r0, #4294967295
 80039ae:	b01d      	add	sp, #116	@ 0x74
 80039b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039b4:	b002      	add	sp, #8
 80039b6:	4770      	bx	lr
 80039b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80039bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039c0:	bf14      	ite	ne
 80039c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80039c6:	4623      	moveq	r3, r4
 80039c8:	9304      	str	r3, [sp, #16]
 80039ca:	9307      	str	r3, [sp, #28]
 80039cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039d0:	9002      	str	r0, [sp, #8]
 80039d2:	9006      	str	r0, [sp, #24]
 80039d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80039da:	ab21      	add	r3, sp, #132	@ 0x84
 80039dc:	a902      	add	r1, sp, #8
 80039de:	4628      	mov	r0, r5
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	f000 f995 	bl	8003d10 <_svfiprintf_r>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	bfbc      	itt	lt
 80039ea:	238b      	movlt	r3, #139	@ 0x8b
 80039ec:	602b      	strlt	r3, [r5, #0]
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	d0dd      	beq.n	80039ae <sniprintf+0x16>
 80039f2:	9b02      	ldr	r3, [sp, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e7d9      	b.n	80039ae <sniprintf+0x16>
 80039fa:	bf00      	nop
 80039fc:	20000018 	.word	0x20000018

08003a00 <memset>:
 8003a00:	4402      	add	r2, r0
 8003a02:	4603      	mov	r3, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	@ (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000018 	.word	0x20000018

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	@ (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2600      	movs	r6, #0
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a60 <__libc_init_array+0x44>)
 8003a30:	f000 fc66 	bl	8004300 <_init>
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2600      	movs	r6, #0
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08004388 	.word	0x08004388
 8003a58:	08004388 	.word	0x08004388
 8003a5c:	08004388 	.word	0x08004388
 8003a60:	0800438c 	.word	0x0800438c

08003a64 <__retarget_lock_acquire_recursive>:
 8003a64:	4770      	bx	lr

08003a66 <__retarget_lock_release_recursive>:
 8003a66:	4770      	bx	lr

08003a68 <_free_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d041      	beq.n	8003af4 <_free_r+0x8c>
 8003a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a74:	1f0c      	subs	r4, r1, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bfb8      	it	lt
 8003a7a:	18e4      	addlt	r4, r4, r3
 8003a7c:	f000 f8e0 	bl	8003c40 <__malloc_lock>
 8003a80:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <_free_r+0x90>)
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	b933      	cbnz	r3, 8003a94 <_free_r+0x2c>
 8003a86:	6063      	str	r3, [r4, #4]
 8003a88:	6014      	str	r4, [r2, #0]
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a90:	f000 b8dc 	b.w	8003c4c <__malloc_unlock>
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d908      	bls.n	8003aaa <_free_r+0x42>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	1821      	adds	r1, r4, r0
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	bf01      	itttt	eq
 8003aa0:	6819      	ldreq	r1, [r3, #0]
 8003aa2:	685b      	ldreq	r3, [r3, #4]
 8003aa4:	1809      	addeq	r1, r1, r0
 8003aa6:	6021      	streq	r1, [r4, #0]
 8003aa8:	e7ed      	b.n	8003a86 <_free_r+0x1e>
 8003aaa:	461a      	mov	r2, r3
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	b10b      	cbz	r3, 8003ab4 <_free_r+0x4c>
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d9fa      	bls.n	8003aaa <_free_r+0x42>
 8003ab4:	6811      	ldr	r1, [r2, #0]
 8003ab6:	1850      	adds	r0, r2, r1
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d10b      	bne.n	8003ad4 <_free_r+0x6c>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	4401      	add	r1, r0
 8003ac0:	1850      	adds	r0, r2, r1
 8003ac2:	4283      	cmp	r3, r0
 8003ac4:	6011      	str	r1, [r2, #0]
 8003ac6:	d1e0      	bne.n	8003a8a <_free_r+0x22>
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	6053      	str	r3, [r2, #4]
 8003ace:	4408      	add	r0, r1
 8003ad0:	6010      	str	r0, [r2, #0]
 8003ad2:	e7da      	b.n	8003a8a <_free_r+0x22>
 8003ad4:	d902      	bls.n	8003adc <_free_r+0x74>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	e7d6      	b.n	8003a8a <_free_r+0x22>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	1821      	adds	r1, r4, r0
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	bf04      	itt	eq
 8003ae4:	6819      	ldreq	r1, [r3, #0]
 8003ae6:	685b      	ldreq	r3, [r3, #4]
 8003ae8:	6063      	str	r3, [r4, #4]
 8003aea:	bf04      	itt	eq
 8003aec:	1809      	addeq	r1, r1, r0
 8003aee:	6021      	streq	r1, [r4, #0]
 8003af0:	6054      	str	r4, [r2, #4]
 8003af2:	e7ca      	b.n	8003a8a <_free_r+0x22>
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
 8003af6:	bf00      	nop
 8003af8:	200002b4 	.word	0x200002b4

08003afc <sbrk_aligned>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0f      	ldr	r6, [pc, #60]	@ (8003b3c <sbrk_aligned+0x40>)
 8003b00:	460c      	mov	r4, r1
 8003b02:	6831      	ldr	r1, [r6, #0]
 8003b04:	4605      	mov	r5, r0
 8003b06:	b911      	cbnz	r1, 8003b0e <sbrk_aligned+0x12>
 8003b08:	f000 fba6 	bl	8004258 <_sbrk_r>
 8003b0c:	6030      	str	r0, [r6, #0]
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 fba1 	bl	8004258 <_sbrk_r>
 8003b16:	1c43      	adds	r3, r0, #1
 8003b18:	d103      	bne.n	8003b22 <sbrk_aligned+0x26>
 8003b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b1e:	4620      	mov	r0, r4
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	1cc4      	adds	r4, r0, #3
 8003b24:	f024 0403 	bic.w	r4, r4, #3
 8003b28:	42a0      	cmp	r0, r4
 8003b2a:	d0f8      	beq.n	8003b1e <sbrk_aligned+0x22>
 8003b2c:	1a21      	subs	r1, r4, r0
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fb92 	bl	8004258 <_sbrk_r>
 8003b34:	3001      	adds	r0, #1
 8003b36:	d1f2      	bne.n	8003b1e <sbrk_aligned+0x22>
 8003b38:	e7ef      	b.n	8003b1a <sbrk_aligned+0x1e>
 8003b3a:	bf00      	nop
 8003b3c:	200002b0 	.word	0x200002b0

08003b40 <_malloc_r>:
 8003b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b44:	1ccd      	adds	r5, r1, #3
 8003b46:	f025 0503 	bic.w	r5, r5, #3
 8003b4a:	3508      	adds	r5, #8
 8003b4c:	2d0c      	cmp	r5, #12
 8003b4e:	bf38      	it	cc
 8003b50:	250c      	movcc	r5, #12
 8003b52:	2d00      	cmp	r5, #0
 8003b54:	4606      	mov	r6, r0
 8003b56:	db01      	blt.n	8003b5c <_malloc_r+0x1c>
 8003b58:	42a9      	cmp	r1, r5
 8003b5a:	d904      	bls.n	8003b66 <_malloc_r+0x26>
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	6033      	str	r3, [r6, #0]
 8003b60:	2000      	movs	r0, #0
 8003b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c3c <_malloc_r+0xfc>
 8003b6a:	f000 f869 	bl	8003c40 <__malloc_lock>
 8003b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b72:	461c      	mov	r4, r3
 8003b74:	bb44      	cbnz	r4, 8003bc8 <_malloc_r+0x88>
 8003b76:	4629      	mov	r1, r5
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f7ff ffbf 	bl	8003afc <sbrk_aligned>
 8003b7e:	1c43      	adds	r3, r0, #1
 8003b80:	4604      	mov	r4, r0
 8003b82:	d158      	bne.n	8003c36 <_malloc_r+0xf6>
 8003b84:	f8d8 4000 	ldr.w	r4, [r8]
 8003b88:	4627      	mov	r7, r4
 8003b8a:	2f00      	cmp	r7, #0
 8003b8c:	d143      	bne.n	8003c16 <_malloc_r+0xd6>
 8003b8e:	2c00      	cmp	r4, #0
 8003b90:	d04b      	beq.n	8003c2a <_malloc_r+0xea>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	4639      	mov	r1, r7
 8003b96:	4630      	mov	r0, r6
 8003b98:	eb04 0903 	add.w	r9, r4, r3
 8003b9c:	f000 fb5c 	bl	8004258 <_sbrk_r>
 8003ba0:	4581      	cmp	r9, r0
 8003ba2:	d142      	bne.n	8003c2a <_malloc_r+0xea>
 8003ba4:	6821      	ldr	r1, [r4, #0]
 8003ba6:	1a6d      	subs	r5, r5, r1
 8003ba8:	4629      	mov	r1, r5
 8003baa:	4630      	mov	r0, r6
 8003bac:	f7ff ffa6 	bl	8003afc <sbrk_aligned>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d03a      	beq.n	8003c2a <_malloc_r+0xea>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	442b      	add	r3, r5
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	f8d8 3000 	ldr.w	r3, [r8]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	bb62      	cbnz	r2, 8003c1c <_malloc_r+0xdc>
 8003bc2:	f8c8 7000 	str.w	r7, [r8]
 8003bc6:	e00f      	b.n	8003be8 <_malloc_r+0xa8>
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	1b52      	subs	r2, r2, r5
 8003bcc:	d420      	bmi.n	8003c10 <_malloc_r+0xd0>
 8003bce:	2a0b      	cmp	r2, #11
 8003bd0:	d917      	bls.n	8003c02 <_malloc_r+0xc2>
 8003bd2:	1961      	adds	r1, r4, r5
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	6059      	strne	r1, [r3, #4]
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	bf08      	it	eq
 8003be0:	f8c8 1000 	streq.w	r1, [r8]
 8003be4:	5162      	str	r2, [r4, r5]
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f82f 	bl	8003c4c <__malloc_unlock>
 8003bee:	f104 000b 	add.w	r0, r4, #11
 8003bf2:	1d23      	adds	r3, r4, #4
 8003bf4:	f020 0007 	bic.w	r0, r0, #7
 8003bf8:	1ac2      	subs	r2, r0, r3
 8003bfa:	bf1c      	itt	ne
 8003bfc:	1a1b      	subne	r3, r3, r0
 8003bfe:	50a3      	strne	r3, [r4, r2]
 8003c00:	e7af      	b.n	8003b62 <_malloc_r+0x22>
 8003c02:	6862      	ldr	r2, [r4, #4]
 8003c04:	42a3      	cmp	r3, r4
 8003c06:	bf0c      	ite	eq
 8003c08:	f8c8 2000 	streq.w	r2, [r8]
 8003c0c:	605a      	strne	r2, [r3, #4]
 8003c0e:	e7eb      	b.n	8003be8 <_malloc_r+0xa8>
 8003c10:	4623      	mov	r3, r4
 8003c12:	6864      	ldr	r4, [r4, #4]
 8003c14:	e7ae      	b.n	8003b74 <_malloc_r+0x34>
 8003c16:	463c      	mov	r4, r7
 8003c18:	687f      	ldr	r7, [r7, #4]
 8003c1a:	e7b6      	b.n	8003b8a <_malloc_r+0x4a>
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	d1fb      	bne.n	8003c1c <_malloc_r+0xdc>
 8003c24:	2300      	movs	r3, #0
 8003c26:	6053      	str	r3, [r2, #4]
 8003c28:	e7de      	b.n	8003be8 <_malloc_r+0xa8>
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	4630      	mov	r0, r6
 8003c30:	f000 f80c 	bl	8003c4c <__malloc_unlock>
 8003c34:	e794      	b.n	8003b60 <_malloc_r+0x20>
 8003c36:	6005      	str	r5, [r0, #0]
 8003c38:	e7d6      	b.n	8003be8 <_malloc_r+0xa8>
 8003c3a:	bf00      	nop
 8003c3c:	200002b4 	.word	0x200002b4

08003c40 <__malloc_lock>:
 8003c40:	4801      	ldr	r0, [pc, #4]	@ (8003c48 <__malloc_lock+0x8>)
 8003c42:	f7ff bf0f 	b.w	8003a64 <__retarget_lock_acquire_recursive>
 8003c46:	bf00      	nop
 8003c48:	200002ac 	.word	0x200002ac

08003c4c <__malloc_unlock>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	@ (8003c54 <__malloc_unlock+0x8>)
 8003c4e:	f7ff bf0a 	b.w	8003a66 <__retarget_lock_release_recursive>
 8003c52:	bf00      	nop
 8003c54:	200002ac 	.word	0x200002ac

08003c58 <__ssputs_r>:
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c5c:	688e      	ldr	r6, [r1, #8]
 8003c5e:	461f      	mov	r7, r3
 8003c60:	42be      	cmp	r6, r7
 8003c62:	680b      	ldr	r3, [r1, #0]
 8003c64:	4682      	mov	sl, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4690      	mov	r8, r2
 8003c6a:	d82d      	bhi.n	8003cc8 <__ssputs_r+0x70>
 8003c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c74:	d026      	beq.n	8003cc4 <__ssputs_r+0x6c>
 8003c76:	6965      	ldr	r5, [r4, #20]
 8003c78:	6909      	ldr	r1, [r1, #16]
 8003c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c7e:	eba3 0901 	sub.w	r9, r3, r1
 8003c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c86:	1c7b      	adds	r3, r7, #1
 8003c88:	444b      	add	r3, r9
 8003c8a:	106d      	asrs	r5, r5, #1
 8003c8c:	429d      	cmp	r5, r3
 8003c8e:	bf38      	it	cc
 8003c90:	461d      	movcc	r5, r3
 8003c92:	0553      	lsls	r3, r2, #21
 8003c94:	d527      	bpl.n	8003ce6 <__ssputs_r+0x8e>
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7ff ff52 	bl	8003b40 <_malloc_r>
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	b360      	cbz	r0, 8003cfa <__ssputs_r+0xa2>
 8003ca0:	6921      	ldr	r1, [r4, #16]
 8003ca2:	464a      	mov	r2, r9
 8003ca4:	f000 fae8 	bl	8004278 <memcpy>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb2:	81a3      	strh	r3, [r4, #12]
 8003cb4:	6126      	str	r6, [r4, #16]
 8003cb6:	6165      	str	r5, [r4, #20]
 8003cb8:	444e      	add	r6, r9
 8003cba:	eba5 0509 	sub.w	r5, r5, r9
 8003cbe:	6026      	str	r6, [r4, #0]
 8003cc0:	60a5      	str	r5, [r4, #8]
 8003cc2:	463e      	mov	r6, r7
 8003cc4:	42be      	cmp	r6, r7
 8003cc6:	d900      	bls.n	8003cca <__ssputs_r+0x72>
 8003cc8:	463e      	mov	r6, r7
 8003cca:	6820      	ldr	r0, [r4, #0]
 8003ccc:	4632      	mov	r2, r6
 8003cce:	4641      	mov	r1, r8
 8003cd0:	f000 faa8 	bl	8004224 <memmove>
 8003cd4:	68a3      	ldr	r3, [r4, #8]
 8003cd6:	1b9b      	subs	r3, r3, r6
 8003cd8:	60a3      	str	r3, [r4, #8]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	4433      	add	r3, r6
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce6:	462a      	mov	r2, r5
 8003ce8:	f000 fad4 	bl	8004294 <_realloc_r>
 8003cec:	4606      	mov	r6, r0
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d1e0      	bne.n	8003cb4 <__ssputs_r+0x5c>
 8003cf2:	6921      	ldr	r1, [r4, #16]
 8003cf4:	4650      	mov	r0, sl
 8003cf6:	f7ff feb7 	bl	8003a68 <_free_r>
 8003cfa:	230c      	movs	r3, #12
 8003cfc:	f8ca 3000 	str.w	r3, [sl]
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d06:	81a3      	strh	r3, [r4, #12]
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	e7e9      	b.n	8003ce2 <__ssputs_r+0x8a>
	...

08003d10 <_svfiprintf_r>:
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	4698      	mov	r8, r3
 8003d16:	898b      	ldrh	r3, [r1, #12]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	b09d      	sub	sp, #116	@ 0x74
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	460d      	mov	r5, r1
 8003d20:	4614      	mov	r4, r2
 8003d22:	d510      	bpl.n	8003d46 <_svfiprintf_r+0x36>
 8003d24:	690b      	ldr	r3, [r1, #16]
 8003d26:	b973      	cbnz	r3, 8003d46 <_svfiprintf_r+0x36>
 8003d28:	2140      	movs	r1, #64	@ 0x40
 8003d2a:	f7ff ff09 	bl	8003b40 <_malloc_r>
 8003d2e:	6028      	str	r0, [r5, #0]
 8003d30:	6128      	str	r0, [r5, #16]
 8003d32:	b930      	cbnz	r0, 8003d42 <_svfiprintf_r+0x32>
 8003d34:	230c      	movs	r3, #12
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	b01d      	add	sp, #116	@ 0x74
 8003d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d42:	2340      	movs	r3, #64	@ 0x40
 8003d44:	616b      	str	r3, [r5, #20]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d4a:	2320      	movs	r3, #32
 8003d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d54:	2330      	movs	r3, #48	@ 0x30
 8003d56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ef4 <_svfiprintf_r+0x1e4>
 8003d5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d5e:	f04f 0901 	mov.w	r9, #1
 8003d62:	4623      	mov	r3, r4
 8003d64:	469a      	mov	sl, r3
 8003d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d6a:	b10a      	cbz	r2, 8003d70 <_svfiprintf_r+0x60>
 8003d6c:	2a25      	cmp	r2, #37	@ 0x25
 8003d6e:	d1f9      	bne.n	8003d64 <_svfiprintf_r+0x54>
 8003d70:	ebba 0b04 	subs.w	fp, sl, r4
 8003d74:	d00b      	beq.n	8003d8e <_svfiprintf_r+0x7e>
 8003d76:	465b      	mov	r3, fp
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f7ff ff6b 	bl	8003c58 <__ssputs_r>
 8003d82:	3001      	adds	r0, #1
 8003d84:	f000 80a7 	beq.w	8003ed6 <_svfiprintf_r+0x1c6>
 8003d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d8a:	445a      	add	r2, fp
 8003d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 809f 	beq.w	8003ed6 <_svfiprintf_r+0x1c6>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003da2:	f10a 0a01 	add.w	sl, sl, #1
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	9307      	str	r3, [sp, #28]
 8003daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003db0:	4654      	mov	r4, sl
 8003db2:	2205      	movs	r2, #5
 8003db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db8:	484e      	ldr	r0, [pc, #312]	@ (8003ef4 <_svfiprintf_r+0x1e4>)
 8003dba:	f7fc fa11 	bl	80001e0 <memchr>
 8003dbe:	9a04      	ldr	r2, [sp, #16]
 8003dc0:	b9d8      	cbnz	r0, 8003dfa <_svfiprintf_r+0xea>
 8003dc2:	06d0      	lsls	r0, r2, #27
 8003dc4:	bf44      	itt	mi
 8003dc6:	2320      	movmi	r3, #32
 8003dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dcc:	0711      	lsls	r1, r2, #28
 8003dce:	bf44      	itt	mi
 8003dd0:	232b      	movmi	r3, #43	@ 0x2b
 8003dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ddc:	d015      	beq.n	8003e0a <_svfiprintf_r+0xfa>
 8003dde:	9a07      	ldr	r2, [sp, #28]
 8003de0:	4654      	mov	r4, sl
 8003de2:	2000      	movs	r0, #0
 8003de4:	f04f 0c0a 	mov.w	ip, #10
 8003de8:	4621      	mov	r1, r4
 8003dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dee:	3b30      	subs	r3, #48	@ 0x30
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	d94b      	bls.n	8003e8c <_svfiprintf_r+0x17c>
 8003df4:	b1b0      	cbz	r0, 8003e24 <_svfiprintf_r+0x114>
 8003df6:	9207      	str	r2, [sp, #28]
 8003df8:	e014      	b.n	8003e24 <_svfiprintf_r+0x114>
 8003dfa:	eba0 0308 	sub.w	r3, r0, r8
 8003dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8003e02:	4313      	orrs	r3, r2
 8003e04:	9304      	str	r3, [sp, #16]
 8003e06:	46a2      	mov	sl, r4
 8003e08:	e7d2      	b.n	8003db0 <_svfiprintf_r+0xa0>
 8003e0a:	9b03      	ldr	r3, [sp, #12]
 8003e0c:	1d19      	adds	r1, r3, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	9103      	str	r1, [sp, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bfbb      	ittet	lt
 8003e16:	425b      	neglt	r3, r3
 8003e18:	f042 0202 	orrlt.w	r2, r2, #2
 8003e1c:	9307      	strge	r3, [sp, #28]
 8003e1e:	9307      	strlt	r3, [sp, #28]
 8003e20:	bfb8      	it	lt
 8003e22:	9204      	strlt	r2, [sp, #16]
 8003e24:	7823      	ldrb	r3, [r4, #0]
 8003e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e28:	d10a      	bne.n	8003e40 <_svfiprintf_r+0x130>
 8003e2a:	7863      	ldrb	r3, [r4, #1]
 8003e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e2e:	d132      	bne.n	8003e96 <_svfiprintf_r+0x186>
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	1d1a      	adds	r2, r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	9203      	str	r2, [sp, #12]
 8003e38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e3c:	3402      	adds	r4, #2
 8003e3e:	9305      	str	r3, [sp, #20]
 8003e40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f04 <_svfiprintf_r+0x1f4>
 8003e44:	7821      	ldrb	r1, [r4, #0]
 8003e46:	2203      	movs	r2, #3
 8003e48:	4650      	mov	r0, sl
 8003e4a:	f7fc f9c9 	bl	80001e0 <memchr>
 8003e4e:	b138      	cbz	r0, 8003e60 <_svfiprintf_r+0x150>
 8003e50:	9b04      	ldr	r3, [sp, #16]
 8003e52:	eba0 000a 	sub.w	r0, r0, sl
 8003e56:	2240      	movs	r2, #64	@ 0x40
 8003e58:	4082      	lsls	r2, r0
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	3401      	adds	r4, #1
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e64:	4824      	ldr	r0, [pc, #144]	@ (8003ef8 <_svfiprintf_r+0x1e8>)
 8003e66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e6a:	2206      	movs	r2, #6
 8003e6c:	f7fc f9b8 	bl	80001e0 <memchr>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d036      	beq.n	8003ee2 <_svfiprintf_r+0x1d2>
 8003e74:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <_svfiprintf_r+0x1ec>)
 8003e76:	bb1b      	cbnz	r3, 8003ec0 <_svfiprintf_r+0x1b0>
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	3307      	adds	r3, #7
 8003e7c:	f023 0307 	bic.w	r3, r3, #7
 8003e80:	3308      	adds	r3, #8
 8003e82:	9303      	str	r3, [sp, #12]
 8003e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e86:	4433      	add	r3, r6
 8003e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e8a:	e76a      	b.n	8003d62 <_svfiprintf_r+0x52>
 8003e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e90:	460c      	mov	r4, r1
 8003e92:	2001      	movs	r0, #1
 8003e94:	e7a8      	b.n	8003de8 <_svfiprintf_r+0xd8>
 8003e96:	2300      	movs	r3, #0
 8003e98:	3401      	adds	r4, #1
 8003e9a:	9305      	str	r3, [sp, #20]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f04f 0c0a 	mov.w	ip, #10
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ea8:	3a30      	subs	r2, #48	@ 0x30
 8003eaa:	2a09      	cmp	r2, #9
 8003eac:	d903      	bls.n	8003eb6 <_svfiprintf_r+0x1a6>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0c6      	beq.n	8003e40 <_svfiprintf_r+0x130>
 8003eb2:	9105      	str	r1, [sp, #20]
 8003eb4:	e7c4      	b.n	8003e40 <_svfiprintf_r+0x130>
 8003eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eba:	4604      	mov	r4, r0
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e7f0      	b.n	8003ea2 <_svfiprintf_r+0x192>
 8003ec0:	ab03      	add	r3, sp, #12
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f00 <_svfiprintf_r+0x1f0>)
 8003ec8:	a904      	add	r1, sp, #16
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	1c42      	adds	r2, r0, #1
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	d1d6      	bne.n	8003e84 <_svfiprintf_r+0x174>
 8003ed6:	89ab      	ldrh	r3, [r5, #12]
 8003ed8:	065b      	lsls	r3, r3, #25
 8003eda:	f53f af2d 	bmi.w	8003d38 <_svfiprintf_r+0x28>
 8003ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ee0:	e72c      	b.n	8003d3c <_svfiprintf_r+0x2c>
 8003ee2:	ab03      	add	r3, sp, #12
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	462a      	mov	r2, r5
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <_svfiprintf_r+0x1f0>)
 8003eea:	a904      	add	r1, sp, #16
 8003eec:	4638      	mov	r0, r7
 8003eee:	f000 f879 	bl	8003fe4 <_printf_i>
 8003ef2:	e7ed      	b.n	8003ed0 <_svfiprintf_r+0x1c0>
 8003ef4:	0800434c 	.word	0x0800434c
 8003ef8:	08004356 	.word	0x08004356
 8003efc:	00000000 	.word	0x00000000
 8003f00:	08003c59 	.word	0x08003c59
 8003f04:	08004352 	.word	0x08004352

08003f08 <_printf_common>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	4698      	mov	r8, r3
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bfb8      	it	lt
 8003f1c:	4613      	movlt	r3, r2
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f24:	4607      	mov	r7, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	b10a      	cbz	r2, 8003f2e <_printf_common+0x26>
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	0699      	lsls	r1, r3, #26
 8003f32:	bf42      	ittt	mi
 8003f34:	6833      	ldrmi	r3, [r6, #0]
 8003f36:	3302      	addmi	r3, #2
 8003f38:	6033      	strmi	r3, [r6, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	f015 0506 	ands.w	r5, r5, #6
 8003f40:	d106      	bne.n	8003f50 <_printf_common+0x48>
 8003f42:	f104 0a19 	add.w	sl, r4, #25
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	42ab      	cmp	r3, r5
 8003f4e:	dc26      	bgt.n	8003f9e <_printf_common+0x96>
 8003f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f54:	6822      	ldr	r2, [r4, #0]
 8003f56:	3b00      	subs	r3, #0
 8003f58:	bf18      	it	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	0692      	lsls	r2, r2, #26
 8003f5e:	d42b      	bmi.n	8003fb8 <_printf_common+0xb0>
 8003f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f64:	4641      	mov	r1, r8
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c8      	blx	r9
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d01e      	beq.n	8003fac <_printf_common+0xa4>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	6922      	ldr	r2, [r4, #16]
 8003f72:	f003 0306 	and.w	r3, r3, #6
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf02      	ittt	eq
 8003f7a:	68e5      	ldreq	r5, [r4, #12]
 8003f7c:	6833      	ldreq	r3, [r6, #0]
 8003f7e:	1aed      	subeq	r5, r5, r3
 8003f80:	68a3      	ldr	r3, [r4, #8]
 8003f82:	bf0c      	ite	eq
 8003f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f88:	2500      	movne	r5, #0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bfc4      	itt	gt
 8003f8e:	1a9b      	subgt	r3, r3, r2
 8003f90:	18ed      	addgt	r5, r5, r3
 8003f92:	2600      	movs	r6, #0
 8003f94:	341a      	adds	r4, #26
 8003f96:	42b5      	cmp	r5, r6
 8003f98:	d11a      	bne.n	8003fd0 <_printf_common+0xc8>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e008      	b.n	8003fb0 <_printf_common+0xa8>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	47c8      	blx	r9
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d103      	bne.n	8003fb4 <_printf_common+0xac>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7c6      	b.n	8003f46 <_printf_common+0x3e>
 8003fb8:	18e1      	adds	r1, r4, r3
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	2030      	movs	r0, #48	@ 0x30
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fc2:	4422      	add	r2, r4
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fcc:	3302      	adds	r3, #2
 8003fce:	e7c7      	b.n	8003f60 <_printf_common+0x58>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	47c8      	blx	r9
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0e6      	beq.n	8003fac <_printf_common+0xa4>
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7d9      	b.n	8003f96 <_printf_common+0x8e>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	7e0f      	ldrb	r7, [r1, #24]
 8003fea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fec:	2f78      	cmp	r7, #120	@ 0x78
 8003fee:	4691      	mov	r9, r2
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	469a      	mov	sl, r3
 8003ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	@ 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d2 	beq.w	80041aa <_printf_i+0x1c6>
 8004006:	2f58      	cmp	r7, #88	@ 0x58
 8004008:	f000 80b9 	beq.w	800417e <_printf_i+0x19a>
 800400c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a101      	add	r1, pc, #4	@ (adr r1, 8004024 <_printf_i+0x40>)
 8004020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	08004191 	.word	0x08004191
 8004054:	080040bb 	.word	0x080040bb
 8004058:	0800414b 	.word	0x0800414b
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041b3 	.word	0x080041b3
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040bb 	.word	0x080040bb
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004153 	.word	0x08004153
 800407c:	6833      	ldr	r3, [r6, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6032      	str	r2, [r6, #0]
 8004084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e09d      	b.n	80041cc <_printf_i+0x1e8>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	1d19      	adds	r1, r3, #4
 8004096:	6031      	str	r1, [r6, #0]
 8004098:	0606      	lsls	r6, r0, #24
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0xbc>
 800409c:	681d      	ldr	r5, [r3, #0]
 800409e:	e003      	b.n	80040a8 <_printf_i+0xc4>
 80040a0:	0645      	lsls	r5, r0, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0xb8>
 80040a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	da03      	bge.n	80040b4 <_printf_i+0xd0>
 80040ac:	232d      	movs	r3, #45	@ 0x2d
 80040ae:	426d      	negs	r5, r5
 80040b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b4:	4859      	ldr	r0, [pc, #356]	@ (800421c <_printf_i+0x238>)
 80040b6:	230a      	movs	r3, #10
 80040b8:	e011      	b.n	80040de <_printf_i+0xfa>
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	6833      	ldr	r3, [r6, #0]
 80040be:	0608      	lsls	r0, r1, #24
 80040c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80040c4:	d402      	bmi.n	80040cc <_printf_i+0xe8>
 80040c6:	0649      	lsls	r1, r1, #25
 80040c8:	bf48      	it	mi
 80040ca:	b2ad      	uxthmi	r5, r5
 80040cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80040ce:	4853      	ldr	r0, [pc, #332]	@ (800421c <_printf_i+0x238>)
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	bf14      	ite	ne
 80040d4:	230a      	movne	r3, #10
 80040d6:	2308      	moveq	r3, #8
 80040d8:	2100      	movs	r1, #0
 80040da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040de:	6866      	ldr	r6, [r4, #4]
 80040e0:	60a6      	str	r6, [r4, #8]
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	bfa2      	ittt	ge
 80040e6:	6821      	ldrge	r1, [r4, #0]
 80040e8:	f021 0104 	bicge.w	r1, r1, #4
 80040ec:	6021      	strge	r1, [r4, #0]
 80040ee:	b90d      	cbnz	r5, 80040f4 <_printf_i+0x110>
 80040f0:	2e00      	cmp	r6, #0
 80040f2:	d04b      	beq.n	800418c <_printf_i+0x1a8>
 80040f4:	4616      	mov	r6, r2
 80040f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80040fa:	fb03 5711 	mls	r7, r3, r1, r5
 80040fe:	5dc7      	ldrb	r7, [r0, r7]
 8004100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004104:	462f      	mov	r7, r5
 8004106:	42bb      	cmp	r3, r7
 8004108:	460d      	mov	r5, r1
 800410a:	d9f4      	bls.n	80040f6 <_printf_i+0x112>
 800410c:	2b08      	cmp	r3, #8
 800410e:	d10b      	bne.n	8004128 <_printf_i+0x144>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	07df      	lsls	r7, r3, #31
 8004114:	d508      	bpl.n	8004128 <_printf_i+0x144>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	6861      	ldr	r1, [r4, #4]
 800411a:	4299      	cmp	r1, r3
 800411c:	bfde      	ittt	le
 800411e:	2330      	movle	r3, #48	@ 0x30
 8004120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004128:	1b92      	subs	r2, r2, r6
 800412a:	6122      	str	r2, [r4, #16]
 800412c:	f8cd a000 	str.w	sl, [sp]
 8004130:	464b      	mov	r3, r9
 8004132:	aa03      	add	r2, sp, #12
 8004134:	4621      	mov	r1, r4
 8004136:	4640      	mov	r0, r8
 8004138:	f7ff fee6 	bl	8003f08 <_printf_common>
 800413c:	3001      	adds	r0, #1
 800413e:	d14a      	bne.n	80041d6 <_printf_i+0x1f2>
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	b004      	add	sp, #16
 8004146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	f043 0320 	orr.w	r3, r3, #32
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	4833      	ldr	r0, [pc, #204]	@ (8004220 <_printf_i+0x23c>)
 8004154:	2778      	movs	r7, #120	@ 0x78
 8004156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	6831      	ldr	r1, [r6, #0]
 800415e:	061f      	lsls	r7, r3, #24
 8004160:	f851 5b04 	ldr.w	r5, [r1], #4
 8004164:	d402      	bmi.n	800416c <_printf_i+0x188>
 8004166:	065f      	lsls	r7, r3, #25
 8004168:	bf48      	it	mi
 800416a:	b2ad      	uxthmi	r5, r5
 800416c:	6031      	str	r1, [r6, #0]
 800416e:	07d9      	lsls	r1, r3, #31
 8004170:	bf44      	itt	mi
 8004172:	f043 0320 	orrmi.w	r3, r3, #32
 8004176:	6023      	strmi	r3, [r4, #0]
 8004178:	b11d      	cbz	r5, 8004182 <_printf_i+0x19e>
 800417a:	2310      	movs	r3, #16
 800417c:	e7ac      	b.n	80040d8 <_printf_i+0xf4>
 800417e:	4827      	ldr	r0, [pc, #156]	@ (800421c <_printf_i+0x238>)
 8004180:	e7e9      	b.n	8004156 <_printf_i+0x172>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f023 0320 	bic.w	r3, r3, #32
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	e7f6      	b.n	800417a <_printf_i+0x196>
 800418c:	4616      	mov	r6, r2
 800418e:	e7bd      	b.n	800410c <_printf_i+0x128>
 8004190:	6833      	ldr	r3, [r6, #0]
 8004192:	6825      	ldr	r5, [r4, #0]
 8004194:	6961      	ldr	r1, [r4, #20]
 8004196:	1d18      	adds	r0, r3, #4
 8004198:	6030      	str	r0, [r6, #0]
 800419a:	062e      	lsls	r6, r5, #24
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	d501      	bpl.n	80041a4 <_printf_i+0x1c0>
 80041a0:	6019      	str	r1, [r3, #0]
 80041a2:	e002      	b.n	80041aa <_printf_i+0x1c6>
 80041a4:	0668      	lsls	r0, r5, #25
 80041a6:	d5fb      	bpl.n	80041a0 <_printf_i+0x1bc>
 80041a8:	8019      	strh	r1, [r3, #0]
 80041aa:	2300      	movs	r3, #0
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	4616      	mov	r6, r2
 80041b0:	e7bc      	b.n	800412c <_printf_i+0x148>
 80041b2:	6833      	ldr	r3, [r6, #0]
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	6032      	str	r2, [r6, #0]
 80041b8:	681e      	ldr	r6, [r3, #0]
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	2100      	movs	r1, #0
 80041be:	4630      	mov	r0, r6
 80041c0:	f7fc f80e 	bl	80001e0 <memchr>
 80041c4:	b108      	cbz	r0, 80041ca <_printf_i+0x1e6>
 80041c6:	1b80      	subs	r0, r0, r6
 80041c8:	6060      	str	r0, [r4, #4]
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	6123      	str	r3, [r4, #16]
 80041ce:	2300      	movs	r3, #0
 80041d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041d4:	e7aa      	b.n	800412c <_printf_i+0x148>
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	4632      	mov	r2, r6
 80041da:	4649      	mov	r1, r9
 80041dc:	4640      	mov	r0, r8
 80041de:	47d0      	blx	sl
 80041e0:	3001      	adds	r0, #1
 80041e2:	d0ad      	beq.n	8004140 <_printf_i+0x15c>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	079b      	lsls	r3, r3, #30
 80041e8:	d413      	bmi.n	8004212 <_printf_i+0x22e>
 80041ea:	68e0      	ldr	r0, [r4, #12]
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	4298      	cmp	r0, r3
 80041f0:	bfb8      	it	lt
 80041f2:	4618      	movlt	r0, r3
 80041f4:	e7a6      	b.n	8004144 <_printf_i+0x160>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4632      	mov	r2, r6
 80041fa:	4649      	mov	r1, r9
 80041fc:	4640      	mov	r0, r8
 80041fe:	47d0      	blx	sl
 8004200:	3001      	adds	r0, #1
 8004202:	d09d      	beq.n	8004140 <_printf_i+0x15c>
 8004204:	3501      	adds	r5, #1
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	9903      	ldr	r1, [sp, #12]
 800420a:	1a5b      	subs	r3, r3, r1
 800420c:	42ab      	cmp	r3, r5
 800420e:	dcf2      	bgt.n	80041f6 <_printf_i+0x212>
 8004210:	e7eb      	b.n	80041ea <_printf_i+0x206>
 8004212:	2500      	movs	r5, #0
 8004214:	f104 0619 	add.w	r6, r4, #25
 8004218:	e7f5      	b.n	8004206 <_printf_i+0x222>
 800421a:	bf00      	nop
 800421c:	0800435d 	.word	0x0800435d
 8004220:	0800436e 	.word	0x0800436e

08004224 <memmove>:
 8004224:	4288      	cmp	r0, r1
 8004226:	b510      	push	{r4, lr}
 8004228:	eb01 0402 	add.w	r4, r1, r2
 800422c:	d902      	bls.n	8004234 <memmove+0x10>
 800422e:	4284      	cmp	r4, r0
 8004230:	4623      	mov	r3, r4
 8004232:	d807      	bhi.n	8004244 <memmove+0x20>
 8004234:	1e43      	subs	r3, r0, #1
 8004236:	42a1      	cmp	r1, r4
 8004238:	d008      	beq.n	800424c <memmove+0x28>
 800423a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800423e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004242:	e7f8      	b.n	8004236 <memmove+0x12>
 8004244:	4402      	add	r2, r0
 8004246:	4601      	mov	r1, r0
 8004248:	428a      	cmp	r2, r1
 800424a:	d100      	bne.n	800424e <memmove+0x2a>
 800424c:	bd10      	pop	{r4, pc}
 800424e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004256:	e7f7      	b.n	8004248 <memmove+0x24>

08004258 <_sbrk_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d06      	ldr	r5, [pc, #24]	@ (8004274 <_sbrk_r+0x1c>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fd fdf8 	bl	8001e58 <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_sbrk_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_sbrk_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	200002a8 	.word	0x200002a8

08004278 <memcpy>:
 8004278:	440a      	add	r2, r1
 800427a:	4291      	cmp	r1, r2
 800427c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004280:	d100      	bne.n	8004284 <memcpy+0xc>
 8004282:	4770      	bx	lr
 8004284:	b510      	push	{r4, lr}
 8004286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800428a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800428e:	4291      	cmp	r1, r2
 8004290:	d1f9      	bne.n	8004286 <memcpy+0xe>
 8004292:	bd10      	pop	{r4, pc}

08004294 <_realloc_r>:
 8004294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	4680      	mov	r8, r0
 800429a:	4615      	mov	r5, r2
 800429c:	460c      	mov	r4, r1
 800429e:	b921      	cbnz	r1, 80042aa <_realloc_r+0x16>
 80042a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042a4:	4611      	mov	r1, r2
 80042a6:	f7ff bc4b 	b.w	8003b40 <_malloc_r>
 80042aa:	b92a      	cbnz	r2, 80042b8 <_realloc_r+0x24>
 80042ac:	f7ff fbdc 	bl	8003a68 <_free_r>
 80042b0:	2400      	movs	r4, #0
 80042b2:	4620      	mov	r0, r4
 80042b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b8:	f000 f81a 	bl	80042f0 <_malloc_usable_size_r>
 80042bc:	4285      	cmp	r5, r0
 80042be:	4606      	mov	r6, r0
 80042c0:	d802      	bhi.n	80042c8 <_realloc_r+0x34>
 80042c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042c6:	d8f4      	bhi.n	80042b2 <_realloc_r+0x1e>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7ff fc38 	bl	8003b40 <_malloc_r>
 80042d0:	4607      	mov	r7, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d0ec      	beq.n	80042b0 <_realloc_r+0x1c>
 80042d6:	42b5      	cmp	r5, r6
 80042d8:	462a      	mov	r2, r5
 80042da:	4621      	mov	r1, r4
 80042dc:	bf28      	it	cs
 80042de:	4632      	movcs	r2, r6
 80042e0:	f7ff ffca 	bl	8004278 <memcpy>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4640      	mov	r0, r8
 80042e8:	f7ff fbbe 	bl	8003a68 <_free_r>
 80042ec:	463c      	mov	r4, r7
 80042ee:	e7e0      	b.n	80042b2 <_realloc_r+0x1e>

080042f0 <_malloc_usable_size_r>:
 80042f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f4:	1f18      	subs	r0, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfbc      	itt	lt
 80042fa:	580b      	ldrlt	r3, [r1, r0]
 80042fc:	18c0      	addlt	r0, r0, r3
 80042fe:	4770      	bx	lr

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
