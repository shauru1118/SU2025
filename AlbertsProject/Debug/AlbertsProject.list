
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a304  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800a4a8  0800a4a8  0000b4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a738  0800a738  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a738  0800a738  0000b738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a740  0800a740  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a740  0800a740  0000b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a744  0800a744  0000b744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a748  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000080  0800a7c8  0000c080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800a7c8  0000c808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f22b  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a72  00000000  00000000  0001b2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0001dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  0001eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041ac  00000000  00000000  0001f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001396c  00000000  00000000  00023740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4b1  00000000  00000000  000370ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c455d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  000c45a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c8700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a48c 	.word	0x0800a48c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800a48c 	.word	0x0800a48c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <LSM_Init>:
uint16_t _lsm_nssPin;

uint8_t _lsmReadReg(uint8_t reg);
void _lsmWriteReg(uint8_t reg, uint8_t data);

uint8_t LSM_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	4613      	mov	r3, r2
 8000f44:	80fb      	strh	r3, [r7, #6]
	_lsm_hspi1 = hspi;
 8000f46:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <LSM_Init+0x5c>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6013      	str	r3, [r2, #0]
	_lsm_nssPort = port;
 8000f4c:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <LSM_Init+0x60>)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	6013      	str	r3, [r2, #0]
	_lsm_nssPin = pin;
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <LSM_Init+0x64>)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	8013      	strh	r3, [r2, #0]

	uint8_t whoAmI =_lsmReadReg(LSM_REG_WHO_AM_I);
 8000f58:	200f      	movs	r0, #15
 8000f5a:	f000 f87f 	bl	800105c <_lsmReadReg>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]

	if (whoAmI != LSM_SET_WHO_AM_I_VAL) {
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f66:	d001      	beq.n	8000f6c <LSM_Init+0x34>
		return 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e00e      	b.n	8000f8a <LSM_Init+0x52>
	}

	uint8_t xlmode = LSM_SET_CTRL1_XL_26_Hz;
 8000f6c:	2324      	movs	r3, #36	@ 0x24
 8000f6e:	75bb      	strb	r3, [r7, #22]
	uint8_t gmode = LSM_SET_CTRL2_G_26_Hz;
 8000f70:	232c      	movs	r3, #44	@ 0x2c
 8000f72:	757b      	strb	r3, [r7, #21]
	_lsmWriteReg(LSM_REG_CTRL1_XL, xlmode);
 8000f74:	7dbb      	ldrb	r3, [r7, #22]
 8000f76:	4619      	mov	r1, r3
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f000 f8a9 	bl	80010d0 <_lsmWriteReg>
	_lsmWriteReg(LSM_REG_CTRL2_G, gmode);
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2011      	movs	r0, #17
 8000f84:	f000 f8a4 	bl	80010d0 <_lsmWriteReg>

	return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	200000a0 	.word	0x200000a0
 8000f9c:	200000a4 	.word	0x200000a4

08000fa0 <LSM_ReadData>:

void LSM_ReadData(int16_t endBufer[]) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];

	uint8_t dataReg = LSM_REG_OUTX_L_G;
 8000fa8:	2322      	movs	r3, #34	@ 0x22
 8000faa:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i < 12; i++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	e012      	b.n	8000fd8 <LSM_ReadData+0x38>
		buffer[i] = _lsmReadReg(dataReg+i);
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	7efb      	ldrb	r3, [r7, #27]
 8000fb8:	4413      	add	r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f84d 	bl	800105c <_lsmReadReg>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4413      	add	r3, r2
 8000fce:	460a      	mov	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 12; i++) {
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	2b0b      	cmp	r3, #11
 8000fdc:	dde9      	ble.n	8000fb2 <LSM_ReadData+0x12>
	}

	endBufer[0] = (((uint16_t)buffer[1]) << 8) + buffer[0];
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	7b3a      	ldrb	r2, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	801a      	strh	r2, [r3, #0]
	endBufer[1] = (((uint16_t)buffer[3]) << 8) + buffer[2];
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	7bba      	ldrb	r2, [r7, #14]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3302      	adds	r3, #2
 8001000:	b212      	sxth	r2, r2
 8001002:	801a      	strh	r2, [r3, #0]
	endBufer[2] = (((uint16_t)buffer[5]) << 8) + buffer[4];
 8001004:	7c7b      	ldrb	r3, [r7, #17]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	7c3a      	ldrb	r2, [r7, #16]
 800100c:	4413      	add	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	b212      	sxth	r2, r2
 8001016:	801a      	strh	r2, [r3, #0]
	endBufer[3] = (((uint16_t)buffer[7]) << 8) + buffer[6];
 8001018:	7cfb      	ldrb	r3, [r7, #19]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
 800101e:	7cba      	ldrb	r2, [r7, #18]
 8001020:	4413      	add	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3306      	adds	r3, #6
 8001028:	b212      	sxth	r2, r2
 800102a:	801a      	strh	r2, [r3, #0]
	endBufer[4] = (((uint16_t)buffer[9]) << 8) + buffer[8];
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	7d3a      	ldrb	r2, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3308      	adds	r3, #8
 800103c:	b212      	sxth	r2, r2
 800103e:	801a      	strh	r2, [r3, #0]
	endBufer[5] = (((uint16_t)buffer[11]) << 8) + buffer[10];
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b29b      	uxth	r3, r3
 8001046:	7dba      	ldrb	r2, [r7, #22]
 8001048:	4413      	add	r3, r2
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	330a      	adds	r3, #10
 8001050:	b212      	sxth	r2, r2
 8001052:	801a      	strh	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_lsmReadReg>:

uint8_t _lsmReadReg(uint8_t reg) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	reg = reg | (1 << 7);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800106c:	b2db      	uxtb	r3, r3
 800106e:	71fb      	strb	r3, [r7, #7]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <_lsmReadReg+0x68>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <_lsmReadReg+0x6c>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	43db      	mvns	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <_lsmReadReg+0x68>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	400a      	ands	r2, r1
 8001084:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <_lsmReadReg+0x70>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	1df9      	adds	r1, r7, #7
 800108c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001090:	2201      	movs	r2, #1
 8001092:	f003 fc56 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_lsm_hspi1, &reg, 1, 1000);
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <_lsmReadReg+0x70>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	1df9      	adds	r1, r7, #7
 800109c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a0:	2201      	movs	r2, #1
 80010a2:	f003 fd92 	bl	8004bca <HAL_SPI_Receive>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <_lsmReadReg+0x68>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <_lsmReadReg+0x6c>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <_lsmReadReg+0x68>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	615a      	str	r2, [r3, #20]
	return reg;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200000a0 	.word	0x200000a0
 80010c8:	200000a4 	.word	0x200000a4
 80010cc:	2000009c 	.word	0x2000009c

080010d0 <_lsmWriteReg>:

void _lsmWriteReg(uint8_t reg, uint8_t data) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <_lsmWriteReg+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <_lsmWriteReg+0x68>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_lsmWriteReg+0x64>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	400a      	ands	r2, r1
 80010f4:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_lsmWriteReg+0x6c>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	1df9      	adds	r1, r7, #7
 80010fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001100:	2201      	movs	r2, #1
 8001102:	f003 fc1e 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_lsm_hspi1, &data, 1, 1000);
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <_lsmWriteReg+0x6c>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	1db9      	adds	r1, r7, #6
 800110c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001110:	2201      	movs	r2, #1
 8001112:	f003 fc16 	bl	8004942 <HAL_SPI_Transmit>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_lsmWriteReg+0x64>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695a      	ldr	r2, [r3, #20]
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <_lsmWriteReg+0x68>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <_lsmWriteReg+0x64>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	615a      	str	r2, [r3, #20]
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000a0 	.word	0x200000a0
 8001138:	200000a4 	.word	0x200000a4
 800113c:	2000009c 	.word	0x2000009c

08001140 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001144:	f001 fc6c 	bl	8002a20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001148:	f000 f81a 	bl	8001180 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800114c:	f000 f8d8 	bl	8001300 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001150:	f000 f8a0 	bl	8001294 <MX_SPI1_Init>
	MX_SDIO_SD_Init();
 8001154:	f000 f87e 	bl	8001254 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8001158:	f004 fe6e 	bl	8005e38 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	cheakAll();
 800115c:	f000 fc1c 	bl	8001998 <cheakAll>
	initVariables();
 8001160:	f000 fcfa 	bl	8001b58 <initVariables>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		readData();
 8001164:	f000 f99c 	bl	80014a0 <readData>

		writeData();
 8001168:	f000 fa5a 	bl	8001620 <writeData>

		recieveTransmitData();
 800116c:	f000 fbda 	bl	8001924 <recieveTransmitData>

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001170:	2101      	movs	r1, #1
 8001172:	4802      	ldr	r0, [pc, #8]	@ (800117c <main+0x3c>)
 8001174:	f001 ff85 	bl	8003082 <HAL_GPIO_TogglePin>
		readData();
 8001178:	bf00      	nop
 800117a:	e7f3      	b.n	8001164 <main+0x24>
 800117c:	40020000 	.word	0x40020000

08001180 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	@ 0x50
 8001184:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	@ 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f007 fd9e 	bl	8008cd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <SystemClock_Config+0xcc>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <SystemClock_Config+0xcc>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <SystemClock_Config+0xd0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011cc:	4a20      	ldr	r2, [pc, #128]	@ (8001250 <SystemClock_Config+0xd0>)
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80011f4:	2319      	movs	r3, #25
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80011f8:	23a8      	movs	r3, #168	@ 0xa8
 80011fa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f001 ff55 	bl	80030b8 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x98>
		Error_Handler();
 8001214:	f000 fcc4 	bl	8001ba0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	2302      	movs	r3, #2
 800121e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001228:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f002 f9b7 	bl	80035a8 <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xc4>
		Error_Handler();
 8001240:	f000 fcae 	bl	8001ba0 <Error_Handler>
	}
}
 8001244:	bf00      	nop
 8001246:	3750      	adds	r7, #80	@ 0x50
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 800125a:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <MX_SDIO_SD_Init+0x3c>)
 800125c:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <MX_SDIO_SD_Init+0x38>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	200000a8 	.word	0x200000a8
 8001290:	40012c00 	.word	0x40012c00

08001294 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_SPI1_Init+0x64>)
 800129a:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <MX_SPI1_Init+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012c8:	2218      	movs	r2, #24
 80012ca:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <MX_SPI1_Init+0x64>)
 80012e6:	f003 faa3 	bl	8004830 <HAL_SPI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80012f0:	f000 fc56 	bl	8001ba0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000012c 	.word	0x2000012c
 80012fc:	40013000 	.word	0x40013000

08001300 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <MX_GPIO_Init+0x144>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a49      	ldr	r2, [pc, #292]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a42      	ldr	r2, [pc, #264]	@ (8001444 <MX_GPIO_Init+0x144>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b3c      	ldr	r3, [pc, #240]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a3b      	ldr	r2, [pc, #236]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a34      	ldr	r2, [pc, #208]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <MX_GPIO_Init+0x144>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <MX_GPIO_Init+0x144>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a2d      	ldr	r2, [pc, #180]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <MX_GPIO_Init+0x144>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin,
 80013a2:	2201      	movs	r2, #1
 80013a4:	2131      	movs	r1, #49	@ 0x31
 80013a6:	4828      	ldr	r0, [pc, #160]	@ (8001448 <MX_GPIO_Init+0x148>)
 80013a8:	f001 fe52 	bl	8003050 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED2_Pin | LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2107      	movs	r1, #7
 80013b0:	4826      	ldr	r0, [pc, #152]	@ (800144c <MX_GPIO_Init+0x14c>)
 80013b2:	f001 fe4d 	bl	8003050 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2110      	movs	r1, #16
 80013ba:	4824      	ldr	r0, [pc, #144]	@ (800144c <MX_GPIO_Init+0x14c>)
 80013bc:	f001 fe48 	bl	8003050 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80013c0:	2201      	movs	r2, #1
 80013c2:	f240 2107 	movw	r1, #519	@ 0x207
 80013c6:	4822      	ldr	r0, [pc, #136]	@ (8001450 <MX_GPIO_Init+0x150>)
 80013c8:	f001 fe42 	bl	8003050 <HAL_GPIO_WritePin>
	MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin, GPIO_PIN_SET);

	/*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin;
 80013cc:	2331      	movs	r3, #49	@ 0x31
 80013ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4819      	ldr	r0, [pc, #100]	@ (8001448 <MX_GPIO_Init+0x148>)
 80013e4:	f001 fc98 	bl	8002d18 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED3_Pin | LED4_Pin | WQ_HOLD_Pin;
 80013e8:	2317      	movs	r3, #23
 80013ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4813      	ldr	r0, [pc, #76]	@ (800144c <MX_GPIO_Init+0x14c>)
 8001400:	f001 fc8a 	bl	8002d18 <HAL_GPIO_Init>

	/*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
	GPIO_InitStruct.Pin = MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin;
 8001404:	f240 2307 	movw	r3, #519	@ 0x207
 8001408:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_GPIO_Init+0x150>)
 800141e:	f001 fc7b 	bl	8002d18 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin | JMP_PROG_Pin;
 8001422:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001426:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_GPIO_Init+0x150>)
 8001438:	f001 fc6e 	bl	8002d18 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40020800 	.word	0x40020800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400

08001454 <writeSD>:

/* USER CODE BEGIN 4 */

void writeSD(char *str) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	f_open(&Fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 800145c:	2212      	movs	r2, #18
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <writeSD+0x40>)
 8001460:	480d      	ldr	r0, [pc, #52]	@ (8001498 <writeSD+0x44>)
 8001462:	f006 fc7f 	bl	8007d64 <f_open>

	f_lseek(&Fil, f_size(&Fil));
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <writeSD+0x44>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4619      	mov	r1, r3
 800146c:	480a      	ldr	r0, [pc, #40]	@ (8001498 <writeSD+0x44>)
 800146e:	f007 f850 	bl	8008512 <f_lseek>
	HAL_Delay(5);
 8001472:	2005      	movs	r0, #5
 8001474:	f001 fb46 	bl	8002b04 <HAL_Delay>
	f_puts(str, &Fil);
 8001478:	4907      	ldr	r1, [pc, #28]	@ (8001498 <writeSD+0x44>)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f007 fb74 	bl	8008b68 <f_puts>
	HAL_Delay(15);
 8001480:	200f      	movs	r0, #15
 8001482:	f001 fb3f 	bl	8002b04 <HAL_Delay>
	f_close(&Fil);
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <writeSD+0x44>)
 8001488:	f007 f819 	bl	80084be <f_close>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	0800a620 	.word	0x0800a620
 8001498:	20000408 	.word	0x20000408
 800149c:	00000000 	.word	0x00000000

080014a0 <readData>:

void readData() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 80014a4:	4856      	ldr	r0, [pc, #344]	@ (8001600 <readData+0x160>)
 80014a6:	f000 fe03 	bl	80020b0 <MS_ReadData>
	LSM_ReadData(LSM_Data);
 80014aa:	4856      	ldr	r0, [pc, #344]	@ (8001604 <readData+0x164>)
 80014ac:	f7ff fd78 	bl	8000fa0 <LSM_ReadData>

	beforAlt = SensorsData.alt;
 80014b0:	4b55      	ldr	r3, [pc, #340]	@ (8001608 <readData+0x168>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a55      	ldr	r2, [pc, #340]	@ (800160c <readData+0x16c>)
 80014b6:	6013      	str	r3, [r2, #0]

	SensorsData.time = HAL_GetTick();
 80014b8:	f001 fb18 	bl	8002aec <HAL_GetTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a52      	ldr	r2, [pc, #328]	@ (8001608 <readData+0x168>)
 80014c0:	6013      	str	r3, [r2, #0]
	SensorsData.press = MS_Data[0];
 80014c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001600 <readData+0x160>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001608 <readData+0x168>)
 80014ca:	609a      	str	r2, [r3, #8]
	SensorsData.alt = (int32_t) 4433000
			* (1.0f - pow((float) SensorsData.press / seaLvlPress, 0.1903)); //(int32_t) ((SensorsData.press - seaLvlPress) / 133.32239023154 * 10.5 * 100);
 80014cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <readData+0x168>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001610 <readData+0x170>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e8:	ee16 0a90 	vmov	r0, s13
 80014ec:	f7ff f82c 	bl	8000548 <__aeabi_f2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 80015f0 <readData+0x150>
 80014f8:	ec43 2b10 	vmov	d0, r2, r3
 80014fc:	f008 f868 	bl	80095d0 <pow>
 8001500:	ec53 2b10 	vmov	r2, r3, d0
 8001504:	f04f 0000 	mov.w	r0, #0
 8001508:	4942      	ldr	r1, [pc, #264]	@ (8001614 <readData+0x174>)
 800150a:	f7fe febd 	bl	8000288 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	a338      	add	r3, pc, #224	@ (adr r3, 80015f8 <readData+0x158>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f86c 	bl	80005f8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
	SensorsData.alt = (int32_t) 4433000
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb16 	bl	8000b58 <__aeabi_d2iz>
 800152c:	4603      	mov	r3, r0
 800152e:	4a36      	ldr	r2, [pc, #216]	@ (8001608 <readData+0x168>)
 8001530:	6053      	str	r3, [r2, #4]
	SensorsData.temp = MS_Data[1];
 8001532:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <readData+0x160>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	461a      	mov	r2, r3
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <readData+0x168>)
 800153a:	60da      	str	r2, [r3, #12]
	SensorsData.accel1 = LSM_Data[3];
 800153c:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <readData+0x164>)
 800153e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001542:	461a      	mov	r2, r3
 8001544:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <readData+0x168>)
 8001546:	611a      	str	r2, [r3, #16]
	SensorsData.accel2 = LSM_Data[4];
 8001548:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <readData+0x164>)
 800154a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800154e:	461a      	mov	r2, r3
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <readData+0x168>)
 8001552:	615a      	str	r2, [r3, #20]
	SensorsData.accel3 = LSM_Data[5];
 8001554:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <readData+0x164>)
 8001556:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800155a:	461a      	mov	r2, r3
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <readData+0x168>)
 800155e:	619a      	str	r2, [r3, #24]
	SensorsData.gyro1 = LSM_Data[0];
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <readData+0x164>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	461a      	mov	r2, r3
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <readData+0x168>)
 800156a:	61da      	str	r2, [r3, #28]
	SensorsData.gyro2 = LSM_Data[1];
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <readData+0x164>)
 800156e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001572:	461a      	mov	r2, r3
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <readData+0x168>)
 8001576:	621a      	str	r2, [r3, #32]
	SensorsData.gyro3 = LSM_Data[2];
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <readData+0x164>)
 800157a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800157e:	461a      	mov	r2, r3
 8001580:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <readData+0x168>)
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24

	if (SensorsData.alt > toStart) {
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <readData+0x168>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <readData+0x178>)
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	4293      	cmp	r3, r2
 800158e:	dd06      	ble.n	800159e <readData+0xfe>
		SensorsData.flagStart = true;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <readData+0x168>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mode = FLY;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <readData+0x17c>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
	}
	if (SensorsData.alt == beforAlt && SensorsData.flagStart) {
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <readData+0x168>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <readData+0x16c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d108      	bne.n	80015bc <readData+0x11c>
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <readData+0x168>)
 80015ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <readData+0x11c>
		SensorsData.flagApag = true;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <readData+0x168>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}

	if ((SensorsData.alt < 200 || SensorsData.alt == beforAlt)
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <readData+0x168>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80015c2:	dd05      	ble.n	80015d0 <readData+0x130>
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <readData+0x168>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <readData+0x16c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d10b      	bne.n	80015e8 <readData+0x148>
			&& SensorsData.flagApag) {
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <readData+0x168>)
 80015d2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <readData+0x148>
		SensorsData.flagLand = true;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <readData+0x168>)
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		mode = LAND;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <readData+0x17c>)
 80015e4:	2202      	movs	r2, #2
 80015e6:	701a      	strb	r2, [r3, #0]
	}
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	1a36e2eb 	.word	0x1a36e2eb
 80015f4:	3fc85bc0 	.word	0x3fc85bc0
 80015f8:	00000000 	.word	0x00000000
 80015fc:	4150e91a 	.word	0x4150e91a
 8001600:	20000184 	.word	0x20000184
 8001604:	2000018c 	.word	0x2000018c
 8001608:	200001a8 	.word	0x200001a8
 800160c:	2000019c 	.word	0x2000019c
 8001610:	20000198 	.word	0x20000198
 8001614:	3ff00000 	.word	0x3ff00000
 8001618:	20000004 	.word	0x20000004
 800161c:	200001d4 	.word	0x200001d4

08001620 <writeData>:

void writeData() {
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001624:	b0ad      	sub	sp, #180	@ 0xb4
 8001626:	af0e      	add	r7, sp, #56	@ 0x38

	if (HAL_GetTick() - timeToWrite >= 100) {
 8001628:	f001 fa60 	bl	8002aec <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	4bb3      	ldr	r3, [pc, #716]	@ (80018fc <writeData+0x2dc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b63      	cmp	r3, #99	@ 0x63
 8001636:	d973      	bls.n	8001720 <writeData+0x100>
 8001638:	466b      	mov	r3, sp
 800163a:	607b      	str	r3, [r7, #4]

		char buffer[sizeOfBufferToLora];
 800163c:	4bb0      	ldr	r3, [pc, #704]	@ (8001900 <writeData+0x2e0>)
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	1e4b      	subs	r3, r1, #1
 8001642:	677b      	str	r3, [r7, #116]	@ 0x74
 8001644:	460a      	mov	r2, r1
 8001646:	2300      	movs	r3, #0
 8001648:	4614      	mov	r4, r2
 800164a:	461d      	mov	r5, r3
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	00eb      	lsls	r3, r5, #3
 8001656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165a:	00e2      	lsls	r2, r4, #3
 800165c:	460a      	mov	r2, r1
 800165e:	2300      	movs	r3, #0
 8001660:	4690      	mov	r8, r2
 8001662:	4699      	mov	r9, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001678:	460b      	mov	r3, r1
 800167a:	3307      	adds	r3, #7
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	ebad 0d03 	sub.w	sp, sp, r3
 8001684:	ab0e      	add	r3, sp, #56	@ 0x38
 8001686:	3300      	adds	r3, #0
 8001688:	673b      	str	r3, [r7, #112]	@ 0x70

		snprintf(buffer, sizeOfBufferToLora,
 800168a:	4b9d      	ldr	r3, [pc, #628]	@ (8001900 <writeData+0x2e0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	469c      	mov	ip, r3
 8001690:	4b9c      	ldr	r3, [pc, #624]	@ (8001904 <writeData+0x2e4>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	61fa      	str	r2, [r7, #28]
 8001696:	4b9b      	ldr	r3, [pc, #620]	@ (8001904 <writeData+0x2e4>)
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	61b9      	str	r1, [r7, #24]
 800169c:	4b99      	ldr	r3, [pc, #612]	@ (8001904 <writeData+0x2e4>)
 800169e:	6898      	ldr	r0, [r3, #8]
 80016a0:	6178      	str	r0, [r7, #20]
 80016a2:	4b98      	ldr	r3, [pc, #608]	@ (8001904 <writeData+0x2e4>)
 80016a4:	68dc      	ldr	r4, [r3, #12]
 80016a6:	613c      	str	r4, [r7, #16]
 80016a8:	4b96      	ldr	r3, [pc, #600]	@ (8001904 <writeData+0x2e4>)
 80016aa:	691d      	ldr	r5, [r3, #16]
 80016ac:	60fd      	str	r5, [r7, #12]
 80016ae:	4b95      	ldr	r3, [pc, #596]	@ (8001904 <writeData+0x2e4>)
 80016b0:	695e      	ldr	r6, [r3, #20]
 80016b2:	60be      	str	r6, [r7, #8]
 80016b4:	4b93      	ldr	r3, [pc, #588]	@ (8001904 <writeData+0x2e4>)
 80016b6:	699e      	ldr	r6, [r3, #24]
 80016b8:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <writeData+0x2e4>)
 80016ba:	69dd      	ldr	r5, [r3, #28]
 80016bc:	4b91      	ldr	r3, [pc, #580]	@ (8001904 <writeData+0x2e4>)
 80016be:	6a18      	ldr	r0, [r3, #32]
 80016c0:	4b90      	ldr	r3, [pc, #576]	@ (8001904 <writeData+0x2e4>)
 80016c2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
				"%s;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%ld;%d;%d;%d;\n", "SU",
				SensorsData.time, SensorsData.alt, SensorsData.press,
				SensorsData.temp, SensorsData.accel1, SensorsData.accel2,
				SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
				SensorsData.gyro3, SensorsData.flagStart, SensorsData.flagApag,
 80016c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001904 <writeData+0x2e4>)
 80016c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
		snprintf(buffer, sizeOfBufferToLora,
 80016ca:	461c      	mov	r4, r3
				SensorsData.gyro3, SensorsData.flagStart, SensorsData.flagApag,
 80016cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001904 <writeData+0x2e4>)
 80016ce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
		snprintf(buffer, sizeOfBufferToLora,
 80016d2:	461a      	mov	r2, r3
				SensorsData.flagLand);
 80016d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001904 <writeData+0x2e4>)
 80016d6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
		snprintf(buffer, sizeOfBufferToLora,
 80016da:	930c      	str	r3, [sp, #48]	@ 0x30
 80016dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80016de:	940a      	str	r4, [sp, #40]	@ 0x28
 80016e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80016e2:	9008      	str	r0, [sp, #32]
 80016e4:	9507      	str	r5, [sp, #28]
 80016e6:	9606      	str	r6, [sp, #24]
 80016e8:	68be      	ldr	r6, [r7, #8]
 80016ea:	9605      	str	r6, [sp, #20]
 80016ec:	68fd      	ldr	r5, [r7, #12]
 80016ee:	9504      	str	r5, [sp, #16]
 80016f0:	693c      	ldr	r4, [r7, #16]
 80016f2:	9403      	str	r4, [sp, #12]
 80016f4:	6978      	ldr	r0, [r7, #20]
 80016f6:	9002      	str	r0, [sp, #8]
 80016f8:	69b9      	ldr	r1, [r7, #24]
 80016fa:	9101      	str	r1, [sp, #4]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	4b81      	ldr	r3, [pc, #516]	@ (8001908 <writeData+0x2e8>)
 8001702:	4a82      	ldr	r2, [pc, #520]	@ (800190c <writeData+0x2ec>)
 8001704:	4661      	mov	r1, ip
 8001706:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001708:	f007 faae 	bl	8008c68 <sniprintf>

		writeSD(buffer);
 800170c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800170e:	f7ff fea1 	bl	8001454 <writeSD>

		timeToWrite = HAL_GetTick();
 8001712:	f001 f9eb 	bl	8002aec <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	4b78      	ldr	r3, [pc, #480]	@ (80018fc <writeData+0x2dc>)
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f8d7 d004 	ldr.w	sp, [r7, #4]
	}

	if (HAL_GetTick() - timeToSend >= 1000) {
 8001720:	f001 f9e4 	bl	8002aec <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	4b7a      	ldr	r3, [pc, #488]	@ (8001910 <writeData+0x2f0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001730:	f0c0 80df 	bcc.w	80018f2 <writeData+0x2d2>
 8001734:	466b      	mov	r3, sp
 8001736:	461d      	mov	r5, r3

		int cutPacketSize = sizeOfBufferToLora / 3;
 8001738:	4b71      	ldr	r3, [pc, #452]	@ (8001900 <writeData+0x2e0>)
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	4b75      	ldr	r3, [pc, #468]	@ (8001914 <writeData+0x2f4>)
 800173e:	fb83 3201 	smull	r3, r2, r3, r1
 8001742:	17cb      	asrs	r3, r1, #31
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	66fb      	str	r3, [r7, #108]	@ 0x6c

		char bufferToLoRa1[cutPacketSize];
 8001748:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800174a:	1e4b      	subs	r3, r1, #1
 800174c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800174e:	460a      	mov	r2, r1
 8001750:	2300      	movs	r3, #0
 8001752:	4692      	mov	sl, r2
 8001754:	469b      	mov	fp, r3
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800176a:	460a      	mov	r2, r1
 800176c:	2300      	movs	r3, #0
 800176e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001770:	647b      	str	r3, [r7, #68]	@ 0x44
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800177e:	4648      	mov	r0, r9
 8001780:	00c3      	lsls	r3, r0, #3
 8001782:	4640      	mov	r0, r8
 8001784:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001788:	4640      	mov	r0, r8
 800178a:	00c2      	lsls	r2, r0, #3
 800178c:	460b      	mov	r3, r1
 800178e:	3307      	adds	r3, #7
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	ebad 0d03 	sub.w	sp, sp, r3
 8001798:	ab0e      	add	r3, sp, #56	@ 0x38
 800179a:	3300      	adds	r3, #0
 800179c:	667b      	str	r3, [r7, #100]	@ 0x64
		char bufferToLoRa2[cutPacketSize];
 800179e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017a0:	1e4b      	subs	r3, r1, #1
 80017a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a4:	460a      	mov	r2, r1
 80017a6:	2300      	movs	r3, #0
 80017a8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80017b8:	4648      	mov	r0, r9
 80017ba:	00c3      	lsls	r3, r0, #3
 80017bc:	4640      	mov	r0, r8
 80017be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017c2:	4640      	mov	r0, r8
 80017c4:	00c2      	lsls	r2, r0, #3
 80017c6:	460a      	mov	r2, r1
 80017c8:	2300      	movs	r3, #0
 80017ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80017da:	4648      	mov	r0, r9
 80017dc:	00c3      	lsls	r3, r0, #3
 80017de:	4640      	mov	r0, r8
 80017e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017e4:	4640      	mov	r0, r8
 80017e6:	00c2      	lsls	r2, r0, #3
 80017e8:	460b      	mov	r3, r1
 80017ea:	3307      	adds	r3, #7
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	ebad 0d03 	sub.w	sp, sp, r3
 80017f4:	ab0e      	add	r3, sp, #56	@ 0x38
 80017f6:	3300      	adds	r3, #0
 80017f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		char bufferToLoRa3[cutPacketSize];
 80017fa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017fc:	1e4b      	subs	r3, r1, #1
 80017fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001800:	460a      	mov	r2, r1
 8001802:	2300      	movs	r3, #0
 8001804:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001814:	4648      	mov	r0, r9
 8001816:	00c3      	lsls	r3, r0, #3
 8001818:	4640      	mov	r0, r8
 800181a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800181e:	4640      	mov	r0, r8
 8001820:	00c2      	lsls	r2, r0, #3
 8001822:	460a      	mov	r2, r1
 8001824:	2300      	movs	r3, #0
 8001826:	623a      	str	r2, [r7, #32]
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001836:	4648      	mov	r0, r9
 8001838:	00c3      	lsls	r3, r0, #3
 800183a:	4640      	mov	r0, r8
 800183c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001840:	4640      	mov	r0, r8
 8001842:	00c2      	lsls	r2, r0, #3
 8001844:	460b      	mov	r3, r1
 8001846:	3307      	adds	r3, #7
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	ebad 0d03 	sub.w	sp, sp, r3
 8001850:	ab0e      	add	r3, sp, #56	@ 0x38
 8001852:	3300      	adds	r3, #0
 8001854:	657b      	str	r3, [r7, #84]	@ 0x54

		int sizeOfSnprintf1 = snprintf(bufferToLoRa1, cutPacketSize,
 8001856:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <writeData+0x2e4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	@ (8001904 <writeData+0x2e4>)
 800185e:	6852      	ldr	r2, [r2, #4]
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <writeData+0x2e8>)
 8001866:	4a2c      	ldr	r2, [pc, #176]	@ (8001918 <writeData+0x2f8>)
 8001868:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800186a:	f007 f9fd 	bl	8008c68 <sniprintf>
 800186e:	6538      	str	r0, [r7, #80]	@ 0x50
				"%s;%ld;%ld;", "SU", SensorsData.time, SensorsData.alt);
		int sizeOfSnprintf2 = snprintf(bufferToLoRa2, cutPacketSize,
 8001870:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <writeData+0x2e4>)
 8001874:	689c      	ldr	r4, [r3, #8]
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <writeData+0x2e4>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <writeData+0x2e4>)
 800187c:	6912      	ldr	r2, [r2, #16]
 800187e:	4921      	ldr	r1, [pc, #132]	@ (8001904 <writeData+0x2e4>)
 8001880:	6949      	ldr	r1, [r1, #20]
 8001882:	9102      	str	r1, [sp, #8]
 8001884:	9201      	str	r2, [sp, #4]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4623      	mov	r3, r4
 800188a:	4a24      	ldr	r2, [pc, #144]	@ (800191c <writeData+0x2fc>)
 800188c:	4601      	mov	r1, r0
 800188e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001890:	f007 f9ea 	bl	8008c68 <sniprintf>
 8001894:	64f8      	str	r0, [r7, #76]	@ 0x4c
				"%ld;%ld;%ld;%ld;", SensorsData.press, SensorsData.temp,
				SensorsData.accel1, SensorsData.accel2);
		int sizeOfSnprintf3 = snprintf(bufferToLoRa3, cutPacketSize,
 8001896:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <writeData+0x2e4>)
 800189a:	699b      	ldr	r3, [r3, #24]
				"%ld;%d;%d;%d;", SensorsData.accel3, SensorsData.flagStart,
 800189c:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <writeData+0x2e4>)
 800189e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
		int sizeOfSnprintf3 = snprintf(bufferToLoRa3, cutPacketSize,
 80018a2:	4610      	mov	r0, r2
				SensorsData.flagApag, SensorsData.flagLand);
 80018a4:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <writeData+0x2e4>)
 80018a6:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
		int sizeOfSnprintf3 = snprintf(bufferToLoRa3, cutPacketSize,
 80018aa:	4614      	mov	r4, r2
				SensorsData.flagApag, SensorsData.flagLand);
 80018ac:	4a15      	ldr	r2, [pc, #84]	@ (8001904 <writeData+0x2e4>)
 80018ae:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
		int sizeOfSnprintf3 = snprintf(bufferToLoRa3, cutPacketSize,
 80018b2:	9202      	str	r2, [sp, #8]
 80018b4:	9401      	str	r4, [sp, #4]
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <writeData+0x300>)
 80018ba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80018bc:	f007 f9d4 	bl	8008c68 <sniprintf>
 80018c0:	64b8      	str	r0, [r7, #72]	@ 0x48

		LORA_TransmitData(bufferToLoRa1, sizeOfSnprintf1);
 80018c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80018ca:	f000 fb0b 	bl	8001ee4 <LORA_TransmitData>
		LORA_TransmitData(bufferToLoRa2, sizeOfSnprintf2);
 80018ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80018d6:	f000 fb05 	bl	8001ee4 <LORA_TransmitData>
		LORA_TransmitData(bufferToLoRa3, sizeOfSnprintf3);
 80018da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80018e2:	f000 faff 	bl	8001ee4 <LORA_TransmitData>
//				SensorsData.temp, SensorsData.accel1, SensorsData.accel2,
//				SensorsData.accel3, SensorsData.flagStart, SensorsData.flagApag,
//				SensorsData.flagLand);
		//
//		LORA_TransmitData(buffer, sizeOfSnprintf);
		timeToSend = HAL_GetTick();
 80018e6:	f001 f901 	bl	8002aec <HAL_GetTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <writeData+0x2f0>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	46ad      	mov	sp, r5
	}

}
 80018f2:	bf00      	nop
 80018f4:	377c      	adds	r7, #124	@ 0x7c
 80018f6:	46bd      	mov	sp, r7
 80018f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018fc:	200001a4 	.word	0x200001a4
 8001900:	20000000 	.word	0x20000000
 8001904:	200001a8 	.word	0x200001a8
 8001908:	0800a4a8 	.word	0x0800a4a8
 800190c:	0800a4ac 	.word	0x0800a4ac
 8001910:	200001a0 	.word	0x200001a0
 8001914:	55555556 	.word	0x55555556
 8001918:	0800a4e4 	.word	0x0800a4e4
 800191c:	0800a4f0 	.word	0x0800a4f0
 8001920:	0800a504 	.word	0x0800a504

08001924 <recieveTransmitData>:

void recieveTransmitData() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
	uint8_t recieveData[10];
	uint32_t size = LORA_ReceiveData(recieveData);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fa24 	bl	8001d7c <LORA_ReceiveData>
 8001934:	4603      	mov	r3, r0
 8001936:	61bb      	str	r3, [r7, #24]
	if (size) {
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d023      	beq.n	8001986 <recieveTransmitData+0x62>
		char transmitData[10];
		for (int i = 0; i < 10; i++) {
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e00c      	b.n	800195e <recieveTransmitData+0x3a>
			transmitData[i] = (char) recieveData[i];
 8001944:	f107 020c 	add.w	r2, r7, #12
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	7819      	ldrb	r1, [r3, #0]
 800194e:	463a      	mov	r2, r7
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	460a      	mov	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++) {
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3301      	adds	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	2b09      	cmp	r3, #9
 8001962:	ddef      	ble.n	8001944 <recieveTransmitData+0x20>
		}
		LORA_ChangeFreq(roverFreq);
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <recieveTransmitData+0x6c>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fb51 	bl	8002010 <LORA_ChangeFreq>
		LORA_TransmitData(transmitData, 10);
 800196e:	463b      	mov	r3, r7
 8001970:	210a      	movs	r1, #10
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fab6 	bl	8001ee4 <LORA_TransmitData>
		LORA_ChangeFreq(433);
 8001978:	f240 10b1 	movw	r0, #433	@ 0x1b1
 800197c:	f000 fb48 	bl	8002010 <LORA_ChangeFreq>
		writeSD("transmit to rover\n");
 8001980:	4804      	ldr	r0, [pc, #16]	@ (8001994 <recieveTransmitData+0x70>)
 8001982:	f7ff fd67 	bl	8001454 <writeSD>
	}

}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000006 	.word	0x20000006
 8001994:	0800a514 	.word	0x0800a514

08001998 <cheakAll>:

void cheakAll() {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	LED2_GPIO_Port->ODR |= LED2_Pin;
 800199c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b1c <cheakAll+0x184>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	4a5e      	ldr	r2, [pc, #376]	@ (8001b1c <cheakAll+0x184>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 80019a8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b1c <cheakAll+0x184>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4a5b      	ldr	r2, [pc, #364]	@ (8001b1c <cheakAll+0x184>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 80019b4:	4b59      	ldr	r3, [pc, #356]	@ (8001b1c <cheakAll+0x184>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	4a58      	ldr	r2, [pc, #352]	@ (8001b1c <cheakAll+0x184>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6153      	str	r3, [r2, #20]

	HAL_Delay(500);
 80019c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c4:	f001 f89e 	bl	8002b04 <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 80019c8:	4b54      	ldr	r3, [pc, #336]	@ (8001b1c <cheakAll+0x184>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	4a53      	ldr	r2, [pc, #332]	@ (8001b1c <cheakAll+0x184>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 80019d4:	4b51      	ldr	r3, [pc, #324]	@ (8001b1c <cheakAll+0x184>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a50      	ldr	r2, [pc, #320]	@ (8001b1c <cheakAll+0x184>)
 80019da:	f023 0302 	bic.w	r3, r3, #2
 80019de:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 80019e0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <cheakAll+0x184>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4a4d      	ldr	r2, [pc, #308]	@ (8001b1c <cheakAll+0x184>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	6153      	str	r3, [r2, #20]

	FR_Status = f_mount(&FatFs, SDPath, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	494c      	ldr	r1, [pc, #304]	@ (8001b20 <cheakAll+0x188>)
 80019f0:	484c      	ldr	r0, [pc, #304]	@ (8001b24 <cheakAll+0x18c>)
 80019f2:	f006 f971 	bl	8007cd8 <f_mount>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001b28 <cheakAll+0x190>)
 80019fc:	701a      	strb	r2, [r3, #0]

	if (FR_Status != FR_OK) {
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <cheakAll+0x190>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d02b      	beq.n	8001a5e <cheakAll+0xc6>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a06:	2102      	movs	r1, #2
 8001a08:	4844      	ldr	r0, [pc, #272]	@ (8001b1c <cheakAll+0x184>)
 8001a0a:	f001 fb3a 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001a0e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a12:	f001 f877 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a16:	2102      	movs	r1, #2
 8001a18:	4840      	ldr	r0, [pc, #256]	@ (8001b1c <cheakAll+0x184>)
 8001a1a:	f001 fb32 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001a1e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a22:	f001 f86f 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a26:	2102      	movs	r1, #2
 8001a28:	483c      	ldr	r0, [pc, #240]	@ (8001b1c <cheakAll+0x184>)
 8001a2a:	f001 fb2a 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001a2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a32:	f001 f867 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a36:	2102      	movs	r1, #2
 8001a38:	4838      	ldr	r0, [pc, #224]	@ (8001b1c <cheakAll+0x184>)
 8001a3a:	f001 fb22 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001a3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a42:	f001 f85f 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a46:	2102      	movs	r1, #2
 8001a48:	4834      	ldr	r0, [pc, #208]	@ (8001b1c <cheakAll+0x184>)
 8001a4a:	f001 fb1a 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001a4e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a52:	f001 f857 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a56:	2102      	movs	r1, #2
 8001a58:	4830      	ldr	r0, [pc, #192]	@ (8001b1c <cheakAll+0x184>)
 8001a5a:	f001 fb12 	bl	8003082 <HAL_GPIO_TogglePin>

	}

	f_unlink(filename);
 8001a5e:	4833      	ldr	r0, [pc, #204]	@ (8001b2c <cheakAll+0x194>)
 8001a60:	f006 ff60 	bl	8008924 <f_unlink>

	f_open(&Fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001a64:	220a      	movs	r2, #10
 8001a66:	4931      	ldr	r1, [pc, #196]	@ (8001b2c <cheakAll+0x194>)
 8001a68:	4831      	ldr	r0, [pc, #196]	@ (8001b30 <cheakAll+0x198>)
 8001a6a:	f006 f97b 	bl	8007d64 <f_open>
	f_puts("Start SETUP\n", &Fil);
 8001a6e:	4930      	ldr	r1, [pc, #192]	@ (8001b30 <cheakAll+0x198>)
 8001a70:	4830      	ldr	r0, [pc, #192]	@ (8001b34 <cheakAll+0x19c>)
 8001a72:	f007 f879 	bl	8008b68 <f_puts>
	f_close(&Fil);
 8001a76:	482e      	ldr	r0, [pc, #184]	@ (8001b30 <cheakAll+0x198>)
 8001a78:	f006 fd21 	bl	80084be <f_close>

	writeSD("SD GOOD\n");
 8001a7c:	482e      	ldr	r0, [pc, #184]	@ (8001b38 <cheakAll+0x1a0>)
 8001a7e:	f7ff fce9 	bl	8001454 <writeSD>

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin)) {
 8001a82:	2220      	movs	r2, #32
 8001a84:	492d      	ldr	r1, [pc, #180]	@ (8001b3c <cheakAll+0x1a4>)
 8001a86:	482e      	ldr	r0, [pc, #184]	@ (8001b40 <cheakAll+0x1a8>)
 8001a88:	f000 f890 	bl	8001bac <LORA_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <cheakAll+0x114>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a92:	2102      	movs	r1, #2
 8001a94:	4821      	ldr	r0, [pc, #132]	@ (8001b1c <cheakAll+0x184>)
 8001a96:	f001 faf4 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a9e:	f001 f831 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	481d      	ldr	r0, [pc, #116]	@ (8001b1c <cheakAll+0x184>)
 8001aa6:	f001 faec 	bl	8003082 <HAL_GPIO_TogglePin>
 8001aaa:	e002      	b.n	8001ab2 <cheakAll+0x11a>
	} else {
		writeSD("LoRa GOOD\n");
 8001aac:	4825      	ldr	r0, [pc, #148]	@ (8001b44 <cheakAll+0x1ac>)
 8001aae:	f7ff fcd1 	bl	8001454 <writeSD>
	}

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4924      	ldr	r1, [pc, #144]	@ (8001b48 <cheakAll+0x1b0>)
 8001ab6:	4822      	ldr	r0, [pc, #136]	@ (8001b40 <cheakAll+0x1a8>)
 8001ab8:	f000 fad4 	bl	8002064 <MS_Init>

	if (LSM_Init(&hspi1, LSM_NSS_GPIO_Port, LSM_NSS_Pin)) {
 8001abc:	2204      	movs	r2, #4
 8001abe:	4922      	ldr	r1, [pc, #136]	@ (8001b48 <cheakAll+0x1b0>)
 8001ac0:	481f      	ldr	r0, [pc, #124]	@ (8001b40 <cheakAll+0x1a8>)
 8001ac2:	f7ff fa39 	bl	8000f38 <LSM_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01c      	beq.n	8001b06 <cheakAll+0x16e>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001acc:	2102      	movs	r1, #2
 8001ace:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <cheakAll+0x184>)
 8001ad0:	f001 fad7 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001ad4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ad8:	f001 f814 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001adc:	2102      	movs	r1, #2
 8001ade:	480f      	ldr	r0, [pc, #60]	@ (8001b1c <cheakAll+0x184>)
 8001ae0:	f001 facf 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001ae4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ae8:	f001 f80c 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001aec:	2102      	movs	r1, #2
 8001aee:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <cheakAll+0x184>)
 8001af0:	f001 fac7 	bl	8003082 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001af4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001af8:	f001 f804 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001afc:	2102      	movs	r1, #2
 8001afe:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <cheakAll+0x184>)
 8001b00:	f001 fabf 	bl	8003082 <HAL_GPIO_TogglePin>
 8001b04:	e002      	b.n	8001b0c <cheakAll+0x174>
	} else {
		writeSD("LSM GOOD\n");
 8001b06:	4811      	ldr	r0, [pc, #68]	@ (8001b4c <cheakAll+0x1b4>)
 8001b08:	f7ff fca4 	bl	8001454 <writeSD>
	}

	writeSD("Start LOOP\n");
 8001b0c:	4810      	ldr	r0, [pc, #64]	@ (8001b50 <cheakAll+0x1b8>)
 8001b0e:	f7ff fca1 	bl	8001454 <writeSD>

	writeSD(
 8001b12:	4810      	ldr	r0, [pc, #64]	@ (8001b54 <cheakAll+0x1bc>)
 8001b14:	f7ff fc9e 	bl	8001454 <writeSD>
			"name;time;height;pressure;temperature;accel_x;accel_y;accel_z;gyro_x;gyro_y;gyro_z;flag_start;flag_apag;flag_land;\n");

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	20000688 	.word	0x20000688
 8001b24:	200001d8 	.word	0x200001d8
 8001b28:	20000638 	.word	0x20000638
 8001b2c:	0800a620 	.word	0x0800a620
 8001b30:	20000408 	.word	0x20000408
 8001b34:	0800a528 	.word	0x0800a528
 8001b38:	0800a538 	.word	0x0800a538
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	2000012c 	.word	0x2000012c
 8001b44:	0800a544 	.word	0x0800a544
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	0800a550 	.word	0x0800a550
 8001b50:	0800a55c 	.word	0x0800a55c
 8001b54:	0800a568 	.word	0x0800a568

08001b58 <initVariables>:

void initVariables() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <initVariables+0x38>)
 8001b5e:	f000 faa7 	bl	80020b0 <MS_ReadData>
	seaLvlPress = MS_Data[0];
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <initVariables+0x38>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <initVariables+0x3c>)
 8001b6a:	601a      	str	r2, [r3, #0]
	SensorsData.flagStart = false;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <initVariables+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	SensorsData.flagApag = false;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <initVariables+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	SensorsData.flagLand = false;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <initVariables+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	mode = START;
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <initVariables+0x44>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000184 	.word	0x20000184
 8001b94:	20000198 	.word	0x20000198
 8001b98:	200001a8 	.word	0x200001a8
 8001b9c:	200001d4 	.word	0x200001d4

08001ba0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 8001bba:	4a33      	ldr	r2, [pc, #204]	@ (8001c88 <LORA_Init+0xdc>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 8001bc0:	4a32      	ldr	r2, [pc, #200]	@ (8001c8c <LORA_Init+0xe0>)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 8001bc6:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <LORA_Init+0xe4>)
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 8001bcc:	2042      	movs	r0, #66	@ 0x42
 8001bce:	f000 f863 	bl	8001c98 <_loraReadReg>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b12      	cmp	r3, #18
 8001bd6:	d001      	beq.n	8001bdc <LORA_Init+0x30>
		return 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e051      	b.n	8001c80 <LORA_Init+0xd4>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 f890 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 8001be4:	2188      	movs	r1, #136	@ 0x88
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 f88c 	bl	8001d04 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (curFreq << 19) / 32;
 8001bec:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <LORA_Init+0xe8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	04db      	lsls	r3, r3, #19
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f000 f880 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2007      	movs	r0, #7
 8001c0e:	f000 f879 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f000 f873 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8001c1e:	21ff      	movs	r1, #255	@ 0xff
 8001c20:	2009      	movs	r0, #9
 8001c22:	f000 f86f 	bl	8001d04 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8001c26:	210b      	movs	r1, #11
 8001c28:	200b      	movs	r0, #11
 8001c2a:	f000 f86b 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8001c2e:	2120      	movs	r1, #32
 8001c30:	200c      	movs	r0, #12
 8001c32:	f000 f867 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8001c36:	21ff      	movs	r1, #255	@ 0xff
 8001c38:	200e      	movs	r0, #14
 8001c3a:	f000 f863 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	200f      	movs	r0, #15
 8001c42:	f000 f85f 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8001c46:	2182      	movs	r1, #130	@ 0x82
 8001c48:	201d      	movs	r0, #29
 8001c4a:	f000 f85b 	bl	8001d04 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8001c4e:	2170      	movs	r1, #112	@ 0x70
 8001c50:	201e      	movs	r0, #30
 8001c52:	f000 f857 	bl	8001d04 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2020      	movs	r0, #32
 8001c5a:	f000 f853 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8001c5e:	2106      	movs	r1, #6
 8001c60:	2021      	movs	r0, #33	@ 0x21
 8001c62:	f000 f84f 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8001c66:	213c      	movs	r1, #60	@ 0x3c
 8001c68:	2022      	movs	r0, #34	@ 0x22
 8001c6a:	f000 f84b 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8001c6e:	213c      	movs	r1, #60	@ 0x3c
 8001c70:	2023      	movs	r0, #35	@ 0x23
 8001c72:	f000 f847 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8001c76:	2105      	movs	r1, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 f843 	bl	8001d04 <_loraWriteReg>

	return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000063c 	.word	0x2000063c
 8001c8c:	20000640 	.word	0x20000640
 8001c90:	20000644 	.word	0x20000644
 8001c94:	20000008 	.word	0x20000008

08001c98 <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <_loraReadReg+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <_loraReadReg+0x64>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <_loraReadReg+0x60>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <_loraReadReg+0x68>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	1df9      	adds	r1, r7, #7
 8001cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f002 fe3d 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <_loraReadReg+0x68>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	1df9      	adds	r1, r7, #7
 8001cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f002 ff79 	bl	8004bca <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <_loraReadReg+0x60>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <_loraReadReg+0x64>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <_loraReadReg+0x60>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	615a      	str	r2, [r3, #20]
	return reg;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000640 	.word	0x20000640
 8001cfc:	20000644 	.word	0x20000644
 8001d00:	2000063c 	.word	0x2000063c

08001d04 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	71fb      	strb	r3, [r7, #7]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <_loraWriteReg+0x6c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <_loraWriteReg+0x70>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <_loraWriteReg+0x6c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_loraWriteReg+0x74>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	1df9      	adds	r1, r7, #7
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f002 fdff 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <_loraWriteReg+0x74>)
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	1db9      	adds	r1, r7, #6
 8001d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f002 fdf7 	bl	8004942 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <_loraWriteReg+0x6c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <_loraWriteReg+0x70>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <_loraWriteReg+0x6c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	615a      	str	r2, [r3, #20]
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000640 	.word	0x20000640
 8001d74:	20000644 	.word	0x20000644
 8001d78:	2000063c 	.word	0x2000063c

08001d7c <LORA_ReceiveData>:

uint8_t LORA_ReceiveData(uint8_t *data) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

	if (_loraReadReg(LORA_REG_FLAGS) & (LORA_FLAGS_RX_DONE)) {
 8001d84:	2012      	movs	r0, #18
 8001d86:	f7ff ff87 	bl	8001c98 <_loraReadReg>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 809c 	beq.w	8001ece <LORA_ReceiveData+0x152>
		_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_RX_DONE);
 8001d96:	2140      	movs	r1, #64	@ 0x40
 8001d98:	2012      	movs	r0, #18
 8001d9a:	f7ff ffb3 	bl	8001d04 <_loraWriteReg>

		uint8_t packetSize = _loraReadReg(LORA_REG_RX_NB_BYTES);
 8001d9e:	2013      	movs	r0, #19
 8001da0:	f7ff ff7a 	bl	8001c98 <_loraReadReg>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
		uint8_t curAddr = _loraReadReg(LORA_REG_FIFO_RX_CUR);
 8001da8:	2010      	movs	r0, #16
 8001daa:	f7ff ff75 	bl	8001c98 <_loraReadReg>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73bb      	strb	r3, [r7, #14]
		uint8_t regFifo = LORA_REG_FIFO;
 8001db2:	2300      	movs	r3, #0
 8001db4:	733b      	strb	r3, [r7, #12]

		_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, curAddr);
 8001db6:	7bbb      	ldrb	r3, [r7, #14]
 8001db8:	4619      	mov	r1, r3
 8001dba:	200d      	movs	r0, #13
 8001dbc:	f7ff ffa2 	bl	8001d04 <_loraWriteReg>

		uint8_t spaceLeft = 255 - curAddr;
 8001dc0:	7bbb      	ldrb	r3, [r7, #14]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	737b      	strb	r3, [r7, #13]
		if (spaceLeft >= packetSize) {
 8001dc6:	7b7a      	ldrb	r2, [r7, #13]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d327      	bcc.n	8001e1e <LORA_ReceiveData+0xa2>
			_nssPort->ODR &= ~_nssPin; // nss 0
 8001dce:	4b42      	ldr	r3, [pc, #264]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <LORA_ReceiveData+0x160>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001de4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <LORA_ReceiveData+0x164>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f107 010c 	add.w	r1, r7, #12
 8001dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df0:	2201      	movs	r2, #1
 8001df2:	f002 fda6 	bl	8004942 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize, 1000);
 8001df6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <LORA_ReceiveData+0x164>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f002 fee1 	bl	8004bca <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8001e08:	4b33      	ldr	r3, [pc, #204]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <LORA_ReceiveData+0x160>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4b30      	ldr	r3, [pc, #192]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	e055      	b.n	8001eca <LORA_ReceiveData+0x14e>
		} else {
			_nssPort->ODR &= ~_nssPin; // nss 0
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <LORA_ReceiveData+0x160>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	400a      	ands	r2, r1
 8001e32:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <LORA_ReceiveData+0x164>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f107 010c 	add.w	r1, r7, #12
 8001e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e40:	2201      	movs	r2, #1
 8001e42:	f002 fd7e 	bl	8004942 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, spaceLeft, 1000);
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <LORA_ReceiveData+0x164>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f002 feb9 	bl	8004bca <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8001e58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <LORA_ReceiveData+0x160>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	4619      	mov	r1, r3
 8001e64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	615a      	str	r2, [r3, #20]

			_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, 0);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	200d      	movs	r0, #13
 8001e70:	f7ff ff48 	bl	8001d04 <_loraWriteReg>

			_nssPort->ODR &= ~_nssPin; // nss 0
 8001e74:	4b18      	ldr	r3, [pc, #96]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <LORA_ReceiveData+0x160>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	400a      	ands	r2, r1
 8001e88:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <LORA_ReceiveData+0x164>)
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	f107 010c 	add.w	r1, r7, #12
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	2201      	movs	r2, #1
 8001e98:	f002 fd53 	bl	8004942 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize - spaceLeft, 1000);
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <LORA_ReceiveData+0x164>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	f002 fe8a 	bl	8004bca <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <LORA_ReceiveData+0x160>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <LORA_ReceiveData+0x15c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	615a      	str	r2, [r3, #20]
		}
		return packetSize;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	e000      	b.n	8001ed0 <LORA_ReceiveData+0x154>
	}
	return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000640 	.word	0x20000640
 8001edc:	20000644 	.word	0x20000644
 8001ee0:	2000063c 	.word	0x2000063c

08001ee4 <LORA_TransmitData>:

void LORA_TransmitData(char *data, uint8_t size) {
 8001ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ee8:	b087      	sub	sp, #28
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
 8001ef2:	466b      	mov	r3, sp
 8001ef4:	461e      	mov	r6, r3
	uint8_t dataToLora[size];
 8001ef6:	78f9      	ldrb	r1, [r7, #3]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	3b01      	subs	r3, #1
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	b2cb      	uxtb	r3, r1
 8001f00:	2200      	movs	r2, #0
 8001f02:	4698      	mov	r8, r3
 8001f04:	4691      	mov	r9, r2
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f1a:	b2cb      	uxtb	r3, r1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	461c      	mov	r4, r3
 8001f20:	4615      	mov	r5, r2
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	00eb      	lsls	r3, r5, #3
 8001f2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f30:	00e2      	lsls	r2, r4, #3
 8001f32:	460b      	mov	r3, r1
 8001f34:	3307      	adds	r3, #7
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f3e:	466b      	mov	r3, sp
 8001f40:	3300      	adds	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < size; i++) {
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00b      	b.n	8001f62 <LORA_TransmitData+0x7e>
		dataToLora[i] = (uint8_t) data[i];
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	7819      	ldrb	r1, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4413      	add	r3, r2
 8001f58:	460a      	mov	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dbef      	blt.n	8001f4a <LORA_TransmitData+0x66>
	}

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8001f6a:	21ff      	movs	r1, #255	@ 0xff
 8001f6c:	200d      	movs	r0, #13
 8001f6e:	f7ff fec9 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	4619      	mov	r1, r3
 8001f76:	2022      	movs	r0, #34	@ 0x22
 8001f78:	f7ff fec4 	bl	8001d04 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	72fb      	strb	r3, [r7, #11]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <LORA_TransmitData+0x120>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <LORA_TransmitData+0x124>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <LORA_TransmitData+0x120>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001f96:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <LORA_TransmitData+0x128>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f107 010b 	add.w	r1, r7, #11
 8001f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f002 fccd 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, dataToLora, size, 1000);
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <LORA_TransmitData+0x128>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	f002 fcc4 	bl	8004942 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8001fba:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <LORA_TransmitData+0x120>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <LORA_TransmitData+0x124>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <LORA_TransmitData+0x120>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8001fce:	2103      	movs	r1, #3
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff fe97 	bl	8001d04 <_loraWriteReg>
	while (!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE))
 8001fd6:	bf00      	nop
 8001fd8:	2012      	movs	r0, #18
 8001fda:	f7ff fe5d 	bl	8001c98 <_loraReadReg>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f7      	beq.n	8001fd8 <LORA_TransmitData+0xf4>
		;
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8001fe8:	2108      	movs	r1, #8
 8001fea:	2012      	movs	r0, #18
 8001fec:	f7ff fe8a 	bl	8001d04 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff fe86 	bl	8001d04 <_loraWriteReg>
 8001ff8:	46b5      	mov	sp, r6

}
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002004:	20000640 	.word	0x20000640
 8002008:	20000644 	.word	0x20000644
 800200c:	2000063c 	.word	0x2000063c

08002010 <LORA_ChangeFreq>:

uint16_t LORA_ChangeFreq(uint32_t freq) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	curFreq = freq;
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <LORA_ChangeFreq+0x50>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
	uint32_t _lora_Frf = (curFreq << 19) / 32;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <LORA_ChangeFreq+0x50>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	04db      	lsls	r3, r3, #19
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	60fb      	str	r3, [r7, #12]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0c1b      	lsrs	r3, r3, #16
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4619      	mov	r1, r3
 8002030:	2006      	movs	r0, #6
 8002032:	f7ff fe67 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	2007      	movs	r0, #7
 8002040:	f7ff fe60 	bl	8001d04 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4619      	mov	r1, r3
 800204a:	2008      	movs	r0, #8
 800204c:	f7ff fe5a 	bl	8001d04 <_loraWriteReg>

	return curFreq;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <LORA_ChangeFreq+0x50>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008

08002064 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 8002072:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <MS_Init+0x3c>)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 8002078:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <MS_Init+0x40>)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <MS_Init+0x44>)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 8002084:	201e      	movs	r0, #30
 8002086:	f000 fa27 	bl	80024d8 <_msSendCmd>
	HAL_Delay(100);
 800208a:	2064      	movs	r0, #100	@ 0x64
 800208c:	f000 fd3a 	bl	8002b04 <HAL_Delay>

	_msReadProm(_calibrCoeff);
 8002090:	4806      	ldr	r0, [pc, #24]	@ (80020ac <MS_Init+0x48>)
 8002092:	f000 f82d 	bl	80020f0 <_msReadProm>

}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000648 	.word	0x20000648
 80020a4:	2000064c 	.word	0x2000064c
 80020a8:	20000650 	.word	0x20000650
 80020ac:	20000654 	.word	0x20000654

080020b0 <MS_ReadData>:

void MS_ReadData(uint32_t endBufer[]) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f80a 	bl	80020d6 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f8c5 	bl	8002258 <_calculate>

}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 fa7d 	bl	80025e0 <_msSendCmdGetData32>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 80020f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002238 <_msReadProm+0x148>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	2201      	movs	r2, #1
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fa15 	bl	8002530 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8002106:	4b4c      	ldr	r3, [pc, #304]	@ (8002238 <_msReadProm+0x148>)
 8002108:	789b      	ldrb	r3, [r3, #2]
 800210a:	2202      	movs	r2, #2
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fa0e 	bl	8002530 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8002114:	4b48      	ldr	r3, [pc, #288]	@ (8002238 <_msReadProm+0x148>)
 8002116:	78db      	ldrb	r3, [r3, #3]
 8002118:	2203      	movs	r2, #3
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fa07 	bl	8002530 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 8002122:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <_msReadProm+0x148>)
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	2204      	movs	r2, #4
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa00 	bl	8002530 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 8002130:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <_msReadProm+0x148>)
 8002132:	795b      	ldrb	r3, [r3, #5]
 8002134:	2205      	movs	r2, #5
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f9f9 	bl	8002530 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 800213e:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <_msReadProm+0x148>)
 8002140:	799b      	ldrb	r3, [r3, #6]
 8002142:	2206      	movs	r2, #6
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f9f2 	bl	8002530 <_msSendCmdGetData16>

	_realCalibrCoeff.Tref = _calibrCoeff[5] * 256.0;
 800214c:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <_msReadProm+0x14c>)
 800214e:	895b      	ldrh	r3, [r3, #10]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9e7 	bl	8000524 <__aeabi_i2d>
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	4b39      	ldr	r3, [pc, #228]	@ (8002240 <_msReadProm+0x150>)
 800215c:	f7fe fa4c 	bl	80005f8 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd1e 	bl	8000ba8 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4a35      	ldr	r2, [pc, #212]	@ (8002244 <_msReadProm+0x154>)
 8002170:	6013      	str	r3, [r2, #0]
	_realCalibrCoeff.TempSens = _calibrCoeff[6] / 8388608.0;
 8002172:	4b32      	ldr	r3, [pc, #200]	@ (800223c <_msReadProm+0x14c>)
 8002174:	899b      	ldrh	r3, [r3, #12]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9d4 	bl	8000524 <__aeabi_i2d>
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <_msReadProm+0x158>)
 8002182:	f7fe fb63 	bl	800084c <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fd0b 	bl	8000ba8 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <_msReadProm+0x154>)
 8002196:	6053      	str	r3, [r2, #4]
	_realCalibrCoeff.OffT1 = _calibrCoeff[2] * (65536.0);
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <_msReadProm+0x14c>)
 800219a:	889b      	ldrh	r3, [r3, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9c1 	bl	8000524 <__aeabi_i2d>
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <_msReadProm+0x15c>)
 80021a8:	f7fe fa26 	bl	80005f8 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fcf8 	bl	8000ba8 <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a22      	ldr	r2, [pc, #136]	@ (8002244 <_msReadProm+0x154>)
 80021bc:	6093      	str	r3, [r2, #8]
	_realCalibrCoeff.Tco = (_calibrCoeff[4]) / (128.0);
 80021be:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <_msReadProm+0x14c>)
 80021c0:	891b      	ldrh	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f9ae 	bl	8000524 <__aeabi_i2d>
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <_msReadProm+0x160>)
 80021ce:	f7fe fb3d 	bl	800084c <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fce5 	bl	8000ba8 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <_msReadProm+0x154>)
 80021e2:	60d3      	str	r3, [r2, #12]
	_realCalibrCoeff.SensT1 = _calibrCoeff[1] * (32768.0);
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <_msReadProm+0x14c>)
 80021e6:	885b      	ldrh	r3, [r3, #2]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f99b 	bl	8000524 <__aeabi_i2d>
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <_msReadProm+0x164>)
 80021f4:	f7fe fa00 	bl	80005f8 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fcd2 	bl	8000ba8 <__aeabi_d2f>
 8002204:	4603      	mov	r3, r0
 8002206:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <_msReadProm+0x154>)
 8002208:	6113      	str	r3, [r2, #16]
	_realCalibrCoeff.Tcs = (_calibrCoeff[3]) / (256.0);
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <_msReadProm+0x14c>)
 800220c:	88db      	ldrh	r3, [r3, #6]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f988 	bl	8000524 <__aeabi_i2d>
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <_msReadProm+0x150>)
 800221a:	f7fe fb17 	bl	800084c <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcbf 	bl	8000ba8 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <_msReadProm+0x154>)
 800222e:	6153      	str	r3, [r2, #20]
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20000654 	.word	0x20000654
 8002240:	40700000 	.word	0x40700000
 8002244:	20000664 	.word	0x20000664
 8002248:	41600000 	.word	0x41600000
 800224c:	40f00000 	.word	0x40f00000
 8002250:	40600000 	.word	0x40600000
 8002254:	40e00000 	.word	0x40e00000

08002258 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], uint32_t bufer[]) {
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b08c      	sub	sp, #48	@ 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	uint32_t D1 = dataWithPressTemp[0];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]
	uint32_t D2 = dataWithPressTemp[1];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	617b      	str	r3, [r7, #20]

	float dT = D2 - _realCalibrCoeff.Tref;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002278:	4b90      	ldr	r3, [pc, #576]	@ (80024bc <_calculate+0x264>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	edc7 7a04 	vstr	s15, [r7, #16]
	float TEMP = 2000 + dT * _realCalibrCoeff.TempSens;
 8002286:	4b8d      	ldr	r3, [pc, #564]	@ (80024bc <_calculate+0x264>)
 8002288:	ed93 7a01 	vldr	s14, [r3, #4]
 800228c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002294:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80024c0 <_calculate+0x268>
 8002298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800229c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float OFF = _realCalibrCoeff.OffT1 + _realCalibrCoeff.Tco * dT;
 80022a0:	4b86      	ldr	r3, [pc, #536]	@ (80024bc <_calculate+0x264>)
 80022a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80022a6:	4b85      	ldr	r3, [pc, #532]	@ (80024bc <_calculate+0x264>)
 80022a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80022ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	float SENS = _realCalibrCoeff.SensT1 + _realCalibrCoeff.Tcs * dT;
 80022bc:	4b7f      	ldr	r3, [pc, #508]	@ (80024bc <_calculate+0x264>)
 80022be:	ed93 7a04 	vldr	s14, [r3, #16]
 80022c2:	4b7e      	ldr	r3, [pc, #504]	@ (80024bc <_calculate+0x264>)
 80022c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80022c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (TEMP < 2000) {
 80022d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80022dc:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80024c0 <_calculate+0x268>
 80022e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	f140 80a2 	bpl.w	8002430 <_calculate+0x1d8>
		float T2 = (dT * dT) / 2147483648.0;
 80022ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80022f4:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80024c4 <_calculate+0x26c>
 80022f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fc:	edc7 7a03 	vstr	s15, [r7, #12]
		float OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2.0;
 8002300:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002304:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80024c0 <_calculate+0x268>
 8002308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800230c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002314:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002318:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80024c0 <_calculate+0x268>
 800231c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002324:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800232c:	edc7 7a08 	vstr	s15, [r7, #32]
		float SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4.0;
 8002330:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002334:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80024c0 <_calculate+0x268>
 8002338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800233c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002340:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002344:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002348:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80024c0 <_calculate+0x268>
 800234c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002354:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800235c:	edc7 7a07 	vstr	s15, [r7, #28]

		if (TEMP < -1500) {
 8002360:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002364:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80024c8 <_calculate+0x270>
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d546      	bpl.n	8002400 <_calculate+0x1a8>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8002372:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002376:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80024cc <_calculate+0x274>
 800237a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800237e:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8002382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002386:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800238a:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80024cc <_calculate+0x274>
 800238e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	ed97 7a08 	vldr	s14, [r7, #32]
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	edc7 7a08 	vstr	s15, [r7, #32]
			SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2.0;
 80023a2:	69f8      	ldr	r0, [r7, #28]
 80023a4:	f7fe f8d0 	bl	8000548 <__aeabi_f2d>
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
 80023ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023b0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80024cc <_calculate+0x274>
 80023b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b8:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80023bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023c4:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80024cc <_calculate+0x274>
 80023c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	ee17 0a90 	vmov	r0, s15
 80023d4:	f7fe f8b8 	bl	8000548 <__aeabi_f2d>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023e0:	f7fe fa34 	bl	800084c <__aeabi_ddiv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4620      	mov	r0, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	f7fd ff4e 	bl	800028c <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fbd6 	bl	8000ba8 <__aeabi_d2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	61fb      	str	r3, [r7, #28]
		}

		TEMP -= T2;
 8002400:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002404:	edd7 7a03 	vldr	s15, [r7, #12]
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		OFF -= OFF2;
 8002410:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002414:	edd7 7a08 	vldr	s15, [r7, #32]
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		SENS -= SENS2;
 8002420:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002424:	edd7 7a07 	vldr	s15, [r7, #28]
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	float PRES = (D1 * SENS / (2097152.0) - OFF) / 32768.0;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800243a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	ee17 0a90 	vmov	r0, s15
 8002446:	f7fe f87f 	bl	8000548 <__aeabi_f2d>
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <_calculate+0x278>)
 8002450:	f7fe f9fc 	bl	800084c <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4614      	mov	r4, r2
 800245a:	461d      	mov	r5, r3
 800245c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800245e:	f7fe f873 	bl	8000548 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fd ff0d 	bl	8000288 <__aeabi_dsub>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <_calculate+0x27c>)
 800247c:	f7fe f9e6 	bl	800084c <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb8e 	bl	8000ba8 <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
 800248e:	60bb      	str	r3, [r7, #8]

	bufer[0] = PRES;
 8002490:	edd7 7a02 	vldr	s15, [r7, #8]
 8002494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002498:	ee17 2a90 	vmov	r2, s15
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3304      	adds	r3, #4
 80024a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ac:	ee17 2a90 	vmov	r2, s15
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3730      	adds	r7, #48	@ 0x30
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000664 	.word	0x20000664
 80024c0:	44fa0000 	.word	0x44fa0000
 80024c4:	4f000000 	.word	0x4f000000
 80024c8:	c4bb8000 	.word	0xc4bb8000
 80024cc:	44bb8000 	.word	0x44bb8000
 80024d0:	41400000 	.word	0x41400000
 80024d4:	40e00000 	.word	0x40e00000

080024d8 <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <_msSendCmd+0x4c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <_msSendCmd+0x50>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <_msSendCmd+0x4c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <_msSendCmd+0x54>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	1df9      	adds	r1, r7, #7
 80024fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002502:	2201      	movs	r2, #1
 8002504:	f002 fa1d 	bl	8004942 <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <_msSendCmd+0x4c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <_msSendCmd+0x50>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <_msSendCmd+0x4c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	615a      	str	r2, [r3, #20]
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000064c 	.word	0x2000064c
 8002528:	20000650 	.word	0x20000650
 800252c:	20000648 	.word	0x20000648

08002530 <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
 800253c:	4613      	mov	r3, r2
 800253e:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8002540:	4b24      	ldr	r3, [pc, #144]	@ (80025d4 <_msSendCmdGetData16+0xa4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <_msSendCmdGetData16+0xa8>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	43db      	mvns	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <_msSendCmdGetData16+0xa4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8002556:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <_msSendCmdGetData16+0xac>)
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	1df9      	adds	r1, r7, #7
 800255c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002560:	2201      	movs	r2, #1
 8002562:	f002 f9ee 	bl	8004942 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8002566:	200a      	movs	r0, #10
 8002568:	f000 facc 	bl	8002b04 <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <_msSendCmdGetData16+0xac>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	f107 010d 	add.w	r1, r7, #13
 8002574:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002578:	2201      	movs	r2, #1
 800257a:	f002 fb26 	bl	8004bca <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <_msSendCmdGetData16+0xac>)
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f107 010c 	add.w	r1, r7, #12
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	2201      	movs	r2, #1
 800258c:	f002 fb1d 	bl	8004bca <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 8002590:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <_msSendCmdGetData16+0xa4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <_msSendCmdGetData16+0xa8>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <_msSendCmdGetData16+0xa4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 80025a4:	7b7b      	ldrb	r3, [r7, #13]
 80025a6:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 80025ae:	7b3b      	ldrb	r3, [r7, #12]
 80025b0:	461a      	mov	r2, r3
 80025b2:	89fb      	ldrh	r3, [r7, #14]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	89fa      	ldrh	r2, [r7, #14]
 80025c2:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 80025c4:	2014      	movs	r0, #20
 80025c6:	f000 fa9d 	bl	8002b04 <HAL_Delay>

}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000064c 	.word	0x2000064c
 80025d8:	20000650 	.word	0x20000650
 80025dc:	20000648 	.word	0x20000648

080025e0 <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 80025ec:	2044      	movs	r0, #68	@ 0x44
 80025ee:	f7ff ff73 	bl	80024d8 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 80025f2:	200c      	movs	r0, #12
 80025f4:	f000 fa86 	bl	8002b04 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 80025f8:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <_msSendCmdGetData32+0x120>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	43db      	mvns	r3, r3
 8002604:	4619      	mov	r1, r3
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 800260e:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <_msSendCmdGetData32+0x124>)
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	1df9      	adds	r1, r7, #7
 8002614:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002618:	2201      	movs	r2, #1
 800261a:	f002 f992 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 800261e:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <_msSendCmdGetData32+0x124>)
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	f107 010c 	add.w	r1, r7, #12
 8002626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800262a:	2203      	movs	r2, #3
 800262c:	f002 facd 	bl	8004bca <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8002630:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <_msSendCmdGetData32+0x120>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 8002644:	2054      	movs	r0, #84	@ 0x54
 8002646:	f7ff ff47 	bl	80024d8 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 800264a:	200c      	movs	r0, #12
 800264c:	f000 fa5a 	bl	8002b04 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8002650:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <_msSendCmdGetData32+0x120>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	43db      	mvns	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8002666:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <_msSendCmdGetData32+0x124>)
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	1df9      	adds	r1, r7, #7
 800266c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002670:	2201      	movs	r2, #1
 8002672:	f002 f966 	bl	8004942 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 8002676:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <_msSendCmdGetData32+0x124>)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	f107 0108 	add.w	r1, r7, #8
 800267e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002682:	2203      	movs	r2, #3
 8002684:	f002 faa1 	bl	8004bca <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8002688:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <_msSendCmdGetData32+0x120>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <_msSendCmdGetData32+0x11c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 800269c:	7b3b      	ldrb	r3, [r7, #12]
 800269e:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 80026a6:	7b7b      	ldrb	r3, [r7, #13]
 80026a8:	461a      	mov	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 80026b6:	7bbb      	ldrb	r3, [r7, #14]
 80026b8:	461a      	mov	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 80026c0:	7a3b      	ldrb	r3, [r7, #8]
 80026c2:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 80026ca:	7a7b      	ldrb	r3, [r7, #9]
 80026cc:	461a      	mov	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 80026da:	7abb      	ldrb	r3, [r7, #10]
 80026dc:	461a      	mov	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	3304      	adds	r3, #4
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000064c 	.word	0x2000064c
 8002700:	20000650 	.word	0x20000650
 8002704:	20000648 	.word	0x20000648

08002708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <HAL_MspInit+0x4c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <HAL_MspInit+0x4c>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800271c:	6453      	str	r3, [r2, #68]	@ 0x44
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_MspInit+0x4c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_MspInit+0x4c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <HAL_MspInit+0x4c>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	@ 0x40
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_MspInit+0x4c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	@ 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a31      	ldr	r2, [pc, #196]	@ (800283c <HAL_SD_MspInit+0xe4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d15b      	bne.n	8002832 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b30      	ldr	r3, [pc, #192]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	4a2f      	ldr	r2, [pc, #188]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 8002784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002788:	6453      	str	r3, [r2, #68]	@ 0x44
 800278a:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b29      	ldr	r3, [pc, #164]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	4a28      	ldr	r2, [pc, #160]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a6:	4b26      	ldr	r3, [pc, #152]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a21      	ldr	r2, [pc, #132]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <HAL_SD_MspInit+0xe8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d8:	2301      	movs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80027e0:	230c      	movs	r3, #12
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4816      	ldr	r0, [pc, #88]	@ (8002844 <HAL_SD_MspInit+0xec>)
 80027ec:	f000 fa94 	bl	8002d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002802:	230c      	movs	r3, #12
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	480d      	ldr	r0, [pc, #52]	@ (8002844 <HAL_SD_MspInit+0xec>)
 800280e:	f000 fa83 	bl	8002d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002812:	2304      	movs	r3, #4
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002822:	230c      	movs	r3, #12
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4806      	ldr	r0, [pc, #24]	@ (8002848 <HAL_SD_MspInit+0xf0>)
 800282e:	f000 fa73 	bl	8002d18 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	@ 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40023800 	.word	0x40023800
 8002844:	40020800 	.word	0x40020800
 8002848:	40020c00 	.word	0x40020c00

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	@ (80028d0 <HAL_SPI_MspInit+0x84>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12b      	bne.n	80028c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <HAL_SPI_MspInit+0x88>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <HAL_SPI_MspInit+0x88>)
 8002878:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800287c:	6453      	str	r3, [r2, #68]	@ 0x44
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_SPI_MspInit+0x88>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_SPI_MspInit+0x88>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	4a10      	ldr	r2, [pc, #64]	@ (80028d4 <HAL_SPI_MspInit+0x88>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	@ 0x30
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_SPI_MspInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028a6:	23e0      	movs	r3, #224	@ 0xe0
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028b6:	2305      	movs	r3, #5
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	4805      	ldr	r0, [pc, #20]	@ (80028d8 <HAL_SPI_MspInit+0x8c>)
 80028c2:	f000 fa29 	bl	8002d18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	@ 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40013000 	.word	0x40013000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020000 	.word	0x40020000

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <NMI_Handler+0x4>

080028e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <MemManage_Handler+0x4>

080028f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <UsageFault_Handler+0x4>

08002904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002932:	f000 f8c7 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800296c:	f006 f9b8 	bl	8008ce0 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20018000 	.word	0x20018000
 800299c:	00000400 	.word	0x00000400
 80029a0:	2000067c 	.word	0x2000067c
 80029a4:	20000808 	.word	0x20000808

080029a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <SystemInit+0x20>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	4a05      	ldr	r2, [pc, #20]	@ (80029c8 <SystemInit+0x20>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029d0:	f7ff ffea 	bl	80029a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029d4:	480c      	ldr	r0, [pc, #48]	@ (8002a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029d6:	490d      	ldr	r1, [pc, #52]	@ (8002a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80029fa:	f006 f977 	bl	8008cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fe:	f7fe fb9f 	bl	8001140 <main>
  bx  lr    
 8002a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a10:	0800a748 	.word	0x0800a748
  ldr r2, =_sbss
 8002a14:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a18:	20000808 	.word	0x20000808

08002a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC_IRQHandler>
	...

08002a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <HAL_Init+0x40>)
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <HAL_Init+0x40>)
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <HAL_Init+0x40>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 f931 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f000 f808 	bl	8002a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a54:	f7ff fe58 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023c00 	.word	0x40023c00

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_InitTick+0x54>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_InitTick+0x58>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f93b 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00e      	b.n	8002ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d80a      	bhi.n	8002aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f000 f911 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4a06      	ldr	r2, [pc, #24]	@ (8002ac0 <HAL_InitTick+0x5c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000014 	.word	0x20000014
 8002abc:	2000001c 	.word	0x2000001c
 8002ac0:	20000018 	.word	0x20000018

08002ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_IncTick+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <HAL_IncTick+0x24>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <HAL_IncTick+0x24>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000001c 	.word	0x2000001c
 8002ae8:	20000680 	.word	0x20000680

08002aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTick;
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_GetTick+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000680 	.word	0x20000680

08002b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff ffee 	bl	8002aec <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d005      	beq.n	8002b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <HAL_Delay+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b2a:	bf00      	nop
 8002b2c:	f7ff ffde 	bl	8002aec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d8f7      	bhi.n	8002b2c <HAL_Delay+0x28>
  {
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000001c 	.word	0x2000001c

08002b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	@ (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	@ 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff47 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff5c 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffb0 	bl	8002c6c <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e159      	b.n	8002fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 8148 	bne.w	8002fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a2 	beq.w	8002fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b57      	ldr	r3, [pc, #348]	@ (8003000 <HAL_GPIO_Init+0x2e8>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a56      	ldr	r2, [pc, #344]	@ (8003000 <HAL_GPIO_Init+0x2e8>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b54      	ldr	r3, [pc, #336]	@ (8003000 <HAL_GPIO_Init+0x2e8>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a52      	ldr	r2, [pc, #328]	@ (8003004 <HAL_GPIO_Init+0x2ec>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <HAL_GPIO_Init+0x2f0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x202>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a48      	ldr	r2, [pc, #288]	@ (800300c <HAL_GPIO_Init+0x2f4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x1fe>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a47      	ldr	r2, [pc, #284]	@ (8003010 <HAL_GPIO_Init+0x2f8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x1fa>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a46      	ldr	r2, [pc, #280]	@ (8003014 <HAL_GPIO_Init+0x2fc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x1f6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a45      	ldr	r2, [pc, #276]	@ (8003018 <HAL_GPIO_Init+0x300>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x1f2>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e008      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f0a:	2307      	movs	r3, #7
 8002f0c:	e006      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e004      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	f002 0203 	and.w	r2, r2, #3
 8002f22:	0092      	lsls	r2, r2, #2
 8002f24:	4093      	lsls	r3, r2
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f2c:	4935      	ldr	r1, [pc, #212]	@ (8003004 <HAL_GPIO_Init+0x2ec>)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3a:	4b38      	ldr	r3, [pc, #224]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f64:	4b2d      	ldr	r3, [pc, #180]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f88:	4a24      	ldr	r2, [pc, #144]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	f67f aea2 	bls.w	8002d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40013800 	.word	0x40013800
 8003008:	40020000 	.word	0x40020000
 800300c:	40020400 	.word	0x40020400
 8003010:	40020800 	.word	0x40020800
 8003014:	40020c00 	.word	0x40020c00
 8003018:	40021000 	.word	0x40021000
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e001      	b.n	8003042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003094:	887a      	ldrh	r2, [r7, #2]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	041a      	lsls	r2, r3, #16
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43d9      	mvns	r1, r3
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	400b      	ands	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e267      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d075      	beq.n	80031c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030d6:	4b88      	ldr	r3, [pc, #544]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00c      	beq.n	80030fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e2:	4b85      	ldr	r3, [pc, #532]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d112      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b82      	ldr	r3, [pc, #520]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fa:	d10b      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	4b7e      	ldr	r3, [pc, #504]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d05b      	beq.n	80031c0 <HAL_RCC_OscConfig+0x108>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d157      	bne.n	80031c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e242      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x74>
 800311e:	4b76      	ldr	r3, [pc, #472]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a75      	ldr	r2, [pc, #468]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0xb0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x98>
 8003136:	4b70      	ldr	r3, [pc, #448]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6f      	ldr	r2, [pc, #444]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6c      	ldr	r2, [pc, #432]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0xb0>
 8003150:	4b69      	ldr	r3, [pc, #420]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a68      	ldr	r2, [pc, #416]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b66      	ldr	r3, [pc, #408]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a65      	ldr	r2, [pc, #404]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff fcbc 	bl	8002aec <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7ff fcb8 	bl	8002aec <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	@ 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e207      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b5b      	ldr	r3, [pc, #364]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xc0>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff fca8 	bl	8002aec <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7ff fca4 	bl	8002aec <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	@ 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1f3      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0xe8>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d063      	beq.n	8003296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ce:	4b4a      	ldr	r3, [pc, #296]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031da:	4b47      	ldr	r3, [pc, #284]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b44      	ldr	r3, [pc, #272]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_RCC_OscConfig+0x152>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e1c7      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4937      	ldr	r1, [pc, #220]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	e03a      	b.n	8003296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003228:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <HAL_RCC_OscConfig+0x244>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7ff fc5d 	bl	8002aec <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7ff fc59 	bl	8002aec <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e1a8      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4925      	ldr	r1, [pc, #148]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326a:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <HAL_RCC_OscConfig+0x244>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7ff fc3c 	bl	8002aec <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7ff fc38 	bl	8002aec <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e187      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d036      	beq.n	8003310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <HAL_RCC_OscConfig+0x248>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7ff fc1c 	bl	8002aec <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7ff fc18 	bl	8002aec <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e167      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x200>
 80032d6:	e01b      	b.n	8003310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_RCC_OscConfig+0x248>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7ff fc05 	bl	8002aec <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	e00e      	b.n	8003304 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e6:	f7ff fc01 	bl	8002aec <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d907      	bls.n	8003304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e150      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470000 	.word	0x42470000
 8003300:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	4b88      	ldr	r3, [pc, #544]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ea      	bne.n	80032e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8097 	beq.w	800344c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b81      	ldr	r3, [pc, #516]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	4b7d      	ldr	r3, [pc, #500]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4a7c      	ldr	r2, [pc, #496]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	@ 0x40
 800333e:	4b7a      	ldr	r3, [pc, #488]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b77      	ldr	r3, [pc, #476]	@ (800352c <HAL_RCC_OscConfig+0x474>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b74      	ldr	r3, [pc, #464]	@ (800352c <HAL_RCC_OscConfig+0x474>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a73      	ldr	r2, [pc, #460]	@ (800352c <HAL_RCC_OscConfig+0x474>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7ff fbc1 	bl	8002aec <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7ff fbbd 	bl	8002aec <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e10c      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b6a      	ldr	r3, [pc, #424]	@ (800352c <HAL_RCC_OscConfig+0x474>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2ea>
 8003394:	4b64      	ldr	r3, [pc, #400]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a63      	ldr	r2, [pc, #396]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	e01c      	b.n	80033dc <HAL_RCC_OscConfig+0x324>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x30c>
 80033aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0x324>
 80033c4:	4b58      	ldr	r3, [pc, #352]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c8:	4a57      	ldr	r2, [pc, #348]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d0:	4b55      	ldr	r3, [pc, #340]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	4a54      	ldr	r2, [pc, #336]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7ff fb82 	bl	8002aec <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7ff fb7e 	bl	8002aec <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0cb      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	4b49      	ldr	r3, [pc, #292]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ee      	beq.n	80033ec <HAL_RCC_OscConfig+0x334>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7ff fb6c 	bl	8002aec <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7ff fb68 	bl	8002aec <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0b5      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342e:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1ee      	bne.n	8003418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b39      	ldr	r3, [pc, #228]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	4a38      	ldr	r2, [pc, #224]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a1 	beq.w	8003598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003456:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b08      	cmp	r3, #8
 8003460:	d05c      	beq.n	800351c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d141      	bne.n	80034ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_RCC_OscConfig+0x478>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7ff fb3c 	bl	8002aec <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7ff fb38 	bl	8002aec <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e087      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	3b01      	subs	r3, #1
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	491b      	ldr	r1, [pc, #108]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_RCC_OscConfig+0x478>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7ff fb11 	bl	8002aec <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7ff fb0d 	bl	8002aec <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e05c      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x416>
 80034ec:	e054      	b.n	8003598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff fafa 	bl	8002aec <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff faf6 	bl	8002aec <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e045      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x444>
 800351a:	e03d      	b.n	8003598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e038      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003534:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x4ec>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d028      	beq.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d121      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d11a      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800356a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800356c:	4293      	cmp	r3, r2
 800356e:	d111      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	@ (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	@ (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	@ (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7ff fa28 	bl	8002aec <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7ff fa24 	bl	8002aec <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	@ (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f988 	bl	8002a64 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0800a62c 	.word	0x0800a62c
 800376c:	20000014 	.word	0x20000014
 8003770:	20000018 	.word	0x20000018

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003778:	b090      	sub	sp, #64	@ 0x40
 800377a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800378c:	4b59      	ldr	r3, [pc, #356]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d00d      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003798:	2b08      	cmp	r3, #8
 800379a:	f200 80a1 	bhi.w	80038e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x34>
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x3a>
 80037a6:	e09b      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b53      	ldr	r3, [pc, #332]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80037aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037ac:	e09b      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ae:	4b53      	ldr	r3, [pc, #332]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x188>)
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037b2:	e098      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b4f      	ldr	r3, [pc, #316]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037be:	4b4d      	ldr	r3, [pc, #308]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d028      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b4a      	ldr	r3, [pc, #296]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	2200      	movs	r2, #0
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037dc:	2100      	movs	r1, #0
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x188>)
 80037e0:	fb03 f201 	mul.w	r2, r3, r1
 80037e4:	2300      	movs	r3, #0
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	4a43      	ldr	r2, [pc, #268]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x188>)
 80037ee:	fba0 1202 	umull	r1, r2, r0, r2
 80037f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f4:	460a      	mov	r2, r1
 80037f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037fa:	4413      	add	r3, r2
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003800:	2200      	movs	r2, #0
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	61fa      	str	r2, [r7, #28]
 8003806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800380e:	f7fd fa1b 	bl	8000c48 <__aeabi_uldivmod>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4613      	mov	r3, r2
 8003818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381a:	e053      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381c:	4b35      	ldr	r3, [pc, #212]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	2200      	movs	r2, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	617a      	str	r2, [r7, #20]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800382e:	f04f 0b00 	mov.w	fp, #0
 8003832:	4652      	mov	r2, sl
 8003834:	465b      	mov	r3, fp
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003844:	0150      	lsls	r0, r2, #5
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	ebb2 080a 	subs.w	r8, r2, sl
 800384e:	eb63 090b 	sbc.w	r9, r3, fp
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800385e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003862:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003866:	ebb2 0408 	subs.w	r4, r2, r8
 800386a:	eb63 0509 	sbc.w	r5, r3, r9
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	00eb      	lsls	r3, r5, #3
 8003878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800387c:	00e2      	lsls	r2, r4, #3
 800387e:	4614      	mov	r4, r2
 8003880:	461d      	mov	r5, r3
 8003882:	eb14 030a 	adds.w	r3, r4, sl
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	eb45 030b 	adc.w	r3, r5, fp
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800389a:	4629      	mov	r1, r5
 800389c:	028b      	lsls	r3, r1, #10
 800389e:	4621      	mov	r1, r4
 80038a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a4:	4621      	mov	r1, r4
 80038a6:	028a      	lsls	r2, r1, #10
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ae:	2200      	movs	r2, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b8:	f7fd f9c6 	bl	8000c48 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	3301      	adds	r3, #1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038de:	e002      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3740      	adds	r7, #64	@ 0x40
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	00f42400 	.word	0x00f42400
 80038fc:	017d7840 	.word	0x017d7840

08003900 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e022      	b.n	8003958 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fe ff17 	bl	8002758 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f814 	bl	8003960 <HAL_SD_InitCard>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e00a      	b.n	8003958 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b08e      	sub	sp, #56	@ 0x38
 8003964:	af04      	add	r7, sp, #16
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800397c:	2376      	movs	r3, #118	@ 0x76
 800397e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681d      	ldr	r5, [r3, #0]
 8003984:	466c      	mov	r4, sp
 8003986:	f107 0314 	add.w	r3, r7, #20
 800398a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800398e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003998:	4628      	mov	r0, r5
 800399a:	f001 fd1b 	bl	80053d4 <SDIO_Init>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80039a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e04f      	b.n	8003a50 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80039b0:	4b29      	ldr	r3, [pc, #164]	@ (8003a58 <HAL_SD_InitCard+0xf8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fd53 	bl	8005466 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80039c0:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <HAL_SD_InitCard+0xf8>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80039c6:	2002      	movs	r0, #2
 80039c8:	f7ff f89c 	bl	8002b04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fe79 	bl	80046c4 <SD_PowerON>
 80039d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e02e      	b.n	8003a50 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fd98 	bl	8004528 <SD_InitCard>
 80039f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01b      	b.n	8003a50 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 fdb2 	bl	800558a <SDMMC_CmdBlockLength>
 8003a26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00f      	beq.n	8003a4e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <HAL_SD_InitCard+0xfc>)
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3728      	adds	r7, #40	@ 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bdb0      	pop	{r4, r5, r7, pc}
 8003a58:	422580a0 	.word	0x422580a0
 8003a5c:	004005ff 	.word	0x004005ff

08003a60 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b092      	sub	sp, #72	@ 0x48
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a6e:	f7ff f83d 	bl	8002aec <HAL_GetTick>
 8003a72:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d107      	bne.n	8003a92 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e1c5      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f040 81b8 	bne.w	8003e10 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d907      	bls.n	8003ac4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e1ac      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d002      	beq.n	8003ae2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	025b      	lsls	r3, r3, #9
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	025b      	lsls	r3, r3, #9
 8003aec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003aee:	2390      	movs	r3, #144	@ 0x90
 8003af0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003af2:	2302      	movs	r3, #2
 8003af4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f107 0214 	add.w	r2, r7, #20
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fd12 	bl	8005532 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d90a      	bls.n	8003b2a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2202      	movs	r2, #2
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 fd76 	bl	8005612 <SDMMC_CmdReadMultiBlock>
 8003b26:	6478      	str	r0, [r7, #68]	@ 0x44
 8003b28:	e009      	b.n	8003b3e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 fd49 	bl	80055ce <SDMMC_CmdReadSingleBlock>
 8003b3c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a7e      	ldr	r2, [pc, #504]	@ (8003d44 <HAL_SD_ReadBlocks+0x2e4>)
 8003b4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e159      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003b6e:	e061      	b.n	8003c34 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03c      	beq.n	8003bf8 <HAL_SD_ReadBlocks+0x198>
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d039      	beq.n	8003bf8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b88:	e033      	b.n	8003bf2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 fc4b 	bl	800542a <SDIO_ReadFIFO>
 8003b94:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bcc:	3301      	adds	r3, #1
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	3301      	adds	r3, #1
 8003be4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	3b01      	subs	r3, #1
 8003bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bee:	3301      	adds	r3, #1
 8003bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf4:	2b07      	cmp	r3, #7
 8003bf6:	d9c8      	bls.n	8003b8a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003bf8:	f7fe ff78 	bl	8002aec <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d902      	bls.n	8003c0e <HAL_SD_ReadBlocks+0x1ae>
 8003c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d112      	bne.n	8003c34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4c      	ldr	r2, [pc, #304]	@ (8003d44 <HAL_SD_ReadBlocks+0x2e4>)
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0f4      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c3a:	f240 332a 	movw	r3, #810	@ 0x32a
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d095      	beq.n	8003b70 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d022      	beq.n	8003c98 <HAL_SD_ReadBlocks+0x238>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d91f      	bls.n	8003c98 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d01b      	beq.n	8003c98 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fd3b 	bl	80056e0 <SDMMC_CmdStopTransfer>
 8003c6a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a33      	ldr	r2, [pc, #204]	@ (8003d44 <HAL_SD_ReadBlocks+0x2e4>)
 8003c78:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0c2      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_SD_ReadBlocks+0x254>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	@ (8003d44 <HAL_SD_ReadBlocks+0x2e4>)
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	f043 0208 	orr.w	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0a1      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d012      	beq.n	8003d0e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <HAL_SD_ReadBlocks+0x2e4>)
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	f043 0202 	orr.w	r2, r3, #2
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e087      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d064      	beq.n	8003de6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a08      	ldr	r2, [pc, #32]	@ (8003d44 <HAL_SD_ReadBlocks+0x2e4>)
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e06d      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
 8003d42:	bf00      	nop
 8003d44:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 fb6c 	bl	800542a <SDIO_ReadFIFO>
 8003d52:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5e:	3301      	adds	r3, #1
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d64:	3b01      	subs	r3, #1
 8003d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d74:	3301      	adds	r3, #1
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d90:	3b01      	subs	r3, #1
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d96:	0e1b      	lsrs	r3, r3, #24
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da0:	3301      	adds	r3, #1
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da6:	3b01      	subs	r3, #1
 8003da8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003daa:	f7fe fe9f 	bl	8002aec <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d902      	bls.n	8003dc0 <HAL_SD_ReadBlocks+0x360>
 8003dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d112      	bne.n	8003de6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <HAL_SD_ReadBlocks+0x3c8>)
 8003dc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e01b      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_SD_ReadBlocks+0x39a>
 8003df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1a6      	bne.n	8003d48 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e006      	b.n	8003e1e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3748      	adds	r7, #72	@ 0x48
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	004005ff 	.word	0x004005ff

08003e2c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b092      	sub	sp, #72	@ 0x48
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7fe fe57 	bl	8002aec <HAL_GetTick>
 8003e3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d107      	bne.n	8003e5e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e16d      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	f040 8160 	bne.w	800412c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d907      	bls.n	8003e90 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e154      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2203      	movs	r2, #3
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d002      	beq.n	8003eae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eaa:	025b      	lsls	r3, r3, #9
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	025b      	lsls	r3, r3, #9
 8003eb8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003eba:	2390      	movs	r3, #144	@ 0x90
 8003ebc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f107 0218 	add.w	r2, r7, #24
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fb2c 	bl	8005532 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d90a      	bls.n	8003ef6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fbd4 	bl	800569a <SDMMC_CmdWriteMultiBlock>
 8003ef2:	6478      	str	r0, [r7, #68]	@ 0x44
 8003ef4:	e009      	b.n	8003f0a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fba7 	bl	8005656 <SDMMC_CmdWriteSingleBlock>
 8003f08:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a8b      	ldr	r2, [pc, #556]	@ (8004144 <HAL_SD_WriteBlocks+0x318>)
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e101      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f3a:	e065      	b.n	8004008 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d040      	beq.n	8003fcc <HAL_SD_WriteBlocks+0x1a0>
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d03d      	beq.n	8003fcc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f54:	e037      	b.n	8003fc6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5e:	3301      	adds	r3, #1
 8003f60:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f64:	3b01      	subs	r3, #1
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	021a      	lsls	r2, r3, #8
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f76:	3301      	adds	r3, #1
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	041a      	lsls	r2, r3, #16
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	3301      	adds	r3, #1
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f94:	3b01      	subs	r3, #1
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fac:	3b01      	subs	r3, #1
 8003fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f107 0214 	add.w	r2, r7, #20
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fa42 	bl	8005444 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	d9c4      	bls.n	8003f56 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003fcc:	f7fe fd8e 	bl	8002aec <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d902      	bls.n	8003fe2 <HAL_SD_WriteBlocks+0x1b6>
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d112      	bne.n	8004008 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a57      	ldr	r2, [pc, #348]	@ (8004144 <HAL_SD_WriteBlocks+0x318>)
 8003fe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e098      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800400e:	f240 331a 	movw	r3, #794	@ 0x31a
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d091      	beq.n	8003f3c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d022      	beq.n	800406c <HAL_SD_WriteBlocks+0x240>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d91f      	bls.n	800406c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004030:	2b03      	cmp	r3, #3
 8004032:	d01b      	beq.n	800406c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fb51 	bl	80056e0 <SDMMC_CmdStopTransfer>
 800403e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3e      	ldr	r2, [pc, #248]	@ (8004144 <HAL_SD_WriteBlocks+0x318>)
 800404c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e066      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_SD_WriteBlocks+0x25c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d012      	beq.n	80040ae <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	@ (8004144 <HAL_SD_WriteBlocks+0x318>)
 800408e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	f043 0208 	orr.w	r2, r3, #8
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e045      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a20      	ldr	r2, [pc, #128]	@ (8004144 <HAL_SD_WriteBlocks+0x318>)
 80040c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	f043 0202 	orr.w	r2, r3, #2
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e02b      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	@ (8004144 <HAL_SD_WriteBlocks+0x318>)
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	f043 0210 	orr.w	r2, r3, #16
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e011      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800411e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e006      	b.n	800413a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3748      	adds	r7, #72	@ 0x48
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	004005ff 	.word	0x004005ff

08004148 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004156:	0f9b      	lsrs	r3, r3, #30
 8004158:	b2da      	uxtb	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004162:	0e9b      	lsrs	r3, r3, #26
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	b2da      	uxtb	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004174:	0e1b      	lsrs	r3, r3, #24
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2da      	uxtb	r2, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b2da      	uxtb	r2, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041a8:	0d1b      	lsrs	r3, r3, #20
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c6:	0bdb      	lsrs	r3, r3, #15
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d8:	0b9b      	lsrs	r3, r3, #14
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ea:	0b5b      	lsrs	r3, r3, #13
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041fc:	0b1b      	lsrs	r3, r3, #12
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	2b00      	cmp	r3, #0
 8004216:	d163      	bne.n	80042e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004222:	4013      	ands	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004228:	0f92      	lsrs	r2, r2, #30
 800422a:	431a      	orrs	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004234:	0edb      	lsrs	r3, r3, #27
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	b2da      	uxtb	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004246:	0e1b      	lsrs	r3, r3, #24
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	b2da      	uxtb	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004258:	0d5b      	lsrs	r3, r3, #21
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	b2da      	uxtb	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426a:	0c9b      	lsrs	r3, r3, #18
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	b2da      	uxtb	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800427c:	0bdb      	lsrs	r3, r3, #15
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	b2da      	uxtb	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	7e1b      	ldrb	r3, [r3, #24]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	3302      	adds	r3, #2
 80042a0:	2201      	movs	r2, #1
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042aa:	fb03 f202 	mul.w	r2, r3, r2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	7a1b      	ldrb	r3, [r3, #8]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042cc:	0a52      	lsrs	r2, r2, #9
 80042ce:	fb03 f202 	mul.w	r2, r3, r2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80042de:	e031      	b.n	8004344 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d11d      	bne.n	8004324 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	431a      	orrs	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	029a      	lsls	r2, r3, #10
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004318:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	661a      	str	r2, [r3, #96]	@ 0x60
 8004322:	e00f      	b.n	8004344 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a58      	ldr	r2, [pc, #352]	@ (800448c <HAL_SD_GetCardCSD+0x344>)
 800432a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e09d      	b.n	8004480 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004348:	0b9b      	lsrs	r3, r3, #14
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800435a:	09db      	lsrs	r3, r3, #7
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004362:	b2da      	uxtb	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	0fdb      	lsrs	r3, r3, #31
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	0f5b      	lsrs	r3, r3, #29
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	b2da      	uxtb	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	0e9b      	lsrs	r3, r3, #26
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ac:	0d9b      	lsrs	r3, r3, #22
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	0d5b      	lsrs	r3, r3, #21
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	0bdb      	lsrs	r3, r3, #15
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004402:	0b9b      	lsrs	r3, r3, #14
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	b2da      	uxtb	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	0b5b      	lsrs	r3, r3, #13
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	0b1b      	lsrs	r3, r3, #12
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	0a9b      	lsrs	r3, r3, #10
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	b2da      	uxtb	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800446e:	b2da      	uxtb	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	004005ff 	.word	0x004005ff

08004490 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f970 	bl	80047e0 <SD_SendStatus>
 8004500:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	0a5b      	lsrs	r3, r3, #9
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800451e:	693b      	ldr	r3, [r7, #16]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004528:	b5b0      	push	{r4, r5, r7, lr}
 800452a:	b094      	sub	sp, #80	@ 0x50
 800452c:	af04      	add	r7, sp, #16
 800452e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004530:	2301      	movs	r3, #1
 8004532:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 ffa2 	bl	8005482 <SDIO_GetPowerState>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004544:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004548:	e0b8      	b.n	80046bc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	2b03      	cmp	r3, #3
 8004550:	d02f      	beq.n	80045b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f989 	bl	800586e <SDMMC_CmdSendCID>
 800455c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800455e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <SD_InitCard+0x40>
    {
      return errorstate;
 8004564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004566:	e0a9      	b.n	80046bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ffcc 	bl	800550c <SDIO_GetResponse>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2104      	movs	r1, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f000 ffc3 	bl	800550c <SDIO_GetResponse>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2108      	movs	r1, #8
 8004592:	4618      	mov	r0, r3
 8004594:	f000 ffba 	bl	800550c <SDIO_GetResponse>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	210c      	movs	r1, #12
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 ffb1 	bl	800550c <SDIO_GetResponse>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d00d      	beq.n	80045d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f107 020e 	add.w	r2, r7, #14
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f98f 	bl	80058e8 <SDMMC_CmdSetRelAdd>
 80045ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <SD_InitCard+0xae>
    {
      return errorstate;
 80045d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d4:	e072      	b.n	80046bc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d036      	beq.n	800464c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	461a      	mov	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f001 f959 	bl	80058aa <SDMMC_CmdSendCSD>
 80045f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004602:	e05b      	b.n	80046bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ff7e 	bl	800550c <SDIO_GetResponse>
 8004610:	4602      	mov	r2, r0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2104      	movs	r1, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f000 ff75 	bl	800550c <SDIO_GetResponse>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2108      	movs	r1, #8
 800462e:	4618      	mov	r0, r3
 8004630:	f000 ff6c 	bl	800550c <SDIO_GetResponse>
 8004634:	4602      	mov	r2, r0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	210c      	movs	r1, #12
 8004640:	4618      	mov	r0, r3
 8004642:	f000 ff63 	bl	800550c <SDIO_GetResponse>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2104      	movs	r1, #4
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff5a 	bl	800550c <SDIO_GetResponse>
 8004658:	4603      	mov	r3, r0
 800465a:	0d1a      	lsrs	r2, r3, #20
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fd6e 	bl	8004148 <HAL_SD_GetCardCSD>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004672:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004676:	e021      	b.n	80046bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6819      	ldr	r1, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	2200      	movs	r2, #0
 8004684:	461c      	mov	r4, r3
 8004686:	4615      	mov	r5, r2
 8004688:	4622      	mov	r2, r4
 800468a:	462b      	mov	r3, r5
 800468c:	4608      	mov	r0, r1
 800468e:	f001 f849 	bl	8005724 <SDMMC_CmdSelDesel>
 8004692:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <SD_InitCard+0x176>
  {
    return errorstate;
 800469a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800469c:	e00e      	b.n	80046bc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681d      	ldr	r5, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	466c      	mov	r4, sp
 80046a6:	f103 0210 	add.w	r2, r3, #16
 80046aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80046ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046b0:	3304      	adds	r3, #4
 80046b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 fe8d 	bl	80053d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3740      	adds	r7, #64	@ 0x40
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bdb0      	pop	{r4, r5, r7, pc}

080046c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f844 	bl	800576a <SDMMC_CmdGoIdleState>
 80046e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	e072      	b.n	80047d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f857 	bl	80057a6 <SDMMC_CmdOperCond>
 80046f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f82d 	bl	800576a <SDMMC_CmdGoIdleState>
 8004710:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	e05b      	b.n	80047d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004726:	2b01      	cmp	r3, #1
 8004728:	d137      	bne.n	800479a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f001 f857 	bl	80057e4 <SDMMC_CmdAppCommand>
 8004736:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d02d      	beq.n	800479a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800473e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004742:	e047      	b.n	80047d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f84a 	bl	80057e4 <SDMMC_CmdAppCommand>
 8004750:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <SD_PowerON+0x98>
    {
      return errorstate;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	e03b      	b.n	80047d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	491e      	ldr	r1, [pc, #120]	@ (80047dc <SD_PowerON+0x118>)
 8004762:	4618      	mov	r0, r3
 8004764:	f001 f860 	bl	8005828 <SDMMC_CmdAppOperCommand>
 8004768:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004770:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004774:	e02e      	b.n	80047d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fec5 	bl	800550c <SDIO_GetResponse>
 8004782:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	0fdb      	lsrs	r3, r3, #31
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <SD_PowerON+0xcc>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <SD_PowerON+0xce>
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]

    count++;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3301      	adds	r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d802      	bhi.n	80047aa <SD_PowerON+0xe6>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0cc      	beq.n	8004744 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d902      	bls.n	80047ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80047b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b8:	e00c      	b.n	80047d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80047ca:	e002      	b.n	80047d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	c1100000 	.word	0xc1100000

080047e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80047f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047f4:	e018      	b.n	8004828 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f001 f891 	bl	800592a <SDMMC_CmdSendStatus>
 8004808:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e009      	b.n	8004828 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fe76 	bl	800550c <SDIO_GetResponse>
 8004820:	4602      	mov	r2, r0
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07b      	b.n	800493a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004852:	d009      	beq.n	8004868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
 800485a:	e005      	b.n	8004868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd ffe2 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ec:	ea42 0103 	orr.w	r1, r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	f003 0104 	and.w	r1, r3, #4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	f003 0210 	and.w	r2, r3, #16
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b088      	sub	sp, #32
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004952:	f7fe f8cb 	bl	8002aec <HAL_GetTick>
 8004956:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
 800496a:	e12a      	b.n	8004bc2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x36>
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e122      	b.n	8004bc2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_SPI_Transmit+0x48>
 8004986:	2302      	movs	r3, #2
 8004988:	e11b      	b.n	8004bc2 <HAL_SPI_Transmit+0x280>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2203      	movs	r2, #3
 8004996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d8:	d10f      	bne.n	80049fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b40      	cmp	r3, #64	@ 0x40
 8004a06:	d007      	beq.n	8004a18 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a20:	d152      	bne.n	8004ac8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0xee>
 8004a2a:	8b7b      	ldrh	r3, [r7, #26]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d145      	bne.n	8004abc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a54:	e032      	b.n	8004abc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d112      	bne.n	8004a8a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a88:	e018      	b.n	8004abc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a8a:	f7fe f82f 	bl	8002aec <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_Transmit+0x160>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_Transmit+0x166>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e082      	b.n	8004bc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1c7      	bne.n	8004a56 <HAL_SPI_Transmit+0x114>
 8004ac6:	e053      	b.n	8004b70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_SPI_Transmit+0x194>
 8004ad0:	8b7b      	ldrh	r3, [r7, #26]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d147      	bne.n	8004b66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004afc:	e033      	b.n	8004b66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d113      	bne.n	8004b34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b32:	e018      	b.n	8004b66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b34:	f7fd ffda 	bl	8002aec <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d803      	bhi.n	8004b4c <HAL_SPI_Transmit+0x20a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d102      	bne.n	8004b52 <HAL_SPI_Transmit+0x210>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e02d      	b.n	8004bc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1c6      	bne.n	8004afe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fbd9 	bl	800532c <SPI_EndRxTxTransaction>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b088      	sub	sp, #32
 8004bce:	af02      	add	r7, sp, #8
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	e104      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bf2:	d112      	bne.n	8004c1a <HAL_SPI_Receive+0x50>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10e      	bne.n	8004c1a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f8f3 	bl	8004dfc <HAL_SPI_TransmitReceive>
 8004c16:	4603      	mov	r3, r0
 8004c18:	e0ec      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1a:	f7fd ff67 	bl	8002aec <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_SPI_Receive+0x62>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0e1      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_SPI_Receive+0x74>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0da      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8c:	d10f      	bne.n	8004cae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d007      	beq.n	8004ccc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d170      	bne.n	8004db6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cd4:	e035      	b.n	8004d42 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d115      	bne.n	8004d10 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f103 020c 	add.w	r2, r3, #12
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d0e:	e018      	b.n	8004d42 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d10:	f7fd feec 	bl	8002aec <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d803      	bhi.n	8004d28 <HAL_SPI_Receive+0x15e>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d102      	bne.n	8004d2e <HAL_SPI_Receive+0x164>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e058      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1c4      	bne.n	8004cd6 <HAL_SPI_Receive+0x10c>
 8004d4c:	e038      	b.n	8004dc0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d113      	bne.n	8004d84 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d66:	b292      	uxth	r2, r2
 8004d68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d82:	e018      	b.n	8004db6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d84:	f7fd feb2 	bl	8002aec <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d803      	bhi.n	8004d9c <HAL_SPI_Receive+0x1d2>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Receive+0x1d8>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e01e      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1c6      	bne.n	8004d4e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa4b 	bl	8005260 <SPI_EndRxTransaction>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004df2:	2300      	movs	r3, #0
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	@ 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e0e:	f7fd fe6d 	bl	8002aec <HAL_GetTick>
 8004e12:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e1a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e26:	7ffb      	ldrb	r3, [r7, #31]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d00c      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x4a>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e32:	d106      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x46>
 8004e3c:	7ffb      	ldrb	r3, [r7, #31]
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d001      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
 8004e44:	e17f      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x5c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x5c>
 8004e52:	887b      	ldrh	r3, [r7, #2]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e174      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x6e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e16d      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d003      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2205      	movs	r2, #5
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	887a      	ldrh	r2, [r7, #2]
 8004e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	887a      	ldrh	r2, [r7, #2]
 8004eae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d007      	beq.n	8004eda <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee2:	d17e      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0xf6>
 8004eec:	8afb      	ldrh	r3, [r7, #22]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d16c      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f16:	e059      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d11b      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x162>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d016      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x162>
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d113      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d119      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x1a4>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d014      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	b292      	uxth	r2, r2
 8004f82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fa0:	f7fd fda4 	bl	8002aec <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d80d      	bhi.n	8004fcc <HAL_SPI_TransmitReceive+0x1d0>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d009      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e0bc      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1a0      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x11c>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d19b      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x11c>
 8004fe0:	e082      	b.n	80050e8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x1f4>
 8004fea:	8afb      	ldrh	r3, [r7, #22]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d171      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005016:	e05d      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d11c      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x264>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x264>
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	2b01      	cmp	r3, #1
 8005034:	d114      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d119      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x2a6>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d014      	beq.n	80050a2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800509e:	2301      	movs	r3, #1
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050a2:	f7fd fd23 	bl	8002aec <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d803      	bhi.n	80050ba <HAL_SPI_TransmitReceive+0x2be>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d102      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x2c4>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e038      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d19c      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x21c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d197      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f91d 	bl	800532c <SPI_EndRxTxTransaction>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e01d      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005144:	2300      	movs	r3, #0
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3728      	adds	r7, #40	@ 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005160:	f7fd fcc4 	bl	8002aec <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4413      	add	r3, r2
 800516e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005170:	f7fd fcbc 	bl	8002aec <HAL_GetTick>
 8005174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005176:	4b39      	ldr	r3, [pc, #228]	@ (800525c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	015b      	lsls	r3, r3, #5
 800517c:	0d1b      	lsrs	r3, r3, #20
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005186:	e054      	b.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d050      	beq.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005190:	f7fd fcac 	bl	8002aec <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	429a      	cmp	r2, r3
 800519e:	d902      	bls.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d13d      	bne.n	8005222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051be:	d111      	bne.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c8:	d004      	beq.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d2:	d107      	bne.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ec:	d10f      	bne.n	800520e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800520c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e017      	b.n	8005252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3b01      	subs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4013      	ands	r3, r2
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	429a      	cmp	r2, r3
 800524e:	d19b      	bne.n	8005188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000014 	.word	0x20000014

08005260 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005274:	d111      	bne.n	800529a <SPI_EndRxTransaction+0x3a>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527e:	d004      	beq.n	800528a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005288:	d107      	bne.n	800529a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a2:	d12a      	bne.n	80052fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ac:	d012      	beq.n	80052d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	@ 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff ff49 	bl	8005150 <SPI_WaitFlagStateUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02d      	beq.n	8005320 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c8:	f043 0220 	orr.w	r2, r3, #32
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e026      	b.n	8005322 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	2101      	movs	r1, #1
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff ff36 	bl	8005150 <SPI_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01a      	beq.n	8005320 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e013      	b.n	8005322 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	2101      	movs	r1, #1
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff23 	bl	8005150 <SPI_WaitFlagStateUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e000      	b.n	8005322 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2201      	movs	r2, #1
 8005340:	2102      	movs	r1, #2
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff04 	bl	8005150 <SPI_WaitFlagStateUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e032      	b.n	80053c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800535e:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <SPI_EndRxTxTransaction+0xa0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <SPI_EndRxTxTransaction+0xa4>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0d5b      	lsrs	r3, r3, #21
 800536a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800537c:	d112      	bne.n	80053a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	2180      	movs	r1, #128	@ 0x80
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fee1 	bl	8005150 <SPI_WaitFlagStateUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e00f      	b.n	80053c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b80      	cmp	r3, #128	@ 0x80
 80053bc:	d0f2      	beq.n	80053a4 <SPI_EndRxTxTransaction+0x78>
 80053be:	e000      	b.n	80053c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80053c0:	bf00      	nop
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000014 	.word	0x20000014
 80053d0:	165e9f81 	.word	0x165e9f81

080053d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80053d4:	b084      	sub	sp, #16
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	f107 001c 	add.w	r0, r7, #28
 80053e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80053ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80053ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80053ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80053f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80053f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80053fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80053fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800540e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	b004      	add	sp, #16
 8005428:	4770      	bx	lr

0800542a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2203      	movs	r2, #3
 8005472:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0303 	and.w	r3, r3, #3
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054bc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80054c2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80054c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80054d8:	f023 030f 	bic.w	r3, r3, #15
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	b2db      	uxtb	r3, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3314      	adds	r3, #20
 800551a:	461a      	mov	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4413      	add	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
}  
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005558:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800555e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005564:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800557c:	2300      	movs	r3, #0

}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005598:	2310      	movs	r3, #16
 800559a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800559c:	2340      	movs	r3, #64	@ 0x40
 800559e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055aa:	f107 0308 	add.w	r3, r7, #8
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ff74 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80055b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ba:	2110      	movs	r1, #16
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f9d7 	bl	8005970 <SDMMC_GetCmdResp1>
 80055c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c4:	69fb      	ldr	r3, [r7, #28]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b088      	sub	sp, #32
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80055dc:	2311      	movs	r3, #17
 80055de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055e0:	2340      	movs	r3, #64	@ 0x40
 80055e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff52 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	2111      	movs	r1, #17
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f9b5 	bl	8005970 <SDMMC_GetCmdResp1>
 8005606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005608:	69fb      	ldr	r3, [r7, #28]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b088      	sub	sp, #32
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005620:	2312      	movs	r3, #18
 8005622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005624:	2340      	movs	r3, #64	@ 0x40
 8005626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800562c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005632:	f107 0308 	add.w	r3, r7, #8
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff ff30 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800563e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005642:	2112      	movs	r1, #18
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f993 	bl	8005970 <SDMMC_GetCmdResp1>
 800564a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800564c:	69fb      	ldr	r3, [r7, #28]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b088      	sub	sp, #32
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005664:	2318      	movs	r3, #24
 8005666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff ff0e 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005686:	2118      	movs	r1, #24
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f971 	bl	8005970 <SDMMC_GetCmdResp1>
 800568e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005690:	69fb      	ldr	r3, [r7, #28]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b088      	sub	sp, #32
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80056a8:	2319      	movs	r3, #25
 80056aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056ac:	2340      	movs	r3, #64	@ 0x40
 80056ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff feec 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80056c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ca:	2119      	movs	r1, #25
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f94f 	bl	8005970 <SDMMC_GetCmdResp1>
 80056d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80056ec:	230c      	movs	r3, #12
 80056ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056f0:	2340      	movs	r3, #64	@ 0x40
 80056f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff feca 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800570a:	4a05      	ldr	r2, [pc, #20]	@ (8005720 <SDMMC_CmdStopTransfer+0x40>)
 800570c:	210c      	movs	r1, #12
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f92e 	bl	8005970 <SDMMC_GetCmdResp1>
 8005714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005716:	69fb      	ldr	r3, [r7, #28]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	05f5e100 	.word	0x05f5e100

08005724 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	@ 0x28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005734:	2307      	movs	r3, #7
 8005736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005738:	2340      	movs	r3, #64	@ 0x40
 800573a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005744:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	4619      	mov	r1, r3
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fea6 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005756:	2107      	movs	r1, #7
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f909 	bl	8005970 <SDMMC_GetCmdResp1>
 800575e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005762:	4618      	mov	r0, r3
 8005764:	3728      	adds	r7, #40	@ 0x28
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005788:	f107 0308 	add.w	r3, r7, #8
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fe85 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fb23 	bl	8005de0 <SDMMC_GetCmdError>
 800579a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800579c:	69fb      	ldr	r3, [r7, #28]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b088      	sub	sp, #32
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80057ae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80057b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80057b4:	2308      	movs	r3, #8
 80057b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057b8:	2340      	movs	r3, #64	@ 0x40
 80057ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe66 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fab6 	bl	8005d44 <SDMMC_GetCmdResp7>
 80057d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057da:	69fb      	ldr	r3, [r7, #28]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80057f2:	2337      	movs	r3, #55	@ 0x37
 80057f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057f6:	2340      	movs	r3, #64	@ 0x40
 80057f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fe47 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005814:	2137      	movs	r1, #55	@ 0x37
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f8aa 	bl	8005970 <SDMMC_GetCmdResp1>
 800581c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800581e:	69fb      	ldr	r3, [r7, #28]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005838:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800583c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800583e:	2329      	movs	r3, #41	@ 0x29
 8005840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005842:	2340      	movs	r3, #64	@ 0x40
 8005844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800584e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005850:	f107 0308 	add.w	r3, r7, #8
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fe21 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f9bd 	bl	8005bdc <SDMMC_GetCmdResp3>
 8005862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005864:	69fb      	ldr	r3, [r7, #28]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b088      	sub	sp, #32
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800587a:	2302      	movs	r3, #2
 800587c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800587e:	23c0      	movs	r3, #192	@ 0xc0
 8005880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800588a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fe03 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f957 	bl	8005b4c <SDMMC_GetCmdResp2>
 800589e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058a0:	69fb      	ldr	r3, [r7, #28]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b088      	sub	sp, #32
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058b8:	2309      	movs	r3, #9
 80058ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058bc:	23c0      	movs	r3, #192	@ 0xc0
 80058be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fde4 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f938 	bl	8005b4c <SDMMC_GetCmdResp2>
 80058dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058de:	69fb      	ldr	r3, [r7, #28]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058f6:	2303      	movs	r3, #3
 80058f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058fa:	2340      	movs	r3, #64	@ 0x40
 80058fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005906:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fdc5 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	2103      	movs	r1, #3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f99d 	bl	8005c58 <SDMMC_GetCmdResp6>
 800591e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005920:	69fb      	ldr	r3, [r7, #28]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b088      	sub	sp, #32
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005938:	230d      	movs	r3, #13
 800593a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800593c:	2340      	movs	r3, #64	@ 0x40
 800593e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005948:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fda4 	bl	800549e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595a:	210d      	movs	r1, #13
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f807 	bl	8005970 <SDMMC_GetCmdResp1>
 8005962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005964:	69fb      	ldr	r3, [r7, #28]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	460b      	mov	r3, r1
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800597e:	4b70      	ldr	r3, [pc, #448]	@ (8005b40 <SDMMC_GetCmdResp1+0x1d0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a70      	ldr	r2, [pc, #448]	@ (8005b44 <SDMMC_GetCmdResp1+0x1d4>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	0a5a      	lsrs	r2, r3, #9
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	1e5a      	subs	r2, r3, #1
 8005996:	61fa      	str	r2, [r7, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800599c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059a0:	e0c9      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0ef      	beq.n	8005992 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ea      	bne.n	8005992 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2204      	movs	r2, #4
 80059cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059ce:	2304      	movs	r3, #4
 80059d0:	e0b1      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0a6      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	22c5      	movs	r2, #197	@ 0xc5
 80059ec:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fd7f 	bl	80054f2 <SDIO_GetCommandResponse>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d001      	beq.n	8005a02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e099      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a02:	2100      	movs	r1, #0
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fd81 	bl	800550c <SDIO_GetResponse>
 8005a0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8005b48 <SDMMC_GetCmdResp1+0x1d8>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e08d      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	da02      	bge.n	8005a26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a24:	e087      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a30:	2340      	movs	r3, #64	@ 0x40
 8005a32:	e080      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a3e:	2380      	movs	r3, #128	@ 0x80
 8005a40:	e079      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a50:	e071      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a60:	e069      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a70:	e061      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a80:	e059      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a90:	e051      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005aa0:	e049      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ab0:	e041      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac0:	e039      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005acc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ad0:	e031      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005adc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005ae0:	e029      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005aec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005af0:	e021      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005afc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005b00:	e019      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005b10:	e011      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b20:	e009      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b2c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005b30:	e001      	b.n	8005b36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000014 	.word	0x20000014
 8005b44:	10624dd3 	.word	0x10624dd3
 8005b48:	fdffe008 	.word	0xfdffe008

08005b4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b54:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd4 <SDMMC_GetCmdResp2+0x88>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd8 <SDMMC_GetCmdResp2+0x8c>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	0a5b      	lsrs	r3, r3, #9
 8005b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1e5a      	subs	r2, r3, #1
 8005b6e:	60fa      	str	r2, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b78:	e026      	b.n	8005bc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0ef      	beq.n	8005b6a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ea      	bne.n	8005b6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e00e      	b.n	8005bc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e003      	b.n	8005bc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	22c5      	movs	r2, #197	@ 0xc5
 8005bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	20000014 	.word	0x20000014
 8005bd8:	10624dd3 	.word	0x10624dd3

08005bdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005be4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <SDMMC_GetCmdResp3+0x74>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c54 <SDMMC_GetCmdResp3+0x78>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	0a5b      	lsrs	r3, r3, #9
 8005bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1e5a      	subs	r2, r3, #1
 8005bfe:	60fa      	str	r2, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c08:	e01b      	b.n	8005c42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0ef      	beq.n	8005bfa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ea      	bne.n	8005bfa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d004      	beq.n	8005c3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2204      	movs	r2, #4
 8005c34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c36:	2304      	movs	r3, #4
 8005c38:	e003      	b.n	8005c42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	22c5      	movs	r2, #197	@ 0xc5
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000014 	.word	0x20000014
 8005c54:	10624dd3 	.word	0x10624dd3

08005c58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	460b      	mov	r3, r1
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c66:	4b35      	ldr	r3, [pc, #212]	@ (8005d3c <SDMMC_GetCmdResp6+0xe4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <SDMMC_GetCmdResp6+0xe8>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c86:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c8a:	e052      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c90:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0ef      	beq.n	8005c7c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ea      	bne.n	8005c7c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cb8:	2304      	movs	r3, #4
 8005cba:	e03a      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e02f      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fc0d 	bl	80054f2 <SDIO_GetCommandResponse>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d001      	beq.n	8005ce6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e025      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	22c5      	movs	r2, #197	@ 0xc5
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005cec:	2100      	movs	r1, #0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fc0c 	bl	800550c <SDIO_GetResponse>
 8005cf4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	0c1b      	lsrs	r3, r3, #16
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e011      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d1c:	e009      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d2c:	e001      	b.n	8005d32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000014 	.word	0x20000014
 8005d40:	10624dd3 	.word	0x10624dd3

08005d44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d4c:	4b22      	ldr	r3, [pc, #136]	@ (8005dd8 <SDMMC_GetCmdResp7+0x94>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a22      	ldr	r2, [pc, #136]	@ (8005ddc <SDMMC_GetCmdResp7+0x98>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	0a5b      	lsrs	r3, r3, #9
 8005d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	60fa      	str	r2, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d70:	e02c      	b.n	8005dcc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ef      	beq.n	8005d62 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ea      	bne.n	8005d62 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d9e:	2304      	movs	r3, #4
 8005da0:	e014      	b.n	8005dcc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e009      	b.n	8005dcc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2240      	movs	r2, #64	@ 0x40
 8005dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
  
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000014 	.word	0x20000014
 8005ddc:	10624dd3 	.word	0x10624dd3

08005de0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005de8:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <SDMMC_GetCmdError+0x50>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a11      	ldr	r2, [pc, #68]	@ (8005e34 <SDMMC_GetCmdError+0x54>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	0a5b      	lsrs	r3, r3, #9
 8005df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1e5a      	subs	r2, r3, #1
 8005e02:	60fa      	str	r2, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e0c:	e009      	b.n	8005e22 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f1      	beq.n	8005dfe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	22c5      	movs	r2, #197	@ 0xc5
 8005e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000014 	.word	0x20000014
 8005e34:	10624dd3 	.word	0x10624dd3

08005e38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e3c:	4904      	ldr	r1, [pc, #16]	@ (8005e50 <MX_FATFS_Init+0x18>)
 8005e3e:	4805      	ldr	r0, [pc, #20]	@ (8005e54 <MX_FATFS_Init+0x1c>)
 8005e40:	f002 ff02 	bl	8008c48 <FATFS_LinkDriver>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	4b03      	ldr	r3, [pc, #12]	@ (8005e58 <MX_FATFS_Init+0x20>)
 8005e4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e4c:	bf00      	nop
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000688 	.word	0x20000688
 8005e54:	0800a63c 	.word	0x0800a63c
 8005e58:	20000684 	.word	0x20000684

08005e5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e76:	f000 f86b 	bl	8005f50 <BSP_SD_IsDetected>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d001      	beq.n	8005e84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e005      	b.n	8005e90 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005e84:	4804      	ldr	r0, [pc, #16]	@ (8005e98 <BSP_SD_Init+0x2c>)
 8005e86:	f7fd fd3b 	bl	8003900 <HAL_SD_Init>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200000a8 	.word	0x200000a8

08005e9c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	4806      	ldr	r0, [pc, #24]	@ (8005ed4 <BSP_SD_ReadBlocks+0x38>)
 8005eba:	f7fd fdd1 	bl	8003a60 <HAL_SD_ReadBlocks>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200000a8 	.word	0x200000a8

08005ed8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	4806      	ldr	r0, [pc, #24]	@ (8005f10 <BSP_SD_WriteBlocks+0x38>)
 8005ef6:	f7fd ff99 	bl	8003e2c <HAL_SD_WriteBlocks>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200000a8 	.word	0x200000a8

08005f14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f18:	4805      	ldr	r0, [pc, #20]	@ (8005f30 <BSP_SD_GetCardState+0x1c>)
 8005f1a:	f7fe fae5 	bl	80044e8 <HAL_SD_GetCardState>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200000a8 	.word	0x200000a8

08005f34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4803      	ldr	r0, [pc, #12]	@ (8005f4c <BSP_SD_GetCardInfo+0x18>)
 8005f40:	f7fe faa6 	bl	8004490 <HAL_SD_GetCardInfo>
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	200000a8 	.word	0x200000a8

08005f50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f56:	2301      	movs	r3, #1
 8005f58:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005f5a:	f000 f80b 	bl	8005f74 <BSP_PlatformIsDetected>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005f64:	2300      	movs	r3, #0
 8005f66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	b2db      	uxtb	r3, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005f7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f82:	4806      	ldr	r0, [pc, #24]	@ (8005f9c <BSP_PlatformIsDetected+0x28>)
 8005f84:	f7fd f84c 	bl	8003020 <HAL_GPIO_ReadPin>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005f92:	79fb      	ldrb	r3, [r7, #7]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40020400 	.word	0x40020400

08005fa0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005faa:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <SD_CheckStatus+0x38>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005fb0:	f7ff ffb0 	bl	8005f14 <BSP_SD_GetCardState>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d107      	bne.n	8005fca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005fba:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <SD_CheckStatus+0x38>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	4b04      	ldr	r3, [pc, #16]	@ (8005fd8 <SD_CheckStatus+0x38>)
 8005fc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005fca:	4b03      	ldr	r3, [pc, #12]	@ (8005fd8 <SD_CheckStatus+0x38>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b2db      	uxtb	r3, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	2000001d 	.word	0x2000001d

08005fdc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <SD_initialize+0x38>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005fec:	f7ff ff3e 	bl	8005e6c <BSP_SD_Init>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff ffd1 	bl	8005fa0 <SD_CheckStatus>
 8005ffe:	4603      	mov	r3, r0
 8006000:	461a      	mov	r2, r3
 8006002:	4b04      	ldr	r3, [pc, #16]	@ (8006014 <SD_initialize+0x38>)
 8006004:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006006:	4b03      	ldr	r3, [pc, #12]	@ (8006014 <SD_initialize+0x38>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	2000001d 	.word	0x2000001d

08006018 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ffbb 	bl	8005fa0 <SD_CheckStatus>
 800602a:	4603      	mov	r3, r0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	68b8      	ldr	r0, [r7, #8]
 8006052:	f7ff ff23 	bl	8005e9c <BSP_SD_ReadBlocks>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d107      	bne.n	800606c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800605c:	bf00      	nop
 800605e:	f7ff ff59 	bl	8005f14 <BSP_SD_GetCardState>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1fa      	bne.n	800605e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	68b8      	ldr	r0, [r7, #8]
 8006094:	f7ff ff20 	bl	8005ed8 <BSP_SD_WriteBlocks>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800609e:	bf00      	nop
 80060a0:	f7ff ff38 	bl	8005f14 <BSP_SD_GetCardState>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1fa      	bne.n	80060a0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	@ 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	603a      	str	r2, [r7, #0]
 80060c2:	71fb      	strb	r3, [r7, #7]
 80060c4:	460b      	mov	r3, r1
 80060c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80060ce:	4b25      	ldr	r3, [pc, #148]	@ (8006164 <SD_ioctl+0xac>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <SD_ioctl+0x28>
 80060dc:	2303      	movs	r3, #3
 80060de:	e03c      	b.n	800615a <SD_ioctl+0xa2>

  switch (cmd)
 80060e0:	79bb      	ldrb	r3, [r7, #6]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d834      	bhi.n	8006150 <SD_ioctl+0x98>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <SD_ioctl+0x34>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	08006105 	.word	0x08006105
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006137 	.word	0x08006137
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006102:	e028      	b.n	8006156 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff13 	bl	8005f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800611a:	e01c      	b.n	8006156 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800611c:	f107 030c 	add.w	r3, r7, #12
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff07 	bl	8005f34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	b29a      	uxth	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006134:	e00f      	b.n	8006156 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006136:	f107 030c 	add.w	r3, r7, #12
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fefa 	bl	8005f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	0a5a      	lsrs	r2, r3, #9
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800614e:	e002      	b.n	8006156 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006150:	2304      	movs	r3, #4
 8006152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006156:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800615a:	4618      	mov	r0, r3
 800615c:	3730      	adds	r7, #48	@ 0x30
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	2000001d 	.word	0x2000001d

08006168 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	4a08      	ldr	r2, [pc, #32]	@ (8006198 <disk_status+0x30>)
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	79fa      	ldrb	r2, [r7, #7]
 8006180:	4905      	ldr	r1, [pc, #20]	@ (8006198 <disk_status+0x30>)
 8006182:	440a      	add	r2, r1
 8006184:	7a12      	ldrb	r2, [r2, #8]
 8006186:	4610      	mov	r0, r2
 8006188:	4798      	blx	r3
 800618a:	4603      	mov	r3, r0
 800618c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200006b4 	.word	0x200006b4

0800619c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	4a0e      	ldr	r2, [pc, #56]	@ (80061e8 <disk_initialize+0x4c>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d114      	bne.n	80061de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	4a0c      	ldr	r2, [pc, #48]	@ (80061e8 <disk_initialize+0x4c>)
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	79fa      	ldrb	r2, [r7, #7]
 80061c2:	4909      	ldr	r1, [pc, #36]	@ (80061e8 <disk_initialize+0x4c>)
 80061c4:	440a      	add	r2, r1
 80061c6:	7a12      	ldrb	r2, [r2, #8]
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	4a03      	ldr	r2, [pc, #12]	@ (80061e8 <disk_initialize+0x4c>)
 80061da:	2101      	movs	r1, #1
 80061dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200006b4 	.word	0x200006b4

080061ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006228 <disk_read+0x3c>)
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	689c      	ldr	r4, [r3, #8]
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	4a07      	ldr	r2, [pc, #28]	@ (8006228 <disk_read+0x3c>)
 800620c:	4413      	add	r3, r2
 800620e:	7a18      	ldrb	r0, [r3, #8]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	47a0      	blx	r4
 8006218:	4603      	mov	r3, r0
 800621a:	75fb      	strb	r3, [r7, #23]
  return res;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
}
 800621e:	4618      	mov	r0, r3
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}
 8006226:	bf00      	nop
 8006228:	200006b4 	.word	0x200006b4

0800622c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	4a0a      	ldr	r2, [pc, #40]	@ (8006268 <disk_write+0x3c>)
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	68dc      	ldr	r4, [r3, #12]
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	4a07      	ldr	r2, [pc, #28]	@ (8006268 <disk_write+0x3c>)
 800624c:	4413      	add	r3, r2
 800624e:	7a18      	ldrb	r0, [r3, #8]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	47a0      	blx	r4
 8006258:	4603      	mov	r3, r0
 800625a:	75fb      	strb	r3, [r7, #23]
  return res;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	bd90      	pop	{r4, r7, pc}
 8006266:	bf00      	nop
 8006268:	200006b4 	.word	0x200006b4

0800626c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	603a      	str	r2, [r7, #0]
 8006276:	71fb      	strb	r3, [r7, #7]
 8006278:	460b      	mov	r3, r1
 800627a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <disk_ioctl+0x38>)
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	79fa      	ldrb	r2, [r7, #7]
 800628a:	4906      	ldr	r1, [pc, #24]	@ (80062a4 <disk_ioctl+0x38>)
 800628c:	440a      	add	r2, r1
 800628e:	7a10      	ldrb	r0, [r2, #8]
 8006290:	79b9      	ldrb	r1, [r7, #6]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
  return res;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200006b4 	.word	0x200006b4

080062a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3301      	adds	r3, #1
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80062b8:	89fb      	ldrh	r3, [r7, #14]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	b21a      	sxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b21b      	sxth	r3, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	b21b      	sxth	r3, r3
 80062c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80062ca:	89fb      	ldrh	r3, [r7, #14]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3303      	adds	r3, #3
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	3202      	adds	r2, #2
 80062f0:	7812      	ldrb	r2, [r2, #0]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	3201      	adds	r2, #1
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	7812      	ldrb	r2, [r2, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006310:	68fb      	ldr	r3, [r7, #12]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	887a      	ldrh	r2, [r7, #2]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	887a      	ldrh	r2, [r7, #2]
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	1c53      	adds	r3, r2, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1c59      	adds	r1, r3, #1
 80063d0:	6179      	str	r1, [r7, #20]
 80063d2:	7812      	ldrb	r2, [r2, #0]
 80063d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3b01      	subs	r3, #1
 80063da:	607b      	str	r3, [r7, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f1      	bne.n	80063c6 <mem_cpy+0x1a>
	}
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80063ee:	b480      	push	{r7}
 80063f0:	b087      	sub	sp, #28
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	617a      	str	r2, [r7, #20]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3b01      	subs	r3, #1
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f3      	bne.n	80063fe <mem_set+0x10>
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	@ 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	61fa      	str	r2, [r7, #28]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	61ba      	str	r2, [r7, #24]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	1acb      	subs	r3, r1, r3
 8006450:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3b01      	subs	r3, #1
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <mem_cmp+0x40>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0eb      	beq.n	800643c <mem_cmp+0x18>

	return r;
 8006464:	697b      	ldr	r3, [r7, #20]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3724      	adds	r7, #36	@ 0x24
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800647c:	e002      	b.n	8006484 <chk_chr+0x12>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3301      	adds	r3, #1
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <chk_chr+0x26>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	4293      	cmp	r3, r2
 8006496:	d1f2      	bne.n	800647e <chk_chr+0xc>
	return *str;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	781b      	ldrb	r3, [r3, #0]
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064b2:	2300      	movs	r3, #0
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e029      	b.n	8006510 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80064bc:	4a27      	ldr	r2, [pc, #156]	@ (800655c <chk_lock+0xb4>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	4413      	add	r3, r2
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01d      	beq.n	8006506 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064ca:	4a24      	ldr	r2, [pc, #144]	@ (800655c <chk_lock+0xb4>)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	4413      	add	r3, r2
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d116      	bne.n	800650a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80064dc:	4a1f      	ldr	r2, [pc, #124]	@ (800655c <chk_lock+0xb4>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d10c      	bne.n	800650a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064f0:	4a1a      	ldr	r2, [pc, #104]	@ (800655c <chk_lock+0xb4>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	4413      	add	r3, r2
 80064f8:	3308      	adds	r3, #8
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006500:	429a      	cmp	r2, r3
 8006502:	d102      	bne.n	800650a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006504:	e007      	b.n	8006516 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006506:	2301      	movs	r3, #1
 8006508:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3301      	adds	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d9d2      	bls.n	80064bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d109      	bne.n	8006530 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <chk_lock+0x80>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d101      	bne.n	800652c <chk_lock+0x84>
 8006528:	2300      	movs	r3, #0
 800652a:	e010      	b.n	800654e <chk_lock+0xa6>
 800652c:	2312      	movs	r3, #18
 800652e:	e00e      	b.n	800654e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d108      	bne.n	8006548 <chk_lock+0xa0>
 8006536:	4a09      	ldr	r2, [pc, #36]	@ (800655c <chk_lock+0xb4>)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	4413      	add	r3, r2
 800653e:	330c      	adds	r3, #12
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006546:	d101      	bne.n	800654c <chk_lock+0xa4>
 8006548:	2310      	movs	r3, #16
 800654a:	e000      	b.n	800654e <chk_lock+0xa6>
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000694 	.word	0x20000694

08006560 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	e002      	b.n	8006572 <enq_lock+0x12>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3301      	adds	r3, #1
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d806      	bhi.n	8006586 <enq_lock+0x26>
 8006578:	4a09      	ldr	r2, [pc, #36]	@ (80065a0 <enq_lock+0x40>)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	4413      	add	r3, r2
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f2      	bne.n	800656c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b02      	cmp	r3, #2
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000694 	.word	0x20000694

080065a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e01f      	b.n	80065f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80065b4:	4a41      	ldr	r2, [pc, #260]	@ (80066bc <inc_lock+0x118>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	4413      	add	r3, r2
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d113      	bne.n	80065ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80065c6:	4a3d      	ldr	r2, [pc, #244]	@ (80066bc <inc_lock+0x118>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d109      	bne.n	80065ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80065da:	4a38      	ldr	r2, [pc, #224]	@ (80066bc <inc_lock+0x118>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	4413      	add	r3, r2
 80065e2:	3308      	adds	r3, #8
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d006      	beq.n	80065fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d9dc      	bls.n	80065b4 <inc_lock+0x10>
 80065fa:	e000      	b.n	80065fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80065fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d132      	bne.n	800666a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e002      	b.n	8006610 <inc_lock+0x6c>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d806      	bhi.n	8006624 <inc_lock+0x80>
 8006616:	4a29      	ldr	r2, [pc, #164]	@ (80066bc <inc_lock+0x118>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	4413      	add	r3, r2
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f2      	bne.n	800660a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d101      	bne.n	800662e <inc_lock+0x8a>
 800662a:	2300      	movs	r3, #0
 800662c:	e040      	b.n	80066b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4922      	ldr	r1, [pc, #136]	@ (80066bc <inc_lock+0x118>)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	440b      	add	r3, r1
 800663a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	491e      	ldr	r1, [pc, #120]	@ (80066bc <inc_lock+0x118>)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	440b      	add	r3, r1
 8006648:	3304      	adds	r3, #4
 800664a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	491a      	ldr	r1, [pc, #104]	@ (80066bc <inc_lock+0x118>)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	440b      	add	r3, r1
 8006658:	3308      	adds	r3, #8
 800665a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800665c:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <inc_lock+0x118>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	330c      	adds	r3, #12
 8006666:	2200      	movs	r2, #0
 8006668:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <inc_lock+0xe0>
 8006670:	4a12      	ldr	r2, [pc, #72]	@ (80066bc <inc_lock+0x118>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	4413      	add	r3, r2
 8006678:	330c      	adds	r3, #12
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <inc_lock+0xe0>
 8006680:	2300      	movs	r3, #0
 8006682:	e015      	b.n	80066b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d108      	bne.n	800669c <inc_lock+0xf8>
 800668a:	4a0c      	ldr	r2, [pc, #48]	@ (80066bc <inc_lock+0x118>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	330c      	adds	r3, #12
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	3301      	adds	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	e001      	b.n	80066a0 <inc_lock+0xfc>
 800669c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066a0:	4906      	ldr	r1, [pc, #24]	@ (80066bc <inc_lock+0x118>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	440b      	add	r3, r1
 80066a8:	330c      	adds	r3, #12
 80066aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3301      	adds	r3, #1
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20000694 	.word	0x20000694

080066c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d825      	bhi.n	8006720 <dec_lock+0x60>
		n = Files[i].ctr;
 80066d4:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <dec_lock+0x74>)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	4413      	add	r3, r2
 80066dc:	330c      	adds	r3, #12
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80066e2:	89fb      	ldrh	r3, [r7, #14]
 80066e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e8:	d101      	bne.n	80066ee <dec_lock+0x2e>
 80066ea:	2300      	movs	r3, #0
 80066ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80066ee:	89fb      	ldrh	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <dec_lock+0x3a>
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80066fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006734 <dec_lock+0x74>)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4413      	add	r3, r2
 8006702:	330c      	adds	r3, #12
 8006704:	89fa      	ldrh	r2, [r7, #14]
 8006706:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006708:	89fb      	ldrh	r3, [r7, #14]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <dec_lock+0x5a>
 800670e:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <dec_lock+0x74>)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	737b      	strb	r3, [r7, #13]
 800671e:	e001      	b.n	8006724 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006720:	2302      	movs	r3, #2
 8006722:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006724:	7b7b      	ldrb	r3, [r7, #13]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000694 	.word	0x20000694

08006738 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e010      	b.n	8006768 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006746:	4a0d      	ldr	r2, [pc, #52]	@ (800677c <clear_lock+0x44>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	4413      	add	r3, r2
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d105      	bne.n	8006762 <clear_lock+0x2a>
 8006756:	4a09      	ldr	r2, [pc, #36]	@ (800677c <clear_lock+0x44>)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	4413      	add	r3, r2
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d9eb      	bls.n	8006746 <clear_lock+0xe>
	}
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000694 	.word	0x20000694

08006780 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	78db      	ldrb	r3, [r3, #3]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d034      	beq.n	80067fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006798:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	7858      	ldrb	r0, [r3, #1]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067a4:	2301      	movs	r3, #1
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	f7ff fd40 	bl	800622c <disk_write>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
 80067b6:	e022      	b.n	80067fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d217      	bcs.n	80067fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	789b      	ldrb	r3, [r3, #2]
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	e010      	b.n	80067f8 <sync_window+0x78>
					wsect += fs->fsize;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	7858      	ldrb	r0, [r3, #1]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067ea:	2301      	movs	r3, #1
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	f7ff fd1d 	bl	800622c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d8eb      	bhi.n	80067d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d01b      	beq.n	8006858 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ffad 	bl	8006780 <sync_window>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d113      	bne.n	8006858 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7858      	ldrb	r0, [r3, #1]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800683a:	2301      	movs	r3, #1
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	f7ff fcd5 	bl	80061ec <disk_read>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff87 	bl	8006780 <sync_window>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d158      	bne.n	800692e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b03      	cmp	r3, #3
 8006882:	d148      	bne.n	8006916 <sync_fs+0xb2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	791b      	ldrb	r3, [r3, #4]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d144      	bne.n	8006916 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3330      	adds	r3, #48	@ 0x30
 8006890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fda9 	bl	80063ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3330      	adds	r3, #48	@ 0x30
 80068a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80068a4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fd38 	bl	800631e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3330      	adds	r3, #48	@ 0x30
 80068b2:	4921      	ldr	r1, [pc, #132]	@ (8006938 <sync_fs+0xd4>)
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fd4d 	bl	8006354 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3330      	adds	r3, #48	@ 0x30
 80068be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068c2:	491e      	ldr	r1, [pc, #120]	@ (800693c <sync_fs+0xd8>)
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fd45 	bl	8006354 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3330      	adds	r3, #48	@ 0x30
 80068ce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f7ff fd3b 	bl	8006354 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3330      	adds	r3, #48	@ 0x30
 80068e2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	4619      	mov	r1, r3
 80068ec:	4610      	mov	r0, r2
 80068ee:	f7ff fd31 	bl	8006354 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7858      	ldrb	r0, [r3, #1]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690a:	2301      	movs	r3, #1
 800690c:	f7ff fc8e 	bl	800622c <disk_write>
			fs->fsi_flag = 0;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2200      	movs	r2, #0
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fca4 	bl	800626c <disk_ioctl>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <sync_fs+0xca>
 800692a:	2301      	movs	r3, #1
 800692c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	41615252 	.word	0x41615252
 800693c:	61417272 	.word	0x61417272

08006940 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	3b02      	subs	r3, #2
 800694e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	3b02      	subs	r3, #2
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d301      	bcc.n	8006960 <clust2sect+0x20>
 800695c:	2300      	movs	r3, #0
 800695e:	e008      	b.n	8006972 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	895b      	ldrh	r3, [r3, #10]
 8006964:	461a      	mov	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	fb03 f202 	mul.w	r2, r3, r2
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006970:	4413      	add	r3, r2
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d904      	bls.n	800699e <get_fat+0x20>
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800699e:	2301      	movs	r3, #1
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	e08e      	b.n	8006ac2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d061      	beq.n	8006a76 <get_fat+0xf8>
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	dc7b      	bgt.n	8006aae <get_fat+0x130>
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d002      	beq.n	80069c0 <get_fat+0x42>
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d041      	beq.n	8006a42 <get_fat+0xc4>
 80069be:	e076      	b.n	8006aae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	0a5b      	lsrs	r3, r3, #9
 80069d6:	4413      	add	r3, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	f7ff ff14 	bl	8006808 <move_window>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d166      	bne.n	8006ab4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	60fa      	str	r2, [r7, #12]
 80069ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80069f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	6a1a      	ldr	r2, [r3, #32]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	0a5b      	lsrs	r3, r3, #9
 8006a02:	4413      	add	r3, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	6938      	ldr	r0, [r7, #16]
 8006a08:	f7ff fefe 	bl	8006808 <move_window>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d152      	bne.n	8006ab8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <get_fat+0xba>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	e002      	b.n	8006a3e <get_fat+0xc0>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3e:	617b      	str	r3, [r7, #20]
			break;
 8006a40:	e03f      	b.n	8006ac2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f7ff feda 	bl	8006808 <move_window>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d130      	bne.n	8006abc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006a68:	4413      	add	r3, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fc1c 	bl	80062a8 <ld_word>
 8006a70:	4603      	mov	r3, r0
 8006a72:	617b      	str	r3, [r7, #20]
			break;
 8006a74:	e025      	b.n	8006ac2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	09db      	lsrs	r3, r3, #7
 8006a7e:	4413      	add	r3, r2
 8006a80:	4619      	mov	r1, r3
 8006a82:	6938      	ldr	r0, [r7, #16]
 8006a84:	f7ff fec0 	bl	8006808 <move_window>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d118      	bne.n	8006ac0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006a9c:	4413      	add	r3, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fc1a 	bl	80062d8 <ld_dword>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006aaa:	617b      	str	r3, [r7, #20]
			break;
 8006aac:	e009      	b.n	8006ac2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e006      	b.n	8006ac2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab4:	bf00      	nop
 8006ab6:	e004      	b.n	8006ac2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ac0:	bf00      	nop
		}
	}

	return val;
 8006ac2:	697b      	ldr	r3, [r7, #20]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	f240 80d9 	bls.w	8006c96 <put_fat+0x1ca>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	f080 80d3 	bcs.w	8006c96 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	f000 8096 	beq.w	8006c26 <put_fat+0x15a>
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	f300 80cb 	bgt.w	8006c96 <put_fat+0x1ca>
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d002      	beq.n	8006b0a <put_fat+0x3e>
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d06e      	beq.n	8006be6 <put_fat+0x11a>
 8006b08:	e0c5      	b.n	8006c96 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4413      	add	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	0a5b      	lsrs	r3, r3, #9
 8006b20:	4413      	add	r3, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fe6f 	bl	8006808 <move_window>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b2e:	7ffb      	ldrb	r3, [r7, #31]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 80a9 	bne.w	8006c88 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	61b9      	str	r1, [r7, #24]
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	4413      	add	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00d      	beq.n	8006b70 <put_fat+0xa4>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b25b      	sxtb	r3, r3
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	b25a      	sxtb	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	b25b      	sxtb	r3, r3
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e001      	b.n	8006b74 <put_fat+0xa8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	0a5b      	lsrs	r3, r3, #9
 8006b86:	4413      	add	r3, r2
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fe3c 	bl	8006808 <move_window>
 8006b90:	4603      	mov	r3, r0
 8006b92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b94:	7ffb      	ldrb	r3, [r7, #31]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d178      	bne.n	8006c8c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	4413      	add	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <put_fat+0xf0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e00e      	b.n	8006bda <put_fat+0x10e>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	f023 030f 	bic.w	r3, r3, #15
 8006bc6:	b25a      	sxtb	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b25b      	sxtb	r3, r3
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	70da      	strb	r2, [r3, #3]
			break;
 8006be4:	e057      	b.n	8006c96 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1a      	ldr	r2, [r3, #32]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	0a1b      	lsrs	r3, r3, #8
 8006bee:	4413      	add	r3, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fe08 	bl	8006808 <move_window>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bfc:	7ffb      	ldrb	r3, [r7, #31]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d146      	bne.n	8006c90 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006c10:	4413      	add	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	b292      	uxth	r2, r2
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fb80 	bl	800631e <st_word>
			fs->wflag = 1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	70da      	strb	r2, [r3, #3]
			break;
 8006c24:	e037      	b.n	8006c96 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	09db      	lsrs	r3, r3, #7
 8006c2e:	4413      	add	r3, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff fde8 	bl	8006808 <move_window>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c3c:	7ffb      	ldrb	r3, [r7, #31]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d128      	bne.n	8006c94 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c56:	4413      	add	r3, r2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fb3d 	bl	80062d8 <ld_dword>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c64:	4323      	orrs	r3, r4
 8006c66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c76:	4413      	add	r3, r2
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fb6a 	bl	8006354 <st_dword>
			fs->wflag = 1;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	70da      	strb	r2, [r3, #3]
			break;
 8006c86:	e006      	b.n	8006c96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c88:	bf00      	nop
 8006c8a:	e004      	b.n	8006c96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c8c:	bf00      	nop
 8006c8e:	e002      	b.n	8006c96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c94:	bf00      	nop
		}
	}
	return res;
 8006c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3724      	adds	r7, #36	@ 0x24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd90      	pop	{r4, r7, pc}

08006ca0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d904      	bls.n	8006cc6 <remove_chain+0x26>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d301      	bcc.n	8006cca <remove_chain+0x2a>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e04b      	b.n	8006d62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00c      	beq.n	8006cea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	69b8      	ldr	r0, [r7, #24]
 8006cd8:	f7ff fef8 	bl	8006acc <put_fat>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ce0:	7ffb      	ldrb	r3, [r7, #31]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <remove_chain+0x4a>
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	e03b      	b.n	8006d62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fe46 	bl	800697e <get_fat>
 8006cf2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d031      	beq.n	8006d5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <remove_chain+0x64>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e02e      	b.n	8006d62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d101      	bne.n	8006d10 <remove_chain+0x70>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e028      	b.n	8006d62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d10:	2200      	movs	r2, #0
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	69b8      	ldr	r0, [r7, #24]
 8006d16:	f7ff fed9 	bl	8006acc <put_fat>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <remove_chain+0x88>
 8006d24:	7ffb      	ldrb	r3, [r7, #31]
 8006d26:	e01c      	b.n	8006d62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	3b02      	subs	r3, #2
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d20b      	bcs.n	8006d4e <remove_chain+0xae>
			fs->free_clst++;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	791b      	ldrb	r3, [r3, #4]
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d3c6      	bcc.n	8006cea <remove_chain+0x4a>
 8006d5c:	e000      	b.n	8006d60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10d      	bne.n	8006d9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <create_chain+0x2c>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d31b      	bcc.n	8006dce <create_chain+0x64>
 8006d96:	2301      	movs	r3, #1
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e018      	b.n	8006dce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fded 	bl	800697e <get_fat>
 8006da4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d801      	bhi.n	8006db0 <create_chain+0x46>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e070      	b.n	8006e92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d101      	bne.n	8006dbc <create_chain+0x52>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	e06a      	b.n	8006e92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d201      	bcs.n	8006dca <create_chain+0x60>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	e063      	b.n	8006e92 <create_chain+0x128>
		scl = clst;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d307      	bcc.n	8006df2 <create_chain+0x88>
				ncl = 2;
 8006de2:	2302      	movs	r3, #2
 8006de4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d901      	bls.n	8006df2 <create_chain+0x88>
 8006dee:	2300      	movs	r3, #0
 8006df0:	e04f      	b.n	8006e92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006df2:	69f9      	ldr	r1, [r7, #28]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff fdc2 	bl	800697e <get_fat>
 8006dfa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00e      	beq.n	8006e20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d003      	beq.n	8006e10 <create_chain+0xa6>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d101      	bne.n	8006e14 <create_chain+0xaa>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	e03e      	b.n	8006e92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d1da      	bne.n	8006dd2 <create_chain+0x68>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e038      	b.n	8006e92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006e20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295
 8006e26:	69f9      	ldr	r1, [r7, #28]
 8006e28:	6938      	ldr	r0, [r7, #16]
 8006e2a:	f7ff fe4f 	bl	8006acc <put_fat>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d109      	bne.n	8006e4c <create_chain+0xe2>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d006      	beq.n	8006e4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6938      	ldr	r0, [r7, #16]
 8006e44:	f7ff fe42 	bl	8006acc <put_fat>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d116      	bne.n	8006e80 <create_chain+0x116>
		fs->last_clst = ncl;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	3b02      	subs	r3, #2
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d804      	bhi.n	8006e70 <create_chain+0x106>
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	791b      	ldrb	r3, [r3, #4]
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	711a      	strb	r2, [r3, #4]
 8006e7e:	e007      	b.n	8006e90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d102      	bne.n	8006e8c <create_chain+0x122>
 8006e86:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8a:	e000      	b.n	8006e8e <create_chain+0x124>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006e90:	69fb      	ldr	r3, [r7, #28]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eae:	3304      	adds	r3, #4
 8006eb0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	0a5b      	lsrs	r3, r3, #9
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	8952      	ldrh	r2, [r2, #10]
 8006eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	613a      	str	r2, [r7, #16]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <clmt_clust+0x3a>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e010      	b.n	8006ef6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d307      	bcc.n	8006eec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006eea:	e7e9      	b.n	8006ec0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006eec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f18:	d204      	bcs.n	8006f24 <dir_sdi+0x22>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f24:	2302      	movs	r3, #2
 8006f26:	e063      	b.n	8006ff0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <dir_sdi+0x46>
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d902      	bls.n	8006f48 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10c      	bne.n	8006f68 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	8912      	ldrh	r2, [r2, #8]
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d301      	bcc.n	8006f5e <dir_sdi+0x5c>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e048      	b.n	8006ff0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	61da      	str	r2, [r3, #28]
 8006f66:	e029      	b.n	8006fbc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	895b      	ldrh	r3, [r3, #10]
 8006f6c:	025b      	lsls	r3, r3, #9
 8006f6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f70:	e019      	b.n	8006fa6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6979      	ldr	r1, [r7, #20]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff fd01 	bl	800697e <get_fat>
 8006f7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d101      	bne.n	8006f8a <dir_sdi+0x88>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e032      	b.n	8006ff0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d904      	bls.n	8006f9a <dir_sdi+0x98>
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d301      	bcc.n	8006f9e <dir_sdi+0x9c>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e028      	b.n	8006ff0 <dir_sdi+0xee>
			ofs -= csz;
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d2e1      	bcs.n	8006f72 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006fae:	6979      	ldr	r1, [r7, #20]
 8006fb0:	6938      	ldr	r0, [r7, #16]
 8006fb2:	f7ff fcc5 	bl	8006940 <clust2sect>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <dir_sdi+0xcc>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e010      	b.n	8006ff0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	441a      	add	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe8:	441a      	add	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	3320      	adds	r3, #32
 800700e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <dir_next+0x28>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800701e:	d301      	bcc.n	8007024 <dir_next+0x2c>
 8007020:	2304      	movs	r3, #4
 8007022:	e0aa      	b.n	800717a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702a:	2b00      	cmp	r3, #0
 800702c:	f040 8098 	bne.w	8007160 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	8912      	ldrh	r2, [r2, #8]
 800704a:	4293      	cmp	r3, r2
 800704c:	f0c0 8088 	bcc.w	8007160 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	61da      	str	r2, [r3, #28]
 8007056:	2304      	movs	r3, #4
 8007058:	e08f      	b.n	800717a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	0a5b      	lsrs	r3, r3, #9
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	8952      	ldrh	r2, [r2, #10]
 8007062:	3a01      	subs	r2, #1
 8007064:	4013      	ands	r3, r2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d17a      	bne.n	8007160 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7ff fc83 	bl	800697e <get_fat>
 8007078:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d801      	bhi.n	8007084 <dir_next+0x8c>
 8007080:	2302      	movs	r3, #2
 8007082:	e07a      	b.n	800717a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d101      	bne.n	8007090 <dir_next+0x98>
 800708c:	2301      	movs	r3, #1
 800708e:	e074      	b.n	800717a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	429a      	cmp	r2, r3
 8007098:	d358      	bcc.n	800714c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	61da      	str	r2, [r3, #28]
 80070a6:	2304      	movs	r3, #4
 80070a8:	e067      	b.n	800717a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f7ff fe59 	bl	8006d6a <create_chain>
 80070b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <dir_next+0xcc>
 80070c0:	2307      	movs	r3, #7
 80070c2:	e05a      	b.n	800717a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <dir_next+0xd6>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e055      	b.n	800717a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d101      	bne.n	80070da <dir_next+0xe2>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e04f      	b.n	800717a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff fb50 	bl	8006780 <sync_window>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <dir_next+0xf2>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e047      	b.n	800717a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3330      	adds	r3, #48	@ 0x30
 80070ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff f97a 	bl	80063ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff fc1d 	bl	8006940 <clust2sect>
 8007106:	4602      	mov	r2, r0
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800710c:	e012      	b.n	8007134 <dir_next+0x13c>
						fs->wflag = 1;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fb33 	bl	8006780 <sync_window>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <dir_next+0x12c>
 8007120:	2301      	movs	r3, #1
 8007122:	e02a      	b.n	800717a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	3301      	adds	r3, #1
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	895b      	ldrh	r3, [r3, #10]
 8007138:	461a      	mov	r2, r3
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4293      	cmp	r3, r2
 800713e:	d3e6      	bcc.n	800710e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007152:	6979      	ldr	r1, [r7, #20]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fbf3 	bl	8006940 <clust2sect>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	441a      	add	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b086      	sub	sp, #24
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007192:	2100      	movs	r1, #0
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff feb4 	bl	8006f02 <dir_sdi>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d12b      	bne.n	80071fc <dir_alloc+0x7a>
		n = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4619      	mov	r1, r3
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fb2a 	bl	8006808 <move_window>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11d      	bne.n	80071fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2be5      	cmp	r3, #229	@ 0xe5
 80071c6:	d004      	beq.n	80071d2 <dir_alloc+0x50>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d107      	bne.n	80071e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	3301      	adds	r3, #1
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d102      	bne.n	80071e6 <dir_alloc+0x64>
 80071e0:	e00c      	b.n	80071fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80071e2:	2300      	movs	r3, #0
 80071e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80071e6:	2101      	movs	r1, #1
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff05 	bl	8006ff8 <dir_next>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0d7      	beq.n	80071a8 <dir_alloc+0x26>
 80071f8:	e000      	b.n	80071fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80071fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d101      	bne.n	8007206 <dir_alloc+0x84>
 8007202:	2307      	movs	r3, #7
 8007204:	75fb      	strb	r3, [r7, #23]
	return res;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	331a      	adds	r3, #26
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff f842 	bl	80062a8 <ld_word>
 8007224:	4603      	mov	r3, r0
 8007226:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d109      	bne.n	8007244 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	3314      	adds	r3, #20
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff f837 	bl	80062a8 <ld_word>
 800723a:	4603      	mov	r3, r0
 800723c:	041b      	lsls	r3, r3, #16
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007244:	68fb      	ldr	r3, [r7, #12]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	331a      	adds	r3, #26
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	b292      	uxth	r2, r2
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff f85a 	bl	800631e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b03      	cmp	r3, #3
 8007270:	d109      	bne.n	8007286 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f103 0214 	add.w	r2, r3, #20
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	b29b      	uxth	r3, r3
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f7ff f84c 	bl	800631e <st_word>
	}
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007298:	2304      	movs	r3, #4
 800729a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80072a2:	e03c      	b.n	800731e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6938      	ldr	r0, [r7, #16]
 80072ac:	f7ff faac 	bl	8006808 <move_window>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d136      	bne.n	8007328 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80072c8:	2304      	movs	r3, #4
 80072ca:	75fb      	strb	r3, [r7, #23]
 80072cc:	e031      	b.n	8007332 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	330b      	adds	r3, #11
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072da:	73bb      	strb	r3, [r7, #14]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7bba      	ldrb	r2, [r7, #14]
 80072e0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	2be5      	cmp	r3, #229	@ 0xe5
 80072e6:	d011      	beq.n	800730c <dir_read+0x7e>
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ec:	d00e      	beq.n	800730c <dir_read+0x7e>
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b0f      	cmp	r3, #15
 80072f2:	d00b      	beq.n	800730c <dir_read+0x7e>
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	f023 0320 	bic.w	r3, r3, #32
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	bf0c      	ite	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	2300      	movne	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800730c:	2100      	movs	r1, #0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fe72 	bl	8006ff8 <dir_next>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <dir_read+0xa2>
	while (dp->sect) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1be      	bne.n	80072a4 <dir_read+0x16>
 8007326:	e004      	b.n	8007332 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007328:	bf00      	nop
 800732a:	e002      	b.n	8007332 <dir_read+0xa4>
				break;
 800732c:	bf00      	nop
 800732e:	e000      	b.n	8007332 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007330:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <dir_read+0xb0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	61da      	str	r2, [r3, #28]
	return res;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007356:	2100      	movs	r1, #0
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff fdd2 	bl	8006f02 <dir_sdi>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <dir_find+0x24>
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	e03e      	b.n	80073ea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4619      	mov	r1, r3
 8007372:	6938      	ldr	r0, [r7, #16]
 8007374:	f7ff fa48 	bl	8006808 <move_window>
 8007378:	4603      	mov	r3, r0
 800737a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d12f      	bne.n	80073e2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <dir_find+0x4e>
 8007390:	2304      	movs	r3, #4
 8007392:	75fb      	strb	r3, [r7, #23]
 8007394:	e028      	b.n	80073e8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	330b      	adds	r3, #11
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	330b      	adds	r3, #11
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <dir_find+0x86>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a18      	ldr	r0, [r3, #32]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3324      	adds	r3, #36	@ 0x24
 80073c0:	220b      	movs	r2, #11
 80073c2:	4619      	mov	r1, r3
 80073c4:	f7ff f82e 	bl	8006424 <mem_cmp>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80073ce:	2100      	movs	r1, #0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fe11 	bl	8006ff8 <dir_next>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0c5      	beq.n	800736c <dir_find+0x24>
 80073e0:	e002      	b.n	80073e8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80073e6:	bf00      	nop

	return res;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007400:	2101      	movs	r1, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff febd 	bl	8007182 <dir_alloc>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d11c      	bne.n	800744c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	4619      	mov	r1, r3
 8007418:	68b8      	ldr	r0, [r7, #8]
 800741a:	f7ff f9f5 	bl	8006808 <move_window>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d111      	bne.n	800744c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	2220      	movs	r2, #32
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe ffdc 	bl	80063ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a18      	ldr	r0, [r3, #32]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3324      	adds	r3, #36	@ 0x24
 800743e:	220b      	movs	r2, #11
 8007440:	4619      	mov	r1, r3
 8007442:	f7fe ffb3 	bl	80063ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2201      	movs	r2, #1
 800744a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	4619      	mov	r1, r3
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff f9cc 	bl	8006808 <move_window>
 8007470:	4603      	mov	r3, r0
 8007472:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	22e5      	movs	r2, #229	@ 0xe5
 8007480:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8007488:	7afb      	ldrb	r3, [r7, #11]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3324      	adds	r3, #36	@ 0x24
 80074a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80074aa:	220b      	movs	r2, #11
 80074ac:	2120      	movs	r1, #32
 80074ae:	68b8      	ldr	r0, [r7, #8]
 80074b0:	f7fe ff9d 	bl	80063ee <mem_set>
	si = i = 0; ni = 8;
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	2308      	movs	r3, #8
 80074be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	61fa      	str	r2, [r7, #28]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80074ce:	7efb      	ldrb	r3, [r7, #27]
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d94e      	bls.n	8007572 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80074d4:	7efb      	ldrb	r3, [r7, #27]
 80074d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80074d8:	d006      	beq.n	80074e8 <create_name+0x54>
 80074da:	7efb      	ldrb	r3, [r7, #27]
 80074dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80074de:	d110      	bne.n	8007502 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80074e0:	e002      	b.n	80074e8 <create_name+0x54>
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80074f2:	d0f6      	beq.n	80074e2 <create_name+0x4e>
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80074fe:	d0f0      	beq.n	80074e2 <create_name+0x4e>
			break;
 8007500:	e038      	b.n	8007574 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007502:	7efb      	ldrb	r3, [r7, #27]
 8007504:	2b2e      	cmp	r3, #46	@ 0x2e
 8007506:	d003      	beq.n	8007510 <create_name+0x7c>
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	429a      	cmp	r2, r3
 800750e:	d30c      	bcc.n	800752a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2b0b      	cmp	r3, #11
 8007514:	d002      	beq.n	800751c <create_name+0x88>
 8007516:	7efb      	ldrb	r3, [r7, #27]
 8007518:	2b2e      	cmp	r3, #46	@ 0x2e
 800751a:	d001      	beq.n	8007520 <create_name+0x8c>
 800751c:	2306      	movs	r3, #6
 800751e:	e044      	b.n	80075aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007520:	2308      	movs	r3, #8
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	230b      	movs	r3, #11
 8007526:	617b      	str	r3, [r7, #20]
			continue;
 8007528:	e022      	b.n	8007570 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800752a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da04      	bge.n	800753c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007532:	7efb      	ldrb	r3, [r7, #27]
 8007534:	3b80      	subs	r3, #128	@ 0x80
 8007536:	4a1f      	ldr	r2, [pc, #124]	@ (80075b4 <create_name+0x120>)
 8007538:	5cd3      	ldrb	r3, [r2, r3]
 800753a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800753c:	7efb      	ldrb	r3, [r7, #27]
 800753e:	4619      	mov	r1, r3
 8007540:	481d      	ldr	r0, [pc, #116]	@ (80075b8 <create_name+0x124>)
 8007542:	f7fe ff96 	bl	8006472 <chk_chr>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <create_name+0xbc>
 800754c:	2306      	movs	r3, #6
 800754e:	e02c      	b.n	80075aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007550:	7efb      	ldrb	r3, [r7, #27]
 8007552:	2b60      	cmp	r3, #96	@ 0x60
 8007554:	d905      	bls.n	8007562 <create_name+0xce>
 8007556:	7efb      	ldrb	r3, [r7, #27]
 8007558:	2b7a      	cmp	r3, #122	@ 0x7a
 800755a:	d802      	bhi.n	8007562 <create_name+0xce>
 800755c:	7efb      	ldrb	r3, [r7, #27]
 800755e:	3b20      	subs	r3, #32
 8007560:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	613a      	str	r2, [r7, #16]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	4413      	add	r3, r2
 800756c:	7efa      	ldrb	r2, [r7, #27]
 800756e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007570:	e7a6      	b.n	80074c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007572:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	441a      	add	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <create_name+0xf4>
 8007584:	2306      	movs	r3, #6
 8007586:	e010      	b.n	80075aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2be5      	cmp	r3, #229	@ 0xe5
 800758e:	d102      	bne.n	8007596 <create_name+0x102>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2205      	movs	r2, #5
 8007594:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007596:	7efb      	ldrb	r3, [r7, #27]
 8007598:	2b20      	cmp	r3, #32
 800759a:	d801      	bhi.n	80075a0 <create_name+0x10c>
 800759c:	2204      	movs	r2, #4
 800759e:	e000      	b.n	80075a2 <create_name+0x10e>
 80075a0:	2200      	movs	r2, #0
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	330b      	adds	r3, #11
 80075a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80075a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	0800a650 	.word	0x0800a650
 80075b8:	0800a5dc 	.word	0x0800a5dc

080075bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80075d0:	e002      	b.n	80075d8 <follow_path+0x1c>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80075de:	d0f8      	beq.n	80075d2 <follow_path+0x16>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80075e6:	d0f4      	beq.n	80075d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2200      	movs	r2, #0
 80075ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2b1f      	cmp	r3, #31
 80075f4:	d80a      	bhi.n	800760c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2280      	movs	r2, #128	@ 0x80
 80075fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff fc7e 	bl	8006f02 <dir_sdi>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]
 800760a:	e043      	b.n	8007694 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800760c:	463b      	mov	r3, r7
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ff3f 	bl	8007494 <create_name>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d134      	bne.n	800768a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fe91 	bl	8007348 <dir_find>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007630:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b04      	cmp	r3, #4
 800763c:	d127      	bne.n	800768e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800763e:	7afb      	ldrb	r3, [r7, #11]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d122      	bne.n	800768e <follow_path+0xd2>
 8007648:	2305      	movs	r3, #5
 800764a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800764c:	e01f      	b.n	800768e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11c      	bne.n	8007692 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	799b      	ldrb	r3, [r3, #6]
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007664:	2305      	movs	r3, #5
 8007666:	75fb      	strb	r3, [r7, #23]
 8007668:	e014      	b.n	8007694 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	4413      	add	r3, r2
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fdc7 	bl	8007210 <ld_clust>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007688:	e7c0      	b.n	800760c <follow_path+0x50>
			if (res != FR_OK) break;
 800768a:	bf00      	nop
 800768c:	e002      	b.n	8007694 <follow_path+0xd8>
				break;
 800768e:	bf00      	nop
 8007690:	e000      	b.n	8007694 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007692:	bf00      	nop
			}
		}
	}

	return res;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295
 80076aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d031      	beq.n	8007718 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e002      	b.n	80076c2 <get_ldnumber+0x24>
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	3301      	adds	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d903      	bls.n	80076d2 <get_ldnumber+0x34>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80076d0:	d1f4      	bne.n	80076bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80076d8:	d11c      	bne.n	8007714 <get_ldnumber+0x76>
			tp = *path;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	60fa      	str	r2, [r7, #12]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	3b30      	subs	r3, #48	@ 0x30
 80076ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d80e      	bhi.n	8007710 <get_ldnumber+0x72>
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d10a      	bne.n	8007710 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d107      	bne.n	8007710 <get_ldnumber+0x72>
					vol = (int)i;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	3301      	adds	r3, #1
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	e002      	b.n	800771a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007714:	2300      	movs	r3, #0
 8007716:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007718:	693b      	ldr	r3, [r7, #16]
}
 800771a:	4618      	mov	r0, r3
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	70da      	strb	r2, [r3, #3]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f04f 32ff 	mov.w	r2, #4294967295
 800773e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff f860 	bl	8006808 <move_window>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <check_fs+0x2a>
 800774e:	2304      	movs	r3, #4
 8007750:	e038      	b.n	80077c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3330      	adds	r3, #48	@ 0x30
 8007756:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fda4 	bl	80062a8 <ld_word>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <check_fs+0x48>
 800776c:	2303      	movs	r3, #3
 800776e:	e029      	b.n	80077c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007776:	2be9      	cmp	r3, #233	@ 0xe9
 8007778:	d009      	beq.n	800778e <check_fs+0x66>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007780:	2beb      	cmp	r3, #235	@ 0xeb
 8007782:	d11e      	bne.n	80077c2 <check_fs+0x9a>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800778a:	2b90      	cmp	r3, #144	@ 0x90
 800778c:	d119      	bne.n	80077c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3330      	adds	r3, #48	@ 0x30
 8007792:	3336      	adds	r3, #54	@ 0x36
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe fd9f 	bl	80062d8 <ld_dword>
 800779a:	4603      	mov	r3, r0
 800779c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80077a0:	4a0a      	ldr	r2, [pc, #40]	@ (80077cc <check_fs+0xa4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d101      	bne.n	80077aa <check_fs+0x82>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e00c      	b.n	80077c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3330      	adds	r3, #48	@ 0x30
 80077ae:	3352      	adds	r3, #82	@ 0x52
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fd91 	bl	80062d8 <ld_dword>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4a05      	ldr	r2, [pc, #20]	@ (80077d0 <check_fs+0xa8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d101      	bne.n	80077c2 <check_fs+0x9a>
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80077c2:	2302      	movs	r3, #2
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	00544146 	.word	0x00544146
 80077d0:	33544146 	.word	0x33544146

080077d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b096      	sub	sp, #88	@ 0x58
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff ff58 	bl	800769e <get_ldnumber>
 80077ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80077f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da01      	bge.n	80077fa <find_volume+0x26>
 80077f6:	230b      	movs	r3, #11
 80077f8:	e22d      	b.n	8007c56 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80077fa:	4aa1      	ldr	r2, [pc, #644]	@ (8007a80 <find_volume+0x2ac>)
 80077fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <find_volume+0x3a>
 800780a:	230c      	movs	r3, #12
 800780c:	e223      	b.n	8007c56 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007812:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01a      	beq.n	800785a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe fc9d 	bl	8006168 <disk_status>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <find_volume+0x82>
 8007846:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007852:	230a      	movs	r3, #10
 8007854:	e1ff      	b.n	8007c56 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007856:	2300      	movs	r3, #0
 8007858:	e1fd      	b.n	8007c56 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007862:	b2da      	uxtb	r2, r3
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fc95 	bl	800619c <disk_initialize>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007878:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007884:	2303      	movs	r3, #3
 8007886:	e1e6      	b.n	8007c56 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <find_volume+0xca>
 800788e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800789a:	230a      	movs	r3, #10
 800789c:	e1db      	b.n	8007c56 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80078a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078a6:	f7ff ff3f 	bl	8007728 <check_fs>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80078b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d149      	bne.n	800794c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078b8:	2300      	movs	r3, #0
 80078ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80078bc:	e01e      	b.n	80078fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80078cc:	4413      	add	r3, r2
 80078ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	3304      	adds	r3, #4
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d006      	beq.n	80078e8 <find_volume+0x114>
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	3308      	adds	r3, #8
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fcfa 	bl	80062d8 <ld_dword>
 80078e4:	4602      	mov	r2, r0
 80078e6:	e000      	b.n	80078ea <find_volume+0x116>
 80078e8:	2200      	movs	r2, #0
 80078ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	3358      	adds	r3, #88	@ 0x58
 80078f0:	443b      	add	r3, r7
 80078f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f8:	3301      	adds	r3, #1
 80078fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80078fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d9dd      	bls.n	80078be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007902:	2300      	movs	r3, #0
 8007904:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <find_volume+0x13e>
 800790c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800790e:	3b01      	subs	r3, #1
 8007910:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	3358      	adds	r3, #88	@ 0x58
 8007918:	443b      	add	r3, r7
 800791a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800791e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <find_volume+0x15e>
 8007926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007928:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800792a:	f7ff fefd 	bl	8007728 <check_fs>
 800792e:	4603      	mov	r3, r0
 8007930:	e000      	b.n	8007934 <find_volume+0x160>
 8007932:	2303      	movs	r3, #3
 8007934:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007938:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800793c:	2b01      	cmp	r3, #1
 800793e:	d905      	bls.n	800794c <find_volume+0x178>
 8007940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007942:	3301      	adds	r3, #1
 8007944:	643b      	str	r3, [r7, #64]	@ 0x40
 8007946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007948:	2b03      	cmp	r3, #3
 800794a:	d9e2      	bls.n	8007912 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800794c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007950:	2b04      	cmp	r3, #4
 8007952:	d101      	bne.n	8007958 <find_volume+0x184>
 8007954:	2301      	movs	r3, #1
 8007956:	e17e      	b.n	8007c56 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007958:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800795c:	2b01      	cmp	r3, #1
 800795e:	d901      	bls.n	8007964 <find_volume+0x190>
 8007960:	230d      	movs	r3, #13
 8007962:	e178      	b.n	8007c56 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	3330      	adds	r3, #48	@ 0x30
 8007968:	330b      	adds	r3, #11
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fc9c 	bl	80062a8 <ld_word>
 8007970:	4603      	mov	r3, r0
 8007972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007976:	d001      	beq.n	800797c <find_volume+0x1a8>
 8007978:	230d      	movs	r3, #13
 800797a:	e16c      	b.n	8007c56 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	3330      	adds	r3, #48	@ 0x30
 8007980:	3316      	adds	r3, #22
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fc90 	bl	80062a8 <ld_word>
 8007988:	4603      	mov	r3, r0
 800798a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800798c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <find_volume+0x1cc>
 8007992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007994:	3330      	adds	r3, #48	@ 0x30
 8007996:	3324      	adds	r3, #36	@ 0x24
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fc9d 	bl	80062d8 <ld_dword>
 800799e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80079a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079a4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	789b      	ldrb	r3, [r3, #2]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d005      	beq.n	80079c4 <find_volume+0x1f0>
 80079b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ba:	789b      	ldrb	r3, [r3, #2]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d001      	beq.n	80079c4 <find_volume+0x1f0>
 80079c0:	230d      	movs	r3, #13
 80079c2:	e148      	b.n	8007c56 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	789b      	ldrb	r3, [r3, #2]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
 80079d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d8:	461a      	mov	r2, r3
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e0:	895b      	ldrh	r3, [r3, #10]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d008      	beq.n	80079f8 <find_volume+0x224>
 80079e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e8:	895b      	ldrh	r3, [r3, #10]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	895b      	ldrh	r3, [r3, #10]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <find_volume+0x228>
 80079f8:	230d      	movs	r3, #13
 80079fa:	e12c      	b.n	8007c56 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	3330      	adds	r3, #48	@ 0x30
 8007a00:	3311      	adds	r3, #17
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fc50 	bl	80062a8 <ld_word>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a12:	891b      	ldrh	r3, [r3, #8]
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <find_volume+0x24e>
 8007a1e:	230d      	movs	r3, #13
 8007a20:	e119      	b.n	8007c56 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	3330      	adds	r3, #48	@ 0x30
 8007a26:	3313      	adds	r3, #19
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fc3d 	bl	80062a8 <ld_word>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <find_volume+0x272>
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	3330      	adds	r3, #48	@ 0x30
 8007a3c:	3320      	adds	r3, #32
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fc4a 	bl	80062d8 <ld_dword>
 8007a44:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	3330      	adds	r3, #48	@ 0x30
 8007a4a:	330e      	adds	r3, #14
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fc2b 	bl	80062a8 <ld_word>
 8007a52:	4603      	mov	r3, r0
 8007a54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <find_volume+0x28c>
 8007a5c:	230d      	movs	r3, #13
 8007a5e:	e0fa      	b.n	8007c56 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a64:	4413      	add	r3, r2
 8007a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a68:	8912      	ldrh	r2, [r2, #8]
 8007a6a:	0912      	lsrs	r2, r2, #4
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	4413      	add	r3, r2
 8007a70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d204      	bcs.n	8007a84 <find_volume+0x2b0>
 8007a7a:	230d      	movs	r3, #13
 8007a7c:	e0eb      	b.n	8007c56 <find_volume+0x482>
 8007a7e:	bf00      	nop
 8007a80:	2000068c 	.word	0x2000068c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a8c:	8952      	ldrh	r2, [r2, #10]
 8007a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <find_volume+0x2ca>
 8007a9a:	230d      	movs	r3, #13
 8007a9c:	e0db      	b.n	8007c56 <find_volume+0x482>
		fmt = FS_FAT32;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d802      	bhi.n	8007ab4 <find_volume+0x2e0>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d802      	bhi.n	8007ac4 <find_volume+0x2f0>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	1c9a      	adds	r2, r3, #2
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ad0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ad2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad6:	441a      	add	r2, r3
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007adc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	441a      	add	r2, r3
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d11e      	bne.n	8007b2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af0:	3330      	adds	r3, #48	@ 0x30
 8007af2:	332a      	adds	r3, #42	@ 0x2a
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fbd7 	bl	80062a8 <ld_word>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <find_volume+0x330>
 8007b00:	230d      	movs	r3, #13
 8007b02:	e0a8      	b.n	8007c56 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	891b      	ldrh	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <find_volume+0x33c>
 8007b0c:	230d      	movs	r3, #13
 8007b0e:	e0a2      	b.n	8007c56 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b12:	3330      	adds	r3, #48	@ 0x30
 8007b14:	332c      	adds	r3, #44	@ 0x2c
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fbde 	bl	80062d8 <ld_dword>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b2a:	e01f      	b.n	8007b6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2e:	891b      	ldrh	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <find_volume+0x364>
 8007b34:	230d      	movs	r3, #13
 8007b36:	e08e      	b.n	8007c56 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	6a1a      	ldr	r2, [r3, #32]
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b3e:	441a      	add	r2, r3
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d103      	bne.n	8007b54 <find_volume+0x380>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	e00a      	b.n	8007b6a <find_volume+0x396>
 8007b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	085a      	lsrs	r2, r3, #1
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007b76:	0a5b      	lsrs	r3, r3, #9
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d201      	bcs.n	8007b80 <find_volume+0x3ac>
 8007b7c:	230d      	movs	r3, #13
 8007b7e:	e06a      	b.n	8007c56 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295
 8007b86:	611a      	str	r2, [r3, #16]
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	2280      	movs	r2, #128	@ 0x80
 8007b94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d149      	bne.n	8007c32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	3330      	adds	r3, #48	@ 0x30
 8007ba2:	3330      	adds	r3, #48	@ 0x30
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fb7f 	bl	80062a8 <ld_word>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d140      	bne.n	8007c32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bb8:	f7fe fe26 	bl	8006808 <move_window>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d137      	bne.n	8007c32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	3330      	adds	r3, #48	@ 0x30
 8007bcc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe fb69 	bl	80062a8 <ld_word>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d127      	bne.n	8007c32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	3330      	adds	r3, #48	@ 0x30
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fb76 	bl	80062d8 <ld_dword>
 8007bec:	4603      	mov	r3, r0
 8007bee:	4a1c      	ldr	r2, [pc, #112]	@ (8007c60 <find_volume+0x48c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d11e      	bne.n	8007c32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	3330      	adds	r3, #48	@ 0x30
 8007bf8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fb6b 	bl	80062d8 <ld_dword>
 8007c02:	4603      	mov	r3, r0
 8007c04:	4a17      	ldr	r2, [pc, #92]	@ (8007c64 <find_volume+0x490>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d113      	bne.n	8007c32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	3330      	adds	r3, #48	@ 0x30
 8007c0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fb60 	bl	80062d8 <ld_dword>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	3330      	adds	r3, #48	@ 0x30
 8007c22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fb56 	bl	80062d8 <ld_dword>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c30:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007c38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c68 <find_volume+0x494>)
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	4b09      	ldr	r3, [pc, #36]	@ (8007c68 <find_volume+0x494>)
 8007c44:	801a      	strh	r2, [r3, #0]
 8007c46:	4b08      	ldr	r3, [pc, #32]	@ (8007c68 <find_volume+0x494>)
 8007c48:	881a      	ldrh	r2, [r3, #0]
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c50:	f7fe fd72 	bl	8006738 <clear_lock>
#endif
	return FR_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3758      	adds	r7, #88	@ 0x58
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	41615252 	.word	0x41615252
 8007c64:	61417272 	.word	0x61417272
 8007c68:	20000690 	.word	0x20000690

08007c6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c76:	2309      	movs	r3, #9
 8007c78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01c      	beq.n	8007cba <validate+0x4e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d018      	beq.n	8007cba <validate+0x4e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <validate+0x4e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	889a      	ldrh	r2, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	88db      	ldrh	r3, [r3, #6]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d10c      	bne.n	8007cba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fa5e 	bl	8006168 <disk_status>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <validate+0x4e>
			res = FR_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <validate+0x5a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	e000      	b.n	8007cc8 <validate+0x5c>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	6013      	str	r3, [r2, #0]
	return res;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007cea:	f107 0310 	add.w	r3, r7, #16
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fcd5 	bl	800769e <get_ldnumber>
 8007cf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da01      	bge.n	8007d00 <f_mount+0x28>
 8007cfc:	230b      	movs	r3, #11
 8007cfe:	e02b      	b.n	8007d58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d00:	4a17      	ldr	r2, [pc, #92]	@ (8007d60 <f_mount+0x88>)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d10:	69b8      	ldr	r0, [r7, #24]
 8007d12:	f7fe fd11 	bl	8006738 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	490d      	ldr	r1, [pc, #52]	@ (8007d60 <f_mount+0x88>)
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <f_mount+0x66>
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d001      	beq.n	8007d42 <f_mount+0x6a>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e00a      	b.n	8007d58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007d42:	f107 010c 	add.w	r1, r7, #12
 8007d46:	f107 0308 	add.w	r3, r7, #8
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fd41 	bl	80077d4 <find_volume>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3720      	adds	r7, #32
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	2000068c 	.word	0x2000068c

08007d64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b098      	sub	sp, #96	@ 0x60
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <f_open+0x18>
 8007d78:	2309      	movs	r3, #9
 8007d7a:	e1a9      	b.n	80080d0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007d84:	79fa      	ldrb	r2, [r7, #7]
 8007d86:	f107 0110 	add.w	r1, r7, #16
 8007d8a:	f107 0308 	add.w	r3, r7, #8
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fd20 	bl	80077d4 <find_volume>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f040 818d 	bne.w	80080be <f_open+0x35a>
		dj.obj.fs = fs;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	f107 0314 	add.w	r3, r7, #20
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fc03 	bl	80075bc <follow_path>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d118      	bne.n	8007df6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007dc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dc8:	b25b      	sxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da03      	bge.n	8007dd6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007dce:	2306      	movs	r3, #6
 8007dd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007dd4:	e00f      	b.n	8007df6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf8c      	ite	hi
 8007ddc:	2301      	movhi	r3, #1
 8007dde:	2300      	movls	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	f107 0314 	add.w	r3, r7, #20
 8007de8:	4611      	mov	r1, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fb5c 	bl	80064a8 <chk_lock>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	f003 031c 	and.w	r3, r3, #28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d07f      	beq.n	8007f00 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007e00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d017      	beq.n	8007e38 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d10e      	bne.n	8007e2e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e10:	f7fe fba6 	bl	8006560 <enq_lock>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d006      	beq.n	8007e28 <f_open+0xc4>
 8007e1a:	f107 0314 	add.w	r3, r7, #20
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fae7 	bl	80073f2 <dir_register>
 8007e24:	4603      	mov	r3, r0
 8007e26:	e000      	b.n	8007e2a <f_open+0xc6>
 8007e28:	2312      	movs	r3, #18
 8007e2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	f043 0308 	orr.w	r3, r3, #8
 8007e34:	71fb      	strb	r3, [r7, #7]
 8007e36:	e010      	b.n	8007e5a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e38:	7ebb      	ldrb	r3, [r7, #26]
 8007e3a:	f003 0311 	and.w	r3, r3, #17
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <f_open+0xe6>
					res = FR_DENIED;
 8007e42:	2307      	movs	r3, #7
 8007e44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e48:	e007      	b.n	8007e5a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <f_open+0xf6>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d168      	bne.n	8007f34 <f_open+0x1d0>
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d063      	beq.n	8007f34 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007e6c:	f7fd fff6 	bl	8005e5c <get_fattime>
 8007e70:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e74:	330e      	adds	r3, #14
 8007e76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fa6b 	bl	8006354 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e80:	3316      	adds	r3, #22
 8007e82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fe fa65 	bl	8006354 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	330b      	adds	r3, #11
 8007e8e:	2220      	movs	r2, #32
 8007e90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff f9b9 	bl	8007210 <ld_clust>
 8007e9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f9d1 	bl	800724e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eae:	331c      	adds	r3, #28
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fa4e 	bl	8006354 <st_dword>
					fs->wflag = 1;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d037      	beq.n	8007f34 <f_open+0x1d0>
						dw = fs->winsect;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007eca:	f107 0314 	add.w	r3, r7, #20
 8007ece:	2200      	movs	r2, #0
 8007ed0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fee4 	bl	8006ca0 <remove_chain>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007ede:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d126      	bne.n	8007f34 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fc8c 	bl	8006808 <move_window>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007efa:	3a01      	subs	r2, #1
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	e019      	b.n	8007f34 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d115      	bne.n	8007f34 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f08:	7ebb      	ldrb	r3, [r7, #26]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007f12:	2304      	movs	r3, #4
 8007f14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007f18:	e00c      	b.n	8007f34 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <f_open+0x1d0>
 8007f24:	7ebb      	ldrb	r3, [r7, #26]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <f_open+0x1d0>
						res = FR_DENIED;
 8007f2e:	2307      	movs	r3, #7
 8007f30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007f34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d126      	bne.n	8007f8a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007f56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	bf8c      	ite	hi
 8007f62:	2301      	movhi	r3, #1
 8007f64:	2300      	movls	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f107 0314 	add.w	r3, r7, #20
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fb17 	bl	80065a4 <inc_lock>
 8007f76:	4602      	mov	r2, r0
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <f_open+0x226>
 8007f84:	2302      	movs	r3, #2
 8007f86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 8095 	bne.w	80080be <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff f938 	bl	8007210 <ld_clust>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa8:	331c      	adds	r3, #28
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe f994 	bl	80062d8 <ld_dword>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	88da      	ldrh	r2, [r3, #6]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	79fa      	ldrb	r2, [r7, #7]
 8007fce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3330      	adds	r3, #48	@ 0x30
 8007fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fea:	2100      	movs	r1, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe f9fe 	bl	80063ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d060      	beq.n	80080be <f_open+0x35a>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d05c      	beq.n	80080be <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	895b      	ldrh	r3, [r3, #10]
 8008010:	025b      	lsls	r3, r3, #9
 8008012:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008020:	e016      	b.n	8008050 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fca9 	bl	800697e <get_fat>
 800802c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800802e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008030:	2b01      	cmp	r3, #1
 8008032:	d802      	bhi.n	800803a <f_open+0x2d6>
 8008034:	2302      	movs	r3, #2
 8008036:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800803a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d102      	bne.n	8008048 <f_open+0x2e4>
 8008042:	2301      	movs	r3, #1
 8008044:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008048:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800804a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008050:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <f_open+0x2fc>
 8008058:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800805a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800805c:	429a      	cmp	r2, r3
 800805e:	d8e0      	bhi.n	8008022 <f_open+0x2be>
				}
				fp->clust = clst;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008064:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008066:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800806a:	2b00      	cmp	r3, #0
 800806c:	d127      	bne.n	80080be <f_open+0x35a>
 800806e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008074:	2b00      	cmp	r3, #0
 8008076:	d022      	beq.n	80080be <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800807c:	4618      	mov	r0, r3
 800807e:	f7fe fc5f 	bl	8006940 <clust2sect>
 8008082:	6478      	str	r0, [r7, #68]	@ 0x44
 8008084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <f_open+0x32e>
						res = FR_INT_ERR;
 800808a:	2302      	movs	r3, #2
 800808c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008090:	e015      	b.n	80080be <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008094:	0a5a      	lsrs	r2, r3, #9
 8008096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008098:	441a      	add	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	7858      	ldrb	r0, [r3, #1]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1a      	ldr	r2, [r3, #32]
 80080ac:	2301      	movs	r3, #1
 80080ae:	f7fe f89d 	bl	80061ec <disk_read>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <f_open+0x35a>
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80080be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <f_open+0x368>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80080cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3760      	adds	r7, #96	@ 0x60
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08c      	sub	sp, #48	@ 0x30
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f107 0210 	add.w	r2, r7, #16
 80080f6:	4611      	mov	r1, r2
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fdb7 	bl	8007c6c <validate>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008104:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <f_write+0x44>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	7d5b      	ldrb	r3, [r3, #21]
 8008110:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <f_write+0x4a>
 800811c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008120:	e14b      	b.n	80083ba <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	7d1b      	ldrb	r3, [r3, #20]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <f_write+0x5a>
 800812e:	2307      	movs	r3, #7
 8008130:	e143      	b.n	80083ba <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	441a      	add	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	429a      	cmp	r2, r3
 8008140:	f080 812d 	bcs.w	800839e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	43db      	mvns	r3, r3
 800814a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800814c:	e127      	b.n	800839e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 80e3 	bne.w	8008322 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	0a5b      	lsrs	r3, r3, #9
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	8952      	ldrh	r2, [r2, #10]
 8008166:	3a01      	subs	r2, #1
 8008168:	4013      	ands	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d143      	bne.n	80081fa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10c      	bne.n	8008194 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	d11a      	bne.n	80081bc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fded 	bl	8006d6a <create_chain>
 8008190:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008192:	e013      	b.n	80081bc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d007      	beq.n	80081ac <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	4619      	mov	r1, r3
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7fe fe79 	bl	8006e9a <clmt_clust>
 80081a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80081aa:	e007      	b.n	80081bc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7fe fdd8 	bl	8006d6a <create_chain>
 80081ba:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 80f2 	beq.w	80083a8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d104      	bne.n	80081d4 <f_write+0xfc>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2202      	movs	r2, #2
 80081ce:	755a      	strb	r2, [r3, #21]
 80081d0:	2302      	movs	r3, #2
 80081d2:	e0f2      	b.n	80083ba <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d104      	bne.n	80081e6 <f_write+0x10e>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	755a      	strb	r2, [r3, #21]
 80081e2:	2301      	movs	r3, #1
 80081e4:	e0e9      	b.n	80083ba <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <f_write+0x122>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	7d1b      	ldrb	r3, [r3, #20]
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	da18      	bge.n	8008236 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	7858      	ldrb	r0, [r3, #1]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a1a      	ldr	r2, [r3, #32]
 8008212:	2301      	movs	r3, #1
 8008214:	f7fe f80a 	bl	800622c <disk_write>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d004      	beq.n	8008228 <f_write+0x150>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	755a      	strb	r2, [r3, #21]
 8008224:	2301      	movs	r3, #1
 8008226:	e0c8      	b.n	80083ba <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	7d1b      	ldrb	r3, [r3, #20]
 800822c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008230:	b2da      	uxtb	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fe fb7e 	bl	8006940 <clust2sect>
 8008244:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d104      	bne.n	8008256 <f_write+0x17e>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2202      	movs	r2, #2
 8008250:	755a      	strb	r2, [r3, #21]
 8008252:	2302      	movs	r3, #2
 8008254:	e0b1      	b.n	80083ba <f_write+0x2e2>
			sect += csect;
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	4413      	add	r3, r2
 800825c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0a5b      	lsrs	r3, r3, #9
 8008262:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d03c      	beq.n	80082e4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	4413      	add	r3, r2
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	8952      	ldrh	r2, [r2, #10]
 8008274:	4293      	cmp	r3, r2
 8008276:	d905      	bls.n	8008284 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	895b      	ldrh	r3, [r3, #10]
 800827c:	461a      	mov	r2, r3
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	7858      	ldrb	r0, [r3, #1]
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	69f9      	ldr	r1, [r7, #28]
 800828e:	f7fd ffcd 	bl	800622c <disk_write>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <f_write+0x1ca>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	755a      	strb	r2, [r3, #21]
 800829e:	2301      	movs	r3, #1
 80082a0:	e08b      	b.n	80083ba <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1a      	ldr	r2, [r3, #32]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	6a3a      	ldr	r2, [r7, #32]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d915      	bls.n	80082dc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	025b      	lsls	r3, r3, #9
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082c8:	4619      	mov	r1, r3
 80082ca:	f7fe f86f 	bl	80063ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	7d1b      	ldrb	r3, [r3, #20]
 80082d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	025b      	lsls	r3, r3, #9
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80082e2:	e03f      	b.n	8008364 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d016      	beq.n	800831c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d210      	bcs.n	800831c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	7858      	ldrb	r0, [r3, #1]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008304:	2301      	movs	r3, #1
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	f7fd ff70 	bl	80061ec <disk_read>
 800830c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	755a      	strb	r2, [r3, #21]
 8008318:	2301      	movs	r3, #1
 800831a:	e04e      	b.n	80083ba <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d901      	bls.n	800833c <f_write+0x264>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	4413      	add	r3, r2
 800834c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800834e:	69f9      	ldr	r1, [r7, #28]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe f82b 	bl	80063ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	7d1b      	ldrb	r3, [r3, #20]
 800835a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800835e:	b2da      	uxtb	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	4413      	add	r3, r2
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	441a      	add	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	619a      	str	r2, [r3, #24]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	429a      	cmp	r2, r3
 8008382:	bf38      	it	cc
 8008384:	461a      	movcc	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	441a      	add	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f47f aed4 	bne.w	800814e <f_write+0x76>
 80083a6:	e000      	b.n	80083aa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083a8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	7d1b      	ldrb	r3, [r3, #20]
 80083ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3730      	adds	r7, #48	@ 0x30
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b086      	sub	sp, #24
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f107 0208 	add.w	r2, r7, #8
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fc4a 	bl	8007c6c <validate>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d168      	bne.n	80084b4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7d1b      	ldrb	r3, [r3, #20]
 80083e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d062      	beq.n	80084b4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	7d1b      	ldrb	r3, [r3, #20]
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da15      	bge.n	8008424 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7858      	ldrb	r0, [r3, #1]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1a      	ldr	r2, [r3, #32]
 8008406:	2301      	movs	r3, #1
 8008408:	f7fd ff10 	bl	800622c <disk_write>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <f_sync+0x54>
 8008412:	2301      	movs	r3, #1
 8008414:	e04f      	b.n	80084b6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7d1b      	ldrb	r3, [r3, #20]
 800841a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800841e:	b2da      	uxtb	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008424:	f7fd fd1a 	bl	8005e5c <get_fattime>
 8008428:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe f9e8 	bl	8006808 <move_window>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d138      	bne.n	80084b4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008446:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	330b      	adds	r3, #11
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	330b      	adds	r3, #11
 8008452:	f042 0220 	orr.w	r2, r2, #32
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	461a      	mov	r2, r3
 8008464:	68f9      	ldr	r1, [r7, #12]
 8008466:	f7fe fef2 	bl	800724e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f103 021c 	add.w	r2, r3, #28
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7fd ff6c 	bl	8006354 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3316      	adds	r3, #22
 8008480:	6939      	ldr	r1, [r7, #16]
 8008482:	4618      	mov	r0, r3
 8008484:	f7fd ff66 	bl	8006354 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3312      	adds	r3, #18
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f7fd ff45 	bl	800631e <st_word>
					fs->wflag = 1;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe f9e1 	bl	8006864 <sync_fs>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7d1b      	ldrb	r3, [r3, #20]
 80084aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff ff7b 	bl	80083c2 <f_sync>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d118      	bne.n	8008508 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f107 0208 	add.w	r2, r7, #8
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fbc4 	bl	8007c6c <validate>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10c      	bne.n	8008508 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe f8e4 	bl	80066c0 <dec_lock>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b090      	sub	sp, #64	@ 0x40
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f107 0208 	add.w	r2, r7, #8
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fba1 	bl	8007c6c <validate>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008530:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <f_lseek+0x2e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7d5b      	ldrb	r3, [r3, #21]
 800853c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008540:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <f_lseek+0x3c>
 8008548:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800854c:	e1e6      	b.n	800891c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80d1 	beq.w	80086fa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d15a      	bne.n	8008616 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008564:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	1d1a      	adds	r2, r3, #4
 800856a:	627a      	str	r2, [r7, #36]	@ 0x24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	2302      	movs	r3, #2
 8008572:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d03a      	beq.n	80085f6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	2300      	movs	r3, #0
 8008586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	3302      	adds	r3, #2
 800858c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008594:	3301      	adds	r3, #1
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe f9ee 	bl	800697e <get_fat>
 80085a2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d804      	bhi.n	80085b4 <f_lseek+0xa2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	755a      	strb	r2, [r3, #21]
 80085b0:	2302      	movs	r3, #2
 80085b2:	e1b3      	b.n	800891c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	d104      	bne.n	80085c6 <f_lseek+0xb4>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	755a      	strb	r2, [r3, #21]
 80085c2:	2301      	movs	r3, #1
 80085c4:	e1aa      	b.n	800891c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d0de      	beq.n	800858e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80085d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d809      	bhi.n	80085ec <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	1d1a      	adds	r2, r3, #4
 80085dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80085de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d3c4      	bcc.n	8008580 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085fc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80085fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	429a      	cmp	r2, r3
 8008604:	d803      	bhi.n	800860e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e184      	b.n	8008918 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800860e:	2311      	movs	r3, #17
 8008610:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008614:	e180      	b.n	8008918 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d902      	bls.n	8008626 <f_lseek+0x114>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 8172 	beq.w	8008918 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	3b01      	subs	r3, #1
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fe fc2d 	bl	8006e9a <clmt_clust>
 8008640:	4602      	mov	r2, r0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7fe f976 	bl	8006940 <clust2sect>
 8008654:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <f_lseek+0x154>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	755a      	strb	r2, [r3, #21]
 8008662:	2302      	movs	r3, #2
 8008664:	e15a      	b.n	800891c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	3b01      	subs	r3, #1
 800866a:	0a5b      	lsrs	r3, r3, #9
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	8952      	ldrh	r2, [r2, #10]
 8008670:	3a01      	subs	r2, #1
 8008672:	4013      	ands	r3, r2
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	4413      	add	r3, r2
 8008678:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 8148 	beq.w	8008918 <f_lseek+0x406>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	429a      	cmp	r2, r3
 8008690:	f000 8142 	beq.w	8008918 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	7d1b      	ldrb	r3, [r3, #20]
 8008698:	b25b      	sxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	da18      	bge.n	80086d0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	7858      	ldrb	r0, [r3, #1]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1a      	ldr	r2, [r3, #32]
 80086ac:	2301      	movs	r3, #1
 80086ae:	f7fd fdbd 	bl	800622c <disk_write>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <f_lseek+0x1b0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	755a      	strb	r2, [r3, #21]
 80086be:	2301      	movs	r3, #1
 80086c0:	e12c      	b.n	800891c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7d1b      	ldrb	r3, [r3, #20]
 80086c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	7858      	ldrb	r0, [r3, #1]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086da:	2301      	movs	r3, #1
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	f7fd fd85 	bl	80061ec <disk_read>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <f_lseek+0x1e0>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	755a      	strb	r2, [r3, #21]
 80086ee:	2301      	movs	r3, #1
 80086f0:	e114      	b.n	800891c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	621a      	str	r2, [r3, #32]
 80086f8:	e10e      	b.n	8008918 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d908      	bls.n	8008716 <f_lseek+0x204>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008724:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80a7 	beq.w	800887c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	895b      	ldrh	r3, [r3, #10]
 8008732:	025b      	lsls	r3, r3, #9
 8008734:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01b      	beq.n	8008774 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	1e5a      	subs	r2, r3, #1
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	fbb2 f2f3 	udiv	r2, r2, r3
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	1e59      	subs	r1, r3, #1
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008750:	429a      	cmp	r2, r3
 8008752:	d30f      	bcc.n	8008774 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	1e5a      	subs	r2, r3, #1
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	425b      	negs	r3, r3
 800875c:	401a      	ands	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008772:	e022      	b.n	80087ba <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	2b00      	cmp	r3, #0
 800877e:	d119      	bne.n	80087b4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe faf0 	bl	8006d6a <create_chain>
 800878a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	2b01      	cmp	r3, #1
 8008790:	d104      	bne.n	800879c <f_lseek+0x28a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2202      	movs	r2, #2
 8008796:	755a      	strb	r2, [r3, #21]
 8008798:	2302      	movs	r3, #2
 800879a:	e0bf      	b.n	800891c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a2:	d104      	bne.n	80087ae <f_lseek+0x29c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	755a      	strb	r2, [r3, #21]
 80087aa:	2301      	movs	r3, #1
 80087ac:	e0b6      	b.n	800891c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d05d      	beq.n	800887c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80087c0:	e03a      	b.n	8008838 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	441a      	add	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7d1b      	ldrb	r3, [r3, #20]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fabf 	bl	8006d6a <create_chain>
 80087ec:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80087ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d108      	bne.n	8008806 <f_lseek+0x2f4>
							ofs = 0; break;
 80087f4:	2300      	movs	r3, #0
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	e022      	b.n	8008840 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe f8bd 	bl	800697e <get_fat>
 8008804:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880c:	d104      	bne.n	8008818 <f_lseek+0x306>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	755a      	strb	r2, [r3, #21]
 8008814:	2301      	movs	r3, #1
 8008816:	e081      	b.n	800891c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	2b01      	cmp	r3, #1
 800881c:	d904      	bls.n	8008828 <f_lseek+0x316>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008824:	429a      	cmp	r2, r3
 8008826:	d304      	bcc.n	8008832 <f_lseek+0x320>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	755a      	strb	r2, [r3, #21]
 800882e:	2302      	movs	r3, #2
 8008830:	e074      	b.n	800891c <f_lseek+0x40a>
					fp->clust = clst;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008836:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	429a      	cmp	r2, r3
 800883e:	d8c0      	bhi.n	80087c2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699a      	ldr	r2, [r3, #24]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	441a      	add	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	2b00      	cmp	r3, #0
 8008854:	d012      	beq.n	800887c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe f870 	bl	8006940 <clust2sect>
 8008860:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008864:	2b00      	cmp	r3, #0
 8008866:	d104      	bne.n	8008872 <f_lseek+0x360>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	755a      	strb	r2, [r3, #21]
 800886e:	2302      	movs	r3, #2
 8008870:	e054      	b.n	800891c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	0a5b      	lsrs	r3, r3, #9
 8008876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008878:	4413      	add	r3, r2
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	429a      	cmp	r2, r3
 8008886:	d90a      	bls.n	800889e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7d1b      	ldrb	r3, [r3, #20]
 8008894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008898:	b2da      	uxtb	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d036      	beq.n	8008918 <f_lseek+0x406>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d031      	beq.n	8008918 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da18      	bge.n	80088f0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	7858      	ldrb	r0, [r3, #1]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	2301      	movs	r3, #1
 80088ce:	f7fd fcad 	bl	800622c <disk_write>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <f_lseek+0x3d0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	755a      	strb	r2, [r3, #21]
 80088de:	2301      	movs	r3, #1
 80088e0:	e01c      	b.n	800891c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7d1b      	ldrb	r3, [r3, #20]
 80088e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	7858      	ldrb	r0, [r3, #1]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088fa:	2301      	movs	r3, #1
 80088fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088fe:	f7fd fc75 	bl	80061ec <disk_read>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <f_lseek+0x400>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	755a      	strb	r2, [r3, #21]
 800890e:	2301      	movs	r3, #1
 8008910:	e004      	b.n	800891c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008916:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008918:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800891c:	4618      	mov	r0, r3
 800891e:	3740      	adds	r7, #64	@ 0x40
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b09e      	sub	sp, #120	@ 0x78
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008930:	f107 010c 	add.w	r1, r7, #12
 8008934:	1d3b      	adds	r3, r7, #4
 8008936:	2202      	movs	r2, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe ff4b 	bl	80077d4 <find_volume>
 800893e:	4603      	mov	r3, r0
 8008940:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008948:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 808e 	bne.w	8008a6e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fe2e 	bl	80075bc <follow_path>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008966:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800896a:	2b00      	cmp	r3, #0
 800896c:	d108      	bne.n	8008980 <f_unlink+0x5c>
 800896e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008972:	2102      	movs	r1, #2
 8008974:	4618      	mov	r0, r3
 8008976:	f7fd fd97 	bl	80064a8 <chk_lock>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008980:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008984:	2b00      	cmp	r3, #0
 8008986:	d172      	bne.n	8008a6e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008988:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800898c:	b25b      	sxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	da03      	bge.n	800899a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008992:	2306      	movs	r3, #6
 8008994:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008998:	e008      	b.n	80089ac <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800899a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80089a6:	2307      	movs	r3, #7
 80089a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 80089ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d134      	bne.n	8008a1e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe fc28 	bl	8007210 <ld_clust>
 80089c0:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80089c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d027      	beq.n	8008a1e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80089d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089d4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80089d6:	f107 0310 	add.w	r3, r7, #16
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fa90 	bl	8006f02 <dir_sdi>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80089e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d116      	bne.n	8008a1e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80089f0:	f107 0310 	add.w	r3, r7, #16
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fc49 	bl	800728e <dir_read>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008a02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <f_unlink+0xec>
 8008a0a:	2307      	movs	r3, #7
 8008a0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008a10:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d102      	bne.n	8008a1e <f_unlink+0xfa>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8008a1e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d123      	bne.n	8008a6e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008a26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd13 	bl	8007456 <dir_remove>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008a36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10c      	bne.n	8008a58 <f_unlink+0x134>
 8008a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008a44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008a48:	2200      	movs	r2, #0
 8008a4a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fe f927 	bl	8006ca0 <remove_chain>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008a58:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <f_unlink+0x14a>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fd fefe 	bl	8006864 <sync_fs>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008a6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3778      	adds	r7, #120	@ 0x78
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	2b0a      	cmp	r3, #10
 8008a8a:	d103      	bne.n	8008a94 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008a8c:	210d      	movs	r1, #13
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fff3 	bl	8008a7a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	db25      	blt.n	8008aec <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	60fa      	str	r2, [r7, #12]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b3c      	cmp	r3, #60	@ 0x3c
 8008ab2:	dd12      	ble.n	8008ada <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f103 010c 	add.w	r1, r3, #12
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	f107 0308 	add.w	r3, r7, #8
 8008ac4:	f7ff fb08 	bl	80080d8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d101      	bne.n	8008ad4 <putc_bfd+0x5a>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e001      	b.n	8008ad8 <putc_bfd+0x5e>
 8008ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	609a      	str	r2, [r3, #8]
 8008aea:	e000      	b.n	8008aee <putc_bfd+0x74>
	if (i < 0) return;
 8008aec:	bf00      	nop
}
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	db16      	blt.n	8008b32 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f103 010c 	add.w	r1, r3, #12
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	461a      	mov	r2, r3
 8008b14:	f107 030c 	add.w	r3, r7, #12
 8008b18:	f7ff fade 	bl	80080d8 <f_write>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d107      	bne.n	8008b32 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d102      	bne.n	8008b32 <putc_flush+0x3e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	e001      	b.n	8008b36 <putc_flush+0x42>
	return EOF;
 8008b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	609a      	str	r2, [r3, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b096      	sub	sp, #88	@ 0x58
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008b72:	f107 030c 	add.w	r3, r7, #12
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff ffe0 	bl	8008b3e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008b7e:	e009      	b.n	8008b94 <f_puts+0x2c>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	607a      	str	r2, [r7, #4]
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	f107 030c 	add.w	r3, r7, #12
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff ff73 	bl	8008a7a <putc_bfd>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1f1      	bne.n	8008b80 <f_puts+0x18>
	return putc_flush(&pb);
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff ffa7 	bl	8008af4 <putc_flush>
 8008ba6:	4603      	mov	r3, r0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3758      	adds	r7, #88	@ 0x58
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008bc8:	7a5b      	ldrb	r3, [r3, #9]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d131      	bne.n	8008c34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008bd2:	7a5b      	ldrb	r3, [r3, #9]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008bda:	2100      	movs	r1, #0
 8008bdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008bde:	4b19      	ldr	r3, [pc, #100]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008be0:	7a5b      	ldrb	r3, [r3, #9]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	4a17      	ldr	r2, [pc, #92]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008bee:	4b15      	ldr	r3, [pc, #84]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008bf0:	7a5b      	ldrb	r3, [r3, #9]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4b13      	ldr	r3, [pc, #76]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008bf8:	4413      	add	r3, r2
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008bfe:	4b11      	ldr	r3, [pc, #68]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008c00:	7a5b      	ldrb	r3, [r3, #9]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	b2d1      	uxtb	r1, r2
 8008c08:	4a0e      	ldr	r2, [pc, #56]	@ (8008c44 <FATFS_LinkDriverEx+0x94>)
 8008c0a:	7251      	strb	r1, [r2, #9]
 8008c0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008c0e:	7dbb      	ldrb	r3, [r7, #22]
 8008c10:	3330      	adds	r3, #48	@ 0x30
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	223a      	movs	r2, #58	@ 0x3a
 8008c1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3302      	adds	r3, #2
 8008c24:	222f      	movs	r2, #47	@ 0x2f
 8008c26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	3303      	adds	r3, #3
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	200006b4 	.word	0x200006b4

08008c48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c52:	2200      	movs	r2, #0
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff ffaa 	bl	8008bb0 <FATFS_LinkDriverEx>
 8008c5c:	4603      	mov	r3, r0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <sniprintf>:
 8008c68:	b40c      	push	{r2, r3}
 8008c6a:	b530      	push	{r4, r5, lr}
 8008c6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ccc <sniprintf+0x64>)
 8008c6e:	1e0c      	subs	r4, r1, #0
 8008c70:	681d      	ldr	r5, [r3, #0]
 8008c72:	b09d      	sub	sp, #116	@ 0x74
 8008c74:	da08      	bge.n	8008c88 <sniprintf+0x20>
 8008c76:	238b      	movs	r3, #139	@ 0x8b
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	b01d      	add	sp, #116	@ 0x74
 8008c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c84:	b002      	add	sp, #8
 8008c86:	4770      	bx	lr
 8008c88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c90:	bf14      	ite	ne
 8008c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c96:	4623      	moveq	r3, r4
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ca0:	9002      	str	r0, [sp, #8]
 8008ca2:	9006      	str	r0, [sp, #24]
 8008ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ca8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008caa:	ab21      	add	r3, sp, #132	@ 0x84
 8008cac:	a902      	add	r1, sp, #8
 8008cae:	4628      	mov	r0, r5
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	f000 f995 	bl	8008fe0 <_svfiprintf_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	bfbc      	itt	lt
 8008cba:	238b      	movlt	r3, #139	@ 0x8b
 8008cbc:	602b      	strlt	r3, [r5, #0]
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	d0dd      	beq.n	8008c7e <sniprintf+0x16>
 8008cc2:	9b02      	ldr	r3, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e7d9      	b.n	8008c7e <sniprintf+0x16>
 8008cca:	bf00      	nop
 8008ccc:	20000020 	.word	0x20000020

08008cd0 <memset>:
 8008cd0:	4402      	add	r2, r0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <__errno>:
 8008ce0:	4b01      	ldr	r3, [pc, #4]	@ (8008ce8 <__errno+0x8>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20000020 	.word	0x20000020

08008cec <__libc_init_array>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4d0d      	ldr	r5, [pc, #52]	@ (8008d24 <__libc_init_array+0x38>)
 8008cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8008d28 <__libc_init_array+0x3c>)
 8008cf2:	1b64      	subs	r4, r4, r5
 8008cf4:	10a4      	asrs	r4, r4, #2
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	42a6      	cmp	r6, r4
 8008cfa:	d109      	bne.n	8008d10 <__libc_init_array+0x24>
 8008cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8008d2c <__libc_init_array+0x40>)
 8008cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8008d30 <__libc_init_array+0x44>)
 8008d00:	f001 fbc4 	bl	800a48c <_init>
 8008d04:	1b64      	subs	r4, r4, r5
 8008d06:	10a4      	asrs	r4, r4, #2
 8008d08:	2600      	movs	r6, #0
 8008d0a:	42a6      	cmp	r6, r4
 8008d0c:	d105      	bne.n	8008d1a <__libc_init_array+0x2e>
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d14:	4798      	blx	r3
 8008d16:	3601      	adds	r6, #1
 8008d18:	e7ee      	b.n	8008cf8 <__libc_init_array+0xc>
 8008d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d1e:	4798      	blx	r3
 8008d20:	3601      	adds	r6, #1
 8008d22:	e7f2      	b.n	8008d0a <__libc_init_array+0x1e>
 8008d24:	0800a740 	.word	0x0800a740
 8008d28:	0800a740 	.word	0x0800a740
 8008d2c:	0800a740 	.word	0x0800a740
 8008d30:	0800a744 	.word	0x0800a744

08008d34 <__retarget_lock_acquire_recursive>:
 8008d34:	4770      	bx	lr

08008d36 <__retarget_lock_release_recursive>:
 8008d36:	4770      	bx	lr

08008d38 <_free_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d041      	beq.n	8008dc4 <_free_r+0x8c>
 8008d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d44:	1f0c      	subs	r4, r1, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfb8      	it	lt
 8008d4a:	18e4      	addlt	r4, r4, r3
 8008d4c:	f000 f8e0 	bl	8008f10 <__malloc_lock>
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <_free_r+0x90>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x2c>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d60:	f000 b8dc 	b.w	8008f1c <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x1e>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x4c>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x42>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1850      	adds	r0, r2, r1
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x6c>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4401      	add	r1, r0
 8008d90:	1850      	adds	r0, r2, r1
 8008d92:	4283      	cmp	r3, r0
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x22>
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4408      	add	r0, r1
 8008da0:	6010      	str	r0, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x22>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x74>
 8008da6:	230c      	movs	r3, #12
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x22>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1809      	addeq	r1, r1, r0
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x22>
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000804 	.word	0x20000804

08008dcc <sbrk_aligned>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	4e0f      	ldr	r6, [pc, #60]	@ (8008e0c <sbrk_aligned+0x40>)
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b911      	cbnz	r1, 8008dde <sbrk_aligned+0x12>
 8008dd8:	f000 fba6 	bl	8009528 <_sbrk_r>
 8008ddc:	6030      	str	r0, [r6, #0]
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fba1 	bl	8009528 <_sbrk_r>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d103      	bne.n	8008df2 <sbrk_aligned+0x26>
 8008dea:	f04f 34ff 	mov.w	r4, #4294967295
 8008dee:	4620      	mov	r0, r4
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	1cc4      	adds	r4, r0, #3
 8008df4:	f024 0403 	bic.w	r4, r4, #3
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d0f8      	beq.n	8008dee <sbrk_aligned+0x22>
 8008dfc:	1a21      	subs	r1, r4, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 fb92 	bl	8009528 <_sbrk_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	d1f2      	bne.n	8008dee <sbrk_aligned+0x22>
 8008e08:	e7ef      	b.n	8008dea <sbrk_aligned+0x1e>
 8008e0a:	bf00      	nop
 8008e0c:	20000800 	.word	0x20000800

08008e10 <_malloc_r>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	1ccd      	adds	r5, r1, #3
 8008e16:	f025 0503 	bic.w	r5, r5, #3
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	2d0c      	cmp	r5, #12
 8008e1e:	bf38      	it	cc
 8008e20:	250c      	movcc	r5, #12
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	4606      	mov	r6, r0
 8008e26:	db01      	blt.n	8008e2c <_malloc_r+0x1c>
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	d904      	bls.n	8008e36 <_malloc_r+0x26>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f0c <_malloc_r+0xfc>
 8008e3a:	f000 f869 	bl	8008f10 <__malloc_lock>
 8008e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e42:	461c      	mov	r4, r3
 8008e44:	bb44      	cbnz	r4, 8008e98 <_malloc_r+0x88>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffbf 	bl	8008dcc <sbrk_aligned>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	4604      	mov	r4, r0
 8008e52:	d158      	bne.n	8008f06 <_malloc_r+0xf6>
 8008e54:	f8d8 4000 	ldr.w	r4, [r8]
 8008e58:	4627      	mov	r7, r4
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d143      	bne.n	8008ee6 <_malloc_r+0xd6>
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d04b      	beq.n	8008efa <_malloc_r+0xea>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4639      	mov	r1, r7
 8008e66:	4630      	mov	r0, r6
 8008e68:	eb04 0903 	add.w	r9, r4, r3
 8008e6c:	f000 fb5c 	bl	8009528 <_sbrk_r>
 8008e70:	4581      	cmp	r9, r0
 8008e72:	d142      	bne.n	8008efa <_malloc_r+0xea>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	1a6d      	subs	r5, r5, r1
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ffa6 	bl	8008dcc <sbrk_aligned>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d03a      	beq.n	8008efa <_malloc_r+0xea>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	442b      	add	r3, r5
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	bb62      	cbnz	r2, 8008eec <_malloc_r+0xdc>
 8008e92:	f8c8 7000 	str.w	r7, [r8]
 8008e96:	e00f      	b.n	8008eb8 <_malloc_r+0xa8>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	1b52      	subs	r2, r2, r5
 8008e9c:	d420      	bmi.n	8008ee0 <_malloc_r+0xd0>
 8008e9e:	2a0b      	cmp	r2, #11
 8008ea0:	d917      	bls.n	8008ed2 <_malloc_r+0xc2>
 8008ea2:	1961      	adds	r1, r4, r5
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	6059      	strne	r1, [r3, #4]
 8008eac:	6863      	ldr	r3, [r4, #4]
 8008eae:	bf08      	it	eq
 8008eb0:	f8c8 1000 	streq.w	r1, [r8]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f82f 	bl	8008f1c <__malloc_unlock>
 8008ebe:	f104 000b 	add.w	r0, r4, #11
 8008ec2:	1d23      	adds	r3, r4, #4
 8008ec4:	f020 0007 	bic.w	r0, r0, #7
 8008ec8:	1ac2      	subs	r2, r0, r3
 8008eca:	bf1c      	itt	ne
 8008ecc:	1a1b      	subne	r3, r3, r0
 8008ece:	50a3      	strne	r3, [r4, r2]
 8008ed0:	e7af      	b.n	8008e32 <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	f8c8 2000 	streq.w	r2, [r8]
 8008edc:	605a      	strne	r2, [r3, #4]
 8008ede:	e7eb      	b.n	8008eb8 <_malloc_r+0xa8>
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7ae      	b.n	8008e44 <_malloc_r+0x34>
 8008ee6:	463c      	mov	r4, r7
 8008ee8:	687f      	ldr	r7, [r7, #4]
 8008eea:	e7b6      	b.n	8008e5a <_malloc_r+0x4a>
 8008eec:	461a      	mov	r2, r3
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d1fb      	bne.n	8008eec <_malloc_r+0xdc>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa8>
 8008efa:	230c      	movs	r3, #12
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 f80c 	bl	8008f1c <__malloc_unlock>
 8008f04:	e794      	b.n	8008e30 <_malloc_r+0x20>
 8008f06:	6005      	str	r5, [r0, #0]
 8008f08:	e7d6      	b.n	8008eb8 <_malloc_r+0xa8>
 8008f0a:	bf00      	nop
 8008f0c:	20000804 	.word	0x20000804

08008f10 <__malloc_lock>:
 8008f10:	4801      	ldr	r0, [pc, #4]	@ (8008f18 <__malloc_lock+0x8>)
 8008f12:	f7ff bf0f 	b.w	8008d34 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	200007fc 	.word	0x200007fc

08008f1c <__malloc_unlock>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	@ (8008f24 <__malloc_unlock+0x8>)
 8008f1e:	f7ff bf0a 	b.w	8008d36 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	200007fc 	.word	0x200007fc

08008f28 <__ssputs_r>:
 8008f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	688e      	ldr	r6, [r1, #8]
 8008f2e:	461f      	mov	r7, r3
 8008f30:	42be      	cmp	r6, r7
 8008f32:	680b      	ldr	r3, [r1, #0]
 8008f34:	4682      	mov	sl, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4690      	mov	r8, r2
 8008f3a:	d82d      	bhi.n	8008f98 <__ssputs_r+0x70>
 8008f3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f44:	d026      	beq.n	8008f94 <__ssputs_r+0x6c>
 8008f46:	6965      	ldr	r5, [r4, #20]
 8008f48:	6909      	ldr	r1, [r1, #16]
 8008f4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f4e:	eba3 0901 	sub.w	r9, r3, r1
 8008f52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f56:	1c7b      	adds	r3, r7, #1
 8008f58:	444b      	add	r3, r9
 8008f5a:	106d      	asrs	r5, r5, #1
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	bf38      	it	cc
 8008f60:	461d      	movcc	r5, r3
 8008f62:	0553      	lsls	r3, r2, #21
 8008f64:	d527      	bpl.n	8008fb6 <__ssputs_r+0x8e>
 8008f66:	4629      	mov	r1, r5
 8008f68:	f7ff ff52 	bl	8008e10 <_malloc_r>
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	b360      	cbz	r0, 8008fca <__ssputs_r+0xa2>
 8008f70:	6921      	ldr	r1, [r4, #16]
 8008f72:	464a      	mov	r2, r9
 8008f74:	f000 fae8 	bl	8009548 <memcpy>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	6126      	str	r6, [r4, #16]
 8008f86:	6165      	str	r5, [r4, #20]
 8008f88:	444e      	add	r6, r9
 8008f8a:	eba5 0509 	sub.w	r5, r5, r9
 8008f8e:	6026      	str	r6, [r4, #0]
 8008f90:	60a5      	str	r5, [r4, #8]
 8008f92:	463e      	mov	r6, r7
 8008f94:	42be      	cmp	r6, r7
 8008f96:	d900      	bls.n	8008f9a <__ssputs_r+0x72>
 8008f98:	463e      	mov	r6, r7
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	4641      	mov	r1, r8
 8008fa0:	f000 faa8 	bl	80094f4 <memmove>
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	1b9b      	subs	r3, r3, r6
 8008fa8:	60a3      	str	r3, [r4, #8]
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	4433      	add	r3, r6
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	f000 fad4 	bl	8009564 <_realloc_r>
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d1e0      	bne.n	8008f84 <__ssputs_r+0x5c>
 8008fc2:	6921      	ldr	r1, [r4, #16]
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	f7ff feb7 	bl	8008d38 <_free_r>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	f8ca 3000 	str.w	r3, [sl]
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e7e9      	b.n	8008fb2 <__ssputs_r+0x8a>
	...

08008fe0 <_svfiprintf_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4698      	mov	r8, r3
 8008fe6:	898b      	ldrh	r3, [r1, #12]
 8008fe8:	061b      	lsls	r3, r3, #24
 8008fea:	b09d      	sub	sp, #116	@ 0x74
 8008fec:	4607      	mov	r7, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	d510      	bpl.n	8009016 <_svfiprintf_r+0x36>
 8008ff4:	690b      	ldr	r3, [r1, #16]
 8008ff6:	b973      	cbnz	r3, 8009016 <_svfiprintf_r+0x36>
 8008ff8:	2140      	movs	r1, #64	@ 0x40
 8008ffa:	f7ff ff09 	bl	8008e10 <_malloc_r>
 8008ffe:	6028      	str	r0, [r5, #0]
 8009000:	6128      	str	r0, [r5, #16]
 8009002:	b930      	cbnz	r0, 8009012 <_svfiprintf_r+0x32>
 8009004:	230c      	movs	r3, #12
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	b01d      	add	sp, #116	@ 0x74
 800900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009012:	2340      	movs	r3, #64	@ 0x40
 8009014:	616b      	str	r3, [r5, #20]
 8009016:	2300      	movs	r3, #0
 8009018:	9309      	str	r3, [sp, #36]	@ 0x24
 800901a:	2320      	movs	r3, #32
 800901c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009020:	f8cd 800c 	str.w	r8, [sp, #12]
 8009024:	2330      	movs	r3, #48	@ 0x30
 8009026:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091c4 <_svfiprintf_r+0x1e4>
 800902a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800902e:	f04f 0901 	mov.w	r9, #1
 8009032:	4623      	mov	r3, r4
 8009034:	469a      	mov	sl, r3
 8009036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800903a:	b10a      	cbz	r2, 8009040 <_svfiprintf_r+0x60>
 800903c:	2a25      	cmp	r2, #37	@ 0x25
 800903e:	d1f9      	bne.n	8009034 <_svfiprintf_r+0x54>
 8009040:	ebba 0b04 	subs.w	fp, sl, r4
 8009044:	d00b      	beq.n	800905e <_svfiprintf_r+0x7e>
 8009046:	465b      	mov	r3, fp
 8009048:	4622      	mov	r2, r4
 800904a:	4629      	mov	r1, r5
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff ff6b 	bl	8008f28 <__ssputs_r>
 8009052:	3001      	adds	r0, #1
 8009054:	f000 80a7 	beq.w	80091a6 <_svfiprintf_r+0x1c6>
 8009058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800905a:	445a      	add	r2, fp
 800905c:	9209      	str	r2, [sp, #36]	@ 0x24
 800905e:	f89a 3000 	ldrb.w	r3, [sl]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 809f 	beq.w	80091a6 <_svfiprintf_r+0x1c6>
 8009068:	2300      	movs	r3, #0
 800906a:	f04f 32ff 	mov.w	r2, #4294967295
 800906e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009072:	f10a 0a01 	add.w	sl, sl, #1
 8009076:	9304      	str	r3, [sp, #16]
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800907e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009080:	4654      	mov	r4, sl
 8009082:	2205      	movs	r2, #5
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	484e      	ldr	r0, [pc, #312]	@ (80091c4 <_svfiprintf_r+0x1e4>)
 800908a:	f7f7 f8a9 	bl	80001e0 <memchr>
 800908e:	9a04      	ldr	r2, [sp, #16]
 8009090:	b9d8      	cbnz	r0, 80090ca <_svfiprintf_r+0xea>
 8009092:	06d0      	lsls	r0, r2, #27
 8009094:	bf44      	itt	mi
 8009096:	2320      	movmi	r3, #32
 8009098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800909c:	0711      	lsls	r1, r2, #28
 800909e:	bf44      	itt	mi
 80090a0:	232b      	movmi	r3, #43	@ 0x2b
 80090a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090a6:	f89a 3000 	ldrb.w	r3, [sl]
 80090aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ac:	d015      	beq.n	80090da <_svfiprintf_r+0xfa>
 80090ae:	9a07      	ldr	r2, [sp, #28]
 80090b0:	4654      	mov	r4, sl
 80090b2:	2000      	movs	r0, #0
 80090b4:	f04f 0c0a 	mov.w	ip, #10
 80090b8:	4621      	mov	r1, r4
 80090ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090be:	3b30      	subs	r3, #48	@ 0x30
 80090c0:	2b09      	cmp	r3, #9
 80090c2:	d94b      	bls.n	800915c <_svfiprintf_r+0x17c>
 80090c4:	b1b0      	cbz	r0, 80090f4 <_svfiprintf_r+0x114>
 80090c6:	9207      	str	r2, [sp, #28]
 80090c8:	e014      	b.n	80090f4 <_svfiprintf_r+0x114>
 80090ca:	eba0 0308 	sub.w	r3, r0, r8
 80090ce:	fa09 f303 	lsl.w	r3, r9, r3
 80090d2:	4313      	orrs	r3, r2
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	46a2      	mov	sl, r4
 80090d8:	e7d2      	b.n	8009080 <_svfiprintf_r+0xa0>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	1d19      	adds	r1, r3, #4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	9103      	str	r1, [sp, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bfbb      	ittet	lt
 80090e6:	425b      	neglt	r3, r3
 80090e8:	f042 0202 	orrlt.w	r2, r2, #2
 80090ec:	9307      	strge	r3, [sp, #28]
 80090ee:	9307      	strlt	r3, [sp, #28]
 80090f0:	bfb8      	it	lt
 80090f2:	9204      	strlt	r2, [sp, #16]
 80090f4:	7823      	ldrb	r3, [r4, #0]
 80090f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80090f8:	d10a      	bne.n	8009110 <_svfiprintf_r+0x130>
 80090fa:	7863      	ldrb	r3, [r4, #1]
 80090fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80090fe:	d132      	bne.n	8009166 <_svfiprintf_r+0x186>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	1d1a      	adds	r2, r3, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	9203      	str	r2, [sp, #12]
 8009108:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800910c:	3402      	adds	r4, #2
 800910e:	9305      	str	r3, [sp, #20]
 8009110:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091d4 <_svfiprintf_r+0x1f4>
 8009114:	7821      	ldrb	r1, [r4, #0]
 8009116:	2203      	movs	r2, #3
 8009118:	4650      	mov	r0, sl
 800911a:	f7f7 f861 	bl	80001e0 <memchr>
 800911e:	b138      	cbz	r0, 8009130 <_svfiprintf_r+0x150>
 8009120:	9b04      	ldr	r3, [sp, #16]
 8009122:	eba0 000a 	sub.w	r0, r0, sl
 8009126:	2240      	movs	r2, #64	@ 0x40
 8009128:	4082      	lsls	r2, r0
 800912a:	4313      	orrs	r3, r2
 800912c:	3401      	adds	r4, #1
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009134:	4824      	ldr	r0, [pc, #144]	@ (80091c8 <_svfiprintf_r+0x1e8>)
 8009136:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800913a:	2206      	movs	r2, #6
 800913c:	f7f7 f850 	bl	80001e0 <memchr>
 8009140:	2800      	cmp	r0, #0
 8009142:	d036      	beq.n	80091b2 <_svfiprintf_r+0x1d2>
 8009144:	4b21      	ldr	r3, [pc, #132]	@ (80091cc <_svfiprintf_r+0x1ec>)
 8009146:	bb1b      	cbnz	r3, 8009190 <_svfiprintf_r+0x1b0>
 8009148:	9b03      	ldr	r3, [sp, #12]
 800914a:	3307      	adds	r3, #7
 800914c:	f023 0307 	bic.w	r3, r3, #7
 8009150:	3308      	adds	r3, #8
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009156:	4433      	add	r3, r6
 8009158:	9309      	str	r3, [sp, #36]	@ 0x24
 800915a:	e76a      	b.n	8009032 <_svfiprintf_r+0x52>
 800915c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009160:	460c      	mov	r4, r1
 8009162:	2001      	movs	r0, #1
 8009164:	e7a8      	b.n	80090b8 <_svfiprintf_r+0xd8>
 8009166:	2300      	movs	r3, #0
 8009168:	3401      	adds	r4, #1
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	4619      	mov	r1, r3
 800916e:	f04f 0c0a 	mov.w	ip, #10
 8009172:	4620      	mov	r0, r4
 8009174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009178:	3a30      	subs	r2, #48	@ 0x30
 800917a:	2a09      	cmp	r2, #9
 800917c:	d903      	bls.n	8009186 <_svfiprintf_r+0x1a6>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0c6      	beq.n	8009110 <_svfiprintf_r+0x130>
 8009182:	9105      	str	r1, [sp, #20]
 8009184:	e7c4      	b.n	8009110 <_svfiprintf_r+0x130>
 8009186:	fb0c 2101 	mla	r1, ip, r1, r2
 800918a:	4604      	mov	r4, r0
 800918c:	2301      	movs	r3, #1
 800918e:	e7f0      	b.n	8009172 <_svfiprintf_r+0x192>
 8009190:	ab03      	add	r3, sp, #12
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	462a      	mov	r2, r5
 8009196:	4b0e      	ldr	r3, [pc, #56]	@ (80091d0 <_svfiprintf_r+0x1f0>)
 8009198:	a904      	add	r1, sp, #16
 800919a:	4638      	mov	r0, r7
 800919c:	f3af 8000 	nop.w
 80091a0:	1c42      	adds	r2, r0, #1
 80091a2:	4606      	mov	r6, r0
 80091a4:	d1d6      	bne.n	8009154 <_svfiprintf_r+0x174>
 80091a6:	89ab      	ldrh	r3, [r5, #12]
 80091a8:	065b      	lsls	r3, r3, #25
 80091aa:	f53f af2d 	bmi.w	8009008 <_svfiprintf_r+0x28>
 80091ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091b0:	e72c      	b.n	800900c <_svfiprintf_r+0x2c>
 80091b2:	ab03      	add	r3, sp, #12
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	462a      	mov	r2, r5
 80091b8:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <_svfiprintf_r+0x1f0>)
 80091ba:	a904      	add	r1, sp, #16
 80091bc:	4638      	mov	r0, r7
 80091be:	f000 f879 	bl	80092b4 <_printf_i>
 80091c2:	e7ed      	b.n	80091a0 <_svfiprintf_r+0x1c0>
 80091c4:	0800a6d0 	.word	0x0800a6d0
 80091c8:	0800a6da 	.word	0x0800a6da
 80091cc:	00000000 	.word	0x00000000
 80091d0:	08008f29 	.word	0x08008f29
 80091d4:	0800a6d6 	.word	0x0800a6d6

080091d8 <_printf_common>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	4616      	mov	r6, r2
 80091de:	4698      	mov	r8, r3
 80091e0:	688a      	ldr	r2, [r1, #8]
 80091e2:	690b      	ldr	r3, [r1, #16]
 80091e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	bfb8      	it	lt
 80091ec:	4613      	movlt	r3, r2
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091f4:	4607      	mov	r7, r0
 80091f6:	460c      	mov	r4, r1
 80091f8:	b10a      	cbz	r2, 80091fe <_printf_common+0x26>
 80091fa:	3301      	adds	r3, #1
 80091fc:	6033      	str	r3, [r6, #0]
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	0699      	lsls	r1, r3, #26
 8009202:	bf42      	ittt	mi
 8009204:	6833      	ldrmi	r3, [r6, #0]
 8009206:	3302      	addmi	r3, #2
 8009208:	6033      	strmi	r3, [r6, #0]
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	f015 0506 	ands.w	r5, r5, #6
 8009210:	d106      	bne.n	8009220 <_printf_common+0x48>
 8009212:	f104 0a19 	add.w	sl, r4, #25
 8009216:	68e3      	ldr	r3, [r4, #12]
 8009218:	6832      	ldr	r2, [r6, #0]
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	42ab      	cmp	r3, r5
 800921e:	dc26      	bgt.n	800926e <_printf_common+0x96>
 8009220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	3b00      	subs	r3, #0
 8009228:	bf18      	it	ne
 800922a:	2301      	movne	r3, #1
 800922c:	0692      	lsls	r2, r2, #26
 800922e:	d42b      	bmi.n	8009288 <_printf_common+0xb0>
 8009230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009234:	4641      	mov	r1, r8
 8009236:	4638      	mov	r0, r7
 8009238:	47c8      	blx	r9
 800923a:	3001      	adds	r0, #1
 800923c:	d01e      	beq.n	800927c <_printf_common+0xa4>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	6922      	ldr	r2, [r4, #16]
 8009242:	f003 0306 	and.w	r3, r3, #6
 8009246:	2b04      	cmp	r3, #4
 8009248:	bf02      	ittt	eq
 800924a:	68e5      	ldreq	r5, [r4, #12]
 800924c:	6833      	ldreq	r3, [r6, #0]
 800924e:	1aed      	subeq	r5, r5, r3
 8009250:	68a3      	ldr	r3, [r4, #8]
 8009252:	bf0c      	ite	eq
 8009254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009258:	2500      	movne	r5, #0
 800925a:	4293      	cmp	r3, r2
 800925c:	bfc4      	itt	gt
 800925e:	1a9b      	subgt	r3, r3, r2
 8009260:	18ed      	addgt	r5, r5, r3
 8009262:	2600      	movs	r6, #0
 8009264:	341a      	adds	r4, #26
 8009266:	42b5      	cmp	r5, r6
 8009268:	d11a      	bne.n	80092a0 <_printf_common+0xc8>
 800926a:	2000      	movs	r0, #0
 800926c:	e008      	b.n	8009280 <_printf_common+0xa8>
 800926e:	2301      	movs	r3, #1
 8009270:	4652      	mov	r2, sl
 8009272:	4641      	mov	r1, r8
 8009274:	4638      	mov	r0, r7
 8009276:	47c8      	blx	r9
 8009278:	3001      	adds	r0, #1
 800927a:	d103      	bne.n	8009284 <_printf_common+0xac>
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009284:	3501      	adds	r5, #1
 8009286:	e7c6      	b.n	8009216 <_printf_common+0x3e>
 8009288:	18e1      	adds	r1, r4, r3
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	2030      	movs	r0, #48	@ 0x30
 800928e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009292:	4422      	add	r2, r4
 8009294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800929c:	3302      	adds	r3, #2
 800929e:	e7c7      	b.n	8009230 <_printf_common+0x58>
 80092a0:	2301      	movs	r3, #1
 80092a2:	4622      	mov	r2, r4
 80092a4:	4641      	mov	r1, r8
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c8      	blx	r9
 80092aa:	3001      	adds	r0, #1
 80092ac:	d0e6      	beq.n	800927c <_printf_common+0xa4>
 80092ae:	3601      	adds	r6, #1
 80092b0:	e7d9      	b.n	8009266 <_printf_common+0x8e>
	...

080092b4 <_printf_i>:
 80092b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	7e0f      	ldrb	r7, [r1, #24]
 80092ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092bc:	2f78      	cmp	r7, #120	@ 0x78
 80092be:	4691      	mov	r9, r2
 80092c0:	4680      	mov	r8, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	469a      	mov	sl, r3
 80092c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ca:	d807      	bhi.n	80092dc <_printf_i+0x28>
 80092cc:	2f62      	cmp	r7, #98	@ 0x62
 80092ce:	d80a      	bhi.n	80092e6 <_printf_i+0x32>
 80092d0:	2f00      	cmp	r7, #0
 80092d2:	f000 80d2 	beq.w	800947a <_printf_i+0x1c6>
 80092d6:	2f58      	cmp	r7, #88	@ 0x58
 80092d8:	f000 80b9 	beq.w	800944e <_printf_i+0x19a>
 80092dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092e4:	e03a      	b.n	800935c <_printf_i+0xa8>
 80092e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ea:	2b15      	cmp	r3, #21
 80092ec:	d8f6      	bhi.n	80092dc <_printf_i+0x28>
 80092ee:	a101      	add	r1, pc, #4	@ (adr r1, 80092f4 <_printf_i+0x40>)
 80092f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	08009361 	.word	0x08009361
 80092fc:	080092dd 	.word	0x080092dd
 8009300:	080092dd 	.word	0x080092dd
 8009304:	080092dd 	.word	0x080092dd
 8009308:	080092dd 	.word	0x080092dd
 800930c:	08009361 	.word	0x08009361
 8009310:	080092dd 	.word	0x080092dd
 8009314:	080092dd 	.word	0x080092dd
 8009318:	080092dd 	.word	0x080092dd
 800931c:	080092dd 	.word	0x080092dd
 8009320:	08009461 	.word	0x08009461
 8009324:	0800938b 	.word	0x0800938b
 8009328:	0800941b 	.word	0x0800941b
 800932c:	080092dd 	.word	0x080092dd
 8009330:	080092dd 	.word	0x080092dd
 8009334:	08009483 	.word	0x08009483
 8009338:	080092dd 	.word	0x080092dd
 800933c:	0800938b 	.word	0x0800938b
 8009340:	080092dd 	.word	0x080092dd
 8009344:	080092dd 	.word	0x080092dd
 8009348:	08009423 	.word	0x08009423
 800934c:	6833      	ldr	r3, [r6, #0]
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6032      	str	r2, [r6, #0]
 8009354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800935c:	2301      	movs	r3, #1
 800935e:	e09d      	b.n	800949c <_printf_i+0x1e8>
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	6820      	ldr	r0, [r4, #0]
 8009364:	1d19      	adds	r1, r3, #4
 8009366:	6031      	str	r1, [r6, #0]
 8009368:	0606      	lsls	r6, r0, #24
 800936a:	d501      	bpl.n	8009370 <_printf_i+0xbc>
 800936c:	681d      	ldr	r5, [r3, #0]
 800936e:	e003      	b.n	8009378 <_printf_i+0xc4>
 8009370:	0645      	lsls	r5, r0, #25
 8009372:	d5fb      	bpl.n	800936c <_printf_i+0xb8>
 8009374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009378:	2d00      	cmp	r5, #0
 800937a:	da03      	bge.n	8009384 <_printf_i+0xd0>
 800937c:	232d      	movs	r3, #45	@ 0x2d
 800937e:	426d      	negs	r5, r5
 8009380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009384:	4859      	ldr	r0, [pc, #356]	@ (80094ec <_printf_i+0x238>)
 8009386:	230a      	movs	r3, #10
 8009388:	e011      	b.n	80093ae <_printf_i+0xfa>
 800938a:	6821      	ldr	r1, [r4, #0]
 800938c:	6833      	ldr	r3, [r6, #0]
 800938e:	0608      	lsls	r0, r1, #24
 8009390:	f853 5b04 	ldr.w	r5, [r3], #4
 8009394:	d402      	bmi.n	800939c <_printf_i+0xe8>
 8009396:	0649      	lsls	r1, r1, #25
 8009398:	bf48      	it	mi
 800939a:	b2ad      	uxthmi	r5, r5
 800939c:	2f6f      	cmp	r7, #111	@ 0x6f
 800939e:	4853      	ldr	r0, [pc, #332]	@ (80094ec <_printf_i+0x238>)
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	bf14      	ite	ne
 80093a4:	230a      	movne	r3, #10
 80093a6:	2308      	moveq	r3, #8
 80093a8:	2100      	movs	r1, #0
 80093aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093ae:	6866      	ldr	r6, [r4, #4]
 80093b0:	60a6      	str	r6, [r4, #8]
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	bfa2      	ittt	ge
 80093b6:	6821      	ldrge	r1, [r4, #0]
 80093b8:	f021 0104 	bicge.w	r1, r1, #4
 80093bc:	6021      	strge	r1, [r4, #0]
 80093be:	b90d      	cbnz	r5, 80093c4 <_printf_i+0x110>
 80093c0:	2e00      	cmp	r6, #0
 80093c2:	d04b      	beq.n	800945c <_printf_i+0x1a8>
 80093c4:	4616      	mov	r6, r2
 80093c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ca:	fb03 5711 	mls	r7, r3, r1, r5
 80093ce:	5dc7      	ldrb	r7, [r0, r7]
 80093d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093d4:	462f      	mov	r7, r5
 80093d6:	42bb      	cmp	r3, r7
 80093d8:	460d      	mov	r5, r1
 80093da:	d9f4      	bls.n	80093c6 <_printf_i+0x112>
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d10b      	bne.n	80093f8 <_printf_i+0x144>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	07df      	lsls	r7, r3, #31
 80093e4:	d508      	bpl.n	80093f8 <_printf_i+0x144>
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	4299      	cmp	r1, r3
 80093ec:	bfde      	ittt	le
 80093ee:	2330      	movle	r3, #48	@ 0x30
 80093f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093f8:	1b92      	subs	r2, r2, r6
 80093fa:	6122      	str	r2, [r4, #16]
 80093fc:	f8cd a000 	str.w	sl, [sp]
 8009400:	464b      	mov	r3, r9
 8009402:	aa03      	add	r2, sp, #12
 8009404:	4621      	mov	r1, r4
 8009406:	4640      	mov	r0, r8
 8009408:	f7ff fee6 	bl	80091d8 <_printf_common>
 800940c:	3001      	adds	r0, #1
 800940e:	d14a      	bne.n	80094a6 <_printf_i+0x1f2>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	b004      	add	sp, #16
 8009416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	f043 0320 	orr.w	r3, r3, #32
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	4833      	ldr	r0, [pc, #204]	@ (80094f0 <_printf_i+0x23c>)
 8009424:	2778      	movs	r7, #120	@ 0x78
 8009426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	6831      	ldr	r1, [r6, #0]
 800942e:	061f      	lsls	r7, r3, #24
 8009430:	f851 5b04 	ldr.w	r5, [r1], #4
 8009434:	d402      	bmi.n	800943c <_printf_i+0x188>
 8009436:	065f      	lsls	r7, r3, #25
 8009438:	bf48      	it	mi
 800943a:	b2ad      	uxthmi	r5, r5
 800943c:	6031      	str	r1, [r6, #0]
 800943e:	07d9      	lsls	r1, r3, #31
 8009440:	bf44      	itt	mi
 8009442:	f043 0320 	orrmi.w	r3, r3, #32
 8009446:	6023      	strmi	r3, [r4, #0]
 8009448:	b11d      	cbz	r5, 8009452 <_printf_i+0x19e>
 800944a:	2310      	movs	r3, #16
 800944c:	e7ac      	b.n	80093a8 <_printf_i+0xf4>
 800944e:	4827      	ldr	r0, [pc, #156]	@ (80094ec <_printf_i+0x238>)
 8009450:	e7e9      	b.n	8009426 <_printf_i+0x172>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	f023 0320 	bic.w	r3, r3, #32
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	e7f6      	b.n	800944a <_printf_i+0x196>
 800945c:	4616      	mov	r6, r2
 800945e:	e7bd      	b.n	80093dc <_printf_i+0x128>
 8009460:	6833      	ldr	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	6961      	ldr	r1, [r4, #20]
 8009466:	1d18      	adds	r0, r3, #4
 8009468:	6030      	str	r0, [r6, #0]
 800946a:	062e      	lsls	r6, r5, #24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	d501      	bpl.n	8009474 <_printf_i+0x1c0>
 8009470:	6019      	str	r1, [r3, #0]
 8009472:	e002      	b.n	800947a <_printf_i+0x1c6>
 8009474:	0668      	lsls	r0, r5, #25
 8009476:	d5fb      	bpl.n	8009470 <_printf_i+0x1bc>
 8009478:	8019      	strh	r1, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	4616      	mov	r6, r2
 8009480:	e7bc      	b.n	80093fc <_printf_i+0x148>
 8009482:	6833      	ldr	r3, [r6, #0]
 8009484:	1d1a      	adds	r2, r3, #4
 8009486:	6032      	str	r2, [r6, #0]
 8009488:	681e      	ldr	r6, [r3, #0]
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	2100      	movs	r1, #0
 800948e:	4630      	mov	r0, r6
 8009490:	f7f6 fea6 	bl	80001e0 <memchr>
 8009494:	b108      	cbz	r0, 800949a <_printf_i+0x1e6>
 8009496:	1b80      	subs	r0, r0, r6
 8009498:	6060      	str	r0, [r4, #4]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	2300      	movs	r3, #0
 80094a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a4:	e7aa      	b.n	80093fc <_printf_i+0x148>
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	4632      	mov	r2, r6
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d0ad      	beq.n	8009410 <_printf_i+0x15c>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	079b      	lsls	r3, r3, #30
 80094b8:	d413      	bmi.n	80094e2 <_printf_i+0x22e>
 80094ba:	68e0      	ldr	r0, [r4, #12]
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	4298      	cmp	r0, r3
 80094c0:	bfb8      	it	lt
 80094c2:	4618      	movlt	r0, r3
 80094c4:	e7a6      	b.n	8009414 <_printf_i+0x160>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4632      	mov	r2, r6
 80094ca:	4649      	mov	r1, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	47d0      	blx	sl
 80094d0:	3001      	adds	r0, #1
 80094d2:	d09d      	beq.n	8009410 <_printf_i+0x15c>
 80094d4:	3501      	adds	r5, #1
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	9903      	ldr	r1, [sp, #12]
 80094da:	1a5b      	subs	r3, r3, r1
 80094dc:	42ab      	cmp	r3, r5
 80094de:	dcf2      	bgt.n	80094c6 <_printf_i+0x212>
 80094e0:	e7eb      	b.n	80094ba <_printf_i+0x206>
 80094e2:	2500      	movs	r5, #0
 80094e4:	f104 0619 	add.w	r6, r4, #25
 80094e8:	e7f5      	b.n	80094d6 <_printf_i+0x222>
 80094ea:	bf00      	nop
 80094ec:	0800a6e1 	.word	0x0800a6e1
 80094f0:	0800a6f2 	.word	0x0800a6f2

080094f4 <memmove>:
 80094f4:	4288      	cmp	r0, r1
 80094f6:	b510      	push	{r4, lr}
 80094f8:	eb01 0402 	add.w	r4, r1, r2
 80094fc:	d902      	bls.n	8009504 <memmove+0x10>
 80094fe:	4284      	cmp	r4, r0
 8009500:	4623      	mov	r3, r4
 8009502:	d807      	bhi.n	8009514 <memmove+0x20>
 8009504:	1e43      	subs	r3, r0, #1
 8009506:	42a1      	cmp	r1, r4
 8009508:	d008      	beq.n	800951c <memmove+0x28>
 800950a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800950e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009512:	e7f8      	b.n	8009506 <memmove+0x12>
 8009514:	4402      	add	r2, r0
 8009516:	4601      	mov	r1, r0
 8009518:	428a      	cmp	r2, r1
 800951a:	d100      	bne.n	800951e <memmove+0x2a>
 800951c:	bd10      	pop	{r4, pc}
 800951e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009526:	e7f7      	b.n	8009518 <memmove+0x24>

08009528 <_sbrk_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d06      	ldr	r5, [pc, #24]	@ (8009544 <_sbrk_r+0x1c>)
 800952c:	2300      	movs	r3, #0
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	602b      	str	r3, [r5, #0]
 8009534:	f7f9 fa02 	bl	800293c <_sbrk>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_sbrk_r+0x1a>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_sbrk_r+0x1a>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	200007f8 	.word	0x200007f8

08009548 <memcpy>:
 8009548:	440a      	add	r2, r1
 800954a:	4291      	cmp	r1, r2
 800954c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009550:	d100      	bne.n	8009554 <memcpy+0xc>
 8009552:	4770      	bx	lr
 8009554:	b510      	push	{r4, lr}
 8009556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800955e:	4291      	cmp	r1, r2
 8009560:	d1f9      	bne.n	8009556 <memcpy+0xe>
 8009562:	bd10      	pop	{r4, pc}

08009564 <_realloc_r>:
 8009564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	4680      	mov	r8, r0
 800956a:	4615      	mov	r5, r2
 800956c:	460c      	mov	r4, r1
 800956e:	b921      	cbnz	r1, 800957a <_realloc_r+0x16>
 8009570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	4611      	mov	r1, r2
 8009576:	f7ff bc4b 	b.w	8008e10 <_malloc_r>
 800957a:	b92a      	cbnz	r2, 8009588 <_realloc_r+0x24>
 800957c:	f7ff fbdc 	bl	8008d38 <_free_r>
 8009580:	2400      	movs	r4, #0
 8009582:	4620      	mov	r0, r4
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009588:	f000 f81a 	bl	80095c0 <_malloc_usable_size_r>
 800958c:	4285      	cmp	r5, r0
 800958e:	4606      	mov	r6, r0
 8009590:	d802      	bhi.n	8009598 <_realloc_r+0x34>
 8009592:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009596:	d8f4      	bhi.n	8009582 <_realloc_r+0x1e>
 8009598:	4629      	mov	r1, r5
 800959a:	4640      	mov	r0, r8
 800959c:	f7ff fc38 	bl	8008e10 <_malloc_r>
 80095a0:	4607      	mov	r7, r0
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d0ec      	beq.n	8009580 <_realloc_r+0x1c>
 80095a6:	42b5      	cmp	r5, r6
 80095a8:	462a      	mov	r2, r5
 80095aa:	4621      	mov	r1, r4
 80095ac:	bf28      	it	cs
 80095ae:	4632      	movcs	r2, r6
 80095b0:	f7ff ffca 	bl	8009548 <memcpy>
 80095b4:	4621      	mov	r1, r4
 80095b6:	4640      	mov	r0, r8
 80095b8:	f7ff fbbe 	bl	8008d38 <_free_r>
 80095bc:	463c      	mov	r4, r7
 80095be:	e7e0      	b.n	8009582 <_realloc_r+0x1e>

080095c0 <_malloc_usable_size_r>:
 80095c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c4:	1f18      	subs	r0, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bfbc      	itt	lt
 80095ca:	580b      	ldrlt	r3, [r1, r0]
 80095cc:	18c0      	addlt	r0, r0, r3
 80095ce:	4770      	bx	lr

080095d0 <pow>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	ed2d 8b02 	vpush	{d8}
 80095d6:	eeb0 8a40 	vmov.f32	s16, s0
 80095da:	eef0 8a60 	vmov.f32	s17, s1
 80095de:	ec55 4b11 	vmov	r4, r5, d1
 80095e2:	f000 f871 	bl	80096c8 <__ieee754_pow>
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	ec57 6b10 	vmov	r6, r7, d0
 80095f2:	f7f7 fa9b 	bl	8000b2c <__aeabi_dcmpun>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d13b      	bne.n	8009672 <pow+0xa2>
 80095fa:	ec51 0b18 	vmov	r0, r1, d8
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	f7f7 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009606:	b1b8      	cbz	r0, 8009638 <pow+0x68>
 8009608:	2200      	movs	r2, #0
 800960a:	2300      	movs	r3, #0
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f7 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009614:	2800      	cmp	r0, #0
 8009616:	d146      	bne.n	80096a6 <pow+0xd6>
 8009618:	ec45 4b10 	vmov	d0, r4, r5
 800961c:	f000 f848 	bl	80096b0 <finite>
 8009620:	b338      	cbz	r0, 8009672 <pow+0xa2>
 8009622:	2200      	movs	r2, #0
 8009624:	2300      	movs	r3, #0
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f7 fa57 	bl	8000adc <__aeabi_dcmplt>
 800962e:	b300      	cbz	r0, 8009672 <pow+0xa2>
 8009630:	f7ff fb56 	bl	8008ce0 <__errno>
 8009634:	2322      	movs	r3, #34	@ 0x22
 8009636:	e01b      	b.n	8009670 <pow+0xa0>
 8009638:	ec47 6b10 	vmov	d0, r6, r7
 800963c:	f000 f838 	bl	80096b0 <finite>
 8009640:	b9e0      	cbnz	r0, 800967c <pow+0xac>
 8009642:	eeb0 0a48 	vmov.f32	s0, s16
 8009646:	eef0 0a68 	vmov.f32	s1, s17
 800964a:	f000 f831 	bl	80096b0 <finite>
 800964e:	b1a8      	cbz	r0, 800967c <pow+0xac>
 8009650:	ec45 4b10 	vmov	d0, r4, r5
 8009654:	f000 f82c 	bl	80096b0 <finite>
 8009658:	b180      	cbz	r0, 800967c <pow+0xac>
 800965a:	4632      	mov	r2, r6
 800965c:	463b      	mov	r3, r7
 800965e:	4630      	mov	r0, r6
 8009660:	4639      	mov	r1, r7
 8009662:	f7f7 fa63 	bl	8000b2c <__aeabi_dcmpun>
 8009666:	2800      	cmp	r0, #0
 8009668:	d0e2      	beq.n	8009630 <pow+0x60>
 800966a:	f7ff fb39 	bl	8008ce0 <__errno>
 800966e:	2321      	movs	r3, #33	@ 0x21
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	ecbd 8b02 	vpop	{d8}
 8009676:	ec47 6b10 	vmov	d0, r6, r7
 800967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f7 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009688:	2800      	cmp	r0, #0
 800968a:	d0f2      	beq.n	8009672 <pow+0xa2>
 800968c:	eeb0 0a48 	vmov.f32	s0, s16
 8009690:	eef0 0a68 	vmov.f32	s1, s17
 8009694:	f000 f80c 	bl	80096b0 <finite>
 8009698:	2800      	cmp	r0, #0
 800969a:	d0ea      	beq.n	8009672 <pow+0xa2>
 800969c:	ec45 4b10 	vmov	d0, r4, r5
 80096a0:	f000 f806 	bl	80096b0 <finite>
 80096a4:	e7c3      	b.n	800962e <pow+0x5e>
 80096a6:	4f01      	ldr	r7, [pc, #4]	@ (80096ac <pow+0xdc>)
 80096a8:	2600      	movs	r6, #0
 80096aa:	e7e2      	b.n	8009672 <pow+0xa2>
 80096ac:	3ff00000 	.word	0x3ff00000

080096b0 <finite>:
 80096b0:	b082      	sub	sp, #8
 80096b2:	ed8d 0b00 	vstr	d0, [sp]
 80096b6:	9801      	ldr	r0, [sp, #4]
 80096b8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80096bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80096c0:	0fc0      	lsrs	r0, r0, #31
 80096c2:	b002      	add	sp, #8
 80096c4:	4770      	bx	lr
	...

080096c8 <__ieee754_pow>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	b091      	sub	sp, #68	@ 0x44
 80096ce:	ed8d 1b00 	vstr	d1, [sp]
 80096d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80096d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80096da:	ea5a 0001 	orrs.w	r0, sl, r1
 80096de:	ec57 6b10 	vmov	r6, r7, d0
 80096e2:	d113      	bne.n	800970c <__ieee754_pow+0x44>
 80096e4:	19b3      	adds	r3, r6, r6
 80096e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80096ea:	4152      	adcs	r2, r2
 80096ec:	4298      	cmp	r0, r3
 80096ee:	4b98      	ldr	r3, [pc, #608]	@ (8009950 <__ieee754_pow+0x288>)
 80096f0:	4193      	sbcs	r3, r2
 80096f2:	f080 84ea 	bcs.w	800a0ca <__ieee754_pow+0xa02>
 80096f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096fa:	4630      	mov	r0, r6
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f6 fdc5 	bl	800028c <__adddf3>
 8009702:	ec41 0b10 	vmov	d0, r0, r1
 8009706:	b011      	add	sp, #68	@ 0x44
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	4a91      	ldr	r2, [pc, #580]	@ (8009954 <__ieee754_pow+0x28c>)
 800970e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009712:	4590      	cmp	r8, r2
 8009714:	463d      	mov	r5, r7
 8009716:	4633      	mov	r3, r6
 8009718:	d806      	bhi.n	8009728 <__ieee754_pow+0x60>
 800971a:	d101      	bne.n	8009720 <__ieee754_pow+0x58>
 800971c:	2e00      	cmp	r6, #0
 800971e:	d1ea      	bne.n	80096f6 <__ieee754_pow+0x2e>
 8009720:	4592      	cmp	sl, r2
 8009722:	d801      	bhi.n	8009728 <__ieee754_pow+0x60>
 8009724:	d10e      	bne.n	8009744 <__ieee754_pow+0x7c>
 8009726:	b169      	cbz	r1, 8009744 <__ieee754_pow+0x7c>
 8009728:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800972c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009730:	431d      	orrs	r5, r3
 8009732:	d1e0      	bne.n	80096f6 <__ieee754_pow+0x2e>
 8009734:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009738:	18db      	adds	r3, r3, r3
 800973a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800973e:	4152      	adcs	r2, r2
 8009740:	429d      	cmp	r5, r3
 8009742:	e7d4      	b.n	80096ee <__ieee754_pow+0x26>
 8009744:	2d00      	cmp	r5, #0
 8009746:	46c3      	mov	fp, r8
 8009748:	da3a      	bge.n	80097c0 <__ieee754_pow+0xf8>
 800974a:	4a83      	ldr	r2, [pc, #524]	@ (8009958 <__ieee754_pow+0x290>)
 800974c:	4592      	cmp	sl, r2
 800974e:	d84d      	bhi.n	80097ec <__ieee754_pow+0x124>
 8009750:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009754:	4592      	cmp	sl, r2
 8009756:	f240 84c7 	bls.w	800a0e8 <__ieee754_pow+0xa20>
 800975a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800975e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009762:	2a14      	cmp	r2, #20
 8009764:	dd0f      	ble.n	8009786 <__ieee754_pow+0xbe>
 8009766:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800976a:	fa21 f402 	lsr.w	r4, r1, r2
 800976e:	fa04 f202 	lsl.w	r2, r4, r2
 8009772:	428a      	cmp	r2, r1
 8009774:	f040 84b8 	bne.w	800a0e8 <__ieee754_pow+0xa20>
 8009778:	f004 0401 	and.w	r4, r4, #1
 800977c:	f1c4 0402 	rsb	r4, r4, #2
 8009780:	2900      	cmp	r1, #0
 8009782:	d158      	bne.n	8009836 <__ieee754_pow+0x16e>
 8009784:	e00e      	b.n	80097a4 <__ieee754_pow+0xdc>
 8009786:	2900      	cmp	r1, #0
 8009788:	d154      	bne.n	8009834 <__ieee754_pow+0x16c>
 800978a:	f1c2 0214 	rsb	r2, r2, #20
 800978e:	fa4a f402 	asr.w	r4, sl, r2
 8009792:	fa04 f202 	lsl.w	r2, r4, r2
 8009796:	4552      	cmp	r2, sl
 8009798:	f040 84a3 	bne.w	800a0e2 <__ieee754_pow+0xa1a>
 800979c:	f004 0401 	and.w	r4, r4, #1
 80097a0:	f1c4 0402 	rsb	r4, r4, #2
 80097a4:	4a6d      	ldr	r2, [pc, #436]	@ (800995c <__ieee754_pow+0x294>)
 80097a6:	4592      	cmp	sl, r2
 80097a8:	d12e      	bne.n	8009808 <__ieee754_pow+0x140>
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	f280 8494 	bge.w	800a0da <__ieee754_pow+0xa12>
 80097b2:	496a      	ldr	r1, [pc, #424]	@ (800995c <__ieee754_pow+0x294>)
 80097b4:	4632      	mov	r2, r6
 80097b6:	463b      	mov	r3, r7
 80097b8:	2000      	movs	r0, #0
 80097ba:	f7f7 f847 	bl	800084c <__aeabi_ddiv>
 80097be:	e7a0      	b.n	8009702 <__ieee754_pow+0x3a>
 80097c0:	2400      	movs	r4, #0
 80097c2:	bbc1      	cbnz	r1, 8009836 <__ieee754_pow+0x16e>
 80097c4:	4a63      	ldr	r2, [pc, #396]	@ (8009954 <__ieee754_pow+0x28c>)
 80097c6:	4592      	cmp	sl, r2
 80097c8:	d1ec      	bne.n	80097a4 <__ieee754_pow+0xdc>
 80097ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80097ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80097d2:	431a      	orrs	r2, r3
 80097d4:	f000 8479 	beq.w	800a0ca <__ieee754_pow+0xa02>
 80097d8:	4b61      	ldr	r3, [pc, #388]	@ (8009960 <__ieee754_pow+0x298>)
 80097da:	4598      	cmp	r8, r3
 80097dc:	d908      	bls.n	80097f0 <__ieee754_pow+0x128>
 80097de:	f1b9 0f00 	cmp.w	r9, #0
 80097e2:	f2c0 8476 	blt.w	800a0d2 <__ieee754_pow+0xa0a>
 80097e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ea:	e78a      	b.n	8009702 <__ieee754_pow+0x3a>
 80097ec:	2402      	movs	r4, #2
 80097ee:	e7e8      	b.n	80097c2 <__ieee754_pow+0xfa>
 80097f0:	f1b9 0f00 	cmp.w	r9, #0
 80097f4:	f04f 0000 	mov.w	r0, #0
 80097f8:	f04f 0100 	mov.w	r1, #0
 80097fc:	da81      	bge.n	8009702 <__ieee754_pow+0x3a>
 80097fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009802:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009806:	e77c      	b.n	8009702 <__ieee754_pow+0x3a>
 8009808:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800980c:	d106      	bne.n	800981c <__ieee754_pow+0x154>
 800980e:	4632      	mov	r2, r6
 8009810:	463b      	mov	r3, r7
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 feef 	bl	80005f8 <__aeabi_dmul>
 800981a:	e772      	b.n	8009702 <__ieee754_pow+0x3a>
 800981c:	4a51      	ldr	r2, [pc, #324]	@ (8009964 <__ieee754_pow+0x29c>)
 800981e:	4591      	cmp	r9, r2
 8009820:	d109      	bne.n	8009836 <__ieee754_pow+0x16e>
 8009822:	2d00      	cmp	r5, #0
 8009824:	db07      	blt.n	8009836 <__ieee754_pow+0x16e>
 8009826:	ec47 6b10 	vmov	d0, r6, r7
 800982a:	b011      	add	sp, #68	@ 0x44
 800982c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	f000 bd52 	b.w	800a2d8 <__ieee754_sqrt>
 8009834:	2400      	movs	r4, #0
 8009836:	ec47 6b10 	vmov	d0, r6, r7
 800983a:	9302      	str	r3, [sp, #8]
 800983c:	f000 fc88 	bl	800a150 <fabs>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	ec51 0b10 	vmov	r0, r1, d0
 8009846:	bb53      	cbnz	r3, 800989e <__ieee754_pow+0x1d6>
 8009848:	4b44      	ldr	r3, [pc, #272]	@ (800995c <__ieee754_pow+0x294>)
 800984a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800984e:	429a      	cmp	r2, r3
 8009850:	d002      	beq.n	8009858 <__ieee754_pow+0x190>
 8009852:	f1b8 0f00 	cmp.w	r8, #0
 8009856:	d122      	bne.n	800989e <__ieee754_pow+0x1d6>
 8009858:	f1b9 0f00 	cmp.w	r9, #0
 800985c:	da05      	bge.n	800986a <__ieee754_pow+0x1a2>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	2000      	movs	r0, #0
 8009864:	493d      	ldr	r1, [pc, #244]	@ (800995c <__ieee754_pow+0x294>)
 8009866:	f7f6 fff1 	bl	800084c <__aeabi_ddiv>
 800986a:	2d00      	cmp	r5, #0
 800986c:	f6bf af49 	bge.w	8009702 <__ieee754_pow+0x3a>
 8009870:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009874:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009878:	ea58 0804 	orrs.w	r8, r8, r4
 800987c:	d108      	bne.n	8009890 <__ieee754_pow+0x1c8>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4610      	mov	r0, r2
 8009884:	4619      	mov	r1, r3
 8009886:	f7f6 fcff 	bl	8000288 <__aeabi_dsub>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	e794      	b.n	80097ba <__ieee754_pow+0xf2>
 8009890:	2c01      	cmp	r4, #1
 8009892:	f47f af36 	bne.w	8009702 <__ieee754_pow+0x3a>
 8009896:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800989a:	4619      	mov	r1, r3
 800989c:	e731      	b.n	8009702 <__ieee754_pow+0x3a>
 800989e:	0feb      	lsrs	r3, r5, #31
 80098a0:	3b01      	subs	r3, #1
 80098a2:	ea53 0204 	orrs.w	r2, r3, r4
 80098a6:	d102      	bne.n	80098ae <__ieee754_pow+0x1e6>
 80098a8:	4632      	mov	r2, r6
 80098aa:	463b      	mov	r3, r7
 80098ac:	e7e9      	b.n	8009882 <__ieee754_pow+0x1ba>
 80098ae:	3c01      	subs	r4, #1
 80098b0:	431c      	orrs	r4, r3
 80098b2:	d016      	beq.n	80098e2 <__ieee754_pow+0x21a>
 80098b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009940 <__ieee754_pow+0x278>
 80098b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80098bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098c0:	f240 8112 	bls.w	8009ae8 <__ieee754_pow+0x420>
 80098c4:	4b28      	ldr	r3, [pc, #160]	@ (8009968 <__ieee754_pow+0x2a0>)
 80098c6:	459a      	cmp	sl, r3
 80098c8:	4b25      	ldr	r3, [pc, #148]	@ (8009960 <__ieee754_pow+0x298>)
 80098ca:	d916      	bls.n	80098fa <__ieee754_pow+0x232>
 80098cc:	4598      	cmp	r8, r3
 80098ce:	d80b      	bhi.n	80098e8 <__ieee754_pow+0x220>
 80098d0:	f1b9 0f00 	cmp.w	r9, #0
 80098d4:	da0b      	bge.n	80098ee <__ieee754_pow+0x226>
 80098d6:	2000      	movs	r0, #0
 80098d8:	b011      	add	sp, #68	@ 0x44
 80098da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098de:	f000 bcf3 	b.w	800a2c8 <__math_oflow>
 80098e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009948 <__ieee754_pow+0x280>
 80098e6:	e7e7      	b.n	80098b8 <__ieee754_pow+0x1f0>
 80098e8:	f1b9 0f00 	cmp.w	r9, #0
 80098ec:	dcf3      	bgt.n	80098d6 <__ieee754_pow+0x20e>
 80098ee:	2000      	movs	r0, #0
 80098f0:	b011      	add	sp, #68	@ 0x44
 80098f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f6:	f000 bcdf 	b.w	800a2b8 <__math_uflow>
 80098fa:	4598      	cmp	r8, r3
 80098fc:	d20c      	bcs.n	8009918 <__ieee754_pow+0x250>
 80098fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009902:	2200      	movs	r2, #0
 8009904:	2300      	movs	r3, #0
 8009906:	f7f7 f8e9 	bl	8000adc <__aeabi_dcmplt>
 800990a:	3800      	subs	r0, #0
 800990c:	bf18      	it	ne
 800990e:	2001      	movne	r0, #1
 8009910:	f1b9 0f00 	cmp.w	r9, #0
 8009914:	daec      	bge.n	80098f0 <__ieee754_pow+0x228>
 8009916:	e7df      	b.n	80098d8 <__ieee754_pow+0x210>
 8009918:	4b10      	ldr	r3, [pc, #64]	@ (800995c <__ieee754_pow+0x294>)
 800991a:	4598      	cmp	r8, r3
 800991c:	f04f 0200 	mov.w	r2, #0
 8009920:	d924      	bls.n	800996c <__ieee754_pow+0x2a4>
 8009922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009926:	2300      	movs	r3, #0
 8009928:	f7f7 f8d8 	bl	8000adc <__aeabi_dcmplt>
 800992c:	3800      	subs	r0, #0
 800992e:	bf18      	it	ne
 8009930:	2001      	movne	r0, #1
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	dccf      	bgt.n	80098d8 <__ieee754_pow+0x210>
 8009938:	e7da      	b.n	80098f0 <__ieee754_pow+0x228>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	00000000 	.word	0x00000000
 8009944:	3ff00000 	.word	0x3ff00000
 8009948:	00000000 	.word	0x00000000
 800994c:	bff00000 	.word	0xbff00000
 8009950:	fff00000 	.word	0xfff00000
 8009954:	7ff00000 	.word	0x7ff00000
 8009958:	433fffff 	.word	0x433fffff
 800995c:	3ff00000 	.word	0x3ff00000
 8009960:	3fefffff 	.word	0x3fefffff
 8009964:	3fe00000 	.word	0x3fe00000
 8009968:	43f00000 	.word	0x43f00000
 800996c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ad8 <__ieee754_pow+0x410>)
 800996e:	f7f6 fc8b 	bl	8000288 <__aeabi_dsub>
 8009972:	a351      	add	r3, pc, #324	@ (adr r3, 8009ab8 <__ieee754_pow+0x3f0>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	f7f6 fe3c 	bl	80005f8 <__aeabi_dmul>
 8009980:	a34f      	add	r3, pc, #316	@ (adr r3, 8009ac0 <__ieee754_pow+0x3f8>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	4620      	mov	r0, r4
 800998c:	4629      	mov	r1, r5
 800998e:	f7f6 fe33 	bl	80005f8 <__aeabi_dmul>
 8009992:	4b52      	ldr	r3, [pc, #328]	@ (8009adc <__ieee754_pow+0x414>)
 8009994:	4682      	mov	sl, r0
 8009996:	468b      	mov	fp, r1
 8009998:	2200      	movs	r2, #0
 800999a:	4620      	mov	r0, r4
 800999c:	4629      	mov	r1, r5
 800999e:	f7f6 fe2b 	bl	80005f8 <__aeabi_dmul>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	a148      	add	r1, pc, #288	@ (adr r1, 8009ac8 <__ieee754_pow+0x400>)
 80099a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ac:	f7f6 fc6c 	bl	8000288 <__aeabi_dsub>
 80099b0:	4622      	mov	r2, r4
 80099b2:	462b      	mov	r3, r5
 80099b4:	f7f6 fe20 	bl	80005f8 <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	2000      	movs	r0, #0
 80099be:	4948      	ldr	r1, [pc, #288]	@ (8009ae0 <__ieee754_pow+0x418>)
 80099c0:	f7f6 fc62 	bl	8000288 <__aeabi_dsub>
 80099c4:	4622      	mov	r2, r4
 80099c6:	4680      	mov	r8, r0
 80099c8:	4689      	mov	r9, r1
 80099ca:	462b      	mov	r3, r5
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fe12 	bl	80005f8 <__aeabi_dmul>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4640      	mov	r0, r8
 80099da:	4649      	mov	r1, r9
 80099dc:	f7f6 fe0c 	bl	80005f8 <__aeabi_dmul>
 80099e0:	a33b      	add	r3, pc, #236	@ (adr r3, 8009ad0 <__ieee754_pow+0x408>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fe07 	bl	80005f8 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4650      	mov	r0, sl
 80099f0:	4659      	mov	r1, fp
 80099f2:	f7f6 fc49 	bl	8000288 <__aeabi_dsub>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7f6 fc43 	bl	800028c <__adddf3>
 8009a06:	2400      	movs	r4, #0
 8009a08:	4632      	mov	r2, r6
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	460d      	mov	r5, r1
 8009a10:	f7f6 fc3a 	bl	8000288 <__aeabi_dsub>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f6 fc34 	bl	8000288 <__aeabi_dsub>
 8009a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	4652      	mov	r2, sl
 8009a36:	465b      	mov	r3, fp
 8009a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a3c:	f7f6 fc24 	bl	8000288 <__aeabi_dsub>
 8009a40:	4622      	mov	r2, r4
 8009a42:	462b      	mov	r3, r5
 8009a44:	f7f6 fdd8 	bl	80005f8 <__aeabi_dmul>
 8009a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	4689      	mov	r9, r1
 8009a50:	4630      	mov	r0, r6
 8009a52:	4639      	mov	r1, r7
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f6 fc14 	bl	800028c <__adddf3>
 8009a64:	4652      	mov	r2, sl
 8009a66:	465b      	mov	r3, fp
 8009a68:	4606      	mov	r6, r0
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	f7f6 fdc2 	bl	80005f8 <__aeabi_dmul>
 8009a74:	460b      	mov	r3, r1
 8009a76:	4602      	mov	r2, r0
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4689      	mov	r9, r1
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4639      	mov	r1, r7
 8009a80:	f7f6 fc04 	bl	800028c <__adddf3>
 8009a84:	4b17      	ldr	r3, [pc, #92]	@ (8009ae4 <__ieee754_pow+0x41c>)
 8009a86:	4299      	cmp	r1, r3
 8009a88:	4604      	mov	r4, r0
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	468a      	mov	sl, r1
 8009a8e:	468b      	mov	fp, r1
 8009a90:	f340 82ef 	ble.w	800a072 <__ieee754_pow+0x9aa>
 8009a94:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009a98:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009a9c:	4303      	orrs	r3, r0
 8009a9e:	f000 81e8 	beq.w	8009e72 <__ieee754_pow+0x7aa>
 8009aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f7f7 f817 	bl	8000adc <__aeabi_dcmplt>
 8009aae:	3800      	subs	r0, #0
 8009ab0:	bf18      	it	ne
 8009ab2:	2001      	movne	r0, #1
 8009ab4:	e710      	b.n	80098d8 <__ieee754_pow+0x210>
 8009ab6:	bf00      	nop
 8009ab8:	60000000 	.word	0x60000000
 8009abc:	3ff71547 	.word	0x3ff71547
 8009ac0:	f85ddf44 	.word	0xf85ddf44
 8009ac4:	3e54ae0b 	.word	0x3e54ae0b
 8009ac8:	55555555 	.word	0x55555555
 8009acc:	3fd55555 	.word	0x3fd55555
 8009ad0:	652b82fe 	.word	0x652b82fe
 8009ad4:	3ff71547 	.word	0x3ff71547
 8009ad8:	3ff00000 	.word	0x3ff00000
 8009adc:	3fd00000 	.word	0x3fd00000
 8009ae0:	3fe00000 	.word	0x3fe00000
 8009ae4:	408fffff 	.word	0x408fffff
 8009ae8:	4bd5      	ldr	r3, [pc, #852]	@ (8009e40 <__ieee754_pow+0x778>)
 8009aea:	402b      	ands	r3, r5
 8009aec:	2200      	movs	r2, #0
 8009aee:	b92b      	cbnz	r3, 8009afc <__ieee754_pow+0x434>
 8009af0:	4bd4      	ldr	r3, [pc, #848]	@ (8009e44 <__ieee754_pow+0x77c>)
 8009af2:	f7f6 fd81 	bl	80005f8 <__aeabi_dmul>
 8009af6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009afa:	468b      	mov	fp, r1
 8009afc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009b00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009b04:	4413      	add	r3, r2
 8009b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b08:	4bcf      	ldr	r3, [pc, #828]	@ (8009e48 <__ieee754_pow+0x780>)
 8009b0a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009b0e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009b12:	459b      	cmp	fp, r3
 8009b14:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009b18:	dd08      	ble.n	8009b2c <__ieee754_pow+0x464>
 8009b1a:	4bcc      	ldr	r3, [pc, #816]	@ (8009e4c <__ieee754_pow+0x784>)
 8009b1c:	459b      	cmp	fp, r3
 8009b1e:	f340 81a5 	ble.w	8009e6c <__ieee754_pow+0x7a4>
 8009b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b24:	3301      	adds	r3, #1
 8009b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b28:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009b2c:	f04f 0a00 	mov.w	sl, #0
 8009b30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009b34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b36:	4bc6      	ldr	r3, [pc, #792]	@ (8009e50 <__ieee754_pow+0x788>)
 8009b38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b3c:	ed93 7b00 	vldr	d7, [r3]
 8009b40:	4629      	mov	r1, r5
 8009b42:	ec53 2b17 	vmov	r2, r3, d7
 8009b46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b4e:	f7f6 fb9b 	bl	8000288 <__aeabi_dsub>
 8009b52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b56:	4606      	mov	r6, r0
 8009b58:	460f      	mov	r7, r1
 8009b5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b5e:	f7f6 fb95 	bl	800028c <__adddf3>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	2000      	movs	r0, #0
 8009b68:	49ba      	ldr	r1, [pc, #744]	@ (8009e54 <__ieee754_pow+0x78c>)
 8009b6a:	f7f6 fe6f 	bl	800084c <__aeabi_ddiv>
 8009b6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 fd3d 	bl	80005f8 <__aeabi_dmul>
 8009b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b82:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009b86:	106d      	asrs	r5, r5, #1
 8009b88:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009b8c:	f04f 0b00 	mov.w	fp, #0
 8009b90:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009b94:	4661      	mov	r1, ip
 8009b96:	2200      	movs	r2, #0
 8009b98:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009b9c:	4658      	mov	r0, fp
 8009b9e:	46e1      	mov	r9, ip
 8009ba0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	f7f6 fd26 	bl	80005f8 <__aeabi_dmul>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb68 	bl	8000288 <__aeabi_dsub>
 8009bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f7f6 fb60 	bl	8000288 <__aeabi_dsub>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bd0:	f7f6 fb5a 	bl	8000288 <__aeabi_dsub>
 8009bd4:	465a      	mov	r2, fp
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fb50 	bl	8000288 <__aeabi_dsub>
 8009be8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bec:	f7f6 fd04 	bl	80005f8 <__aeabi_dmul>
 8009bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f7f6 fcfc 	bl	80005f8 <__aeabi_dmul>
 8009c00:	a37d      	add	r3, pc, #500	@ (adr r3, 8009df8 <__ieee754_pow+0x730>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	f7f6 fcf5 	bl	80005f8 <__aeabi_dmul>
 8009c0e:	a37c      	add	r3, pc, #496	@ (adr r3, 8009e00 <__ieee754_pow+0x738>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f7f6 fb3a 	bl	800028c <__adddf3>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	f7f6 fcec 	bl	80005f8 <__aeabi_dmul>
 8009c20:	a379      	add	r3, pc, #484	@ (adr r3, 8009e08 <__ieee754_pow+0x740>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 fb31 	bl	800028c <__adddf3>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	a377      	add	r3, pc, #476	@ (adr r3, 8009e10 <__ieee754_pow+0x748>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f7f6 fb28 	bl	800028c <__adddf3>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	462b      	mov	r3, r5
 8009c40:	f7f6 fcda 	bl	80005f8 <__aeabi_dmul>
 8009c44:	a374      	add	r3, pc, #464	@ (adr r3, 8009e18 <__ieee754_pow+0x750>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fb1f 	bl	800028c <__adddf3>
 8009c4e:	4622      	mov	r2, r4
 8009c50:	462b      	mov	r3, r5
 8009c52:	f7f6 fcd1 	bl	80005f8 <__aeabi_dmul>
 8009c56:	a372      	add	r3, pc, #456	@ (adr r3, 8009e20 <__ieee754_pow+0x758>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 fb16 	bl	800028c <__adddf3>
 8009c60:	4622      	mov	r2, r4
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	462b      	mov	r3, r5
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4630      	mov	r0, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	465a      	mov	r2, fp
 8009c7e:	4604      	mov	r4, r0
 8009c80:	460d      	mov	r5, r1
 8009c82:	464b      	mov	r3, r9
 8009c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c88:	f7f6 fb00 	bl	800028c <__adddf3>
 8009c8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c90:	f7f6 fcb2 	bl	80005f8 <__aeabi_dmul>
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	f7f6 faf8 	bl	800028c <__adddf3>
 8009c9c:	465a      	mov	r2, fp
 8009c9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	4658      	mov	r0, fp
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	f7f6 fca6 	bl	80005f8 <__aeabi_dmul>
 8009cac:	4b6a      	ldr	r3, [pc, #424]	@ (8009e58 <__ieee754_pow+0x790>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	f7f6 faea 	bl	800028c <__adddf3>
 8009cb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cbc:	f7f6 fae6 	bl	800028c <__adddf3>
 8009cc0:	46d8      	mov	r8, fp
 8009cc2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	465a      	mov	r2, fp
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4640      	mov	r0, r8
 8009cce:	4649      	mov	r1, r9
 8009cd0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009cd4:	f7f6 fc90 	bl	80005f8 <__aeabi_dmul>
 8009cd8:	465c      	mov	r4, fp
 8009cda:	4680      	mov	r8, r0
 8009cdc:	4689      	mov	r9, r1
 8009cde:	4b5e      	ldr	r3, [pc, #376]	@ (8009e58 <__ieee754_pow+0x790>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	f7f6 facf 	bl	8000288 <__aeabi_dsub>
 8009cea:	4632      	mov	r2, r6
 8009cec:	463b      	mov	r3, r7
 8009cee:	f7f6 facb 	bl	8000288 <__aeabi_dsub>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cfa:	f7f6 fac5 	bl	8000288 <__aeabi_dsub>
 8009cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d02:	f7f6 fc79 	bl	80005f8 <__aeabi_dmul>
 8009d06:	4622      	mov	r2, r4
 8009d08:	4606      	mov	r6, r0
 8009d0a:	460f      	mov	r7, r1
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	f7f6 fab5 	bl	800028c <__adddf3>
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	4649      	mov	r1, r9
 8009d2e:	f7f6 faad 	bl	800028c <__adddf3>
 8009d32:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009d36:	a33c      	add	r3, pc, #240	@ (adr r3, 8009e28 <__ieee754_pow+0x760>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	4658      	mov	r0, fp
 8009d3e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009d42:	460d      	mov	r5, r1
 8009d44:	f7f6 fc58 	bl	80005f8 <__aeabi_dmul>
 8009d48:	465c      	mov	r4, fp
 8009d4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d4e:	4642      	mov	r2, r8
 8009d50:	464b      	mov	r3, r9
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 fa97 	bl	8000288 <__aeabi_dsub>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4630      	mov	r0, r6
 8009d60:	4639      	mov	r1, r7
 8009d62:	f7f6 fa91 	bl	8000288 <__aeabi_dsub>
 8009d66:	a332      	add	r3, pc, #200	@ (adr r3, 8009e30 <__ieee754_pow+0x768>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7f6 fc44 	bl	80005f8 <__aeabi_dmul>
 8009d70:	a331      	add	r3, pc, #196	@ (adr r3, 8009e38 <__ieee754_pow+0x770>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	4606      	mov	r6, r0
 8009d78:	460f      	mov	r7, r1
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	f7f6 fc3b 	bl	80005f8 <__aeabi_dmul>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fa7f 	bl	800028c <__adddf3>
 8009d8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d90:	4b32      	ldr	r3, [pc, #200]	@ (8009e5c <__ieee754_pow+0x794>)
 8009d92:	4413      	add	r3, r2
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009da0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009da2:	f7f6 fbbf 	bl	8000524 <__aeabi_i2d>
 8009da6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009da8:	4b2d      	ldr	r3, [pc, #180]	@ (8009e60 <__ieee754_pow+0x798>)
 8009daa:	4413      	add	r3, r2
 8009dac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009db0:	4606      	mov	r6, r0
 8009db2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db6:	460f      	mov	r7, r1
 8009db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dbc:	f7f6 fa66 	bl	800028c <__adddf3>
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	f7f6 fa62 	bl	800028c <__adddf3>
 8009dc8:	4632      	mov	r2, r6
 8009dca:	463b      	mov	r3, r7
 8009dcc:	f7f6 fa5e 	bl	800028c <__adddf3>
 8009dd0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	463b      	mov	r3, r7
 8009dd8:	4658      	mov	r0, fp
 8009dda:	460d      	mov	r5, r1
 8009ddc:	f7f6 fa54 	bl	8000288 <__aeabi_dsub>
 8009de0:	4642      	mov	r2, r8
 8009de2:	464b      	mov	r3, r9
 8009de4:	f7f6 fa50 	bl	8000288 <__aeabi_dsub>
 8009de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dec:	f7f6 fa4c 	bl	8000288 <__aeabi_dsub>
 8009df0:	465c      	mov	r4, fp
 8009df2:	4602      	mov	r2, r0
 8009df4:	e036      	b.n	8009e64 <__ieee754_pow+0x79c>
 8009df6:	bf00      	nop
 8009df8:	4a454eef 	.word	0x4a454eef
 8009dfc:	3fca7e28 	.word	0x3fca7e28
 8009e00:	93c9db65 	.word	0x93c9db65
 8009e04:	3fcd864a 	.word	0x3fcd864a
 8009e08:	a91d4101 	.word	0xa91d4101
 8009e0c:	3fd17460 	.word	0x3fd17460
 8009e10:	518f264d 	.word	0x518f264d
 8009e14:	3fd55555 	.word	0x3fd55555
 8009e18:	db6fabff 	.word	0xdb6fabff
 8009e1c:	3fdb6db6 	.word	0x3fdb6db6
 8009e20:	33333303 	.word	0x33333303
 8009e24:	3fe33333 	.word	0x3fe33333
 8009e28:	e0000000 	.word	0xe0000000
 8009e2c:	3feec709 	.word	0x3feec709
 8009e30:	dc3a03fd 	.word	0xdc3a03fd
 8009e34:	3feec709 	.word	0x3feec709
 8009e38:	145b01f5 	.word	0x145b01f5
 8009e3c:	be3e2fe0 	.word	0xbe3e2fe0
 8009e40:	7ff00000 	.word	0x7ff00000
 8009e44:	43400000 	.word	0x43400000
 8009e48:	0003988e 	.word	0x0003988e
 8009e4c:	000bb679 	.word	0x000bb679
 8009e50:	0800a728 	.word	0x0800a728
 8009e54:	3ff00000 	.word	0x3ff00000
 8009e58:	40080000 	.word	0x40080000
 8009e5c:	0800a708 	.word	0x0800a708
 8009e60:	0800a718 	.word	0x0800a718
 8009e64:	460b      	mov	r3, r1
 8009e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e6a:	e5d7      	b.n	8009a1c <__ieee754_pow+0x354>
 8009e6c:	f04f 0a01 	mov.w	sl, #1
 8009e70:	e65e      	b.n	8009b30 <__ieee754_pow+0x468>
 8009e72:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a144 <__ieee754_pow+0xa7c>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fa06 	bl	800028c <__adddf3>
 8009e80:	4642      	mov	r2, r8
 8009e82:	e9cd 0100 	strd	r0, r1, [sp]
 8009e86:	464b      	mov	r3, r9
 8009e88:	4620      	mov	r0, r4
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7f6 f9fc 	bl	8000288 <__aeabi_dsub>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e98:	f7f6 fe3e 	bl	8000b18 <__aeabi_dcmpgt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f47f ae00 	bne.w	8009aa2 <__ieee754_pow+0x3da>
 8009ea2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009ea6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009eaa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009eae:	fa43 fa0a 	asr.w	sl, r3, sl
 8009eb2:	44da      	add	sl, fp
 8009eb4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009eb8:	489d      	ldr	r0, [pc, #628]	@ (800a130 <__ieee754_pow+0xa68>)
 8009eba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009ebe:	4108      	asrs	r0, r1
 8009ec0:	ea00 030a 	and.w	r3, r0, sl
 8009ec4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009ec8:	f1c1 0114 	rsb	r1, r1, #20
 8009ecc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009ed0:	fa4a fa01 	asr.w	sl, sl, r1
 8009ed4:	f1bb 0f00 	cmp.w	fp, #0
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	bfb8      	it	lt
 8009ee2:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ee6:	f7f6 f9cf 	bl	8000288 <__aeabi_dsub>
 8009eea:	4680      	mov	r8, r0
 8009eec:	4689      	mov	r9, r1
 8009eee:	4632      	mov	r2, r6
 8009ef0:	463b      	mov	r3, r7
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	f7f6 f9c9 	bl	800028c <__adddf3>
 8009efa:	2400      	movs	r4, #0
 8009efc:	a37c      	add	r3, pc, #496	@ (adr r3, 800a0f0 <__ieee754_pow+0xa28>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	4620      	mov	r0, r4
 8009f04:	460d      	mov	r5, r1
 8009f06:	f7f6 fb77 	bl	80005f8 <__aeabi_dmul>
 8009f0a:	4642      	mov	r2, r8
 8009f0c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f10:	464b      	mov	r3, r9
 8009f12:	4620      	mov	r0, r4
 8009f14:	4629      	mov	r1, r5
 8009f16:	f7f6 f9b7 	bl	8000288 <__aeabi_dsub>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4630      	mov	r0, r6
 8009f20:	4639      	mov	r1, r7
 8009f22:	f7f6 f9b1 	bl	8000288 <__aeabi_dsub>
 8009f26:	a374      	add	r3, pc, #464	@ (adr r3, 800a0f8 <__ieee754_pow+0xa30>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	f7f6 fb64 	bl	80005f8 <__aeabi_dmul>
 8009f30:	a373      	add	r3, pc, #460	@ (adr r3, 800a100 <__ieee754_pow+0xa38>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	4680      	mov	r8, r0
 8009f38:	4689      	mov	r9, r1
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7f6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4640      	mov	r0, r8
 8009f48:	4649      	mov	r1, r9
 8009f4a:	f7f6 f99f 	bl	800028c <__adddf3>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	460d      	mov	r5, r1
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f5a:	f7f6 f997 	bl	800028c <__adddf3>
 8009f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f62:	4680      	mov	r8, r0
 8009f64:	4689      	mov	r9, r1
 8009f66:	f7f6 f98f 	bl	8000288 <__aeabi_dsub>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	4642      	mov	r2, r8
 8009f78:	4606      	mov	r6, r0
 8009f7a:	460f      	mov	r7, r1
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4649      	mov	r1, r9
 8009f82:	f7f6 fb39 	bl	80005f8 <__aeabi_dmul>
 8009f86:	a360      	add	r3, pc, #384	@ (adr r3, 800a108 <__ieee754_pow+0xa40>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	f7f6 fb32 	bl	80005f8 <__aeabi_dmul>
 8009f94:	a35e      	add	r3, pc, #376	@ (adr r3, 800a110 <__ieee754_pow+0xa48>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f7f6 f975 	bl	8000288 <__aeabi_dsub>
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	462b      	mov	r3, r5
 8009fa2:	f7f6 fb29 	bl	80005f8 <__aeabi_dmul>
 8009fa6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a118 <__ieee754_pow+0xa50>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f7f6 f96e 	bl	800028c <__adddf3>
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	462b      	mov	r3, r5
 8009fb4:	f7f6 fb20 	bl	80005f8 <__aeabi_dmul>
 8009fb8:	a359      	add	r3, pc, #356	@ (adr r3, 800a120 <__ieee754_pow+0xa58>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f963 	bl	8000288 <__aeabi_dsub>
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	f7f6 fb17 	bl	80005f8 <__aeabi_dmul>
 8009fca:	a357      	add	r3, pc, #348	@ (adr r3, 800a128 <__ieee754_pow+0xa60>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 f95c 	bl	800028c <__adddf3>
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	462b      	mov	r3, r5
 8009fd8:	f7f6 fb0e 	bl	80005f8 <__aeabi_dmul>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 f950 	bl	8000288 <__aeabi_dsub>
 8009fe8:	4604      	mov	r4, r0
 8009fea:	460d      	mov	r5, r1
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8009ffe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 f93f 	bl	8000288 <__aeabi_dsub>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a012:	f7f6 fc1b 	bl	800084c <__aeabi_ddiv>
 800a016:	4632      	mov	r2, r6
 800a018:	4604      	mov	r4, r0
 800a01a:	460d      	mov	r5, r1
 800a01c:	463b      	mov	r3, r7
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fae9 	bl	80005f8 <__aeabi_dmul>
 800a026:	4632      	mov	r2, r6
 800a028:	463b      	mov	r3, r7
 800a02a:	f7f6 f92f 	bl	800028c <__adddf3>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4620      	mov	r0, r4
 800a034:	4629      	mov	r1, r5
 800a036:	f7f6 f927 	bl	8000288 <__aeabi_dsub>
 800a03a:	4642      	mov	r2, r8
 800a03c:	464b      	mov	r3, r9
 800a03e:	f7f6 f923 	bl	8000288 <__aeabi_dsub>
 800a042:	460b      	mov	r3, r1
 800a044:	4602      	mov	r2, r0
 800a046:	493b      	ldr	r1, [pc, #236]	@ (800a134 <__ieee754_pow+0xa6c>)
 800a048:	2000      	movs	r0, #0
 800a04a:	f7f6 f91d 	bl	8000288 <__aeabi_dsub>
 800a04e:	ec41 0b10 	vmov	d0, r0, r1
 800a052:	ee10 3a90 	vmov	r3, s1
 800a056:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a05a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a05e:	da30      	bge.n	800a0c2 <__ieee754_pow+0x9fa>
 800a060:	4650      	mov	r0, sl
 800a062:	f000 f87d 	bl	800a160 <scalbn>
 800a066:	ec51 0b10 	vmov	r0, r1, d0
 800a06a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a06e:	f7ff bbd2 	b.w	8009816 <__ieee754_pow+0x14e>
 800a072:	4c31      	ldr	r4, [pc, #196]	@ (800a138 <__ieee754_pow+0xa70>)
 800a074:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a078:	42a3      	cmp	r3, r4
 800a07a:	d91a      	bls.n	800a0b2 <__ieee754_pow+0x9ea>
 800a07c:	4b2f      	ldr	r3, [pc, #188]	@ (800a13c <__ieee754_pow+0xa74>)
 800a07e:	440b      	add	r3, r1
 800a080:	4303      	orrs	r3, r0
 800a082:	d009      	beq.n	800a098 <__ieee754_pow+0x9d0>
 800a084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a088:	2200      	movs	r2, #0
 800a08a:	2300      	movs	r3, #0
 800a08c:	f7f6 fd26 	bl	8000adc <__aeabi_dcmplt>
 800a090:	3800      	subs	r0, #0
 800a092:	bf18      	it	ne
 800a094:	2001      	movne	r0, #1
 800a096:	e42b      	b.n	80098f0 <__ieee754_pow+0x228>
 800a098:	4642      	mov	r2, r8
 800a09a:	464b      	mov	r3, r9
 800a09c:	f7f6 f8f4 	bl	8000288 <__aeabi_dsub>
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	463b      	mov	r3, r7
 800a0a4:	f7f6 fd2e 	bl	8000b04 <__aeabi_dcmpge>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d1eb      	bne.n	800a084 <__ieee754_pow+0x9bc>
 800a0ac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a14c <__ieee754_pow+0xa84>
 800a0b0:	e6f7      	b.n	8009ea2 <__ieee754_pow+0x7da>
 800a0b2:	469a      	mov	sl, r3
 800a0b4:	4b22      	ldr	r3, [pc, #136]	@ (800a140 <__ieee754_pow+0xa78>)
 800a0b6:	459a      	cmp	sl, r3
 800a0b8:	f63f aef3 	bhi.w	8009ea2 <__ieee754_pow+0x7da>
 800a0bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a0c0:	e715      	b.n	8009eee <__ieee754_pow+0x826>
 800a0c2:	ec51 0b10 	vmov	r0, r1, d0
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	e7cf      	b.n	800a06a <__ieee754_pow+0x9a2>
 800a0ca:	491a      	ldr	r1, [pc, #104]	@ (800a134 <__ieee754_pow+0xa6c>)
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f7ff bb18 	b.w	8009702 <__ieee754_pow+0x3a>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	f7ff bb14 	b.w	8009702 <__ieee754_pow+0x3a>
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7ff bb10 	b.w	8009702 <__ieee754_pow+0x3a>
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	f7ff bb5e 	b.w	80097a4 <__ieee754_pow+0xdc>
 800a0e8:	2400      	movs	r4, #0
 800a0ea:	f7ff bb49 	b.w	8009780 <__ieee754_pow+0xb8>
 800a0ee:	bf00      	nop
 800a0f0:	00000000 	.word	0x00000000
 800a0f4:	3fe62e43 	.word	0x3fe62e43
 800a0f8:	fefa39ef 	.word	0xfefa39ef
 800a0fc:	3fe62e42 	.word	0x3fe62e42
 800a100:	0ca86c39 	.word	0x0ca86c39
 800a104:	be205c61 	.word	0xbe205c61
 800a108:	72bea4d0 	.word	0x72bea4d0
 800a10c:	3e663769 	.word	0x3e663769
 800a110:	c5d26bf1 	.word	0xc5d26bf1
 800a114:	3ebbbd41 	.word	0x3ebbbd41
 800a118:	af25de2c 	.word	0xaf25de2c
 800a11c:	3f11566a 	.word	0x3f11566a
 800a120:	16bebd93 	.word	0x16bebd93
 800a124:	3f66c16c 	.word	0x3f66c16c
 800a128:	5555553e 	.word	0x5555553e
 800a12c:	3fc55555 	.word	0x3fc55555
 800a130:	fff00000 	.word	0xfff00000
 800a134:	3ff00000 	.word	0x3ff00000
 800a138:	4090cbff 	.word	0x4090cbff
 800a13c:	3f6f3400 	.word	0x3f6f3400
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	652b82fe 	.word	0x652b82fe
 800a148:	3c971547 	.word	0x3c971547
 800a14c:	4090cc00 	.word	0x4090cc00

0800a150 <fabs>:
 800a150:	ec51 0b10 	vmov	r0, r1, d0
 800a154:	4602      	mov	r2, r0
 800a156:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a15a:	ec43 2b10 	vmov	d0, r2, r3
 800a15e:	4770      	bx	lr

0800a160 <scalbn>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	ec55 4b10 	vmov	r4, r5, d0
 800a166:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a16a:	4606      	mov	r6, r0
 800a16c:	462b      	mov	r3, r5
 800a16e:	b991      	cbnz	r1, 800a196 <scalbn+0x36>
 800a170:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a174:	4323      	orrs	r3, r4
 800a176:	d03d      	beq.n	800a1f4 <scalbn+0x94>
 800a178:	4b35      	ldr	r3, [pc, #212]	@ (800a250 <scalbn+0xf0>)
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	2200      	movs	r2, #0
 800a180:	f7f6 fa3a 	bl	80005f8 <__aeabi_dmul>
 800a184:	4b33      	ldr	r3, [pc, #204]	@ (800a254 <scalbn+0xf4>)
 800a186:	429e      	cmp	r6, r3
 800a188:	4604      	mov	r4, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	da0f      	bge.n	800a1ae <scalbn+0x4e>
 800a18e:	a328      	add	r3, pc, #160	@ (adr r3, 800a230 <scalbn+0xd0>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	e01e      	b.n	800a1d4 <scalbn+0x74>
 800a196:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a19a:	4291      	cmp	r1, r2
 800a19c:	d10b      	bne.n	800a1b6 <scalbn+0x56>
 800a19e:	4622      	mov	r2, r4
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f7f6 f872 	bl	800028c <__adddf3>
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	e022      	b.n	800a1f4 <scalbn+0x94>
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a1b4:	3936      	subs	r1, #54	@ 0x36
 800a1b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a1ba:	4296      	cmp	r6, r2
 800a1bc:	dd0d      	ble.n	800a1da <scalbn+0x7a>
 800a1be:	2d00      	cmp	r5, #0
 800a1c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a238 <scalbn+0xd8>)
 800a1c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c6:	da02      	bge.n	800a1ce <scalbn+0x6e>
 800a1c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a240 <scalbn+0xe0>)
 800a1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800a238 <scalbn+0xd8>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 fa10 	bl	80005f8 <__aeabi_dmul>
 800a1d8:	e7e6      	b.n	800a1a8 <scalbn+0x48>
 800a1da:	1872      	adds	r2, r6, r1
 800a1dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a1e0:	428a      	cmp	r2, r1
 800a1e2:	dcec      	bgt.n	800a1be <scalbn+0x5e>
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	dd08      	ble.n	800a1fa <scalbn+0x9a>
 800a1e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a1ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a1f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1f4:	ec45 4b10 	vmov	d0, r4, r5
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
 800a1fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a1fe:	da08      	bge.n	800a212 <scalbn+0xb2>
 800a200:	2d00      	cmp	r5, #0
 800a202:	a10b      	add	r1, pc, #44	@ (adr r1, 800a230 <scalbn+0xd0>)
 800a204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a208:	dac1      	bge.n	800a18e <scalbn+0x2e>
 800a20a:	a10f      	add	r1, pc, #60	@ (adr r1, 800a248 <scalbn+0xe8>)
 800a20c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a210:	e7bd      	b.n	800a18e <scalbn+0x2e>
 800a212:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a216:	3236      	adds	r2, #54	@ 0x36
 800a218:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a21c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a220:	4620      	mov	r0, r4
 800a222:	4b0d      	ldr	r3, [pc, #52]	@ (800a258 <scalbn+0xf8>)
 800a224:	4629      	mov	r1, r5
 800a226:	2200      	movs	r2, #0
 800a228:	e7d4      	b.n	800a1d4 <scalbn+0x74>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
 800a230:	c2f8f359 	.word	0xc2f8f359
 800a234:	01a56e1f 	.word	0x01a56e1f
 800a238:	8800759c 	.word	0x8800759c
 800a23c:	7e37e43c 	.word	0x7e37e43c
 800a240:	8800759c 	.word	0x8800759c
 800a244:	fe37e43c 	.word	0xfe37e43c
 800a248:	c2f8f359 	.word	0xc2f8f359
 800a24c:	81a56e1f 	.word	0x81a56e1f
 800a250:	43500000 	.word	0x43500000
 800a254:	ffff3cb0 	.word	0xffff3cb0
 800a258:	3c900000 	.word	0x3c900000

0800a25c <with_errno>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	ed2d 8b02 	vpush	{d8}
 800a262:	eeb0 8a40 	vmov.f32	s16, s0
 800a266:	eef0 8a60 	vmov.f32	s17, s1
 800a26a:	4604      	mov	r4, r0
 800a26c:	f7fe fd38 	bl	8008ce0 <__errno>
 800a270:	eeb0 0a48 	vmov.f32	s0, s16
 800a274:	eef0 0a68 	vmov.f32	s1, s17
 800a278:	ecbd 8b02 	vpop	{d8}
 800a27c:	6004      	str	r4, [r0, #0]
 800a27e:	bd10      	pop	{r4, pc}

0800a280 <xflow>:
 800a280:	4603      	mov	r3, r0
 800a282:	b507      	push	{r0, r1, r2, lr}
 800a284:	ec51 0b10 	vmov	r0, r1, d0
 800a288:	b183      	cbz	r3, 800a2ac <xflow+0x2c>
 800a28a:	4602      	mov	r2, r0
 800a28c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a290:	e9cd 2300 	strd	r2, r3, [sp]
 800a294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a298:	f7f6 f9ae 	bl	80005f8 <__aeabi_dmul>
 800a29c:	ec41 0b10 	vmov	d0, r0, r1
 800a2a0:	2022      	movs	r0, #34	@ 0x22
 800a2a2:	b003      	add	sp, #12
 800a2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a8:	f7ff bfd8 	b.w	800a25c <with_errno>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	e7ee      	b.n	800a290 <xflow+0x10>
 800a2b2:	0000      	movs	r0, r0
 800a2b4:	0000      	movs	r0, r0
	...

0800a2b8 <__math_uflow>:
 800a2b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a2c0 <__math_uflow+0x8>
 800a2bc:	f7ff bfe0 	b.w	800a280 <xflow>
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	10000000 	.word	0x10000000

0800a2c8 <__math_oflow>:
 800a2c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a2d0 <__math_oflow+0x8>
 800a2cc:	f7ff bfd8 	b.w	800a280 <xflow>
 800a2d0:	00000000 	.word	0x00000000
 800a2d4:	70000000 	.word	0x70000000

0800a2d8 <__ieee754_sqrt>:
 800a2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	4a68      	ldr	r2, [pc, #416]	@ (800a480 <__ieee754_sqrt+0x1a8>)
 800a2de:	ec55 4b10 	vmov	r4, r5, d0
 800a2e2:	43aa      	bics	r2, r5
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	d110      	bne.n	800a30c <__ieee754_sqrt+0x34>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f6 f982 	bl	80005f8 <__aeabi_dmul>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f7f5 ffc6 	bl	800028c <__adddf3>
 800a300:	4604      	mov	r4, r0
 800a302:	460d      	mov	r5, r1
 800a304:	ec45 4b10 	vmov	d0, r4, r5
 800a308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30c:	2d00      	cmp	r5, #0
 800a30e:	dc0e      	bgt.n	800a32e <__ieee754_sqrt+0x56>
 800a310:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a314:	4322      	orrs	r2, r4
 800a316:	d0f5      	beq.n	800a304 <__ieee754_sqrt+0x2c>
 800a318:	b19d      	cbz	r5, 800a342 <__ieee754_sqrt+0x6a>
 800a31a:	4622      	mov	r2, r4
 800a31c:	4620      	mov	r0, r4
 800a31e:	4629      	mov	r1, r5
 800a320:	f7f5 ffb2 	bl	8000288 <__aeabi_dsub>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	f7f6 fa90 	bl	800084c <__aeabi_ddiv>
 800a32c:	e7e8      	b.n	800a300 <__ieee754_sqrt+0x28>
 800a32e:	152a      	asrs	r2, r5, #20
 800a330:	d115      	bne.n	800a35e <__ieee754_sqrt+0x86>
 800a332:	2000      	movs	r0, #0
 800a334:	e009      	b.n	800a34a <__ieee754_sqrt+0x72>
 800a336:	0acb      	lsrs	r3, r1, #11
 800a338:	3a15      	subs	r2, #21
 800a33a:	0549      	lsls	r1, r1, #21
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0fa      	beq.n	800a336 <__ieee754_sqrt+0x5e>
 800a340:	e7f7      	b.n	800a332 <__ieee754_sqrt+0x5a>
 800a342:	462a      	mov	r2, r5
 800a344:	e7fa      	b.n	800a33c <__ieee754_sqrt+0x64>
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	3001      	adds	r0, #1
 800a34a:	02dc      	lsls	r4, r3, #11
 800a34c:	d5fb      	bpl.n	800a346 <__ieee754_sqrt+0x6e>
 800a34e:	1e44      	subs	r4, r0, #1
 800a350:	1b12      	subs	r2, r2, r4
 800a352:	f1c0 0420 	rsb	r4, r0, #32
 800a356:	fa21 f404 	lsr.w	r4, r1, r4
 800a35a:	4323      	orrs	r3, r4
 800a35c:	4081      	lsls	r1, r0
 800a35e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a362:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a36a:	07d2      	lsls	r2, r2, #31
 800a36c:	bf5c      	itt	pl
 800a36e:	005b      	lslpl	r3, r3, #1
 800a370:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a374:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a378:	bf58      	it	pl
 800a37a:	0049      	lslpl	r1, r1, #1
 800a37c:	2600      	movs	r6, #0
 800a37e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a382:	106d      	asrs	r5, r5, #1
 800a384:	0049      	lsls	r1, r1, #1
 800a386:	2016      	movs	r0, #22
 800a388:	4632      	mov	r2, r6
 800a38a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a38e:	1917      	adds	r7, r2, r4
 800a390:	429f      	cmp	r7, r3
 800a392:	bfde      	ittt	le
 800a394:	193a      	addle	r2, r7, r4
 800a396:	1bdb      	suble	r3, r3, r7
 800a398:	1936      	addle	r6, r6, r4
 800a39a:	0fcf      	lsrs	r7, r1, #31
 800a39c:	3801      	subs	r0, #1
 800a39e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a3a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a3aa:	d1f0      	bne.n	800a38e <__ieee754_sqrt+0xb6>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	2720      	movs	r7, #32
 800a3b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	eb00 0e0c 	add.w	lr, r0, ip
 800a3ba:	db02      	blt.n	800a3c2 <__ieee754_sqrt+0xea>
 800a3bc:	d113      	bne.n	800a3e6 <__ieee754_sqrt+0x10e>
 800a3be:	458e      	cmp	lr, r1
 800a3c0:	d811      	bhi.n	800a3e6 <__ieee754_sqrt+0x10e>
 800a3c2:	f1be 0f00 	cmp.w	lr, #0
 800a3c6:	eb0e 000c 	add.w	r0, lr, ip
 800a3ca:	da42      	bge.n	800a452 <__ieee754_sqrt+0x17a>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	db40      	blt.n	800a452 <__ieee754_sqrt+0x17a>
 800a3d0:	f102 0801 	add.w	r8, r2, #1
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	458e      	cmp	lr, r1
 800a3d8:	bf88      	it	hi
 800a3da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a3de:	eba1 010e 	sub.w	r1, r1, lr
 800a3e2:	4464      	add	r4, ip
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a3ea:	3f01      	subs	r7, #1
 800a3ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a3f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a3f8:	d1dc      	bne.n	800a3b4 <__ieee754_sqrt+0xdc>
 800a3fa:	4319      	orrs	r1, r3
 800a3fc:	d01b      	beq.n	800a436 <__ieee754_sqrt+0x15e>
 800a3fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a484 <__ieee754_sqrt+0x1ac>
 800a402:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a488 <__ieee754_sqrt+0x1b0>
 800a406:	e9da 0100 	ldrd	r0, r1, [sl]
 800a40a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a40e:	f7f5 ff3b 	bl	8000288 <__aeabi_dsub>
 800a412:	e9da 8900 	ldrd	r8, r9, [sl]
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f6 fb67 	bl	8000af0 <__aeabi_dcmple>
 800a422:	b140      	cbz	r0, 800a436 <__ieee754_sqrt+0x15e>
 800a424:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a428:	e9da 0100 	ldrd	r0, r1, [sl]
 800a42c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a430:	d111      	bne.n	800a456 <__ieee754_sqrt+0x17e>
 800a432:	3601      	adds	r6, #1
 800a434:	463c      	mov	r4, r7
 800a436:	1072      	asrs	r2, r6, #1
 800a438:	0863      	lsrs	r3, r4, #1
 800a43a:	07f1      	lsls	r1, r6, #31
 800a43c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a440:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a444:	bf48      	it	mi
 800a446:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a44a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a44e:	4618      	mov	r0, r3
 800a450:	e756      	b.n	800a300 <__ieee754_sqrt+0x28>
 800a452:	4690      	mov	r8, r2
 800a454:	e7be      	b.n	800a3d4 <__ieee754_sqrt+0xfc>
 800a456:	f7f5 ff19 	bl	800028c <__adddf3>
 800a45a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f6 fb39 	bl	8000adc <__aeabi_dcmplt>
 800a46a:	b120      	cbz	r0, 800a476 <__ieee754_sqrt+0x19e>
 800a46c:	1ca0      	adds	r0, r4, #2
 800a46e:	bf08      	it	eq
 800a470:	3601      	addeq	r6, #1
 800a472:	3402      	adds	r4, #2
 800a474:	e7df      	b.n	800a436 <__ieee754_sqrt+0x15e>
 800a476:	1c63      	adds	r3, r4, #1
 800a478:	f023 0401 	bic.w	r4, r3, #1
 800a47c:	e7db      	b.n	800a436 <__ieee754_sqrt+0x15e>
 800a47e:	bf00      	nop
 800a480:	7ff00000 	.word	0x7ff00000
 800a484:	20000078 	.word	0x20000078
 800a488:	20000070 	.word	0x20000070

0800a48c <_init>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	bf00      	nop
 800a490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a492:	bc08      	pop	{r3}
 800a494:	469e      	mov	lr, r3
 800a496:	4770      	bx	lr

0800a498 <_fini>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr
