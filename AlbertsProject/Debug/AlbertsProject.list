
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f88  08008f88  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f90  08008f90  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008f98  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000068  08009000  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08009000  0000a7e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef6d  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a30  00000000  00000000  00019005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a52  00000000  00000000  0001c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004181  00000000  00000000  0001d252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375f  00000000  00000000  000213d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d382  00000000  00000000  00034b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  000c1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c5c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dfc 	.word	0x08008dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08008dfc 	.word	0x08008dfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <LSM_Init>:
uint16_t _lsm_nssPin;

uint8_t _lsmReadReg(uint8_t reg);
void _lsmWriteReg(uint8_t reg, uint8_t data);

uint8_t LSM_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	4613      	mov	r3, r2
 8000e08:	80fb      	strh	r3, [r7, #6]
	_lsm_hspi1 = hspi;
 8000e0a:	4a13      	ldr	r2, [pc, #76]	@ (8000e58 <LSM_Init+0x5c>)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6013      	str	r3, [r2, #0]
	_lsm_nssPort = port;
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <LSM_Init+0x60>)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	6013      	str	r3, [r2, #0]
	_lsm_nssPin = pin;
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <LSM_Init+0x64>)
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	8013      	strh	r3, [r2, #0]

	uint8_t whoAmI =_lsmReadReg(LSM_REG_WHO_AM_I);
 8000e1c:	200f      	movs	r0, #15
 8000e1e:	f000 f87f 	bl	8000f20 <_lsmReadReg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]

	if (whoAmI != LSM_SET_WHO_AM_I_VAL) {
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b6a      	cmp	r3, #106	@ 0x6a
 8000e2a:	d001      	beq.n	8000e30 <LSM_Init+0x34>
		return 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e00e      	b.n	8000e4e <LSM_Init+0x52>
	}

	uint8_t xlmode = LSM_SET_CTRL1_XL_26_Hz;
 8000e30:	2324      	movs	r3, #36	@ 0x24
 8000e32:	75bb      	strb	r3, [r7, #22]
	uint8_t gmode = LSM_SET_CTRL2_G_26_Hz;
 8000e34:	232c      	movs	r3, #44	@ 0x2c
 8000e36:	757b      	strb	r3, [r7, #21]
	_lsmWriteReg(LSM_REG_CTRL1_XL, xlmode);
 8000e38:	7dbb      	ldrb	r3, [r7, #22]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f000 f8a9 	bl	8000f94 <_lsmWriteReg>
	_lsmWriteReg(LSM_REG_CTRL2_G, gmode);
 8000e42:	7d7b      	ldrb	r3, [r7, #21]
 8000e44:	4619      	mov	r1, r3
 8000e46:	2011      	movs	r0, #17
 8000e48:	f000 f8a4 	bl	8000f94 <_lsmWriteReg>

	return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000084 	.word	0x20000084
 8000e5c:	20000088 	.word	0x20000088
 8000e60:	2000008c 	.word	0x2000008c

08000e64 <LSM_ReadData>:

void LSM_ReadData(int16_t endBufer[]) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];

	uint8_t dataReg = LSM_REG_OUTX_L_G;
 8000e6c:	2322      	movs	r3, #34	@ 0x22
 8000e6e:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i < 12; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	e012      	b.n	8000e9c <LSM_ReadData+0x38>
		buffer[i] = _lsmReadReg(dataReg+i);
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	7efb      	ldrb	r3, [r7, #27]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f84d 	bl	8000f20 <_lsmReadReg>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f107 020c 	add.w	r2, r7, #12
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	4413      	add	r3, r2
 8000e92:	460a      	mov	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 12; i++) {
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2b0b      	cmp	r3, #11
 8000ea0:	dde9      	ble.n	8000e76 <LSM_ReadData+0x12>
	}

	endBufer[0] = (((uint16_t)buffer[1]) << 8) + buffer[0];
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	7b3a      	ldrb	r2, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	801a      	strh	r2, [r3, #0]
	endBufer[1] = (((uint16_t)buffer[3]) << 8) + buffer[2];
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	7bba      	ldrb	r2, [r7, #14]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	b212      	sxth	r2, r2
 8000ec6:	801a      	strh	r2, [r3, #0]
	endBufer[2] = (((uint16_t)buffer[5]) << 8) + buffer[4];
 8000ec8:	7c7b      	ldrb	r3, [r7, #17]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	7c3a      	ldrb	r2, [r7, #16]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	b212      	sxth	r2, r2
 8000eda:	801a      	strh	r2, [r3, #0]
	endBufer[3] = (((uint16_t)buffer[7]) << 8) + buffer[6];
 8000edc:	7cfb      	ldrb	r3, [r7, #19]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	7cba      	ldrb	r2, [r7, #18]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3306      	adds	r3, #6
 8000eec:	b212      	sxth	r2, r2
 8000eee:	801a      	strh	r2, [r3, #0]
	endBufer[4] = (((uint16_t)buffer[9]) << 8) + buffer[8];
 8000ef0:	7d7b      	ldrb	r3, [r7, #21]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	7d3a      	ldrb	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3308      	adds	r3, #8
 8000f00:	b212      	sxth	r2, r2
 8000f02:	801a      	strh	r2, [r3, #0]
	endBufer[5] = (((uint16_t)buffer[11]) << 8) + buffer[10];
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	7dba      	ldrb	r2, [r7, #22]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	330a      	adds	r3, #10
 8000f14:	b212      	sxth	r2, r2
 8000f16:	801a      	strh	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_lsmReadReg>:

uint8_t _lsmReadReg(uint8_t reg) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	reg = reg | (1 << 7);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	71fb      	strb	r3, [r7, #7]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <_lsmReadReg+0x68>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <_lsmReadReg+0x6c>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_lsmReadReg+0x68>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	400a      	ands	r2, r1
 8000f48:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_lsmReadReg+0x70>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f54:	2201      	movs	r2, #1
 8000f56:	f003 f90a 	bl	800416e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_lsm_hspi1, &reg, 1, 1000);
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <_lsmReadReg+0x70>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	1df9      	adds	r1, r7, #7
 8000f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f64:	2201      	movs	r2, #1
 8000f66:	f003 fa46 	bl	80043f6 <HAL_SPI_Receive>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_lsmReadReg+0x68>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <_lsmReadReg+0x6c>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <_lsmReadReg+0x68>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	615a      	str	r2, [r3, #20]
	return reg;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000088 	.word	0x20000088
 8000f8c:	2000008c 	.word	0x2000008c
 8000f90:	20000084 	.word	0x20000084

08000f94 <_lsmWriteReg>:

void _lsmWriteReg(uint8_t reg, uint8_t data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <_lsmWriteReg+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <_lsmWriteReg+0x68>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_lsmWriteReg+0x64>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <_lsmWriteReg+0x6c>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	1df9      	adds	r1, r7, #7
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f003 f8d2 	bl	800416e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_lsm_hspi1, &data, 1, 1000);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <_lsmWriteReg+0x6c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	1db9      	adds	r1, r7, #6
 8000fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f003 f8ca 	bl	800416e <HAL_SPI_Transmit>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_lsmWriteReg+0x64>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	695a      	ldr	r2, [r3, #20]
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <_lsmWriteReg+0x68>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <_lsmWriteReg+0x64>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	615a      	str	r2, [r3, #20]
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000088 	.word	0x20000088
 8000ffc:	2000008c 	.word	0x2000008c
 8001000:	20000084 	.word	0x20000084

08001004 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001008:	f001 f920 	bl	800224c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100c:	f000 f818 	bl	8001040 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001010:	f000 f8d6 	bl	80011c0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001014:	f000 f89e 	bl	8001154 <MX_SPI1_Init>
	MX_SDIO_SD_Init();
 8001018:	f000 f87c 	bl	8001114 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 800101c:	f004 fb22 	bl	8005664 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	cheakAll();
 8001020:	f000 fa74 	bl	800150c <cheakAll>
	getSeaLvlPress();
 8001024:	f000 fb38 	bl	8001698 <getSeaLvlPress>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		readData();
 8001028:	f000 f976 	bl	8001318 <readData>

		writeData();
 800102c:	f000 f9ec 	bl	8001408 <writeData>

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001030:	2101      	movs	r1, #1
 8001032:	4802      	ldr	r0, [pc, #8]	@ (800103c <main+0x38>)
 8001034:	f001 fc3b 	bl	80028ae <HAL_GPIO_TogglePin>
		readData();
 8001038:	bf00      	nop
 800103a:	e7f5      	b.n	8001028 <main+0x24>
 800103c:	40020000 	.word	0x40020000

08001040 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	@ 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f007 fa54 	bl	80084fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b28      	ldr	r3, [pc, #160]	@ (800110c <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a27      	ldr	r2, [pc, #156]	@ (800110c <SystemClock_Config+0xcc>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <SystemClock_Config+0xd0>)
 800108e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80010b4:	2319      	movs	r3, #25
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80010b8:	23a8      	movs	r3, #168	@ 0xa8
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fc0b 	bl	80028e4 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x98>
		Error_Handler();
 80010d4:	f000 faf0 	bl	80016b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2102      	movs	r1, #2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fe6d 	bl	8002dd4 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xc4>
		Error_Handler();
 8001100:	f000 fada 	bl	80016b8 <Error_Handler>
	}
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	@ 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <MX_SDIO_SD_Init+0x3c>)
 800111c:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001136:	4b05      	ldr	r3, [pc, #20]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <MX_SDIO_SD_Init+0x38>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000090 	.word	0x20000090
 8001150:	40012c00 	.word	0x40012c00

08001154 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <MX_SPI1_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001164:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001184:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001188:	2218      	movs	r2, #24
 800118a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a6:	f002 ff59 	bl	800405c <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80011b0:	f000 fa82 	bl	80016b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000114 	.word	0x20000114
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b4a      	ldr	r3, [pc, #296]	@ (8001304 <MX_GPIO_Init+0x144>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a49      	ldr	r2, [pc, #292]	@ (8001304 <MX_GPIO_Init+0x144>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <MX_GPIO_Init+0x144>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <MX_GPIO_Init+0x144>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a42      	ldr	r2, [pc, #264]	@ (8001304 <MX_GPIO_Init+0x144>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b40      	ldr	r3, [pc, #256]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b3c      	ldr	r3, [pc, #240]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a3b      	ldr	r2, [pc, #236]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b39      	ldr	r3, [pc, #228]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b35      	ldr	r3, [pc, #212]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b32      	ldr	r3, [pc, #200]	@ (8001304 <MX_GPIO_Init+0x144>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <MX_GPIO_Init+0x144>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a2d      	ldr	r2, [pc, #180]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <MX_GPIO_Init+0x144>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin,
 8001262:	2201      	movs	r2, #1
 8001264:	2131      	movs	r1, #49	@ 0x31
 8001266:	4828      	ldr	r0, [pc, #160]	@ (8001308 <MX_GPIO_Init+0x148>)
 8001268:	f001 fb08 	bl	800287c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED2_Pin | LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2107      	movs	r1, #7
 8001270:	4826      	ldr	r0, [pc, #152]	@ (800130c <MX_GPIO_Init+0x14c>)
 8001272:	f001 fb03 	bl	800287c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2110      	movs	r1, #16
 800127a:	4824      	ldr	r0, [pc, #144]	@ (800130c <MX_GPIO_Init+0x14c>)
 800127c:	f001 fafe 	bl	800287c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001280:	2201      	movs	r2, #1
 8001282:	f240 2107 	movw	r1, #519	@ 0x207
 8001286:	4822      	ldr	r0, [pc, #136]	@ (8001310 <MX_GPIO_Init+0x150>)
 8001288:	f001 faf8 	bl	800287c <HAL_GPIO_WritePin>
	MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin, GPIO_PIN_SET);

	/*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin;
 800128c:	2331      	movs	r3, #49	@ 0x31
 800128e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4819      	ldr	r0, [pc, #100]	@ (8001308 <MX_GPIO_Init+0x148>)
 80012a4:	f001 f94e 	bl	8002544 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED3_Pin | LED4_Pin | WQ_HOLD_Pin;
 80012a8:	2317      	movs	r3, #23
 80012aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4813      	ldr	r0, [pc, #76]	@ (800130c <MX_GPIO_Init+0x14c>)
 80012c0:	f001 f940 	bl	8002544 <HAL_GPIO_Init>

	/*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
	GPIO_InitStruct.Pin = MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin;
 80012c4:	f240 2307 	movw	r3, #519	@ 0x207
 80012c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_GPIO_Init+0x150>)
 80012de:	f001 f931 	bl	8002544 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin | JMP_PROG_Pin;
 80012e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	@ (8001310 <MX_GPIO_Init+0x150>)
 80012f8:	f001 f924 	bl	8002544 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020800 	.word	0x40020800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	00000000 	.word	0x00000000

08001318 <readData>:

/* USER CODE BEGIN 4 */
void readData() {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 800131c:	4834      	ldr	r0, [pc, #208]	@ (80013f0 <readData+0xd8>)
 800131e:	f000 fadd 	bl	80018dc <MS_ReadData>
	LSM_ReadData(LSM_Data);
 8001322:	4834      	ldr	r0, [pc, #208]	@ (80013f4 <readData+0xdc>)
 8001324:	f7ff fd9e 	bl	8000e64 <LSM_ReadData>

	SensorsData.time = HAL_GetTick();
 8001328:	f000 fff6 	bl	8002318 <HAL_GetTick>
 800132c:	4603      	mov	r3, r0
 800132e:	4a32      	ldr	r2, [pc, #200]	@ (80013f8 <readData+0xe0>)
 8001330:	6013      	str	r3, [r2, #0]
	SensorsData.press = MS_Data[0];
 8001332:	4b2f      	ldr	r3, [pc, #188]	@ (80013f0 <readData+0xd8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <readData+0xe0>)
 800133a:	609a      	str	r2, [r3, #8]
	SensorsData.alt = (int32_t) ((SensorsData.press - seaLvlPress)
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <readData+0xe0>)
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <readData+0xe4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
			/ 133.32239023154 * 10.5 * 100);
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8ec 	bl	8000524 <__aeabi_i2d>
 800134c:	a326      	add	r3, pc, #152	@ (adr r3, 80013e8 <readData+0xd0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <readData+0xe8>)
 8001364:	f7ff f948 	bl	80005f8 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <readData+0xec>)
 8001376:	f7ff f93f 	bl	80005f8 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
	SensorsData.alt = (int32_t) ((SensorsData.press - seaLvlPress)
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb4b 	bl	8000a1c <__aeabi_d2iz>
 8001386:	4603      	mov	r3, r0
 8001388:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <readData+0xe0>)
 800138a:	6053      	str	r3, [r2, #4]
	SensorsData.temp = MS_Data[1];
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <readData+0xd8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	461a      	mov	r2, r3
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <readData+0xe0>)
 8001394:	60da      	str	r2, [r3, #12]
	SensorsData.accel1 = LSM_Data[3];
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <readData+0xdc>)
 8001398:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800139c:	461a      	mov	r2, r3
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <readData+0xe0>)
 80013a0:	611a      	str	r2, [r3, #16]
	SensorsData.accel2 = LSM_Data[4];
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <readData+0xdc>)
 80013a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <readData+0xe0>)
 80013ac:	615a      	str	r2, [r3, #20]
	SensorsData.accel3 = LSM_Data[5];
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <readData+0xdc>)
 80013b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <readData+0xe0>)
 80013b8:	619a      	str	r2, [r3, #24]
	SensorsData.gyro1 = LSM_Data[0];
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <readData+0xdc>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <readData+0xe0>)
 80013c4:	61da      	str	r2, [r3, #28]
	SensorsData.gyro2 = LSM_Data[1];
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <readData+0xdc>)
 80013c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <readData+0xe0>)
 80013d0:	621a      	str	r2, [r3, #32]
	SensorsData.gyro3 = LSM_Data[2];
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <readData+0xdc>)
 80013d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <readData+0xe0>)
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	0551a074 	.word	0x0551a074
 80013ec:	4060aa51 	.word	0x4060aa51
 80013f0:	2000016c 	.word	0x2000016c
 80013f4:	20000174 	.word	0x20000174
 80013f8:	20000184 	.word	0x20000184
 80013fc:	20000180 	.word	0x20000180
 8001400:	40250000 	.word	0x40250000
 8001404:	40590000 	.word	0x40590000

08001408 <writeData>:

void writeData() {
 8001408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800140c:	b090      	sub	sp, #64	@ 0x40
 800140e:	af0a      	add	r7, sp, #40	@ 0x28
 8001410:	466b      	mov	r3, sp
 8001412:	4698      	mov	r8, r3

	char buffer[sizeOfBufferToLora];
 8001414:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <writeData+0xec>)
 8001416:	681e      	ldr	r6, [r3, #0]
 8001418:	1e73      	subs	r3, r6, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	4632      	mov	r2, r6
 800141e:	2300      	movs	r3, #0
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	00eb      	lsls	r3, r5, #3
 800142e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001432:	00e2      	lsls	r2, r4, #3
 8001434:	4632      	mov	r2, r6
 8001436:	2300      	movs	r3, #0
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	00cb      	lsls	r3, r1, #3
 8001446:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800144a:	00c2      	lsls	r2, r0, #3
 800144c:	4633      	mov	r3, r6
 800144e:	3307      	adds	r3, #7
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	ebad 0d03 	sub.w	sp, sp, r3
 8001458:	ab0a      	add	r3, sp, #40	@ 0x28
 800145a:	3300      	adds	r3, #0
 800145c:	613b      	str	r3, [r7, #16]

//	uint8_t sizeOfSnprintf =
	snprintf(buffer, sizeOfBufferToLora,
 800145e:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <writeData+0xec>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	469c      	mov	ip, r3
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <writeData+0xf0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4a23      	ldr	r2, [pc, #140]	@ (80014f8 <writeData+0xf0>)
 800146c:	6852      	ldr	r2, [r2, #4]
 800146e:	4922      	ldr	r1, [pc, #136]	@ (80014f8 <writeData+0xf0>)
 8001470:	6889      	ldr	r1, [r1, #8]
 8001472:	4821      	ldr	r0, [pc, #132]	@ (80014f8 <writeData+0xf0>)
 8001474:	68c0      	ldr	r0, [r0, #12]
 8001476:	4c20      	ldr	r4, [pc, #128]	@ (80014f8 <writeData+0xf0>)
 8001478:	6924      	ldr	r4, [r4, #16]
 800147a:	4d1f      	ldr	r5, [pc, #124]	@ (80014f8 <writeData+0xf0>)
 800147c:	696d      	ldr	r5, [r5, #20]
 800147e:	4e1e      	ldr	r6, [pc, #120]	@ (80014f8 <writeData+0xf0>)
 8001480:	69b6      	ldr	r6, [r6, #24]
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <writeData+0xf0>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <writeData+0xf0>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <writeData+0xf0>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	9309      	str	r3, [sp, #36]	@ 0x24
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	9308      	str	r3, [sp, #32]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	9307      	str	r3, [sp, #28]
 800149c:	9606      	str	r6, [sp, #24]
 800149e:	9505      	str	r5, [sp, #20]
 80014a0:	9404      	str	r4, [sp, #16]
 80014a2:	9003      	str	r0, [sp, #12]
 80014a4:	9102      	str	r1, [sp, #8]
 80014a6:	9201      	str	r2, [sp, #4]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <writeData+0xf4>)
 80014ae:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <writeData+0xf8>)
 80014b0:	4661      	mov	r1, ip
 80014b2:	6938      	ldr	r0, [r7, #16]
 80014b4:	f006 ffee 	bl	8008494 <sniprintf>
			SensorsData.temp, SensorsData.accel1, SensorsData.accel2,
			SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
			SensorsData.gyro3);
//	LORA_TransmitData(buffer, sizeOfSnprintf);

	f_open(&Fil, "SULOG.csv", FA_OPEN_ALWAYS | FA_WRITE);
 80014b8:	2212      	movs	r2, #18
 80014ba:	4912      	ldr	r1, [pc, #72]	@ (8001504 <writeData+0xfc>)
 80014bc:	4812      	ldr	r0, [pc, #72]	@ (8001508 <writeData+0x100>)
 80014be:	f006 f867 	bl	8007590 <f_open>

	f_lseek(&Fil, f_size(&Fil));
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <writeData+0x100>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	@ (8001508 <writeData+0x100>)
 80014ca:	f006 fc38 	bl	8007d3e <f_lseek>
	HAL_Delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 ff2e 	bl	8002330 <HAL_Delay>
	f_puts(buffer, &Fil);
 80014d4:	490c      	ldr	r1, [pc, #48]	@ (8001508 <writeData+0x100>)
 80014d6:	6938      	ldr	r0, [r7, #16]
 80014d8:	f006 ff5c 	bl	8008394 <f_puts>
	HAL_Delay(15);
 80014dc:	200f      	movs	r0, #15
 80014de:	f000 ff27 	bl	8002330 <HAL_Delay>
	f_close(&Fil);
 80014e2:	4809      	ldr	r0, [pc, #36]	@ (8001508 <writeData+0x100>)
 80014e4:	f006 fc01 	bl	8007cea <f_close>
 80014e8:	46c5      	mov	sp, r8

}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000184 	.word	0x20000184
 80014fc:	08008e14 	.word	0x08008e14
 8001500:	08008e18 	.word	0x08008e18
 8001504:	08008e50 	.word	0x08008e50
 8001508:	200003e0 	.word	0x200003e0

0800150c <cheakAll>:

void cheakAll() {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	LED2_GPIO_Port->ODR |= LED2_Pin;
 8001510:	4b57      	ldr	r3, [pc, #348]	@ (8001670 <cheakAll+0x164>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	4a56      	ldr	r2, [pc, #344]	@ (8001670 <cheakAll+0x164>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 800151c:	4b54      	ldr	r3, [pc, #336]	@ (8001670 <cheakAll+0x164>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4a53      	ldr	r2, [pc, #332]	@ (8001670 <cheakAll+0x164>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 8001528:	4b51      	ldr	r3, [pc, #324]	@ (8001670 <cheakAll+0x164>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a50      	ldr	r2, [pc, #320]	@ (8001670 <cheakAll+0x164>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6153      	str	r3, [r2, #20]

	HAL_Delay(500);
 8001534:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001538:	f000 fefa 	bl	8002330 <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 800153c:	4b4c      	ldr	r3, [pc, #304]	@ (8001670 <cheakAll+0x164>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	4a4b      	ldr	r2, [pc, #300]	@ (8001670 <cheakAll+0x164>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 8001548:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <cheakAll+0x164>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4a48      	ldr	r2, [pc, #288]	@ (8001670 <cheakAll+0x164>)
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 8001554:	4b46      	ldr	r3, [pc, #280]	@ (8001670 <cheakAll+0x164>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	4a45      	ldr	r2, [pc, #276]	@ (8001670 <cheakAll+0x164>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6153      	str	r3, [r2, #20]

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin)) {
 8001560:	2220      	movs	r2, #32
 8001562:	4944      	ldr	r1, [pc, #272]	@ (8001674 <cheakAll+0x168>)
 8001564:	4844      	ldr	r0, [pc, #272]	@ (8001678 <cheakAll+0x16c>)
 8001566:	f000 f8ad 	bl	80016c4 <LORA_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <cheakAll+0x7c>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001570:	2102      	movs	r1, #2
 8001572:	483f      	ldr	r0, [pc, #252]	@ (8001670 <cheakAll+0x164>)
 8001574:	f001 f99b 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157c:	f000 fed8 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001580:	2102      	movs	r1, #2
 8001582:	483b      	ldr	r0, [pc, #236]	@ (8001670 <cheakAll+0x164>)
 8001584:	f001 f993 	bl	80028ae <HAL_GPIO_TogglePin>
	}

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 8001588:	2201      	movs	r2, #1
 800158a:	493c      	ldr	r1, [pc, #240]	@ (800167c <cheakAll+0x170>)
 800158c:	483a      	ldr	r0, [pc, #232]	@ (8001678 <cheakAll+0x16c>)
 800158e:	f000 f97f 	bl	8001890 <MS_Init>

	if (LSM_Init(&hspi1, LSM_NSS_GPIO_Port, LSM_NSS_Pin)) {
 8001592:	2204      	movs	r2, #4
 8001594:	4939      	ldr	r1, [pc, #228]	@ (800167c <cheakAll+0x170>)
 8001596:	4838      	ldr	r0, [pc, #224]	@ (8001678 <cheakAll+0x16c>)
 8001598:	f7ff fc30 	bl	8000dfc <LSM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01b      	beq.n	80015da <cheakAll+0xce>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015a2:	2102      	movs	r1, #2
 80015a4:	4832      	ldr	r0, [pc, #200]	@ (8001670 <cheakAll+0x164>)
 80015a6:	f001 f982 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80015aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015ae:	f000 febf 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015b2:	2102      	movs	r1, #2
 80015b4:	482e      	ldr	r0, [pc, #184]	@ (8001670 <cheakAll+0x164>)
 80015b6:	f001 f97a 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80015ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015be:	f000 feb7 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015c2:	2102      	movs	r1, #2
 80015c4:	482a      	ldr	r0, [pc, #168]	@ (8001670 <cheakAll+0x164>)
 80015c6:	f001 f972 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80015ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015ce:	f000 feaf 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015d2:	2102      	movs	r1, #2
 80015d4:	4826      	ldr	r0, [pc, #152]	@ (8001670 <cheakAll+0x164>)
 80015d6:	f001 f96a 	bl	80028ae <HAL_GPIO_TogglePin>
	}

	FR_Status = f_mount(&FatFs, SDPath, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	4928      	ldr	r1, [pc, #160]	@ (8001680 <cheakAll+0x174>)
 80015de:	4829      	ldr	r0, [pc, #164]	@ (8001684 <cheakAll+0x178>)
 80015e0:	f005 ff90 	bl	8007504 <f_mount>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <cheakAll+0x17c>)
 80015ea:	701a      	strb	r2, [r3, #0]

	if (FR_Status != FR_OK) {
 80015ec:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <cheakAll+0x17c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d02b      	beq.n	800164c <cheakAll+0x140>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015f4:	2102      	movs	r1, #2
 80015f6:	481e      	ldr	r0, [pc, #120]	@ (8001670 <cheakAll+0x164>)
 80015f8:	f001 f959 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80015fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001600:	f000 fe96 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001604:	2102      	movs	r1, #2
 8001606:	481a      	ldr	r0, [pc, #104]	@ (8001670 <cheakAll+0x164>)
 8001608:	f001 f951 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800160c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001610:	f000 fe8e 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001614:	2102      	movs	r1, #2
 8001616:	4816      	ldr	r0, [pc, #88]	@ (8001670 <cheakAll+0x164>)
 8001618:	f001 f949 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800161c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001620:	f000 fe86 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001624:	2102      	movs	r1, #2
 8001626:	4812      	ldr	r0, [pc, #72]	@ (8001670 <cheakAll+0x164>)
 8001628:	f001 f941 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800162c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001630:	f000 fe7e 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001634:	2102      	movs	r1, #2
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <cheakAll+0x164>)
 8001638:	f001 f939 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800163c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001640:	f000 fe76 	bl	8002330 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001644:	2102      	movs	r1, #2
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <cheakAll+0x164>)
 8001648:	f001 f931 	bl	80028ae <HAL_GPIO_TogglePin>

	}

	f_unlink("SULOG.csv");
 800164c:	480f      	ldr	r0, [pc, #60]	@ (800168c <cheakAll+0x180>)
 800164e:	f006 fd7f 	bl	8008150 <f_unlink>

	f_open(&Fil, "SULOG.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8001652:	220a      	movs	r2, #10
 8001654:	490d      	ldr	r1, [pc, #52]	@ (800168c <cheakAll+0x180>)
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <cheakAll+0x184>)
 8001658:	f005 ff9a 	bl	8007590 <f_open>
	f_puts("BEFOR WHILE \n", &Fil);
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <cheakAll+0x184>)
 800165e:	480d      	ldr	r0, [pc, #52]	@ (8001694 <cheakAll+0x188>)
 8001660:	f006 fe98 	bl	8008394 <f_puts>
	f_close(&Fil);
 8001664:	480a      	ldr	r0, [pc, #40]	@ (8001690 <cheakAll+0x184>)
 8001666:	f006 fb40 	bl	8007cea <f_close>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40020000 	.word	0x40020000
 8001674:	40020800 	.word	0x40020800
 8001678:	20000114 	.word	0x20000114
 800167c:	40020400 	.word	0x40020400
 8001680:	20000660 	.word	0x20000660
 8001684:	200001b0 	.word	0x200001b0
 8001688:	20000610 	.word	0x20000610
 800168c:	08008e50 	.word	0x08008e50
 8001690:	200003e0 	.word	0x200003e0
 8001694:	08008e5c 	.word	0x08008e5c

08001698 <getSeaLvlPress>:

void getSeaLvlPress() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <getSeaLvlPress+0x18>)
 800169e:	f000 f91d 	bl	80018dc <MS_ReadData>
	seaLvlPress = MS_Data[0];
 80016a2:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <getSeaLvlPress+0x18>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <getSeaLvlPress+0x1c>)
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000016c 	.word	0x2000016c
 80016b4:	20000180 	.word	0x20000180

080016b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <Error_Handler+0x8>

080016c4 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	4613      	mov	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 80016d2:	4a32      	ldr	r2, [pc, #200]	@ (800179c <LORA_Init+0xd8>)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 80016d8:	4a31      	ldr	r2, [pc, #196]	@ (80017a0 <LORA_Init+0xdc>)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 80016de:	4a31      	ldr	r2, [pc, #196]	@ (80017a4 <LORA_Init+0xe0>)
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 80016e4:	2042      	movs	r0, #66	@ 0x42
 80016e6:	f000 f861 	bl	80017ac <_loraReadReg>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b12      	cmp	r3, #18
 80016ee:	d001      	beq.n	80016f4 <LORA_Init+0x30>
		return 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e04e      	b.n	8001792 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 80016f4:	2100      	movs	r1, #0
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 f88e 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 80016fc:	2188      	movs	r1, #136	@ 0x88
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 f88a 	bl	8001818 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8001704:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <LORA_Init+0xe4>)
 8001706:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	0c1b      	lsrs	r3, r3, #16
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	2006      	movs	r0, #6
 8001712:	f000 f881 	bl	8001818 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4619      	mov	r1, r3
 800171e:	2007      	movs	r0, #7
 8001720:	f000 f87a 	bl	8001818 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	4619      	mov	r1, r3
 800172a:	2008      	movs	r0, #8
 800172c:	f000 f874 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8001730:	21ff      	movs	r1, #255	@ 0xff
 8001732:	2009      	movs	r0, #9
 8001734:	f000 f870 	bl	8001818 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8001738:	210b      	movs	r1, #11
 800173a:	200b      	movs	r0, #11
 800173c:	f000 f86c 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8001740:	2120      	movs	r1, #32
 8001742:	200c      	movs	r0, #12
 8001744:	f000 f868 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8001748:	21ff      	movs	r1, #255	@ 0xff
 800174a:	200e      	movs	r0, #14
 800174c:	f000 f864 	bl	8001818 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8001750:	2100      	movs	r1, #0
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f860 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8001758:	2182      	movs	r1, #130	@ 0x82
 800175a:	201d      	movs	r0, #29
 800175c:	f000 f85c 	bl	8001818 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8001760:	2170      	movs	r1, #112	@ 0x70
 8001762:	201e      	movs	r0, #30
 8001764:	f000 f858 	bl	8001818 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8001768:	2100      	movs	r1, #0
 800176a:	2020      	movs	r0, #32
 800176c:	f000 f854 	bl	8001818 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8001770:	2106      	movs	r1, #6
 8001772:	2021      	movs	r0, #33	@ 0x21
 8001774:	f000 f850 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8001778:	213c      	movs	r1, #60	@ 0x3c
 800177a:	2022      	movs	r0, #34	@ 0x22
 800177c:	f000 f84c 	bl	8001818 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8001780:	213c      	movs	r1, #60	@ 0x3c
 8001782:	2023      	movs	r0, #35	@ 0x23
 8001784:	f000 f848 	bl	8001818 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8001788:	2105      	movs	r1, #5
 800178a:	2001      	movs	r0, #1
 800178c:	f000 f844 	bl	8001818 <_loraWriteReg>

	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000614 	.word	0x20000614
 80017a0:	20000618 	.word	0x20000618
 80017a4:	2000061c 	.word	0x2000061c
 80017a8:	006c4000 	.word	0x006c4000

080017ac <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_loraReadReg+0x60>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <_loraReadReg+0x64>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4619      	mov	r1, r3
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_loraReadReg+0x60>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	400a      	ands	r2, r1
 80017ca:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <_loraReadReg+0x68>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	1df9      	adds	r1, r7, #7
 80017d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d6:	2201      	movs	r2, #1
 80017d8:	f002 fcc9 	bl	800416e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <_loraReadReg+0x68>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	1df9      	adds	r1, r7, #7
 80017e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e6:	2201      	movs	r2, #1
 80017e8:	f002 fe05 	bl	80043f6 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_loraReadReg+0x60>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <_loraReadReg+0x64>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <_loraReadReg+0x60>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	615a      	str	r2, [r3, #20]
	return reg;
 8001800:	79fb      	ldrb	r3, [r7, #7]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000618 	.word	0x20000618
 8001810:	2000061c 	.word	0x2000061c
 8001814:	20000614 	.word	0x20000614

08001818 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800182e:	b2db      	uxtb	r3, r3
 8001830:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <_loraWriteReg+0x6c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_loraWriteReg+0x70>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	43db      	mvns	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <_loraWriteReg+0x6c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <_loraWriteReg+0x74>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	1df9      	adds	r1, r7, #7
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	2201      	movs	r2, #1
 8001854:	f002 fc8b 	bl	800416e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <_loraWriteReg+0x74>)
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	1db9      	adds	r1, r7, #6
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	2201      	movs	r2, #1
 8001864:	f002 fc83 	bl	800416e <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <_loraWriteReg+0x6c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <_loraWriteReg+0x70>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <_loraWriteReg+0x6c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000618 	.word	0x20000618
 8001888:	2000061c 	.word	0x2000061c
 800188c:	20000614 	.word	0x20000614

08001890 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 800189e:	4a0b      	ldr	r2, [pc, #44]	@ (80018cc <MS_Init+0x3c>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <MS_Init+0x40>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <MS_Init+0x44>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 80018b0:	201e      	movs	r0, #30
 80018b2:	f000 fa27 	bl	8001d04 <_msSendCmd>
	HAL_Delay(100);
 80018b6:	2064      	movs	r0, #100	@ 0x64
 80018b8:	f000 fd3a 	bl	8002330 <HAL_Delay>

	_msReadProm(_calibrCoeff);
 80018bc:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <MS_Init+0x48>)
 80018be:	f000 f82d 	bl	800191c <_msReadProm>

}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000620 	.word	0x20000620
 80018d0:	20000624 	.word	0x20000624
 80018d4:	20000628 	.word	0x20000628
 80018d8:	2000062c 	.word	0x2000062c

080018dc <MS_ReadData>:

void MS_ReadData(uint32_t endBufer[]) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f80a 	bl	8001902 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f8c5 	bl	8001a84 <_calculate>

}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2000      	movs	r0, #0
 800190e:	f000 fa7d 	bl	8001e0c <_msSendCmdGetData32>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 8001924:	4b4f      	ldr	r3, [pc, #316]	@ (8001a64 <_msReadProm+0x148>)
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	2201      	movs	r2, #1
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fa15 	bl	8001d5c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8001932:	4b4c      	ldr	r3, [pc, #304]	@ (8001a64 <_msReadProm+0x148>)
 8001934:	789b      	ldrb	r3, [r3, #2]
 8001936:	2202      	movs	r2, #2
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fa0e 	bl	8001d5c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8001940:	4b48      	ldr	r3, [pc, #288]	@ (8001a64 <_msReadProm+0x148>)
 8001942:	78db      	ldrb	r3, [r3, #3]
 8001944:	2203      	movs	r2, #3
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fa07 	bl	8001d5c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 800194e:	4b45      	ldr	r3, [pc, #276]	@ (8001a64 <_msReadProm+0x148>)
 8001950:	791b      	ldrb	r3, [r3, #4]
 8001952:	2204      	movs	r2, #4
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fa00 	bl	8001d5c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 800195c:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <_msReadProm+0x148>)
 800195e:	795b      	ldrb	r3, [r3, #5]
 8001960:	2205      	movs	r2, #5
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f9f9 	bl	8001d5c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 800196a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <_msReadProm+0x148>)
 800196c:	799b      	ldrb	r3, [r3, #6]
 800196e:	2206      	movs	r2, #6
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f9f2 	bl	8001d5c <_msSendCmdGetData16>

	_realCalibrCoeff.Tref = _calibrCoeff[5] * 256.0;
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <_msReadProm+0x14c>)
 800197a:	895b      	ldrh	r3, [r3, #10]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdd1 	bl	8000524 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b39      	ldr	r3, [pc, #228]	@ (8001a6c <_msReadProm+0x150>)
 8001988:	f7fe fe36 	bl	80005f8 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f86a 	bl	8000a6c <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	4a35      	ldr	r2, [pc, #212]	@ (8001a70 <_msReadProm+0x154>)
 800199c:	6013      	str	r3, [r2, #0]
	_realCalibrCoeff.TempSens = _calibrCoeff[6] / 8388608.0;
 800199e:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <_msReadProm+0x14c>)
 80019a0:	899b      	ldrh	r3, [r3, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdbe 	bl	8000524 <__aeabi_i2d>
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <_msReadProm+0x158>)
 80019ae:	f7fe ff4d 	bl	800084c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f857 	bl	8000a6c <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a70 <_msReadProm+0x154>)
 80019c2:	6053      	str	r3, [r2, #4]
	_realCalibrCoeff.OffT1 = _calibrCoeff[2] * (65536.0);
 80019c4:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <_msReadProm+0x14c>)
 80019c6:	889b      	ldrh	r3, [r3, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fdab 	bl	8000524 <__aeabi_i2d>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <_msReadProm+0x15c>)
 80019d4:	f7fe fe10 	bl	80005f8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f844 	bl	8000a6c <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <_msReadProm+0x154>)
 80019e8:	6093      	str	r3, [r2, #8]
	_realCalibrCoeff.Tco = (_calibrCoeff[4]) / (128.0);
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <_msReadProm+0x14c>)
 80019ec:	891b      	ldrh	r3, [r3, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <_msReadProm+0x160>)
 80019fa:	f7fe ff27 	bl	800084c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f831 	bl	8000a6c <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <_msReadProm+0x154>)
 8001a0e:	60d3      	str	r3, [r2, #12]
	_realCalibrCoeff.SensT1 = _calibrCoeff[1] * (32768.0);
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_msReadProm+0x14c>)
 8001a12:	885b      	ldrh	r3, [r3, #2]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd85 	bl	8000524 <__aeabi_i2d>
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <_msReadProm+0x164>)
 8001a20:	f7fe fdea 	bl	80005f8 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f81e 	bl	8000a6c <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <_msReadProm+0x154>)
 8001a34:	6113      	str	r3, [r2, #16]
	_realCalibrCoeff.Tcs = (_calibrCoeff[3]) / (256.0);
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <_msReadProm+0x14c>)
 8001a38:	88db      	ldrh	r3, [r3, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd72 	bl	8000524 <__aeabi_i2d>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <_msReadProm+0x150>)
 8001a46:	f7fe ff01 	bl	800084c <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f80b 	bl	8000a6c <__aeabi_d2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <_msReadProm+0x154>)
 8001a5a:	6153      	str	r3, [r2, #20]
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000004 	.word	0x20000004
 8001a68:	2000062c 	.word	0x2000062c
 8001a6c:	40700000 	.word	0x40700000
 8001a70:	2000063c 	.word	0x2000063c
 8001a74:	41600000 	.word	0x41600000
 8001a78:	40f00000 	.word	0x40f00000
 8001a7c:	40600000 	.word	0x40600000
 8001a80:	40e00000 	.word	0x40e00000

08001a84 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], uint32_t bufer[]) {
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b08c      	sub	sp, #48	@ 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	uint32_t D1 = dataWithPressTemp[0];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]
	uint32_t D2 = dataWithPressTemp[1];
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	617b      	str	r3, [r7, #20]

	float dT = D2 - _realCalibrCoeff.Tref;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa4:	4b90      	ldr	r3, [pc, #576]	@ (8001ce8 <_calculate+0x264>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aae:	edc7 7a04 	vstr	s15, [r7, #16]
	float TEMP = 2000 + dT * _realCalibrCoeff.TempSens;
 8001ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ce8 <_calculate+0x264>)
 8001ab4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ab8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001cec <_calculate+0x268>
 8001ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ac8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float OFF = _realCalibrCoeff.OffT1 + _realCalibrCoeff.Tco * dT;
 8001acc:	4b86      	ldr	r3, [pc, #536]	@ (8001ce8 <_calculate+0x264>)
 8001ace:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ad2:	4b85      	ldr	r3, [pc, #532]	@ (8001ce8 <_calculate+0x264>)
 8001ad4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ad8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	float SENS = _realCalibrCoeff.SensT1 + _realCalibrCoeff.Tcs * dT;
 8001ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <_calculate+0x264>)
 8001aea:	ed93 7a04 	vldr	s14, [r3, #16]
 8001aee:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <_calculate+0x264>)
 8001af0:	edd3 6a05 	vldr	s13, [r3, #20]
 8001af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (TEMP < 2000) {
 8001b04:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b08:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001cec <_calculate+0x268>
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	f140 80a2 	bpl.w	8001c5c <_calculate+0x1d8>
		float T2 = (dT * dT) / 2147483648.0;
 8001b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b1c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b20:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001cf0 <_calculate+0x26c>
 8001b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b28:	edc7 7a03 	vstr	s15, [r7, #12]
		float OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2.0;
 8001b2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b30:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001cec <_calculate+0x268>
 8001b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b38:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b44:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001cec <_calculate+0x268>
 8001b48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b58:	edc7 7a08 	vstr	s15, [r7, #32]
		float SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4.0;
 8001b5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b60:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001cec <_calculate+0x268>
 8001b64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b68:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b74:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001cec <_calculate+0x268>
 8001b78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b80:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b88:	edc7 7a07 	vstr	s15, [r7, #28]

		if (TEMP < -1500) {
 8001b8c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b90:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001cf4 <_calculate+0x270>
 8001b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	d546      	bpl.n	8001c2c <_calculate+0x1a8>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8001b9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ba2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001cf8 <_calculate+0x274>
 8001ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001baa:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001bae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bb2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bb6:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001cf8 <_calculate+0x274>
 8001bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	edc7 7a08 	vstr	s15, [r7, #32]
			SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2.0;
 8001bce:	69f8      	ldr	r0, [r7, #28]
 8001bd0:	f7fe fcba 	bl	8000548 <__aeabi_f2d>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bdc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001cf8 <_calculate+0x274>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bf0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001cf8 <_calculate+0x274>
 8001bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	ee17 0a90 	vmov	r0, s15
 8001c00:	f7fe fca2 	bl	8000548 <__aeabi_f2d>
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c0c:	f7fe fe1e 	bl	800084c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb38 	bl	800028c <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ff22 	bl	8000a6c <__aeabi_d2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	61fb      	str	r3, [r7, #28]
		}

		TEMP -= T2;
 8001c2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		OFF -= OFF2;
 8001c3c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		SENS -= SENS2;
 8001c4c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	float PRES = (D1 * SENS / (2097152.0) - OFF) / 32768.0;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c66:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	ee17 0a90 	vmov	r0, s15
 8001c72:	f7fe fc69 	bl	8000548 <__aeabi_f2d>
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <_calculate+0x278>)
 8001c7c:	f7fe fde6 	bl	800084c <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4614      	mov	r4, r2
 8001c86:	461d      	mov	r5, r3
 8001c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c8a:	f7fe fc5d 	bl	8000548 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe faf7 	bl	8000288 <__aeabi_dsub>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <_calculate+0x27c>)
 8001ca8:	f7fe fdd0 	bl	800084c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe feda 	bl	8000a6c <__aeabi_d2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60bb      	str	r3, [r7, #8]

	bufer[0] = PRES;
 8001cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	ee17 2a90 	vmov	r2, s15
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd8:	ee17 2a90 	vmov	r2, s15
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3730      	adds	r7, #48	@ 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000063c 	.word	0x2000063c
 8001cec:	44fa0000 	.word	0x44fa0000
 8001cf0:	4f000000 	.word	0x4f000000
 8001cf4:	c4bb8000 	.word	0xc4bb8000
 8001cf8:	44bb8000 	.word	0x44bb8000
 8001cfc:	41400000 	.word	0x41400000
 8001d00:	40e00000 	.word	0x40e00000

08001d04 <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_msSendCmd+0x4c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <_msSendCmd+0x50>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <_msSendCmd+0x4c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	400a      	ands	r2, r1
 8001d22:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <_msSendCmd+0x54>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	1df9      	adds	r1, r7, #7
 8001d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f002 fa1d 	bl	800416e <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <_msSendCmd+0x4c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <_msSendCmd+0x50>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <_msSendCmd+0x4c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	615a      	str	r2, [r3, #20]
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000624 	.word	0x20000624
 8001d54:	20000628 	.word	0x20000628
 8001d58:	20000620 	.word	0x20000620

08001d5c <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <_msSendCmdGetData16+0xa4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <_msSendCmdGetData16+0xa8>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <_msSendCmdGetData16+0xa4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <_msSendCmdGetData16+0xac>)
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	1df9      	adds	r1, r7, #7
 8001d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f002 f9ee 	bl	800416e <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001d92:	200a      	movs	r0, #10
 8001d94:	f000 facc 	bl	8002330 <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <_msSendCmdGetData16+0xac>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	f107 010d 	add.w	r1, r7, #13
 8001da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da4:	2201      	movs	r2, #1
 8001da6:	f002 fb26 	bl	80043f6 <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <_msSendCmdGetData16+0xac>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f107 010c 	add.w	r1, r7, #12
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	2201      	movs	r2, #1
 8001db8:	f002 fb1d 	bl	80043f6 <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <_msSendCmdGetData16+0xa4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_msSendCmdGetData16+0xa8>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <_msSendCmdGetData16+0xa4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 8001dda:	7b3b      	ldrb	r3, [r7, #12]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 8001de4:	79bb      	ldrb	r3, [r7, #6]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	89fa      	ldrh	r2, [r7, #14]
 8001dee:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 8001df0:	2014      	movs	r0, #20
 8001df2:	f000 fa9d 	bl	8002330 <HAL_Delay>

}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000624 	.word	0x20000624
 8001e04:	20000628 	.word	0x20000628
 8001e08:	20000620 	.word	0x20000620

08001e0c <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 8001e18:	2044      	movs	r0, #68	@ 0x44
 8001e1a:	f7ff ff73 	bl	8001d04 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001e1e:	200c      	movs	r0, #12
 8001e20:	f000 fa86 	bl	8002330 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	4b40      	ldr	r3, [pc, #256]	@ (8001f2c <_msSendCmdGetData32+0x120>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	4b3d      	ldr	r3, [pc, #244]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <_msSendCmdGetData32+0x124>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	1df9      	adds	r1, r7, #7
 8001e40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e44:	2201      	movs	r2, #1
 8001e46:	f002 f992 	bl	800416e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <_msSendCmdGetData32+0x124>)
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	f107 010c 	add.w	r1, r7, #12
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	2203      	movs	r2, #3
 8001e58:	f002 facd 	bl	80043f6 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001e5c:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <_msSendCmdGetData32+0x120>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 8001e70:	2054      	movs	r0, #84	@ 0x54
 8001e72:	f7ff ff47 	bl	8001d04 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001e76:	200c      	movs	r0, #12
 8001e78:	f000 fa5a 	bl	8002330 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <_msSendCmdGetData32+0x120>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	400a      	ands	r2, r1
 8001e90:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <_msSendCmdGetData32+0x124>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	1df9      	adds	r1, r7, #7
 8001e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f002 f966 	bl	800416e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 8001ea2:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <_msSendCmdGetData32+0x124>)
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	f107 0108 	add.w	r1, r7, #8
 8001eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eae:	2203      	movs	r2, #3
 8001eb0:	f002 faa1 	bl	80043f6 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <_msSendCmdGetData32+0x120>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <_msSendCmdGetData32+0x11c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 8001ec8:	7b3b      	ldrb	r3, [r7, #12]
 8001eca:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 8001ed2:	7b7b      	ldrb	r3, [r7, #13]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 8001eec:	7a3b      	ldrb	r3, [r7, #8]
 8001eee:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 8001ef6:	7a7b      	ldrb	r3, [r7, #9]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 8001f06:	7abb      	ldrb	r3, [r7, #10]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000624 	.word	0x20000624
 8001f2c:	20000628 	.word	0x20000628
 8001f30:	20000620 	.word	0x20000620

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	@ (8002068 <HAL_SD_MspInit+0xe4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d15b      	bne.n	800205e <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a2f      	ldr	r2, [pc, #188]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a28      	ldr	r2, [pc, #160]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a21      	ldr	r2, [pc, #132]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <HAL_SD_MspInit+0xe8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002004:	2301      	movs	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800200c:	230c      	movs	r3, #12
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4816      	ldr	r0, [pc, #88]	@ (8002070 <HAL_SD_MspInit+0xec>)
 8002018:	f000 fa94 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800201c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800202e:	230c      	movs	r3, #12
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	480d      	ldr	r0, [pc, #52]	@ (8002070 <HAL_SD_MspInit+0xec>)
 800203a:	f000 fa83 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800203e:	2304      	movs	r3, #4
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800204e:	230c      	movs	r3, #12
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4806      	ldr	r0, [pc, #24]	@ (8002074 <HAL_SD_MspInit+0xf0>)
 800205a:	f000 fa73 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	@ 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40023800 	.word	0x40023800
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00

08002078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_SPI_MspInit+0x84>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_SPI_MspInit+0x88>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_SPI_MspInit+0x88>)
 80020a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_SPI_MspInit+0x88>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_SPI_MspInit+0x88>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <HAL_SPI_MspInit+0x88>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_SPI_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020d2:	23e0      	movs	r3, #224	@ 0xe0
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e2:	2305      	movs	r3, #5
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	@ (8002104 <HAL_SPI_MspInit+0x8c>)
 80020ee:	f000 fa29 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40013000 	.word	0x40013000
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <NMI_Handler+0x4>

08002110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <MemManage_Handler+0x4>

08002120 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <UsageFault_Handler+0x4>

08002130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215e:	f000 f8c7 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f006 f9b8 	bl	800850c <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20018000 	.word	0x20018000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	20000654 	.word	0x20000654
 80021d0:	200007e0 	.word	0x200007e0

080021d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <SystemInit+0x20>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <SystemInit+0x20>)
 80021e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002230 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021fc:	f7ff ffea 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002200:	480c      	ldr	r0, [pc, #48]	@ (8002234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002202:	490d      	ldr	r1, [pc, #52]	@ (8002238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002218:	4c0a      	ldr	r4, [pc, #40]	@ (8002244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002226:	f006 f977 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222a:	f7fe feeb 	bl	8001004 <main>
  bx  lr    
 800222e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800223c:	08008f98 	.word	0x08008f98
  ldr r2, =_sbss
 8002240:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002244:	200007e0 	.word	0x200007e0

08002248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC_IRQHandler>
	...

0800224c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_Init+0x40>)
 8002256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_Init+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <HAL_Init+0x40>)
 8002262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a07      	ldr	r2, [pc, #28]	@ (800228c <HAL_Init+0x40>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002274:	2003      	movs	r0, #3
 8002276:	f000 f931 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227a:	200f      	movs	r0, #15
 800227c:	f000 f808 	bl	8002290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002280:	f7ff fe58 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <HAL_InitTick+0x54>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_InitTick+0x58>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f93b 	bl	800252a <HAL_SYSTICK_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00e      	b.n	80022dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d80a      	bhi.n	80022da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f000 f911 	bl	80024f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d0:	4a06      	ldr	r2, [pc, #24]	@ (80022ec <HAL_InitTick+0x5c>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000014 	.word	0x20000014
 80022ec:	20000010 	.word	0x20000010

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000014 	.word	0x20000014
 8002314:	20000658 	.word	0x20000658

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000658 	.word	0x20000658

08002330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff ffee 	bl	8002318 <HAL_GetTick>
 800233c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d005      	beq.n	8002356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_Delay+0x44>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002356:	bf00      	nop
 8002358:	f7ff ffde 	bl	8002318 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	429a      	cmp	r2, r3
 8002366:	d8f7      	bhi.n	8002358 <HAL_Delay+0x28>
  {
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000014 	.word	0x20000014

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	@ (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a8:	d301      	bcc.n	80024ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00f      	b.n	80024ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <SysTick_Config+0x40>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b6:	210f      	movs	r1, #15
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f7ff ff8e 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <SysTick_Config+0x40>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <SysTick_Config+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff47 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002504:	f7ff ff5c 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	6978      	ldr	r0, [r7, #20]
 8002510:	f7ff ff8e 	bl	8002430 <NVIC_EncodePriority>
 8002514:	4602      	mov	r2, r0
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff5d 	bl	80023dc <__NVIC_SetPriority>
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffb0 	bl	8002498 <SysTick_Config>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e159      	b.n	8002814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8148 	bne.w	800280e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a2 	beq.w	800280e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b57      	ldr	r3, [pc, #348]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a56      	ldr	r2, [pc, #344]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b54      	ldr	r3, [pc, #336]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_GPIO_Init+0x2ec>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a49      	ldr	r2, [pc, #292]	@ (8002834 <HAL_GPIO_Init+0x2f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x202>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a48      	ldr	r2, [pc, #288]	@ (8002838 <HAL_GPIO_Init+0x2f4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x1fe>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a47      	ldr	r2, [pc, #284]	@ (800283c <HAL_GPIO_Init+0x2f8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x1fa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a46      	ldr	r2, [pc, #280]	@ (8002840 <HAL_GPIO_Init+0x2fc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x1f6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a45      	ldr	r2, [pc, #276]	@ (8002844 <HAL_GPIO_Init+0x300>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x1f2>
 8002732:	2304      	movs	r3, #4
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002736:	2307      	movs	r3, #7
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x204>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x204>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	@ (8002830 <HAL_GPIO_Init+0x2ec>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <HAL_GPIO_Init+0x304>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a2f      	ldr	r2, [pc, #188]	@ (8002848 <HAL_GPIO_Init+0x304>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_GPIO_Init+0x304>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1a      	ldr	r2, [pc, #104]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <HAL_GPIO_Init+0x304>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f aea2 	bls.w	8002560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e001      	b.n	800286e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002898:	e003      	b.n	80028a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	041a      	lsls	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	619a      	str	r2, [r3, #24]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c0:	887a      	ldrh	r2, [r7, #2]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	400b      	ands	r3, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e267      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d075      	beq.n	80029ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002902:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d00c      	beq.n	8002928 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002916:	2b08      	cmp	r3, #8
 8002918:	d112      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291a:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002926:	d10b      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	4b7e      	ldr	r3, [pc, #504]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05b      	beq.n	80029ec <HAL_RCC_OscConfig+0x108>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d157      	bne.n	80029ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e242      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x74>
 800294a:	4b76      	ldr	r3, [pc, #472]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x98>
 8002962:	4b70      	ldr	r3, [pc, #448]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6f      	ldr	r2, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6c      	ldr	r2, [pc, #432]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 800297c:	4b69      	ldr	r3, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a68      	ldr	r2, [pc, #416]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b66      	ldr	r3, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a65      	ldr	r2, [pc, #404]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fcbc 	bl	8002318 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff fcb8 	bl	8002318 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e207      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0xc0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7ff fca8 	bl	8002318 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7ff fca4 	bl	8002318 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1f3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b51      	ldr	r3, [pc, #324]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0xe8>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b44      	ldr	r3, [pc, #272]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e1c7      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4937      	ldr	r1, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e03a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x244>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fc5d 	bl	8002318 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7ff fc59 	bl	8002318 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1a8      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4925      	ldr	r1, [pc, #148]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_RCC_OscConfig+0x244>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fc3c 	bl	8002318 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fc38 	bl	8002318 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e187      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d036      	beq.n	8002b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_RCC_OscConfig+0x248>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7ff fc1c 	bl	8002318 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fc18 	bl	8002318 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e167      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x200>
 8002b02:	e01b      	b.n	8002b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x248>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff fc05 	bl	8002318 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	e00e      	b.n	8002b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b12:	f7ff fc01 	bl	8002318 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d907      	bls.n	8002b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e150      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	42470000 	.word	0x42470000
 8002b2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	4b88      	ldr	r3, [pc, #544]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ea      	bne.n	8002b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8097 	beq.w	8002c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4e:	4b81      	ldr	r3, [pc, #516]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	4a7c      	ldr	r2, [pc, #496]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b86:	4b74      	ldr	r3, [pc, #464]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a73      	ldr	r2, [pc, #460]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7ff fbc1 	bl	8002318 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9a:	f7ff fbbd 	bl	8002318 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e10c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x2ea>
 8002bc0:	4b64      	ldr	r3, [pc, #400]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	4a63      	ldr	r2, [pc, #396]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bcc:	e01c      	b.n	8002c08 <HAL_RCC_OscConfig+0x324>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x30c>
 8002bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a5e      	ldr	r2, [pc, #376]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x324>
 8002bf0:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a57      	ldr	r2, [pc, #348]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfc:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	4a54      	ldr	r2, [pc, #336]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 0304 	bic.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7ff fb82 	bl	8002318 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7ff fb7e 	bl	8002318 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0cb      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	4b49      	ldr	r3, [pc, #292]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ee      	beq.n	8002c18 <HAL_RCC_OscConfig+0x334>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fb6c 	bl	8002318 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7ff fb68 	bl	8002318 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0b5      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ee      	bne.n	8002c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	4a38      	ldr	r2, [pc, #224]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a1 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c82:	4b34      	ldr	r3, [pc, #208]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d05c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d141      	bne.n	8002d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fb3c 	bl	8002318 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff fb38 	bl	8002318 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e087      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	491b      	ldr	r1, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fb11 	bl	8002318 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff fb0d 	bl	8002318 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e05c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x416>
 8002d18:	e054      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff fafa 	bl	8002318 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff faf6 	bl	8002318 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e045      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x444>
 8002d46:	e03d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e038      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_RCC_OscConfig+0x4ec>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d028      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d121      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cc      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b68      	ldr	r3, [pc, #416]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d90c      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b65      	ldr	r3, [pc, #404]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a52      	ldr	r2, [pc, #328]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d044      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d119      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b3f      	ldr	r3, [pc, #252]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e067      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b37      	ldr	r3, [pc, #220]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4934      	ldr	r1, [pc, #208]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7ff fa28 	bl	8002318 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7ff fa24 	bl	8002318 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e04f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d20c      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f46:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 f821 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490a      	ldr	r1, [pc, #40]	@ (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f988 	bl	8002290 <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08008eb0 	.word	0x08008eb0
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa4:	b090      	sub	sp, #64	@ 0x40
 8002fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb8:	4b59      	ldr	r3, [pc, #356]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	f200 80a1 	bhi.w	800310c <HAL_RCC_GetSysClockFreq+0x16c>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x3a>
 8002fd2:	e09b      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b53      	ldr	r3, [pc, #332]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fd8:	e09b      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fda:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fde:	e098      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fea:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d028      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	627a      	str	r2, [r7, #36]	@ 0x24
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003008:	2100      	movs	r1, #0
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x188>)
 800300c:	fb03 f201 	mul.w	r2, r3, r1
 8003010:	2300      	movs	r3, #0
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	4413      	add	r3, r2
 8003018:	4a43      	ldr	r2, [pc, #268]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x188>)
 800301a:	fba0 1202 	umull	r1, r2, r0, r2
 800301e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003020:	460a      	mov	r2, r1
 8003022:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003026:	4413      	add	r3, r2
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	2200      	movs	r2, #0
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	61fa      	str	r2, [r7, #28]
 8003032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003036:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800303a:	f7fd fd67 	bl	8000b0c <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4613      	mov	r3, r2
 8003044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003046:	e053      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003048:	4b35      	ldr	r3, [pc, #212]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	2200      	movs	r2, #0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	617a      	str	r2, [r7, #20]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800305a:	f04f 0b00 	mov.w	fp, #0
 800305e:	4652      	mov	r2, sl
 8003060:	465b      	mov	r3, fp
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	0159      	lsls	r1, r3, #5
 800306c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003070:	0150      	lsls	r0, r2, #5
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	ebb2 080a 	subs.w	r8, r2, sl
 800307a:	eb63 090b 	sbc.w	r9, r3, fp
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800308a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800308e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003092:	ebb2 0408 	subs.w	r4, r2, r8
 8003096:	eb63 0509 	sbc.w	r5, r3, r9
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	00eb      	lsls	r3, r5, #3
 80030a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a8:	00e2      	lsls	r2, r4, #3
 80030aa:	4614      	mov	r4, r2
 80030ac:	461d      	mov	r5, r3
 80030ae:	eb14 030a 	adds.w	r3, r4, sl
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	eb45 030b 	adc.w	r3, r5, fp
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c6:	4629      	mov	r1, r5
 80030c8:	028b      	lsls	r3, r1, #10
 80030ca:	4621      	mov	r1, r4
 80030cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d0:	4621      	mov	r1, r4
 80030d2:	028a      	lsls	r2, r1, #10
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030da:	2200      	movs	r2, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	60fa      	str	r2, [r7, #12]
 80030e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030e4:	f7fd fd12 	bl	8000b0c <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4613      	mov	r3, r2
 80030ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	3301      	adds	r3, #1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800310a:	e002      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x184>)
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003114:	4618      	mov	r0, r3
 8003116:	3740      	adds	r7, #64	@ 0x40
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	00f42400 	.word	0x00f42400
 8003128:	017d7840 	.word	0x017d7840

0800312c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fe ff17 	bl	8001f84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f814 	bl	800318c <HAL_SD_InitCard>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00a      	b.n	8003184 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800318c:	b5b0      	push	{r4, r5, r7, lr}
 800318e:	b08e      	sub	sp, #56	@ 0x38
 8003190:	af04      	add	r7, sp, #16
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80031a8:	2376      	movs	r3, #118	@ 0x76
 80031aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681d      	ldr	r5, [r3, #0]
 80031b0:	466c      	mov	r4, sp
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c4:	4628      	mov	r0, r5
 80031c6:	f001 fd1b 	bl	8004c00 <SDIO_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80031d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e04f      	b.n	800327c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80031dc:	4b29      	ldr	r3, [pc, #164]	@ (8003284 <HAL_SD_InitCard+0xf8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 fd53 	bl	8004c92 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80031ec:	4b25      	ldr	r3, [pc, #148]	@ (8003284 <HAL_SD_InitCard+0xf8>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7ff f89c 	bl	8002330 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fe79 	bl	8003ef0 <SD_PowerON>
 80031fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e02e      	b.n	800327c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fd98 	bl	8003d54 <SD_InitCard>
 8003224:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e01b      	b.n	800327c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fdb2 	bl	8004db6 <SDMMC_CmdBlockLength>
 8003252:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00f      	beq.n	800327a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <HAL_SD_InitCard+0xfc>)
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3728      	adds	r7, #40	@ 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bdb0      	pop	{r4, r5, r7, pc}
 8003284:	422580a0 	.word	0x422580a0
 8003288:	004005ff 	.word	0x004005ff

0800328c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b092      	sub	sp, #72	@ 0x48
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800329a:	f7ff f83d 	bl	8002318 <HAL_GetTick>
 800329e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1c5      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 81b8 	bne.w	800363c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d907      	bls.n	80032f0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e1ac      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330a:	025b      	lsls	r3, r3, #9
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800331a:	2390      	movs	r3, #144	@ 0x90
 800331c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800331e:	2302      	movs	r3, #2
 8003320:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003326:	2301      	movs	r3, #1
 8003328:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f107 0214 	add.w	r2, r7, #20
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fd12 	bl	8004d5e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d90a      	bls.n	8003356 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2202      	movs	r2, #2
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fd76 	bl	8004e3e <SDMMC_CmdReadMultiBlock>
 8003352:	6478      	str	r0, [r7, #68]	@ 0x44
 8003354:	e009      	b.n	800336a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fd49 	bl	8004dfa <SDMMC_CmdReadSingleBlock>
 8003368:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800336a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336c:	2b00      	cmp	r3, #0
 800336e:	d012      	beq.n	8003396 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7e      	ldr	r2, [pc, #504]	@ (8003570 <HAL_SD_ReadBlocks+0x2e4>)
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e159      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800339a:	e061      	b.n	8003460 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03c      	beq.n	8003424 <HAL_SD_ReadBlocks+0x198>
 80033aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d039      	beq.n	8003424 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b4:	e033      	b.n	800341e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fc4b 	bl	8004c56 <SDIO_ReadFIFO>
 80033c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	3301      	adds	r3, #1
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d2:	3b01      	subs	r3, #1
 80033d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e2:	3301      	adds	r3, #1
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e8:	3b01      	subs	r3, #1
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80033ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f8:	3301      	adds	r3, #1
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033fe:	3b01      	subs	r3, #1
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	b2da      	uxtb	r2, r3
 8003408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	3301      	adds	r3, #1
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003414:	3b01      	subs	r3, #1
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341a:	3301      	adds	r3, #1
 800341c:	643b      	str	r3, [r7, #64]	@ 0x40
 800341e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003420:	2b07      	cmp	r3, #7
 8003422:	d9c8      	bls.n	80033b6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003424:	f7fe ff78 	bl	8002318 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003430:	429a      	cmp	r2, r3
 8003432:	d902      	bls.n	800343a <HAL_SD_ReadBlocks+0x1ae>
 8003434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4c      	ldr	r2, [pc, #304]	@ (8003570 <HAL_SD_ReadBlocks+0x2e4>)
 8003440:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0f4      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003466:	f240 332a 	movw	r3, #810	@ 0x32a
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d095      	beq.n	800339c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d022      	beq.n	80034c4 <HAL_SD_ReadBlocks+0x238>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d91f      	bls.n	80034c4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	2b03      	cmp	r3, #3
 800348a:	d01b      	beq.n	80034c4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fd3b 	bl	8004f0c <SDMMC_CmdStopTransfer>
 8003496:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <HAL_SD_ReadBlocks+0x2e4>)
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0c2      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_SD_ReadBlocks+0x254>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d012      	beq.n	8003506 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_SD_ReadBlocks+0x2e4>)
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	f043 0208 	orr.w	r2, r3, #8
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0a1      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <HAL_SD_ReadBlocks+0x2e4>)
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e087      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d064      	beq.n	8003612 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a08      	ldr	r2, [pc, #32]	@ (8003570 <HAL_SD_ReadBlocks+0x2e4>)
 800354e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06d      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
 800356e:	bf00      	nop
 8003570:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fb6c 	bl	8004c56 <SDIO_ReadFIFO>
 800357e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003582:	b2da      	uxtb	r2, r3
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	3301      	adds	r3, #1
 800358c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800358e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003590:	3b01      	subs	r3, #1
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b2da      	uxtb	r2, r3
 800359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a0:	3301      	adds	r3, #1
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80035a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a6:	3b01      	subs	r3, #1
 80035a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b6:	3301      	adds	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80035ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035bc:	3b01      	subs	r3, #1
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	0e1b      	lsrs	r3, r3, #24
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035cc:	3301      	adds	r3, #1
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80035d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d2:	3b01      	subs	r3, #1
 80035d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035d6:	f7fe fe9f 	bl	8002318 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d902      	bls.n	80035ec <HAL_SD_ReadBlocks+0x360>
 80035e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d112      	bne.n	8003612 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <HAL_SD_ReadBlocks+0x3c8>)
 80035f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e01b      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SD_ReadBlocks+0x39a>
 8003620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1a6      	bne.n	8003574 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e006      	b.n	800364a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3748      	adds	r7, #72	@ 0x48
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	004005ff 	.word	0x004005ff

08003658 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b092      	sub	sp, #72	@ 0x48
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7fe fe57 	bl	8002318 <HAL_GetTick>
 800366a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e16d      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	f040 8160 	bne.w	8003958 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800369e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d907      	bls.n	80036bc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e154      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2203      	movs	r2, #3
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d002      	beq.n	80036da <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	025b      	lsls	r3, r3, #9
 80036e4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80036e6:	2390      	movs	r3, #144	@ 0x90
 80036e8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f107 0218 	add.w	r2, r7, #24
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f001 fb2c 	bl	8004d5e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d90a      	bls.n	8003722 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fbd4 	bl	8004ec6 <SDMMC_CmdWriteMultiBlock>
 800371e:	6478      	str	r0, [r7, #68]	@ 0x44
 8003720:	e009      	b.n	8003736 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2210      	movs	r2, #16
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fba7 	bl	8004e82 <SDMMC_CmdWriteSingleBlock>
 8003734:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a8b      	ldr	r2, [pc, #556]	@ (8003970 <HAL_SD_WriteBlocks+0x318>)
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374a:	431a      	orrs	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e101      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003766:	e065      	b.n	8003834 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d040      	beq.n	80037f8 <HAL_SD_WriteBlocks+0x1a0>
 8003776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03d      	beq.n	80037f8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800377c:	2300      	movs	r3, #0
 800377e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003780:	e037      	b.n	80037f2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	3301      	adds	r3, #1
 800378c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800378e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003790:	3b01      	subs	r3, #1
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	3301      	adds	r3, #1
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80037a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a8:	3b01      	subs	r3, #1
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	041a      	lsls	r2, r3, #16
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ba:	3301      	adds	r3, #1
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c0:	3b01      	subs	r3, #1
 80037c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80037c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	061a      	lsls	r2, r3, #24
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d2:	3301      	adds	r3, #1
 80037d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80037d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d8:	3b01      	subs	r3, #1
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f107 0214 	add.w	r2, r7, #20
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fa42 	bl	8004c70 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80037ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ee:	3301      	adds	r3, #1
 80037f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d9c4      	bls.n	8003782 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80037f8:	f7fe fd8e 	bl	8002318 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003804:	429a      	cmp	r2, r3
 8003806:	d902      	bls.n	800380e <HAL_SD_WriteBlocks+0x1b6>
 8003808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800380a:	2b00      	cmp	r3, #0
 800380c:	d112      	bne.n	8003834 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a57      	ldr	r2, [pc, #348]	@ (8003970 <HAL_SD_WriteBlocks+0x318>)
 8003814:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800381a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e098      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800383a:	f240 331a 	movw	r3, #794	@ 0x31a
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d091      	beq.n	8003768 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <HAL_SD_WriteBlocks+0x240>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d91f      	bls.n	8003898 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	2b03      	cmp	r3, #3
 800385e:	d01b      	beq.n	8003898 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fb51 	bl	8004f0c <SDMMC_CmdStopTransfer>
 800386a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800386c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3e      	ldr	r2, [pc, #248]	@ (8003970 <HAL_SD_WriteBlocks+0x318>)
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800387e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e066      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_SD_WriteBlocks+0x25c>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_SD_WriteBlocks+0x318>)
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	f043 0208 	orr.w	r2, r3, #8
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e045      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a20      	ldr	r2, [pc, #128]	@ (8003970 <HAL_SD_WriteBlocks+0x318>)
 80038ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	f043 0202 	orr.w	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e02b      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d012      	beq.n	8003942 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_SD_WriteBlocks+0x318>)
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e011      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f240 523a 	movw	r2, #1338	@ 0x53a
 800394a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e006      	b.n	8003966 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3748      	adds	r7, #72	@ 0x48
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	004005ff 	.word	0x004005ff

08003974 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003982:	0f9b      	lsrs	r3, r3, #30
 8003984:	b2da      	uxtb	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d4:	0d1b      	lsrs	r3, r3, #20
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f2:	0bdb      	lsrs	r3, r3, #15
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a04:	0b9b      	lsrs	r3, r3, #14
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a16:	0b5b      	lsrs	r3, r3, #13
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a28:	0b1b      	lsrs	r3, r3, #12
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d163      	bne.n	8003b0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a48:	009a      	lsls	r2, r3, #2
 8003a4a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a4e:	4013      	ands	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003a54:	0f92      	lsrs	r2, r2, #30
 8003a56:	431a      	orrs	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a60:	0edb      	lsrs	r3, r3, #27
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a72:	0e1b      	lsrs	r3, r3, #24
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a84:	0d5b      	lsrs	r3, r3, #21
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a96:	0c9b      	lsrs	r3, r3, #18
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa8:	0bdb      	lsrs	r3, r3, #15
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	7e1b      	ldrb	r3, [r3, #24]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	3302      	adds	r3, #2
 8003acc:	2201      	movs	r2, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003ad6:	fb03 f202 	mul.w	r2, r3, r2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	7a1b      	ldrb	r3, [r3, #8]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003af8:	0a52      	lsrs	r2, r2, #9
 8003afa:	fb03 f202 	mul.w	r2, r3, r2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b0a:	e031      	b.n	8003b70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d11d      	bne.n	8003b50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	029a      	lsls	r2, r3, #10
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b4e:	e00f      	b.n	8003b70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a58      	ldr	r2, [pc, #352]	@ (8003cb8 <HAL_SD_GetCardCSD+0x344>)
 8003b56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e09d      	b.n	8003cac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b74:	0b9b      	lsrs	r3, r3, #14
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b86:	09db      	lsrs	r3, r3, #7
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	0fdb      	lsrs	r3, r3, #31
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	0f5b      	lsrs	r3, r3, #29
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	0e9b      	lsrs	r3, r3, #26
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	0d9b      	lsrs	r3, r3, #22
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	0d5b      	lsrs	r3, r3, #21
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	0c1b      	lsrs	r3, r3, #16
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	0bdb      	lsrs	r3, r3, #15
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	0b9b      	lsrs	r3, r3, #14
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	0b1b      	lsrs	r3, r3, #12
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	0a9b      	lsrs	r3, r3, #10
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	004005ff 	.word	0x004005ff

08003cbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f970 	bl	800400c <SD_SendStatus>
 8003d2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	0a5b      	lsrs	r3, r3, #9
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d4a:	693b      	ldr	r3, [r7, #16]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b094      	sub	sp, #80	@ 0x50
 8003d58:	af04      	add	r7, sp, #16
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 ffa2 	bl	8004cae <SDIO_GetPowerState>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d70:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d74:	e0b8      	b.n	8003ee8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d02f      	beq.n	8003dde <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f989 	bl	800509a <SDMMC_CmdSendCID>
 8003d88:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <SD_InitCard+0x40>
    {
      return errorstate;
 8003d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d92:	e0a9      	b.n	8003ee8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 ffcc 	bl	8004d38 <SDIO_GetResponse>
 8003da0:	4602      	mov	r2, r0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2104      	movs	r1, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 ffc3 	bl	8004d38 <SDIO_GetResponse>
 8003db2:	4602      	mov	r2, r0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 ffba 	bl	8004d38 <SDIO_GetResponse>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	210c      	movs	r1, #12
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 ffb1 	bl	8004d38 <SDIO_GetResponse>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d00d      	beq.n	8003e02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f107 020e 	add.w	r2, r7, #14
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 f98f 	bl	8005114 <SDMMC_CmdSetRelAdd>
 8003df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <SD_InitCard+0xae>
    {
      return errorstate;
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e00:	e072      	b.n	8003ee8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d036      	beq.n	8003e78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e0a:	89fb      	ldrh	r3, [r7, #14]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f001 f959 	bl	80050d6 <SDMMC_CmdSendCSD>
 8003e24:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	e05b      	b.n	8003ee8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 ff7e 	bl	8004d38 <SDIO_GetResponse>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2104      	movs	r1, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff75 	bl	8004d38 <SDIO_GetResponse>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2108      	movs	r1, #8
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff6c 	bl	8004d38 <SDIO_GetResponse>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	210c      	movs	r1, #12
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 ff63 	bl	8004d38 <SDIO_GetResponse>
 8003e72:	4602      	mov	r2, r0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 ff5a 	bl	8004d38 <SDIO_GetResponse>
 8003e84:	4603      	mov	r3, r0
 8003e86:	0d1a      	lsrs	r2, r3, #20
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e8c:	f107 0310 	add.w	r3, r7, #16
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fd6e 	bl	8003974 <HAL_SD_GetCardCSD>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003ea2:	e021      	b.n	8003ee8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	2200      	movs	r2, #0
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	4615      	mov	r5, r2
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	4608      	mov	r0, r1
 8003eba:	f001 f849 	bl	8004f50 <SDMMC_CmdSelDesel>
 8003ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <SD_InitCard+0x176>
  {
    return errorstate;
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec8:	e00e      	b.n	8003ee8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681d      	ldr	r5, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	466c      	mov	r4, sp
 8003ed2:	f103 0210 	add.w	r2, r3, #16
 8003ed6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003edc:	3304      	adds	r3, #4
 8003ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 fe8d 	bl	8004c00 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3740      	adds	r7, #64	@ 0x40
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bdb0      	pop	{r4, r5, r7, pc}

08003ef0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 f844 	bl	8004f96 <SDMMC_CmdGoIdleState>
 8003f0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	e072      	b.n	8004000 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f857 	bl	8004fd2 <SDMMC_CmdOperCond>
 8003f24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f82d 	bl	8004f96 <SDMMC_CmdGoIdleState>
 8003f3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	e05b      	b.n	8004000 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d137      	bne.n	8003fc6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 f857 	bl	8005010 <SDMMC_CmdAppCommand>
 8003f62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02d      	beq.n	8003fc6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003f6e:	e047      	b.n	8004000 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 f84a 	bl	8005010 <SDMMC_CmdAppCommand>
 8003f7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	e03b      	b.n	8004000 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	491e      	ldr	r1, [pc, #120]	@ (8004008 <SD_PowerON+0x118>)
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f860 	bl	8005054 <SDMMC_CmdAppOperCommand>
 8003f94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003fa0:	e02e      	b.n	8004000 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fec5 	bl	8004d38 <SDIO_GetResponse>
 8003fae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	0fdb      	lsrs	r3, r3, #31
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <SD_PowerON+0xcc>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <SD_PowerON+0xce>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]

    count++;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d802      	bhi.n	8003fd6 <SD_PowerON+0xe6>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0cc      	beq.n	8003f70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d902      	bls.n	8003fe6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe4:	e00c      	b.n	8004000 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ff6:	e002      	b.n	8003ffe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	c1100000 	.word	0xc1100000

0800400c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800401c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004020:	e018      	b.n	8004054 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f001 f891 	bl	8005156 <SDMMC_CmdSendStatus>
 8004034:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <SD_SendStatus+0x34>
  {
    return errorstate;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	e009      	b.n	8004054 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe76 	bl	8004d38 <SDIO_GetResponse>
 800404c:	4602      	mov	r2, r0
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07b      	b.n	8004166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d108      	bne.n	8004088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407e:	d009      	beq.n	8004094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	61da      	str	r2, [r3, #28]
 8004086:	e005      	b.n	8004094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd ffe2 	bl	8002078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004118:	ea42 0103 	orr.w	r1, r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	f003 0104 	and.w	r1, r3, #4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	f003 0210 	and.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417e:	f7fe f8cb 	bl	8002318 <HAL_GetTick>
 8004182:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d001      	beq.n	8004198 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
 8004196:	e12a      	b.n	80043ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x36>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e122      	b.n	80043ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_SPI_Transmit+0x48>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e11b      	b.n	80043ee <HAL_SPI_Transmit+0x280>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2203      	movs	r2, #3
 80041c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004204:	d10f      	bne.n	8004226 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d007      	beq.n	8004244 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800424c:	d152      	bne.n	80042f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_Transmit+0xee>
 8004256:	8b7b      	ldrh	r3, [r7, #26]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d145      	bne.n	80042e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004260:	881a      	ldrh	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004280:	e032      	b.n	80042e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	d112      	bne.n	80042b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042b4:	e018      	b.n	80042e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b6:	f7fe f82f 	bl	8002318 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d803      	bhi.n	80042ce <HAL_SPI_Transmit+0x160>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d102      	bne.n	80042d4 <HAL_SPI_Transmit+0x166>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e082      	b.n	80043ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1c7      	bne.n	8004282 <HAL_SPI_Transmit+0x114>
 80042f2:	e053      	b.n	800439c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Transmit+0x194>
 80042fc:	8b7b      	ldrh	r3, [r7, #26]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d147      	bne.n	8004392 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	7812      	ldrb	r2, [r2, #0]
 800430e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004328:	e033      	b.n	8004392 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d113      	bne.n	8004360 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800435e:	e018      	b.n	8004392 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004360:	f7fd ffda 	bl	8002318 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d803      	bhi.n	8004378 <HAL_SPI_Transmit+0x20a>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d102      	bne.n	800437e <HAL_SPI_Transmit+0x210>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e02d      	b.n	80043ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1c6      	bne.n	800432a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fbd9 	bl	8004b58 <SPI_EndRxTxTransaction>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b088      	sub	sp, #32
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
 8004414:	e104      	b.n	8004620 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800441e:	d112      	bne.n	8004446 <HAL_SPI_Receive+0x50>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10e      	bne.n	8004446 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2204      	movs	r2, #4
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f8f3 	bl	8004628 <HAL_SPI_TransmitReceive>
 8004442:	4603      	mov	r3, r0
 8004444:	e0ec      	b.n	8004620 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004446:	f7fd ff67 	bl	8002318 <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Receive+0x62>
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0e1      	b.n	8004620 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_SPI_Receive+0x74>
 8004466:	2302      	movs	r3, #2
 8004468:	e0da      	b.n	8004620 <HAL_SPI_Receive+0x22a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2204      	movs	r2, #4
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b8:	d10f      	bne.n	80044da <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b40      	cmp	r3, #64	@ 0x40
 80044e6:	d007      	beq.n	80044f8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d170      	bne.n	80045e2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004500:	e035      	b.n	800456e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d115      	bne.n	800453c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f103 020c 	add.w	r2, r3, #12
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800453a:	e018      	b.n	800456e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453c:	f7fd feec 	bl	8002318 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d803      	bhi.n	8004554 <HAL_SPI_Receive+0x15e>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d102      	bne.n	800455a <HAL_SPI_Receive+0x164>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e058      	b.n	8004620 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1c4      	bne.n	8004502 <HAL_SPI_Receive+0x10c>
 8004578:	e038      	b.n	80045ec <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d113      	bne.n	80045b0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	b292      	uxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045ae:	e018      	b.n	80045e2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b0:	f7fd feb2 	bl	8002318 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d803      	bhi.n	80045c8 <HAL_SPI_Receive+0x1d2>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d102      	bne.n	80045ce <HAL_SPI_Receive+0x1d8>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e01e      	b.n	8004620 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1c6      	bne.n	800457a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fa4b 	bl	8004a8c <SPI_EndRxTransaction>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800461e:	2300      	movs	r3, #0
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	@ 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004636:	2301      	movs	r3, #1
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463a:	f7fd fe6d 	bl	8002318 <HAL_GetTick>
 800463e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004646:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d00c      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x4a>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800465e:	d106      	bne.n	800466e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_SPI_TransmitReceive+0x46>
 8004668:	7ffb      	ldrb	r3, [r7, #31]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d001      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
 8004670:	e17f      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x5c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x5c>
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e174      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x6e>
 8004692:	2302      	movs	r3, #2
 8004694:	e16d      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d003      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2205      	movs	r2, #5
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	887a      	ldrh	r2, [r7, #2]
 80046c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	887a      	ldrh	r2, [r7, #2]
 80046d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	887a      	ldrh	r2, [r7, #2]
 80046da:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b40      	cmp	r3, #64	@ 0x40
 80046f4:	d007      	beq.n	8004706 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800470e:	d17e      	bne.n	800480e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_TransmitReceive+0xf6>
 8004718:	8afb      	ldrh	r3, [r7, #22]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d16c      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004742:	e059      	b.n	80047f8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d11b      	bne.n	800478a <HAL_SPI_TransmitReceive+0x162>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d016      	beq.n	800478a <HAL_SPI_TransmitReceive+0x162>
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	2b01      	cmp	r3, #1
 8004760:	d113      	bne.n	800478a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	1c9a      	adds	r2, r3, #2
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d119      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x1a4>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d014      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	b292      	uxth	r2, r2
 80047ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c8:	2301      	movs	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047cc:	f7fd fda4 	bl	8002318 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d8:	429a      	cmp	r2, r3
 80047da:	d80d      	bhi.n	80047f8 <HAL_SPI_TransmitReceive+0x1d0>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d009      	beq.n	80047f8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0bc      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1a0      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x11c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d19b      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x11c>
 800480c:	e082      	b.n	8004914 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_TransmitReceive+0x1f4>
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d171      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004842:	e05d      	b.n	8004900 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d11c      	bne.n	800488c <HAL_SPI_TransmitReceive+0x264>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d017      	beq.n	800488c <HAL_SPI_TransmitReceive+0x264>
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	2b01      	cmp	r3, #1
 8004860:	d114      	bne.n	800488c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d119      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x2a6>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d014      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ca:	2301      	movs	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048ce:	f7fd fd23 	bl	8002318 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048da:	429a      	cmp	r2, r3
 80048dc:	d803      	bhi.n	80048e6 <HAL_SPI_TransmitReceive+0x2be>
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d102      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x2c4>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e038      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d19c      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x21c>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d197      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f91d 	bl	8004b58 <SPI_EndRxTxTransaction>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01d      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004970:	2300      	movs	r3, #0
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3728      	adds	r7, #40	@ 0x28
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800498c:	f7fd fcc4 	bl	8002318 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	4413      	add	r3, r2
 800499a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800499c:	f7fd fcbc 	bl	8002318 <HAL_GetTick>
 80049a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049a2:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	015b      	lsls	r3, r3, #5
 80049a8:	0d1b      	lsrs	r3, r3, #20
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b2:	e054      	b.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d050      	beq.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049bc:	f7fd fcac 	bl	8002318 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d902      	bls.n	80049d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d13d      	bne.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ea:	d111      	bne.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f4:	d004      	beq.n	8004a00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fe:	d107      	bne.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a18:	d10f      	bne.n	8004a3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e017      	b.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d19b      	bne.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	2000000c 	.word	0x2000000c

08004a8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa0:	d111      	bne.n	8004ac6 <SPI_EndRxTransaction+0x3a>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aaa:	d004      	beq.n	8004ab6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab4:	d107      	bne.n	8004ac6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ace:	d12a      	bne.n	8004b26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad8:	d012      	beq.n	8004b00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	@ 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff49 	bl	800497c <SPI_WaitFlagStateUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02d      	beq.n	8004b4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e026      	b.n	8004b4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2101      	movs	r1, #1
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7ff ff36 	bl	800497c <SPI_WaitFlagStateUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e013      	b.n	8004b4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2101      	movs	r1, #1
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ff23 	bl	800497c <SPI_WaitFlagStateUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e000      	b.n	8004b4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff04 	bl	800497c <SPI_WaitFlagStateUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e032      	b.n	8004bf0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <SPI_EndRxTxTransaction+0xa0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <SPI_EndRxTxTransaction+0xa4>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	0d5b      	lsrs	r3, r3, #21
 8004b96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ba8:	d112      	bne.n	8004bd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2180      	movs	r1, #128	@ 0x80
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fee1 	bl	800497c <SPI_WaitFlagStateUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e00f      	b.n	8004bf0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	2b80      	cmp	r3, #128	@ 0x80
 8004be8:	d0f2      	beq.n	8004bd0 <SPI_EndRxTxTransaction+0x78>
 8004bea:	e000      	b.n	8004bee <SPI_EndRxTxTransaction+0x96>
        break;
 8004bec:	bf00      	nop
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	165e9f81 	.word	0x165e9f81

08004c00 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004c00:	b084      	sub	sp, #16
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	f107 001c 	add.w	r0, r7, #28
 8004c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004c16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004c18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004c1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004c1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004c22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004c26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004c2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004c3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	b004      	add	sp, #16
 8004c54:	4770      	bx	lr

08004c56 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0303 	and.w	r3, r3, #3
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ce8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004cee:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004cf4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d04:	f023 030f 	bic.w	r3, r3, #15
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	b2db      	uxtb	r3, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3314      	adds	r3, #20
 8004d46:	461a      	mov	r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
}  
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d84:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d8a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0

}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b088      	sub	sp, #32
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dc8:	2340      	movs	r3, #64	@ 0x40
 8004dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dd6:	f107 0308 	add.w	r3, r7, #8
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff74 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	2110      	movs	r1, #16
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9d7 	bl	800519c <SDMMC_GetCmdResp1>
 8004dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df0:	69fb      	ldr	r3, [r7, #28]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b088      	sub	sp, #32
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004e08:	2311      	movs	r3, #17
 8004e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e0c:	2340      	movs	r3, #64	@ 0x40
 8004e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff52 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2a:	2111      	movs	r1, #17
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9b5 	bl	800519c <SDMMC_GetCmdResp1>
 8004e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e34:	69fb      	ldr	r3, [r7, #28]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b088      	sub	sp, #32
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004e4c:	2312      	movs	r3, #18
 8004e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e50:	2340      	movs	r3, #64	@ 0x40
 8004e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff30 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	2112      	movs	r1, #18
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f993 	bl	800519c <SDMMC_GetCmdResp1>
 8004e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e78:	69fb      	ldr	r3, [r7, #28]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e90:	2318      	movs	r3, #24
 8004e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e94:	2340      	movs	r3, #64	@ 0x40
 8004e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ea2:	f107 0308 	add.w	r3, r7, #8
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff0e 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb2:	2118      	movs	r1, #24
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f971 	bl	800519c <SDMMC_GetCmdResp1>
 8004eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b088      	sub	sp, #32
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ed4:	2319      	movs	r3, #25
 8004ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ed8:	2340      	movs	r3, #64	@ 0x40
 8004eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ee4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff feec 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	2119      	movs	r1, #25
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f94f 	bl	800519c <SDMMC_GetCmdResp1>
 8004efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f00:	69fb      	ldr	r3, [r7, #28]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004f18:	230c      	movs	r3, #12
 8004f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f1c:	2340      	movs	r3, #64	@ 0x40
 8004f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff feca 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004f36:	4a05      	ldr	r2, [pc, #20]	@ (8004f4c <SDMMC_CmdStopTransfer+0x40>)
 8004f38:	210c      	movs	r1, #12
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f92e 	bl	800519c <SDMMC_GetCmdResp1>
 8004f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	05f5e100 	.word	0x05f5e100

08004f50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	@ 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004f60:	2307      	movs	r3, #7
 8004f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f64:	2340      	movs	r3, #64	@ 0x40
 8004f66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f70:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f72:	f107 0310 	add.w	r3, r7, #16
 8004f76:	4619      	mov	r1, r3
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff fea6 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f82:	2107      	movs	r1, #7
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f909 	bl	800519c <SDMMC_GetCmdResp1>
 8004f8a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	@ 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b088      	sub	sp, #32
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fe85 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb23 	bl	800560c <SDMMC_GetCmdError>
 8004fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b088      	sub	sp, #32
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004fda:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fe4:	2340      	movs	r3, #64	@ 0x40
 8004fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fe66 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fab6 	bl	8005570 <SDMMC_GetCmdResp7>
 8005004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005006:	69fb      	ldr	r3, [r7, #28]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800501e:	2337      	movs	r3, #55	@ 0x37
 8005020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005022:	2340      	movs	r3, #64	@ 0x40
 8005024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800502a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800502e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fe47 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800503c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005040:	2137      	movs	r1, #55	@ 0x37
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8aa 	bl	800519c <SDMMC_GetCmdResp1>
 8005048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005064:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800506a:	2329      	movs	r3, #41	@ 0x29
 800506c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800506e:	2340      	movs	r3, #64	@ 0x40
 8005070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800507a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800507c:	f107 0308 	add.w	r3, r7, #8
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fe21 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9bd 	bl	8005408 <SDMMC_GetCmdResp3>
 800508e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005090:	69fb      	ldr	r3, [r7, #28]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b088      	sub	sp, #32
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80050a6:	2302      	movs	r3, #2
 80050a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80050aa:	23c0      	movs	r3, #192	@ 0xc0
 80050ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b8:	f107 0308 	add.w	r3, r7, #8
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fe03 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f957 	bl	8005378 <SDMMC_GetCmdResp2>
 80050ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050cc:	69fb      	ldr	r3, [r7, #28]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b088      	sub	sp, #32
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80050e4:	2309      	movs	r3, #9
 80050e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80050e8:	23c0      	movs	r3, #192	@ 0xc0
 80050ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fde4 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f938 	bl	8005378 <SDMMC_GetCmdResp2>
 8005108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800510a:	69fb      	ldr	r3, [r7, #28]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005122:	2303      	movs	r3, #3
 8005124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005126:	2340      	movs	r3, #64	@ 0x40
 8005128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800512e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005132:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fdc5 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	2103      	movs	r1, #3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f99d 	bl	8005484 <SDMMC_GetCmdResp6>
 800514a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800514c:	69fb      	ldr	r3, [r7, #28]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b088      	sub	sp, #32
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005164:	230d      	movs	r3, #13
 8005166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005168:	2340      	movs	r3, #64	@ 0x40
 800516a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fda4 	bl	8004cca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005186:	210d      	movs	r1, #13
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f807 	bl	800519c <SDMMC_GetCmdResp1>
 800518e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005190:	69fb      	ldr	r3, [r7, #28]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	460b      	mov	r3, r1
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80051aa:	4b70      	ldr	r3, [pc, #448]	@ (800536c <SDMMC_GetCmdResp1+0x1d0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a70      	ldr	r2, [pc, #448]	@ (8005370 <SDMMC_GetCmdResp1+0x1d4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	0a5a      	lsrs	r2, r3, #9
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	1e5a      	subs	r2, r3, #1
 80051c2:	61fa      	str	r2, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80051cc:	e0c9      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ef      	beq.n	80051be <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ea      	bne.n	80051be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2204      	movs	r2, #4
 80051f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051fa:	2304      	movs	r3, #4
 80051fc:	e0b1      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005210:	2301      	movs	r3, #1
 8005212:	e0a6      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	22c5      	movs	r2, #197	@ 0xc5
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fd7f 	bl	8004d1e <SDIO_GetCommandResponse>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	4293      	cmp	r3, r2
 8005228:	d001      	beq.n	800522e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800522a:	2301      	movs	r3, #1
 800522c:	e099      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800522e:	2100      	movs	r1, #0
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fd81 	bl	8004d38 <SDIO_GetResponse>
 8005236:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4b4e      	ldr	r3, [pc, #312]	@ (8005374 <SDMMC_GetCmdResp1+0x1d8>)
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005242:	2300      	movs	r3, #0
 8005244:	e08d      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	da02      	bge.n	8005252 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800524c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005250:	e087      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800525c:	2340      	movs	r3, #64	@ 0x40
 800525e:	e080      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	e079      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800527c:	e071      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800528c:	e069      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800529c:	e061      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80052a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052ac:	e059      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052bc:	e051      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052cc:	e049      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80052d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052dc:	e041      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80052e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ec:	e039      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80052f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052fc:	e031      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005308:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800530c:	e029      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800531c:	e021      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005328:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800532c:	e019      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005338:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800533c:	e011      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005348:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800534c:	e009      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005358:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800535c:	e001      	b.n	8005362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800535e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2000000c 	.word	0x2000000c
 8005370:	10624dd3 	.word	0x10624dd3
 8005374:	fdffe008 	.word	0xfdffe008

08005378 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005380:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <SDMMC_GetCmdResp2+0x88>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1f      	ldr	r2, [pc, #124]	@ (8005404 <SDMMC_GetCmdResp2+0x8c>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	0a5b      	lsrs	r3, r3, #9
 800538c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005390:	fb02 f303 	mul.w	r3, r2, r3
 8005394:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1e5a      	subs	r2, r3, #1
 800539a:	60fa      	str	r2, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80053a4:	e026      	b.n	80053f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ef      	beq.n	8005396 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ea      	bne.n	8005396 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2204      	movs	r2, #4
 80053d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053d2:	2304      	movs	r3, #4
 80053d4:	e00e      	b.n	80053f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e003      	b.n	80053f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	22c5      	movs	r2, #197	@ 0xc5
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	2000000c 	.word	0x2000000c
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005410:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <SDMMC_GetCmdResp3+0x74>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1a      	ldr	r2, [pc, #104]	@ (8005480 <SDMMC_GetCmdResp3+0x78>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0a5b      	lsrs	r3, r3, #9
 800541c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1e5a      	subs	r2, r3, #1
 800542a:	60fa      	str	r2, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005430:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005434:	e01b      	b.n	800546e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0ef      	beq.n	8005426 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ea      	bne.n	8005426 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005462:	2304      	movs	r3, #4
 8005464:	e003      	b.n	800546e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	22c5      	movs	r2, #197	@ 0xc5
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c
 8005480:	10624dd3 	.word	0x10624dd3

08005484 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	460b      	mov	r3, r1
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005492:	4b35      	ldr	r3, [pc, #212]	@ (8005568 <SDMMC_GetCmdResp6+0xe4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a35      	ldr	r2, [pc, #212]	@ (800556c <SDMMC_GetCmdResp6+0xe8>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	0a5b      	lsrs	r3, r3, #9
 800549e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	61fa      	str	r2, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054b6:	e052      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ef      	beq.n	80054a8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ea      	bne.n	80054a8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2204      	movs	r2, #4
 80054e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054e4:	2304      	movs	r3, #4
 80054e6:	e03a      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e02f      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fc0d 	bl	8004d1e <SDIO_GetCommandResponse>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	7afb      	ldrb	r3, [r7, #11]
 800550a:	4293      	cmp	r3, r2
 800550c:	d001      	beq.n	8005512 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800550e:	2301      	movs	r3, #1
 8005510:	e025      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22c5      	movs	r2, #197	@ 0xc5
 8005516:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005518:	2100      	movs	r1, #0
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff fc0c 	bl	8004d38 <SDIO_GetResponse>
 8005520:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	0c1b      	lsrs	r3, r3, #16
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	e011      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005548:	e009      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005558:	e001      	b.n	800555e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800555a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	2000000c 	.word	0x2000000c
 800556c:	10624dd3 	.word	0x10624dd3

08005570 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005578:	4b22      	ldr	r3, [pc, #136]	@ (8005604 <SDMMC_GetCmdResp7+0x94>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a22      	ldr	r2, [pc, #136]	@ (8005608 <SDMMC_GetCmdResp7+0x98>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0a5b      	lsrs	r3, r3, #9
 8005584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1e5a      	subs	r2, r3, #1
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005598:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800559c:	e02c      	b.n	80055f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0ef      	beq.n	800558e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ea      	bne.n	800558e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2204      	movs	r2, #4
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055ca:	2304      	movs	r3, #4
 80055cc:	e014      	b.n	80055f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e009      	b.n	80055f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80055f6:	2300      	movs	r3, #0
  
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	2000000c 	.word	0x2000000c
 8005608:	10624dd3 	.word	0x10624dd3

0800560c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005614:	4b11      	ldr	r3, [pc, #68]	@ (800565c <SDMMC_GetCmdError+0x50>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a11      	ldr	r2, [pc, #68]	@ (8005660 <SDMMC_GetCmdError+0x54>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	0a5b      	lsrs	r3, r3, #9
 8005620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005624:	fb02 f303 	mul.w	r3, r2, r3
 8005628:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1e5a      	subs	r2, r3, #1
 800562e:	60fa      	str	r2, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005634:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005638:	e009      	b.n	800564e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f1      	beq.n	800562a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	22c5      	movs	r2, #197	@ 0xc5
 800564a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c
 8005660:	10624dd3 	.word	0x10624dd3

08005664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005668:	4904      	ldr	r1, [pc, #16]	@ (800567c <MX_FATFS_Init+0x18>)
 800566a:	4805      	ldr	r0, [pc, #20]	@ (8005680 <MX_FATFS_Init+0x1c>)
 800566c:	f002 ff02 	bl	8008474 <FATFS_LinkDriver>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <MX_FATFS_Init+0x20>)
 8005676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000660 	.word	0x20000660
 8005680:	08008ec0 	.word	0x08008ec0
 8005684:	2000065c 	.word	0x2000065c

08005688 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800568c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80056a2:	f000 f86b 	bl	800577c <BSP_SD_IsDetected>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d001      	beq.n	80056b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e005      	b.n	80056bc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80056b0:	4804      	ldr	r0, [pc, #16]	@ (80056c4 <BSP_SD_Init+0x2c>)
 80056b2:	f7fd fd3b 	bl	800312c <HAL_SD_Init>
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80056ba:	79fb      	ldrb	r3, [r7, #7]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000090 	.word	0x20000090

080056c8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	4806      	ldr	r0, [pc, #24]	@ (8005700 <BSP_SD_ReadBlocks+0x38>)
 80056e6:	f7fd fdd1 	bl	800328c <HAL_SD_ReadBlocks>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000090 	.word	0x20000090

08005704 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	4806      	ldr	r0, [pc, #24]	@ (800573c <BSP_SD_WriteBlocks+0x38>)
 8005722:	f7fd ff99 	bl	8003658 <HAL_SD_WriteBlocks>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000090 	.word	0x20000090

08005740 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005744:	4805      	ldr	r0, [pc, #20]	@ (800575c <BSP_SD_GetCardState+0x1c>)
 8005746:	f7fe fae5 	bl	8003d14 <HAL_SD_GetCardState>
 800574a:	4603      	mov	r3, r0
 800574c:	2b04      	cmp	r3, #4
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
}
 8005756:	4618      	mov	r0, r3
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000090 	.word	0x20000090

08005760 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4803      	ldr	r0, [pc, #12]	@ (8005778 <BSP_SD_GetCardInfo+0x18>)
 800576c:	f7fe faa6 	bl	8003cbc <HAL_SD_GetCardInfo>
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000090 	.word	0x20000090

0800577c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005782:	2301      	movs	r3, #1
 8005784:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005786:	f000 f80b 	bl	80057a0 <BSP_PlatformIsDetected>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005790:	2300      	movs	r3, #0
 8005792:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	b2db      	uxtb	r3, r3
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80057a6:	2301      	movs	r3, #1
 80057a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80057aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057ae:	4806      	ldr	r0, [pc, #24]	@ (80057c8 <BSP_PlatformIsDetected+0x28>)
 80057b0:	f7fd f84c 	bl	800284c <HAL_GPIO_ReadPin>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80057ba:	2300      	movs	r3, #0
 80057bc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80057be:	79fb      	ldrb	r3, [r7, #7]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40020400 	.word	0x40020400

080057cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <SD_CheckStatus+0x38>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80057dc:	f7ff ffb0 	bl	8005740 <BSP_SD_GetCardState>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d107      	bne.n	80057f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80057e6:	4b07      	ldr	r3, [pc, #28]	@ (8005804 <SD_CheckStatus+0x38>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <SD_CheckStatus+0x38>)
 80057f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80057f6:	4b03      	ldr	r3, [pc, #12]	@ (8005804 <SD_CheckStatus+0x38>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000015 	.word	0x20000015

08005808 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005812:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <SD_initialize+0x38>)
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005818:	f7ff ff3e 	bl	8005698 <BSP_SD_Init>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ffd1 	bl	80057cc <SD_CheckStatus>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <SD_initialize+0x38>)
 8005830:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005832:	4b03      	ldr	r3, [pc, #12]	@ (8005840 <SD_initialize+0x38>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b2db      	uxtb	r3, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20000015 	.word	0x20000015

08005844 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ffbb 	bl	80057cc <SD_CheckStatus>
 8005856:	4603      	mov	r3, r0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	68b8      	ldr	r0, [r7, #8]
 800587e:	f7ff ff23 	bl	80056c8 <BSP_SD_ReadBlocks>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005888:	bf00      	nop
 800588a:	f7ff ff59 	bl	8005740 <BSP_SD_GetCardState>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1fa      	bne.n	800588a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b086      	sub	sp, #24
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	68b8      	ldr	r0, [r7, #8]
 80058c0:	f7ff ff20 	bl	8005704 <BSP_SD_WriteBlocks>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d107      	bne.n	80058da <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80058ca:	bf00      	nop
 80058cc:	f7ff ff38 	bl	8005740 <BSP_SD_GetCardState>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1fa      	bne.n	80058cc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	@ 0x30
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	603a      	str	r2, [r7, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]
 80058f0:	460b      	mov	r3, r1
 80058f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80058fa:	4b25      	ldr	r3, [pc, #148]	@ (8005990 <SD_ioctl+0xac>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <SD_ioctl+0x28>
 8005908:	2303      	movs	r3, #3
 800590a:	e03c      	b.n	8005986 <SD_ioctl+0xa2>

  switch (cmd)
 800590c:	79bb      	ldrb	r3, [r7, #6]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d834      	bhi.n	800597c <SD_ioctl+0x98>
 8005912:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <SD_ioctl+0x34>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005929 	.word	0x08005929
 800591c:	08005931 	.word	0x08005931
 8005920:	08005949 	.word	0x08005949
 8005924:	08005963 	.word	0x08005963
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800592e:	e028      	b.n	8005982 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005930:	f107 030c 	add.w	r3, r7, #12
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff ff13 	bl	8005760 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800593a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005946:	e01c      	b.n	8005982 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff07 	bl	8005760 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	b29a      	uxth	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005960:	e00f      	b.n	8005982 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005962:	f107 030c 	add.w	r3, r7, #12
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fefa 	bl	8005760 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	0a5a      	lsrs	r2, r3, #9
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800597a:	e002      	b.n	8005982 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800597c:	2304      	movs	r3, #4
 800597e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005986:	4618      	mov	r0, r3
 8005988:	3730      	adds	r7, #48	@ 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000015 	.word	0x20000015

08005994 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	4a08      	ldr	r2, [pc, #32]	@ (80059c4 <disk_status+0x30>)
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	79fa      	ldrb	r2, [r7, #7]
 80059ac:	4905      	ldr	r1, [pc, #20]	@ (80059c4 <disk_status+0x30>)
 80059ae:	440a      	add	r2, r1
 80059b0:	7a12      	ldrb	r2, [r2, #8]
 80059b2:	4610      	mov	r0, r2
 80059b4:	4798      	blx	r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	2000068c 	.word	0x2000068c

080059c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005a14 <disk_initialize+0x4c>)
 80059da:	5cd3      	ldrb	r3, [r2, r3]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d114      	bne.n	8005a0a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005a14 <disk_initialize+0x4c>)
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	79fa      	ldrb	r2, [r7, #7]
 80059ee:	4909      	ldr	r1, [pc, #36]	@ (8005a14 <disk_initialize+0x4c>)
 80059f0:	440a      	add	r2, r1
 80059f2:	7a12      	ldrb	r2, [r2, #8]
 80059f4:	4610      	mov	r0, r2
 80059f6:	4798      	blx	r3
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	4a03      	ldr	r2, [pc, #12]	@ (8005a14 <disk_initialize+0x4c>)
 8005a06:	2101      	movs	r1, #1
 8005a08:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	2000068c 	.word	0x2000068c

08005a18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a54 <disk_read+0x3c>)
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	689c      	ldr	r4, [r3, #8]
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	4a07      	ldr	r2, [pc, #28]	@ (8005a54 <disk_read+0x3c>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	7a18      	ldrb	r0, [r3, #8]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	47a0      	blx	r4
 8005a44:	4603      	mov	r3, r0
 8005a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}
 8005a52:	bf00      	nop
 8005a54:	2000068c 	.word	0x2000068c

08005a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a94 <disk_write+0x3c>)
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68dc      	ldr	r4, [r3, #12]
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	4a07      	ldr	r2, [pc, #28]	@ (8005a94 <disk_write+0x3c>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	7a18      	ldrb	r0, [r3, #8]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	47a0      	blx	r4
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd90      	pop	{r4, r7, pc}
 8005a92:	bf00      	nop
 8005a94:	2000068c 	.word	0x2000068c

08005a98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	603a      	str	r2, [r7, #0]
 8005aa2:	71fb      	strb	r3, [r7, #7]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	4a09      	ldr	r2, [pc, #36]	@ (8005ad0 <disk_ioctl+0x38>)
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	79fa      	ldrb	r2, [r7, #7]
 8005ab6:	4906      	ldr	r1, [pc, #24]	@ (8005ad0 <disk_ioctl+0x38>)
 8005ab8:	440a      	add	r2, r1
 8005aba:	7a10      	ldrb	r0, [r2, #8]
 8005abc:	79b9      	ldrb	r1, [r7, #6]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	4798      	blx	r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  return res;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	2000068c 	.word	0x2000068c

08005ad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	b21a      	sxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b21b      	sxth	r3, r3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	b21b      	sxth	r3, r3
 8005af4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005af6:	89fb      	ldrh	r3, [r7, #14]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3303      	adds	r3, #3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	3202      	adds	r2, #2
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	3201      	adds	r2, #1
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	887a      	ldrh	r2, [r7, #2]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	887b      	ldrh	r3, [r7, #2]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00d      	beq.n	8005c0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	1c53      	adds	r3, r2, #1
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	6179      	str	r1, [r7, #20]
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f1      	bne.n	8005bf2 <mem_cpy+0x1a>
	}
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	617a      	str	r2, [r7, #20]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f3      	bne.n	8005c2a <mem_set+0x10>
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	@ 0x24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	61fa      	str	r2, [r7, #28]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	4619      	mov	r1, r3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	61ba      	str	r2, [r7, #24]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	1acb      	subs	r3, r1, r3
 8005c7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <mem_cmp+0x40>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0eb      	beq.n	8005c68 <mem_cmp+0x18>

	return r;
 8005c90:	697b      	ldr	r3, [r7, #20]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3724      	adds	r7, #36	@ 0x24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ca8:	e002      	b.n	8005cb0 <chk_chr+0x12>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3301      	adds	r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <chk_chr+0x26>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d1f2      	bne.n	8005caa <chk_chr+0xc>
	return *str;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e029      	b.n	8005d3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ce8:	4a27      	ldr	r2, [pc, #156]	@ (8005d88 <chk_lock+0xb4>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	4413      	add	r3, r2
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01d      	beq.n	8005d32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005cf6:	4a24      	ldr	r2, [pc, #144]	@ (8005d88 <chk_lock+0xb4>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d116      	bne.n	8005d36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005d08:	4a1f      	ldr	r2, [pc, #124]	@ (8005d88 <chk_lock+0xb4>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d10c      	bne.n	8005d36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d88 <chk_lock+0xb4>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	3308      	adds	r3, #8
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d102      	bne.n	8005d36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d30:	e007      	b.n	8005d42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d9d2      	bls.n	8005ce8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d109      	bne.n	8005d5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <chk_lock+0x80>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d101      	bne.n	8005d58 <chk_lock+0x84>
 8005d54:	2300      	movs	r3, #0
 8005d56:	e010      	b.n	8005d7a <chk_lock+0xa6>
 8005d58:	2312      	movs	r3, #18
 8005d5a:	e00e      	b.n	8005d7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <chk_lock+0xa0>
 8005d62:	4a09      	ldr	r2, [pc, #36]	@ (8005d88 <chk_lock+0xb4>)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	4413      	add	r3, r2
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d72:	d101      	bne.n	8005d78 <chk_lock+0xa4>
 8005d74:	2310      	movs	r3, #16
 8005d76:	e000      	b.n	8005d7a <chk_lock+0xa6>
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	2000066c 	.word	0x2000066c

08005d8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	e002      	b.n	8005d9e <enq_lock+0x12>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d806      	bhi.n	8005db2 <enq_lock+0x26>
 8005da4:	4a09      	ldr	r2, [pc, #36]	@ (8005dcc <enq_lock+0x40>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	4413      	add	r3, r2
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f2      	bne.n	8005d98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	2000066c 	.word	0x2000066c

08005dd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e01f      	b.n	8005e20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005de0:	4a41      	ldr	r2, [pc, #260]	@ (8005ee8 <inc_lock+0x118>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	4413      	add	r3, r2
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d113      	bne.n	8005e1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005df2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee8 <inc_lock+0x118>)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	4413      	add	r3, r2
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d109      	bne.n	8005e1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005e06:	4a38      	ldr	r2, [pc, #224]	@ (8005ee8 <inc_lock+0x118>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3308      	adds	r3, #8
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d006      	beq.n	8005e28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d9dc      	bls.n	8005de0 <inc_lock+0x10>
 8005e26:	e000      	b.n	8005e2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005e28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d132      	bne.n	8005e96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e002      	b.n	8005e3c <inc_lock+0x6c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d806      	bhi.n	8005e50 <inc_lock+0x80>
 8005e42:	4a29      	ldr	r2, [pc, #164]	@ (8005ee8 <inc_lock+0x118>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	4413      	add	r3, r2
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f2      	bne.n	8005e36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d101      	bne.n	8005e5a <inc_lock+0x8a>
 8005e56:	2300      	movs	r3, #0
 8005e58:	e040      	b.n	8005edc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4922      	ldr	r1, [pc, #136]	@ (8005ee8 <inc_lock+0x118>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	440b      	add	r3, r1
 8005e66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	491e      	ldr	r1, [pc, #120]	@ (8005ee8 <inc_lock+0x118>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	440b      	add	r3, r1
 8005e74:	3304      	adds	r3, #4
 8005e76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	491a      	ldr	r1, [pc, #104]	@ (8005ee8 <inc_lock+0x118>)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	440b      	add	r3, r1
 8005e84:	3308      	adds	r3, #8
 8005e86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005e88:	4a17      	ldr	r2, [pc, #92]	@ (8005ee8 <inc_lock+0x118>)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	4413      	add	r3, r2
 8005e90:	330c      	adds	r3, #12
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <inc_lock+0xe0>
 8005e9c:	4a12      	ldr	r2, [pc, #72]	@ (8005ee8 <inc_lock+0x118>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	4413      	add	r3, r2
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <inc_lock+0xe0>
 8005eac:	2300      	movs	r3, #0
 8005eae:	e015      	b.n	8005edc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <inc_lock+0xf8>
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee8 <inc_lock+0x118>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	4413      	add	r3, r2
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	e001      	b.n	8005ecc <inc_lock+0xfc>
 8005ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ecc:	4906      	ldr	r1, [pc, #24]	@ (8005ee8 <inc_lock+0x118>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	440b      	add	r3, r1
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	2000066c 	.word	0x2000066c

08005eec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	607b      	str	r3, [r7, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d825      	bhi.n	8005f4c <dec_lock+0x60>
		n = Files[i].ctr;
 8005f00:	4a17      	ldr	r2, [pc, #92]	@ (8005f60 <dec_lock+0x74>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	4413      	add	r3, r2
 8005f08:	330c      	adds	r3, #12
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005f0e:	89fb      	ldrh	r3, [r7, #14]
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f14:	d101      	bne.n	8005f1a <dec_lock+0x2e>
 8005f16:	2300      	movs	r3, #0
 8005f18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005f1a:	89fb      	ldrh	r3, [r7, #14]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <dec_lock+0x3a>
 8005f20:	89fb      	ldrh	r3, [r7, #14]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005f26:	4a0e      	ldr	r2, [pc, #56]	@ (8005f60 <dec_lock+0x74>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	330c      	adds	r3, #12
 8005f30:	89fa      	ldrh	r2, [r7, #14]
 8005f32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <dec_lock+0x5a>
 8005f3a:	4a09      	ldr	r2, [pc, #36]	@ (8005f60 <dec_lock+0x74>)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4413      	add	r3, r2
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	737b      	strb	r3, [r7, #13]
 8005f4a:	e001      	b.n	8005f50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005f50:	7b7b      	ldrb	r3, [r7, #13]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	2000066c 	.word	0x2000066c

08005f64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e010      	b.n	8005f94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005f72:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa8 <clear_lock+0x44>)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	4413      	add	r3, r2
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d105      	bne.n	8005f8e <clear_lock+0x2a>
 8005f82:	4a09      	ldr	r2, [pc, #36]	@ (8005fa8 <clear_lock+0x44>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d9eb      	bls.n	8005f72 <clear_lock+0xe>
	}
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	2000066c 	.word	0x2000066c

08005fac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d034      	beq.n	800602a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7858      	ldrb	r0, [r3, #1]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	f7ff fd40 	bl	8005a58 <disk_write>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
 8005fe2:	e022      	b.n	800602a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d217      	bcs.n	800602a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	789b      	ldrb	r3, [r3, #2]
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	e010      	b.n	8006024 <sync_window+0x78>
					wsect += fs->fsize;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7858      	ldrb	r0, [r3, #1]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006016:	2301      	movs	r3, #1
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	f7ff fd1d 	bl	8005a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3b01      	subs	r3, #1
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d8eb      	bhi.n	8006002 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d01b      	beq.n	8006084 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff ffad 	bl	8005fac <sync_window>
 8006052:	4603      	mov	r3, r0
 8006054:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d113      	bne.n	8006084 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7858      	ldrb	r0, [r3, #1]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006066:	2301      	movs	r3, #1
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	f7ff fcd5 	bl	8005a18 <disk_read>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006074:	f04f 33ff 	mov.w	r3, #4294967295
 8006078:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff87 	bl	8005fac <sync_window>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d158      	bne.n	800615a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d148      	bne.n	8006142 <sync_fs+0xb2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	791b      	ldrb	r3, [r3, #4]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d144      	bne.n	8006142 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3330      	adds	r3, #48	@ 0x30
 80060bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fda9 	bl	8005c1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3330      	adds	r3, #48	@ 0x30
 80060cc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80060d0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fd38 	bl	8005b4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3330      	adds	r3, #48	@ 0x30
 80060de:	4921      	ldr	r1, [pc, #132]	@ (8006164 <sync_fs+0xd4>)
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fd4d 	bl	8005b80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3330      	adds	r3, #48	@ 0x30
 80060ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80060ee:	491e      	ldr	r1, [pc, #120]	@ (8006168 <sync_fs+0xd8>)
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fd45 	bl	8005b80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3330      	adds	r3, #48	@ 0x30
 80060fa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7ff fd3b 	bl	8005b80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3330      	adds	r3, #48	@ 0x30
 800610e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7ff fd31 	bl	8005b80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7858      	ldrb	r0, [r3, #1]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006136:	2301      	movs	r3, #1
 8006138:	f7ff fc8e 	bl	8005a58 <disk_write>
			fs->fsi_flag = 0;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fca4 	bl	8005a98 <disk_ioctl>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <sync_fs+0xca>
 8006156:	2301      	movs	r3, #1
 8006158:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	41615252 	.word	0x41615252
 8006168:	61417272 	.word	0x61417272

0800616c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	3b02      	subs	r3, #2
 800617a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	3b02      	subs	r3, #2
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d301      	bcc.n	800618c <clust2sect+0x20>
 8006188:	2300      	movs	r3, #0
 800618a:	e008      	b.n	800619e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	895b      	ldrh	r3, [r3, #10]
 8006190:	461a      	mov	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	fb03 f202 	mul.w	r2, r3, r2
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619c:	4413      	add	r3, r2
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d904      	bls.n	80061ca <get_fat+0x20>
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80061ca:	2301      	movs	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e08e      	b.n	80062ee <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d061      	beq.n	80062a2 <get_fat+0xf8>
 80061de:	2b03      	cmp	r3, #3
 80061e0:	dc7b      	bgt.n	80062da <get_fat+0x130>
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d002      	beq.n	80061ec <get_fat+0x42>
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d041      	beq.n	800626e <get_fat+0xc4>
 80061ea:	e076      	b.n	80062da <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	0a5b      	lsrs	r3, r3, #9
 8006202:	4413      	add	r3, r2
 8006204:	4619      	mov	r1, r3
 8006206:	6938      	ldr	r0, [r7, #16]
 8006208:	f7ff ff14 	bl	8006034 <move_window>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d166      	bne.n	80062e0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	60fa      	str	r2, [r7, #12]
 8006218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006224:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	0a5b      	lsrs	r3, r3, #9
 800622e:	4413      	add	r3, r2
 8006230:	4619      	mov	r1, r3
 8006232:	6938      	ldr	r0, [r7, #16]
 8006234:	f7ff fefe 	bl	8006034 <move_window>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d152      	bne.n	80062e4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4313      	orrs	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <get_fat+0xba>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	e002      	b.n	800626a <get_fat+0xc0>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626a:	617b      	str	r3, [r7, #20]
			break;
 800626c:	e03f      	b.n	80062ee <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	4413      	add	r3, r2
 8006278:	4619      	mov	r1, r3
 800627a:	6938      	ldr	r0, [r7, #16]
 800627c:	f7ff feda 	bl	8006034 <move_window>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d130      	bne.n	80062e8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006294:	4413      	add	r3, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fc1c 	bl	8005ad4 <ld_word>
 800629c:	4603      	mov	r3, r0
 800629e:	617b      	str	r3, [r7, #20]
			break;
 80062a0:	e025      	b.n	80062ee <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	4413      	add	r3, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	6938      	ldr	r0, [r7, #16]
 80062b0:	f7ff fec0 	bl	8006034 <move_window>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d118      	bne.n	80062ec <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80062c8:	4413      	add	r3, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fc1a 	bl	8005b04 <ld_dword>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062d6:	617b      	str	r3, [r7, #20]
			break;
 80062d8:	e009      	b.n	80062ee <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80062da:	2301      	movs	r3, #1
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e006      	b.n	80062ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062e0:	bf00      	nop
 80062e2:	e004      	b.n	80062ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062e4:	bf00      	nop
 80062e6:	e002      	b.n	80062ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062e8:	bf00      	nop
 80062ea:	e000      	b.n	80062ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062ec:	bf00      	nop
		}
	}

	return val;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b089      	sub	sp, #36	@ 0x24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006304:	2302      	movs	r3, #2
 8006306:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b01      	cmp	r3, #1
 800630c:	f240 80d9 	bls.w	80064c2 <put_fat+0x1ca>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	f080 80d3 	bcs.w	80064c2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b03      	cmp	r3, #3
 8006322:	f000 8096 	beq.w	8006452 <put_fat+0x15a>
 8006326:	2b03      	cmp	r3, #3
 8006328:	f300 80cb 	bgt.w	80064c2 <put_fat+0x1ca>
 800632c:	2b01      	cmp	r3, #1
 800632e:	d002      	beq.n	8006336 <put_fat+0x3e>
 8006330:	2b02      	cmp	r3, #2
 8006332:	d06e      	beq.n	8006412 <put_fat+0x11a>
 8006334:	e0c5      	b.n	80064c2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4413      	add	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	0a5b      	lsrs	r3, r3, #9
 800634c:	4413      	add	r3, r2
 800634e:	4619      	mov	r1, r3
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff fe6f 	bl	8006034 <move_window>
 8006356:	4603      	mov	r3, r0
 8006358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 80a9 	bne.w	80064b4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	61b9      	str	r1, [r7, #24]
 800636e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006372:	4413      	add	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <put_fat+0xa4>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b25b      	sxtb	r3, r3
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	b25a      	sxtb	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	b25b      	sxtb	r3, r3
 8006394:	4313      	orrs	r3, r2
 8006396:	b25b      	sxtb	r3, r3
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e001      	b.n	80063a0 <put_fat+0xa8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	0a5b      	lsrs	r3, r3, #9
 80063b2:	4413      	add	r3, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fe3c 	bl	8006034 <move_window>
 80063bc:	4603      	mov	r3, r0
 80063be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063c0:	7ffb      	ldrb	r3, [r7, #31]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d178      	bne.n	80064b8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d2:	4413      	add	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <put_fat+0xf0>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e00e      	b.n	8006406 <put_fat+0x10e>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b25b      	sxtb	r3, r3
 80063ee:	f023 030f 	bic.w	r3, r3, #15
 80063f2:	b25a      	sxtb	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b25b      	sxtb	r3, r3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	70da      	strb	r2, [r3, #3]
			break;
 8006410:	e057      	b.n	80064c2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	4413      	add	r3, r2
 800641c:	4619      	mov	r1, r3
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fe08 	bl	8006034 <move_window>
 8006424:	4603      	mov	r3, r0
 8006426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006428:	7ffb      	ldrb	r3, [r7, #31]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d146      	bne.n	80064bc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800643c:	4413      	add	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	b292      	uxth	r2, r2
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fb80 	bl	8005b4a <st_word>
			fs->wflag = 1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	70da      	strb	r2, [r3, #3]
			break;
 8006450:	e037      	b.n	80064c2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1a      	ldr	r2, [r3, #32]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	09db      	lsrs	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	4619      	mov	r1, r3
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fde8 	bl	8006034 <move_window>
 8006464:	4603      	mov	r3, r0
 8006466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006468:	7ffb      	ldrb	r3, [r7, #31]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d128      	bne.n	80064c0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006482:	4413      	add	r3, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fb3d 	bl	8005b04 <ld_dword>
 800648a:	4603      	mov	r3, r0
 800648c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006490:	4323      	orrs	r3, r4
 8006492:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80064a2:	4413      	add	r3, r2
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fb6a 	bl	8005b80 <st_dword>
			fs->wflag = 1;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	70da      	strb	r2, [r3, #3]
			break;
 80064b2:	e006      	b.n	80064c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80064b4:	bf00      	nop
 80064b6:	e004      	b.n	80064c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80064b8:	bf00      	nop
 80064ba:	e002      	b.n	80064c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80064c0:	bf00      	nop
		}
	}
	return res;
 80064c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3724      	adds	r7, #36	@ 0x24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d904      	bls.n	80064f2 <remove_chain+0x26>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d301      	bcc.n	80064f6 <remove_chain+0x2a>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e04b      	b.n	800658e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	69b8      	ldr	r0, [r7, #24]
 8006504:	f7ff fef8 	bl	80062f8 <put_fat>
 8006508:	4603      	mov	r3, r0
 800650a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800650c:	7ffb      	ldrb	r3, [r7, #31]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <remove_chain+0x4a>
 8006512:	7ffb      	ldrb	r3, [r7, #31]
 8006514:	e03b      	b.n	800658e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fe46 	bl	80061aa <get_fat>
 800651e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d031      	beq.n	800658a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <remove_chain+0x64>
 800652c:	2302      	movs	r3, #2
 800652e:	e02e      	b.n	800658e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d101      	bne.n	800653c <remove_chain+0x70>
 8006538:	2301      	movs	r3, #1
 800653a:	e028      	b.n	800658e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800653c:	2200      	movs	r2, #0
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	69b8      	ldr	r0, [r7, #24]
 8006542:	f7ff fed9 	bl	80062f8 <put_fat>
 8006546:	4603      	mov	r3, r0
 8006548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800654a:	7ffb      	ldrb	r3, [r7, #31]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <remove_chain+0x88>
 8006550:	7ffb      	ldrb	r3, [r7, #31]
 8006552:	e01c      	b.n	800658e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	3b02      	subs	r3, #2
 800655e:	429a      	cmp	r2, r3
 8006560:	d20b      	bcs.n	800657a <remove_chain+0xae>
			fs->free_clst++;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	791b      	ldrb	r3, [r3, #4]
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	429a      	cmp	r2, r3
 8006586:	d3c6      	bcc.n	8006516 <remove_chain+0x4a>
 8006588:	e000      	b.n	800658c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800658a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b088      	sub	sp, #32
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10d      	bne.n	80065c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <create_chain+0x2c>
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d31b      	bcc.n	80065fa <create_chain+0x64>
 80065c2:	2301      	movs	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	e018      	b.n	80065fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fded 	bl	80061aa <get_fat>
 80065d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d801      	bhi.n	80065dc <create_chain+0x46>
 80065d8:	2301      	movs	r3, #1
 80065da:	e070      	b.n	80066be <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d101      	bne.n	80065e8 <create_chain+0x52>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	e06a      	b.n	80066be <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d201      	bcs.n	80065f6 <create_chain+0x60>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	e063      	b.n	80066be <create_chain+0x128>
		scl = clst;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3301      	adds	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	429a      	cmp	r2, r3
 800660c:	d307      	bcc.n	800661e <create_chain+0x88>
				ncl = 2;
 800660e:	2302      	movs	r3, #2
 8006610:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	429a      	cmp	r2, r3
 8006618:	d901      	bls.n	800661e <create_chain+0x88>
 800661a:	2300      	movs	r3, #0
 800661c:	e04f      	b.n	80066be <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800661e:	69f9      	ldr	r1, [r7, #28]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fdc2 	bl	80061aa <get_fat>
 8006626:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d003      	beq.n	800663c <create_chain+0xa6>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d101      	bne.n	8006640 <create_chain+0xaa>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	e03e      	b.n	80066be <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	429a      	cmp	r2, r3
 8006646:	d1da      	bne.n	80065fe <create_chain+0x68>
 8006648:	2300      	movs	r3, #0
 800664a:	e038      	b.n	80066be <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800664c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800664e:	f04f 32ff 	mov.w	r2, #4294967295
 8006652:	69f9      	ldr	r1, [r7, #28]
 8006654:	6938      	ldr	r0, [r7, #16]
 8006656:	f7ff fe4f 	bl	80062f8 <put_fat>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <create_chain+0xe2>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d006      	beq.n	8006678 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6938      	ldr	r0, [r7, #16]
 8006670:	f7ff fe42 	bl	80062f8 <put_fat>
 8006674:	4603      	mov	r3, r0
 8006676:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d116      	bne.n	80066ac <create_chain+0x116>
		fs->last_clst = ncl;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	3b02      	subs	r3, #2
 800668e:	429a      	cmp	r2, r3
 8006690:	d804      	bhi.n	800669c <create_chain+0x106>
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	1e5a      	subs	r2, r3, #1
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	791b      	ldrb	r3, [r3, #4]
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	711a      	strb	r2, [r3, #4]
 80066aa:	e007      	b.n	80066bc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d102      	bne.n	80066b8 <create_chain+0x122>
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	e000      	b.n	80066ba <create_chain+0x124>
 80066b8:	2301      	movs	r3, #1
 80066ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80066bc:	69fb      	ldr	r3, [r7, #28]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b087      	sub	sp, #28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	3304      	adds	r3, #4
 80066dc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	0a5b      	lsrs	r3, r3, #9
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	8952      	ldrh	r2, [r2, #10]
 80066e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	613a      	str	r2, [r7, #16]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <clmt_clust+0x3a>
 80066fc:	2300      	movs	r3, #0
 80066fe:	e010      	b.n	8006722 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	d307      	bcc.n	8006718 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3304      	adds	r3, #4
 8006714:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006716:	e7e9      	b.n	80066ec <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006718:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	4413      	add	r3, r2
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006744:	d204      	bcs.n	8006750 <dir_sdi+0x22>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006750:	2302      	movs	r3, #2
 8006752:	e063      	b.n	800681c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <dir_sdi+0x46>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d902      	bls.n	8006774 <dir_sdi+0x46>
		clst = fs->dirbase;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	8912      	ldrh	r2, [r2, #8]
 8006782:	4293      	cmp	r3, r2
 8006784:	d301      	bcc.n	800678a <dir_sdi+0x5c>
 8006786:	2302      	movs	r3, #2
 8006788:	e048      	b.n	800681c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	61da      	str	r2, [r3, #28]
 8006792:	e029      	b.n	80067e8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	895b      	ldrh	r3, [r3, #10]
 8006798:	025b      	lsls	r3, r3, #9
 800679a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800679c:	e019      	b.n	80067d2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6979      	ldr	r1, [r7, #20]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fd01 	bl	80061aa <get_fat>
 80067a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d101      	bne.n	80067b6 <dir_sdi+0x88>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e032      	b.n	800681c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d904      	bls.n	80067c6 <dir_sdi+0x98>
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d301      	bcc.n	80067ca <dir_sdi+0x9c>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e028      	b.n	800681c <dir_sdi+0xee>
			ofs -= csz;
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d2e1      	bcs.n	800679e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	6938      	ldr	r0, [r7, #16]
 80067de:	f7ff fcc5 	bl	800616c <clust2sect>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <dir_sdi+0xcc>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e010      	b.n	800681c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69da      	ldr	r2, [r3, #28]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	0a5b      	lsrs	r3, r3, #9
 8006802:	441a      	add	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	441a      	add	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	3320      	adds	r3, #32
 800683a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <dir_next+0x28>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800684a:	d301      	bcc.n	8006850 <dir_next+0x2c>
 800684c:	2304      	movs	r3, #4
 800684e:	e0aa      	b.n	80069a6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	2b00      	cmp	r3, #0
 8006858:	f040 8098 	bne.w	800698c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10b      	bne.n	8006886 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	8912      	ldrh	r2, [r2, #8]
 8006876:	4293      	cmp	r3, r2
 8006878:	f0c0 8088 	bcc.w	800698c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	61da      	str	r2, [r3, #28]
 8006882:	2304      	movs	r3, #4
 8006884:	e08f      	b.n	80069a6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	0a5b      	lsrs	r3, r3, #9
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	8952      	ldrh	r2, [r2, #10]
 800688e:	3a01      	subs	r2, #1
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d17a      	bne.n	800698c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7ff fc83 	bl	80061aa <get_fat>
 80068a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d801      	bhi.n	80068b0 <dir_next+0x8c>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e07a      	b.n	80069a6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d101      	bne.n	80068bc <dir_next+0x98>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e074      	b.n	80069a6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d358      	bcc.n	8006978 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	61da      	str	r2, [r3, #28]
 80068d2:	2304      	movs	r3, #4
 80068d4:	e067      	b.n	80069a6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f7ff fe59 	bl	8006596 <create_chain>
 80068e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <dir_next+0xcc>
 80068ec:	2307      	movs	r3, #7
 80068ee:	e05a      	b.n	80069a6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <dir_next+0xd6>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e055      	b.n	80069a6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d101      	bne.n	8006906 <dir_next+0xe2>
 8006902:	2301      	movs	r3, #1
 8006904:	e04f      	b.n	80069a6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fb50 	bl	8005fac <sync_window>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <dir_next+0xf2>
 8006912:	2301      	movs	r3, #1
 8006914:	e047      	b.n	80069a6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3330      	adds	r3, #48	@ 0x30
 800691a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff f97a 	bl	8005c1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	6979      	ldr	r1, [r7, #20]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff fc1d 	bl	800616c <clust2sect>
 8006932:	4602      	mov	r2, r0
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006938:	e012      	b.n	8006960 <dir_next+0x13c>
						fs->wflag = 1;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fb33 	bl	8005fac <sync_window>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <dir_next+0x12c>
 800694c:	2301      	movs	r3, #1
 800694e:	e02a      	b.n	80069a6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	3301      	adds	r3, #1
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	895b      	ldrh	r3, [r3, #10]
 8006964:	461a      	mov	r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4293      	cmp	r3, r2
 800696a:	d3e6      	bcc.n	800693a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800697e:	6979      	ldr	r1, [r7, #20]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff fbf3 	bl	800616c <clust2sect>
 8006986:	4602      	mov	r2, r0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	441a      	add	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80069be:	2100      	movs	r1, #0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff feb4 	bl	800672e <dir_sdi>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d12b      	bne.n	8006a28 <dir_alloc+0x7a>
		n = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fb2a 	bl	8006034 <move_window>
 80069e0:	4603      	mov	r3, r0
 80069e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d11d      	bne.n	8006a26 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2be5      	cmp	r3, #229	@ 0xe5
 80069f2:	d004      	beq.n	80069fe <dir_alloc+0x50>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	3301      	adds	r3, #1
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d102      	bne.n	8006a12 <dir_alloc+0x64>
 8006a0c:	e00c      	b.n	8006a28 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a12:	2101      	movs	r1, #1
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff ff05 	bl	8006824 <dir_next>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0d7      	beq.n	80069d4 <dir_alloc+0x26>
 8006a24:	e000      	b.n	8006a28 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a26:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d101      	bne.n	8006a32 <dir_alloc+0x84>
 8006a2e:	2307      	movs	r3, #7
 8006a30:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	331a      	adds	r3, #26
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff f842 	bl	8005ad4 <ld_word>
 8006a50:	4603      	mov	r3, r0
 8006a52:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d109      	bne.n	8006a70 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff f837 	bl	8005ad4 <ld_word>
 8006a66:	4603      	mov	r3, r0
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a70:	68fb      	ldr	r3, [r7, #12]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	331a      	adds	r3, #26
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff f85a 	bl	8005b4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d109      	bne.n	8006ab2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f103 0214 	add.w	r2, r3, #20
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f7ff f84c 	bl	8005b4a <st_word>
	}
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006ace:	e03c      	b.n	8006b4a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6938      	ldr	r0, [r7, #16]
 8006ad8:	f7ff faac 	bl	8006034 <move_window>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d136      	bne.n	8006b54 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006af4:	2304      	movs	r3, #4
 8006af6:	75fb      	strb	r3, [r7, #23]
 8006af8:	e031      	b.n	8006b5e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	330b      	adds	r3, #11
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b06:	73bb      	strb	r3, [r7, #14]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	7bba      	ldrb	r2, [r7, #14]
 8006b0c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	2be5      	cmp	r3, #229	@ 0xe5
 8006b12:	d011      	beq.n	8006b38 <dir_read+0x7e>
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b18:	d00e      	beq.n	8006b38 <dir_read+0x7e>
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b0f      	cmp	r3, #15
 8006b1e:	d00b      	beq.n	8006b38 <dir_read+0x7e>
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	f023 0320 	bic.w	r3, r3, #32
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00f      	beq.n	8006b58 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fe72 	bl	8006824 <dir_next>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d108      	bne.n	8006b5c <dir_read+0xa2>
	while (dp->sect) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1be      	bne.n	8006ad0 <dir_read+0x16>
 8006b52:	e004      	b.n	8006b5e <dir_read+0xa4>
		if (res != FR_OK) break;
 8006b54:	bf00      	nop
 8006b56:	e002      	b.n	8006b5e <dir_read+0xa4>
				break;
 8006b58:	bf00      	nop
 8006b5a:	e000      	b.n	8006b5e <dir_read+0xa4>
		if (res != FR_OK) break;
 8006b5c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <dir_read+0xb0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	61da      	str	r2, [r3, #28]
	return res;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b82:	2100      	movs	r1, #0
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fdd2 	bl	800672e <dir_sdi>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <dir_find+0x24>
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	e03e      	b.n	8006c16 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6938      	ldr	r0, [r7, #16]
 8006ba0:	f7ff fa48 	bl	8006034 <move_window>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d12f      	bne.n	8006c0e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <dir_find+0x4e>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	75fb      	strb	r3, [r7, #23]
 8006bc0:	e028      	b.n	8006c14 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	330b      	adds	r3, #11
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	330b      	adds	r3, #11
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <dir_find+0x86>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a18      	ldr	r0, [r3, #32]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3324      	adds	r3, #36	@ 0x24
 8006bec:	220b      	movs	r2, #11
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f7ff f82e 	bl	8005c50 <mem_cmp>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fe11 	bl	8006824 <dir_next>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0c5      	beq.n	8006b98 <dir_find+0x24>
 8006c0c:	e002      	b.n	8006c14 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006c12:	bf00      	nop

	return res;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff febd 	bl	80069ae <dir_alloc>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11c      	bne.n	8006c78 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4619      	mov	r1, r3
 8006c44:	68b8      	ldr	r0, [r7, #8]
 8006c46:	f7ff f9f5 	bl	8006034 <move_window>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d111      	bne.n	8006c78 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe ffdc 	bl	8005c1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a18      	ldr	r0, [r3, #32]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3324      	adds	r3, #36	@ 0x24
 8006c6a:	220b      	movs	r2, #11
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	f7fe ffb3 	bl	8005bd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2201      	movs	r2, #1
 8006c76:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	4619      	mov	r1, r3
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff f9cc 	bl	8006034 <move_window>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	22e5      	movs	r2, #229	@ 0xe5
 8006cac:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3324      	adds	r3, #36	@ 0x24
 8006cd4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006cd6:	220b      	movs	r2, #11
 8006cd8:	2120      	movs	r1, #32
 8006cda:	68b8      	ldr	r0, [r7, #8]
 8006cdc:	f7fe ff9d 	bl	8005c1a <mem_set>
	si = i = 0; ni = 8;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	2308      	movs	r3, #8
 8006cea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	61fa      	str	r2, [r7, #28]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006cfa:	7efb      	ldrb	r3, [r7, #27]
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d94e      	bls.n	8006d9e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006d00:	7efb      	ldrb	r3, [r7, #27]
 8006d02:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d04:	d006      	beq.n	8006d14 <create_name+0x54>
 8006d06:	7efb      	ldrb	r3, [r7, #27]
 8006d08:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d0a:	d110      	bne.n	8006d2e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006d0c:	e002      	b.n	8006d14 <create_name+0x54>
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	3301      	adds	r3, #1
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d1e:	d0f6      	beq.n	8006d0e <create_name+0x4e>
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d2a:	d0f0      	beq.n	8006d0e <create_name+0x4e>
			break;
 8006d2c:	e038      	b.n	8006da0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006d2e:	7efb      	ldrb	r3, [r7, #27]
 8006d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d32:	d003      	beq.n	8006d3c <create_name+0x7c>
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d30c      	bcc.n	8006d56 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	d002      	beq.n	8006d48 <create_name+0x88>
 8006d42:	7efb      	ldrb	r3, [r7, #27]
 8006d44:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d46:	d001      	beq.n	8006d4c <create_name+0x8c>
 8006d48:	2306      	movs	r3, #6
 8006d4a:	e044      	b.n	8006dd6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	230b      	movs	r3, #11
 8006d52:	617b      	str	r3, [r7, #20]
			continue;
 8006d54:	e022      	b.n	8006d9c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006d56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da04      	bge.n	8006d68 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006d5e:	7efb      	ldrb	r3, [r7, #27]
 8006d60:	3b80      	subs	r3, #128	@ 0x80
 8006d62:	4a1f      	ldr	r2, [pc, #124]	@ (8006de0 <create_name+0x120>)
 8006d64:	5cd3      	ldrb	r3, [r2, r3]
 8006d66:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006d68:	7efb      	ldrb	r3, [r7, #27]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	481d      	ldr	r0, [pc, #116]	@ (8006de4 <create_name+0x124>)
 8006d6e:	f7fe ff96 	bl	8005c9e <chk_chr>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <create_name+0xbc>
 8006d78:	2306      	movs	r3, #6
 8006d7a:	e02c      	b.n	8006dd6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006d7c:	7efb      	ldrb	r3, [r7, #27]
 8006d7e:	2b60      	cmp	r3, #96	@ 0x60
 8006d80:	d905      	bls.n	8006d8e <create_name+0xce>
 8006d82:	7efb      	ldrb	r3, [r7, #27]
 8006d84:	2b7a      	cmp	r3, #122	@ 0x7a
 8006d86:	d802      	bhi.n	8006d8e <create_name+0xce>
 8006d88:	7efb      	ldrb	r3, [r7, #27]
 8006d8a:	3b20      	subs	r3, #32
 8006d8c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	613a      	str	r2, [r7, #16]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	4413      	add	r3, r2
 8006d98:	7efa      	ldrb	r2, [r7, #27]
 8006d9a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d9c:	e7a6      	b.n	8006cec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d9e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	441a      	add	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <create_name+0xf4>
 8006db0:	2306      	movs	r3, #6
 8006db2:	e010      	b.n	8006dd6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2be5      	cmp	r3, #229	@ 0xe5
 8006dba:	d102      	bne.n	8006dc2 <create_name+0x102>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2205      	movs	r2, #5
 8006dc0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006dc2:	7efb      	ldrb	r3, [r7, #27]
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d801      	bhi.n	8006dcc <create_name+0x10c>
 8006dc8:	2204      	movs	r2, #4
 8006dca:	e000      	b.n	8006dce <create_name+0x10e>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	330b      	adds	r3, #11
 8006dd2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006dd4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	08008ed4 	.word	0x08008ed4
 8006de4:	08008e6c 	.word	0x08008e6c

08006de8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006dfc:	e002      	b.n	8006e04 <follow_path+0x1c>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e0a:	d0f8      	beq.n	8006dfe <follow_path+0x16>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e12:	d0f4      	beq.n	8006dfe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2200      	movs	r2, #0
 8006e18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b1f      	cmp	r3, #31
 8006e20:	d80a      	bhi.n	8006e38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2280      	movs	r2, #128	@ 0x80
 8006e26:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fc7e 	bl	800672e <dir_sdi>
 8006e32:	4603      	mov	r3, r0
 8006e34:	75fb      	strb	r3, [r7, #23]
 8006e36:	e043      	b.n	8006ec0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e38:	463b      	mov	r3, r7
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff3f 	bl	8006cc0 <create_name>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d134      	bne.n	8006eb6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff fe91 	bl	8006b74 <dir_find>
 8006e52:	4603      	mov	r3, r0
 8006e54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d127      	bne.n	8006eba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d122      	bne.n	8006eba <follow_path+0xd2>
 8006e74:	2305      	movs	r3, #5
 8006e76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e78:	e01f      	b.n	8006eba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11c      	bne.n	8006ebe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	799b      	ldrb	r3, [r3, #6]
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e90:	2305      	movs	r3, #5
 8006e92:	75fb      	strb	r3, [r7, #23]
 8006e94:	e014      	b.n	8006ec0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea4:	4413      	add	r3, r2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff fdc7 	bl	8006a3c <ld_clust>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006eb4:	e7c0      	b.n	8006e38 <follow_path+0x50>
			if (res != FR_OK) break;
 8006eb6:	bf00      	nop
 8006eb8:	e002      	b.n	8006ec0 <follow_path+0xd8>
				break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ebe:	bf00      	nop
			}
		}
	}

	return res;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b087      	sub	sp, #28
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d031      	beq.n	8006f44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e002      	b.n	8006eee <get_ldnumber+0x24>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	3301      	adds	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d903      	bls.n	8006efe <get_ldnumber+0x34>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b3a      	cmp	r3, #58	@ 0x3a
 8006efc:	d1f4      	bne.n	8006ee8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f04:	d11c      	bne.n	8006f40 <get_ldnumber+0x76>
			tp = *path;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	60fa      	str	r2, [r7, #12]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	3b30      	subs	r3, #48	@ 0x30
 8006f16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d80e      	bhi.n	8006f3c <get_ldnumber+0x72>
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d10a      	bne.n	8006f3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <get_ldnumber+0x72>
					vol = (int)i;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	3301      	adds	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	e002      	b.n	8006f46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006f44:	693b      	ldr	r3, [r7, #16]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	70da      	strb	r2, [r3, #3]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff f860 	bl	8006034 <move_window>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <check_fs+0x2a>
 8006f7a:	2304      	movs	r3, #4
 8006f7c:	e038      	b.n	8006ff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3330      	adds	r3, #48	@ 0x30
 8006f82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fda4 	bl	8005ad4 <ld_word>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <check_fs+0x48>
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e029      	b.n	8006ff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fa2:	2be9      	cmp	r3, #233	@ 0xe9
 8006fa4:	d009      	beq.n	8006fba <check_fs+0x66>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fac:	2beb      	cmp	r3, #235	@ 0xeb
 8006fae:	d11e      	bne.n	8006fee <check_fs+0x9a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006fb6:	2b90      	cmp	r3, #144	@ 0x90
 8006fb8:	d119      	bne.n	8006fee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3330      	adds	r3, #48	@ 0x30
 8006fbe:	3336      	adds	r3, #54	@ 0x36
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe fd9f 	bl	8005b04 <ld_dword>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff8 <check_fs+0xa4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <check_fs+0x82>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e00c      	b.n	8006ff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3330      	adds	r3, #48	@ 0x30
 8006fda:	3352      	adds	r3, #82	@ 0x52
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fd91 	bl	8005b04 <ld_dword>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4a05      	ldr	r2, [pc, #20]	@ (8006ffc <check_fs+0xa8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d101      	bne.n	8006fee <check_fs+0x9a>
 8006fea:	2300      	movs	r3, #0
 8006fec:	e000      	b.n	8006ff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006fee:	2302      	movs	r3, #2
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	00544146 	.word	0x00544146
 8006ffc:	33544146 	.word	0x33544146

08007000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b096      	sub	sp, #88	@ 0x58
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff ff58 	bl	8006eca <get_ldnumber>
 800701a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800701c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701e:	2b00      	cmp	r3, #0
 8007020:	da01      	bge.n	8007026 <find_volume+0x26>
 8007022:	230b      	movs	r3, #11
 8007024:	e22d      	b.n	8007482 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007026:	4aa1      	ldr	r2, [pc, #644]	@ (80072ac <find_volume+0x2ac>)
 8007028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <find_volume+0x3a>
 8007036:	230c      	movs	r3, #12
 8007038:	e223      	b.n	8007482 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800703e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01a      	beq.n	8007086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fc9d 	bl	8005994 <disk_status>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10c      	bne.n	8007086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <find_volume+0x82>
 8007072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800707e:	230a      	movs	r3, #10
 8007080:	e1ff      	b.n	8007482 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007082:	2300      	movs	r3, #0
 8007084:	e1fd      	b.n	8007482 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800708c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fc95 	bl	80059c8 <disk_initialize>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80070a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80070b0:	2303      	movs	r3, #3
 80070b2:	e1e6      	b.n	8007482 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <find_volume+0xca>
 80070ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80070c6:	230a      	movs	r3, #10
 80070c8:	e1db      	b.n	8007482 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80070ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070d2:	f7ff ff3f 	bl	8006f54 <check_fs>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80070dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d149      	bne.n	8007178 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070e4:	2300      	movs	r3, #0
 80070e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80070e8:	e01e      	b.n	8007128 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80070f8:	4413      	add	r3, r2
 80070fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	3304      	adds	r3, #4
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <find_volume+0x114>
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	3308      	adds	r3, #8
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fcfa 	bl	8005b04 <ld_dword>
 8007110:	4602      	mov	r2, r0
 8007112:	e000      	b.n	8007116 <find_volume+0x116>
 8007114:	2200      	movs	r2, #0
 8007116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	3358      	adds	r3, #88	@ 0x58
 800711c:	443b      	add	r3, r7
 800711e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007124:	3301      	adds	r3, #1
 8007126:	643b      	str	r3, [r7, #64]	@ 0x40
 8007128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800712a:	2b03      	cmp	r3, #3
 800712c:	d9dd      	bls.n	80070ea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800712e:	2300      	movs	r3, #0
 8007130:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <find_volume+0x13e>
 8007138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713a:	3b01      	subs	r3, #1
 800713c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800713e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	3358      	adds	r3, #88	@ 0x58
 8007144:	443b      	add	r3, r7
 8007146:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800714a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800714c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <find_volume+0x15e>
 8007152:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007154:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007156:	f7ff fefd 	bl	8006f54 <check_fs>
 800715a:	4603      	mov	r3, r0
 800715c:	e000      	b.n	8007160 <find_volume+0x160>
 800715e:	2303      	movs	r3, #3
 8007160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007168:	2b01      	cmp	r3, #1
 800716a:	d905      	bls.n	8007178 <find_volume+0x178>
 800716c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800716e:	3301      	adds	r3, #1
 8007170:	643b      	str	r3, [r7, #64]	@ 0x40
 8007172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007174:	2b03      	cmp	r3, #3
 8007176:	d9e2      	bls.n	800713e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800717c:	2b04      	cmp	r3, #4
 800717e:	d101      	bne.n	8007184 <find_volume+0x184>
 8007180:	2301      	movs	r3, #1
 8007182:	e17e      	b.n	8007482 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007184:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007188:	2b01      	cmp	r3, #1
 800718a:	d901      	bls.n	8007190 <find_volume+0x190>
 800718c:	230d      	movs	r3, #13
 800718e:	e178      	b.n	8007482 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007192:	3330      	adds	r3, #48	@ 0x30
 8007194:	330b      	adds	r3, #11
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fc9c 	bl	8005ad4 <ld_word>
 800719c:	4603      	mov	r3, r0
 800719e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a2:	d001      	beq.n	80071a8 <find_volume+0x1a8>
 80071a4:	230d      	movs	r3, #13
 80071a6:	e16c      	b.n	8007482 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80071a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071aa:	3330      	adds	r3, #48	@ 0x30
 80071ac:	3316      	adds	r3, #22
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fc90 	bl	8005ad4 <ld_word>
 80071b4:	4603      	mov	r3, r0
 80071b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80071b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <find_volume+0x1cc>
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	3330      	adds	r3, #48	@ 0x30
 80071c2:	3324      	adds	r3, #36	@ 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fc9d 	bl	8005b04 <ld_dword>
 80071ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071d0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	789b      	ldrb	r3, [r3, #2]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d005      	beq.n	80071f0 <find_volume+0x1f0>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	789b      	ldrb	r3, [r3, #2]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d001      	beq.n	80071f0 <find_volume+0x1f0>
 80071ec:	230d      	movs	r3, #13
 80071ee:	e148      	b.n	8007482 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	789b      	ldrb	r3, [r3, #2]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f8:	fb02 f303 	mul.w	r3, r2, r3
 80071fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007204:	461a      	mov	r2, r3
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	895b      	ldrh	r3, [r3, #10]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <find_volume+0x224>
 8007212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007214:	895b      	ldrh	r3, [r3, #10]
 8007216:	461a      	mov	r2, r3
 8007218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721a:	895b      	ldrh	r3, [r3, #10]
 800721c:	3b01      	subs	r3, #1
 800721e:	4013      	ands	r3, r2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <find_volume+0x228>
 8007224:	230d      	movs	r3, #13
 8007226:	e12c      	b.n	8007482 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722a:	3330      	adds	r3, #48	@ 0x30
 800722c:	3311      	adds	r3, #17
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fc50 	bl	8005ad4 <ld_word>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	891b      	ldrh	r3, [r3, #8]
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <find_volume+0x24e>
 800724a:	230d      	movs	r3, #13
 800724c:	e119      	b.n	8007482 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800724e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007250:	3330      	adds	r3, #48	@ 0x30
 8007252:	3313      	adds	r3, #19
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fc3d 	bl	8005ad4 <ld_word>
 800725a:	4603      	mov	r3, r0
 800725c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800725e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <find_volume+0x272>
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	3330      	adds	r3, #48	@ 0x30
 8007268:	3320      	adds	r3, #32
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fc4a 	bl	8005b04 <ld_dword>
 8007270:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007274:	3330      	adds	r3, #48	@ 0x30
 8007276:	330e      	adds	r3, #14
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe fc2b 	bl	8005ad4 <ld_word>
 800727e:	4603      	mov	r3, r0
 8007280:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007282:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <find_volume+0x28c>
 8007288:	230d      	movs	r3, #13
 800728a:	e0fa      	b.n	8007482 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800728c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800728e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007290:	4413      	add	r3, r2
 8007292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007294:	8912      	ldrh	r2, [r2, #8]
 8007296:	0912      	lsrs	r2, r2, #4
 8007298:	b292      	uxth	r2, r2
 800729a:	4413      	add	r3, r2
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800729e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d204      	bcs.n	80072b0 <find_volume+0x2b0>
 80072a6:	230d      	movs	r3, #13
 80072a8:	e0eb      	b.n	8007482 <find_volume+0x482>
 80072aa:	bf00      	nop
 80072ac:	20000664 	.word	0x20000664
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80072b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072b8:	8952      	ldrh	r2, [r2, #10]
 80072ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <find_volume+0x2ca>
 80072c6:	230d      	movs	r3, #13
 80072c8:	e0db      	b.n	8007482 <find_volume+0x482>
		fmt = FS_FAT32;
 80072ca:	2303      	movs	r3, #3
 80072cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d802      	bhi.n	80072e0 <find_volume+0x2e0>
 80072da:	2302      	movs	r3, #2
 80072dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d802      	bhi.n	80072f0 <find_volume+0x2f0>
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	1c9a      	adds	r2, r3, #2
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072fc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007302:	441a      	add	r2, r3
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007308:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800730a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730c:	441a      	add	r2, r3
 800730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007310:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007312:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007316:	2b03      	cmp	r3, #3
 8007318:	d11e      	bne.n	8007358 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	3330      	adds	r3, #48	@ 0x30
 800731e:	332a      	adds	r3, #42	@ 0x2a
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fbd7 	bl	8005ad4 <ld_word>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <find_volume+0x330>
 800732c:	230d      	movs	r3, #13
 800732e:	e0a8      	b.n	8007482 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	891b      	ldrh	r3, [r3, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <find_volume+0x33c>
 8007338:	230d      	movs	r3, #13
 800733a:	e0a2      	b.n	8007482 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733e:	3330      	adds	r3, #48	@ 0x30
 8007340:	332c      	adds	r3, #44	@ 0x2c
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fbde 	bl	8005b04 <ld_dword>
 8007348:	4602      	mov	r2, r0
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	647b      	str	r3, [r7, #68]	@ 0x44
 8007356:	e01f      	b.n	8007398 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	891b      	ldrh	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <find_volume+0x364>
 8007360:	230d      	movs	r3, #13
 8007362:	e08e      	b.n	8007482 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	6a1a      	ldr	r2, [r3, #32]
 8007368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800736a:	441a      	add	r2, r3
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007374:	2b02      	cmp	r3, #2
 8007376:	d103      	bne.n	8007380 <find_volume+0x380>
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	e00a      	b.n	8007396 <find_volume+0x396>
 8007380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	4613      	mov	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4413      	add	r3, r2
 800738a:	085a      	lsrs	r2, r3, #1
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007396:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800739e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80073a2:	0a5b      	lsrs	r3, r3, #9
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d201      	bcs.n	80073ac <find_volume+0x3ac>
 80073a8:	230d      	movs	r3, #13
 80073aa:	e06a      	b.n	8007482 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80073ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295
 80073b2:	611a      	str	r2, [r3, #16]
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80073bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073be:	2280      	movs	r2, #128	@ 0x80
 80073c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80073c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d149      	bne.n	800745e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	3330      	adds	r3, #48	@ 0x30
 80073ce:	3330      	adds	r3, #48	@ 0x30
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe fb7f 	bl	8005ad4 <ld_word>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d140      	bne.n	800745e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80073dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073de:	3301      	adds	r3, #1
 80073e0:	4619      	mov	r1, r3
 80073e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073e4:	f7fe fe26 	bl	8006034 <move_window>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d137      	bne.n	800745e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	2200      	movs	r2, #0
 80073f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	3330      	adds	r3, #48	@ 0x30
 80073f8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fb69 	bl	8005ad4 <ld_word>
 8007402:	4603      	mov	r3, r0
 8007404:	461a      	mov	r2, r3
 8007406:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800740a:	429a      	cmp	r2, r3
 800740c:	d127      	bne.n	800745e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	3330      	adds	r3, #48	@ 0x30
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fb76 	bl	8005b04 <ld_dword>
 8007418:	4603      	mov	r3, r0
 800741a:	4a1c      	ldr	r2, [pc, #112]	@ (800748c <find_volume+0x48c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d11e      	bne.n	800745e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	3330      	adds	r3, #48	@ 0x30
 8007424:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fb6b 	bl	8005b04 <ld_dword>
 800742e:	4603      	mov	r3, r0
 8007430:	4a17      	ldr	r2, [pc, #92]	@ (8007490 <find_volume+0x490>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d113      	bne.n	800745e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	3330      	adds	r3, #48	@ 0x30
 800743a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fb60 	bl	8005b04 <ld_dword>
 8007444:	4602      	mov	r2, r0
 8007446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007448:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800744a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744c:	3330      	adds	r3, #48	@ 0x30
 800744e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fb56 	bl	8005b04 <ld_dword>
 8007458:	4602      	mov	r2, r0
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007464:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007466:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <find_volume+0x494>)
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	4b09      	ldr	r3, [pc, #36]	@ (8007494 <find_volume+0x494>)
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	4b08      	ldr	r3, [pc, #32]	@ (8007494 <find_volume+0x494>)
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007478:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800747a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800747c:	f7fe fd72 	bl	8005f64 <clear_lock>
#endif
	return FR_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3758      	adds	r7, #88	@ 0x58
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	41615252 	.word	0x41615252
 8007490:	61417272 	.word	0x61417272
 8007494:	20000668 	.word	0x20000668

08007498 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80074a2:	2309      	movs	r3, #9
 80074a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01c      	beq.n	80074e6 <validate+0x4e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d018      	beq.n	80074e6 <validate+0x4e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d013      	beq.n	80074e6 <validate+0x4e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	889a      	ldrh	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	88db      	ldrh	r3, [r3, #6]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d10c      	bne.n	80074e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fa5e 	bl	8005994 <disk_status>
 80074d8:	4603      	mov	r3, r0
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <validate+0x4e>
			res = FR_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d102      	bne.n	80074f2 <validate+0x5a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	e000      	b.n	80074f4 <validate+0x5c>
 80074f2:	2300      	movs	r3, #0
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	6013      	str	r3, [r2, #0]
	return res;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff fcd5 	bl	8006eca <get_ldnumber>
 8007520:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da01      	bge.n	800752c <f_mount+0x28>
 8007528:	230b      	movs	r3, #11
 800752a:	e02b      	b.n	8007584 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800752c:	4a17      	ldr	r2, [pc, #92]	@ (800758c <f_mount+0x88>)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007534:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f7fe fd11 	bl	8005f64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	490d      	ldr	r1, [pc, #52]	@ (800758c <f_mount+0x88>)
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <f_mount+0x66>
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d001      	beq.n	800756e <f_mount+0x6a>
 800756a:	2300      	movs	r3, #0
 800756c:	e00a      	b.n	8007584 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800756e:	f107 010c 	add.w	r1, r7, #12
 8007572:	f107 0308 	add.w	r3, r7, #8
 8007576:	2200      	movs	r2, #0
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fd41 	bl	8007000 <find_volume>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007582:	7dfb      	ldrb	r3, [r7, #23]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000664 	.word	0x20000664

08007590 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b098      	sub	sp, #96	@ 0x60
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <f_open+0x18>
 80075a4:	2309      	movs	r3, #9
 80075a6:	e1a9      	b.n	80078fc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80075b0:	79fa      	ldrb	r2, [r7, #7]
 80075b2:	f107 0110 	add.w	r1, r7, #16
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fd20 	bl	8007000 <find_volume>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80075c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 818d 	bne.w	80078ea <f_open+0x35a>
		dj.obj.fs = fs;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	f107 0314 	add.w	r3, r7, #20
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fc03 	bl	8006de8 <follow_path>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d118      	bne.n	8007622 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80075f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da03      	bge.n	8007602 <f_open+0x72>
				res = FR_INVALID_NAME;
 80075fa:	2306      	movs	r3, #6
 80075fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007600:	e00f      	b.n	8007622 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	2b01      	cmp	r3, #1
 8007606:	bf8c      	ite	hi
 8007608:	2301      	movhi	r3, #1
 800760a:	2300      	movls	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4611      	mov	r1, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fb5c 	bl	8005cd4 <chk_lock>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	f003 031c 	and.w	r3, r3, #28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d07f      	beq.n	800772c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800762c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007630:	2b00      	cmp	r3, #0
 8007632:	d017      	beq.n	8007664 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007634:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007638:	2b04      	cmp	r3, #4
 800763a:	d10e      	bne.n	800765a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800763c:	f7fe fba6 	bl	8005d8c <enq_lock>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d006      	beq.n	8007654 <f_open+0xc4>
 8007646:	f107 0314 	add.w	r3, r7, #20
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fae7 	bl	8006c1e <dir_register>
 8007650:	4603      	mov	r3, r0
 8007652:	e000      	b.n	8007656 <f_open+0xc6>
 8007654:	2312      	movs	r3, #18
 8007656:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	f043 0308 	orr.w	r3, r3, #8
 8007660:	71fb      	strb	r3, [r7, #7]
 8007662:	e010      	b.n	8007686 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007664:	7ebb      	ldrb	r3, [r7, #26]
 8007666:	f003 0311 	and.w	r3, r3, #17
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <f_open+0xe6>
					res = FR_DENIED;
 800766e:	2307      	movs	r3, #7
 8007670:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007674:	e007      	b.n	8007686 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <f_open+0xf6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007686:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800768a:	2b00      	cmp	r3, #0
 800768c:	d168      	bne.n	8007760 <f_open+0x1d0>
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d063      	beq.n	8007760 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007698:	f7fd fff6 	bl	8005688 <get_fattime>
 800769c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800769e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a0:	330e      	adds	r3, #14
 80076a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fa6b 	bl	8005b80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80076aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ac:	3316      	adds	r3, #22
 80076ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fa65 	bl	8005b80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	330b      	adds	r3, #11
 80076ba:	2220      	movs	r2, #32
 80076bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076c2:	4611      	mov	r1, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff f9b9 	bl	8006a3c <ld_clust>
 80076ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80076d0:	2200      	movs	r2, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff f9d1 	bl	8006a7a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80076d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076da:	331c      	adds	r3, #28
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fa4e 	bl	8005b80 <st_dword>
					fs->wflag = 1;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2201      	movs	r2, #1
 80076e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80076ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d037      	beq.n	8007760 <f_open+0x1d0>
						dw = fs->winsect;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80076f6:	f107 0314 	add.w	r3, r7, #20
 80076fa:	2200      	movs	r2, #0
 80076fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fee4 	bl	80064cc <remove_chain>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800770a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d126      	bne.n	8007760 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fc8c 	bl	8006034 <move_window>
 800771c:	4603      	mov	r3, r0
 800771e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007726:	3a01      	subs	r2, #1
 8007728:	60da      	str	r2, [r3, #12]
 800772a:	e019      	b.n	8007760 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800772c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007730:	2b00      	cmp	r3, #0
 8007732:	d115      	bne.n	8007760 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007734:	7ebb      	ldrb	r3, [r7, #26]
 8007736:	f003 0310 	and.w	r3, r3, #16
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <f_open+0x1b6>
					res = FR_NO_FILE;
 800773e:	2304      	movs	r3, #4
 8007740:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007744:	e00c      	b.n	8007760 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <f_open+0x1d0>
 8007750:	7ebb      	ldrb	r3, [r7, #26]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <f_open+0x1d0>
						res = FR_DENIED;
 800775a:	2307      	movs	r3, #7
 800775c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007760:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007764:	2b00      	cmp	r3, #0
 8007766:	d126      	bne.n	80077b6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007778:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	2b01      	cmp	r3, #1
 800778c:	bf8c      	ite	hi
 800778e:	2301      	movhi	r3, #1
 8007790:	2300      	movls	r3, #0
 8007792:	b2db      	uxtb	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fb17 	bl	8005dd0 <inc_lock>
 80077a2:	4602      	mov	r2, r0
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <f_open+0x226>
 80077b0:	2302      	movs	r3, #2
 80077b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80077b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f040 8095 	bne.w	80078ea <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff f938 	bl	8006a3c <ld_clust>
 80077cc:	4602      	mov	r2, r0
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80077d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d4:	331c      	adds	r3, #28
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe f994 	bl	8005b04 <ld_dword>
 80077dc:	4602      	mov	r2, r0
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	88da      	ldrh	r2, [r3, #6]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	79fa      	ldrb	r2, [r7, #7]
 80077fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3330      	adds	r3, #48	@ 0x30
 8007812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe f9fe 	bl	8005c1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d060      	beq.n	80078ea <f_open+0x35a>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d05c      	beq.n	80078ea <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	895b      	ldrh	r3, [r3, #10]
 800783c:	025b      	lsls	r3, r3, #9
 800783e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	657b      	str	r3, [r7, #84]	@ 0x54
 800784c:	e016      	b.n	800787c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fca9 	bl	80061aa <get_fat>
 8007858:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800785a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800785c:	2b01      	cmp	r3, #1
 800785e:	d802      	bhi.n	8007866 <f_open+0x2d6>
 8007860:	2302      	movs	r3, #2
 8007862:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d102      	bne.n	8007874 <f_open+0x2e4>
 800786e:	2301      	movs	r3, #1
 8007870:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007874:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	657b      	str	r3, [r7, #84]	@ 0x54
 800787c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <f_open+0x2fc>
 8007884:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007888:	429a      	cmp	r2, r3
 800788a:	d8e0      	bhi.n	800784e <f_open+0x2be>
				}
				fp->clust = clst;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007890:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007892:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d127      	bne.n	80078ea <f_open+0x35a>
 800789a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d022      	beq.n	80078ea <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fc5f 	bl	800616c <clust2sect>
 80078ae:	6478      	str	r0, [r7, #68]	@ 0x44
 80078b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <f_open+0x32e>
						res = FR_INT_ERR;
 80078b6:	2302      	movs	r3, #2
 80078b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80078bc:	e015      	b.n	80078ea <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80078be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078c0:	0a5a      	lsrs	r2, r3, #9
 80078c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	7858      	ldrb	r0, [r3, #1]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	2301      	movs	r3, #1
 80078da:	f7fe f89d 	bl	8005a18 <disk_read>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <f_open+0x35a>
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80078ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <f_open+0x368>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80078f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3760      	adds	r7, #96	@ 0x60
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08c      	sub	sp, #48	@ 0x30
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f107 0210 	add.w	r2, r7, #16
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fdb7 	bl	8007498 <validate>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007934:	2b00      	cmp	r3, #0
 8007936:	d107      	bne.n	8007948 <f_write+0x44>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	7d5b      	ldrb	r3, [r3, #21]
 800793c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <f_write+0x4a>
 8007948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800794c:	e14b      	b.n	8007be6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	7d1b      	ldrb	r3, [r3, #20]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <f_write+0x5a>
 800795a:	2307      	movs	r3, #7
 800795c:	e143      	b.n	8007be6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	f080 812d 	bcs.w	8007bca <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	43db      	mvns	r3, r3
 8007976:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007978:	e127      	b.n	8007bca <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007982:	2b00      	cmp	r3, #0
 8007984:	f040 80e3 	bne.w	8007b4e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	0a5b      	lsrs	r3, r3, #9
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	8952      	ldrh	r2, [r2, #10]
 8007992:	3a01      	subs	r2, #1
 8007994:	4013      	ands	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d143      	bne.n	8007a26 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10c      	bne.n	80079c0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80079ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d11a      	bne.n	80079e8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fded 	bl	8006596 <create_chain>
 80079bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80079be:	e013      	b.n	80079e8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	4619      	mov	r1, r3
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7fe fe79 	bl	80066c6 <clmt_clust>
 80079d4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80079d6:	e007      	b.n	80079e8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f7fe fdd8 	bl	8006596 <create_chain>
 80079e6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80f2 	beq.w	8007bd4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d104      	bne.n	8007a00 <f_write+0xfc>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2202      	movs	r2, #2
 80079fa:	755a      	strb	r2, [r3, #21]
 80079fc:	2302      	movs	r3, #2
 80079fe:	e0f2      	b.n	8007be6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a06:	d104      	bne.n	8007a12 <f_write+0x10e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	755a      	strb	r2, [r3, #21]
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e0e9      	b.n	8007be6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a16:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <f_write+0x122>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a24:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	7d1b      	ldrb	r3, [r3, #20]
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da18      	bge.n	8007a62 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	7858      	ldrb	r0, [r3, #1]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1a      	ldr	r2, [r3, #32]
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f7fe f80a 	bl	8005a58 <disk_write>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <f_write+0x150>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	755a      	strb	r2, [r3, #21]
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0c8      	b.n	8007be6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	7d1b      	ldrb	r3, [r3, #20]
 8007a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fe fb7e 	bl	800616c <clust2sect>
 8007a70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <f_write+0x17e>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	755a      	strb	r2, [r3, #21]
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e0b1      	b.n	8007be6 <f_write+0x2e2>
			sect += csect;
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	4413      	add	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	0a5b      	lsrs	r3, r3, #9
 8007a8e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d03c      	beq.n	8007b10 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	8952      	ldrh	r2, [r2, #10]
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d905      	bls.n	8007ab0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	895b      	ldrh	r3, [r3, #10]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	7858      	ldrb	r0, [r3, #1]
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	69f9      	ldr	r1, [r7, #28]
 8007aba:	f7fd ffcd 	bl	8005a58 <disk_write>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <f_write+0x1ca>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	755a      	strb	r2, [r3, #21]
 8007aca:	2301      	movs	r3, #1
 8007acc:	e08b      	b.n	8007be6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	6a3a      	ldr	r2, [r7, #32]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d915      	bls.n	8007b08 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	025b      	lsls	r3, r3, #9
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7fe f86f 	bl	8005bd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	7d1b      	ldrb	r3, [r3, #20]
 8007afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	025b      	lsls	r3, r3, #9
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007b0e:	e03f      	b.n	8007b90 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d016      	beq.n	8007b48 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d210      	bcs.n	8007b48 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	7858      	ldrb	r0, [r3, #1]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b30:	2301      	movs	r3, #1
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	f7fd ff70 	bl	8005a18 <disk_read>
 8007b38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	755a      	strb	r2, [r3, #21]
 8007b44:	2301      	movs	r3, #1
 8007b46:	e04e      	b.n	8007be6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007b5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d901      	bls.n	8007b68 <f_write+0x264>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	4413      	add	r3, r2
 8007b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b7a:	69f9      	ldr	r1, [r7, #28]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe f82b 	bl	8005bd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	7d1b      	ldrb	r3, [r3, #20]
 8007b86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	4413      	add	r3, r2
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	619a      	str	r2, [r3, #24]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	bf38      	it	cc
 8007bb0:	461a      	movcc	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	60da      	str	r2, [r3, #12]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	441a      	add	r2, r3
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f aed4 	bne.w	800797a <f_write+0x76>
 8007bd2:	e000      	b.n	8007bd6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bd4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	7d1b      	ldrb	r3, [r3, #20]
 8007bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3730      	adds	r7, #48	@ 0x30
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f107 0208 	add.w	r2, r7, #8
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fc4a 	bl	8007498 <validate>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d168      	bne.n	8007ce0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	7d1b      	ldrb	r3, [r3, #20]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d062      	beq.n	8007ce0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7d1b      	ldrb	r3, [r3, #20]
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da15      	bge.n	8007c50 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	7858      	ldrb	r0, [r3, #1]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	2301      	movs	r3, #1
 8007c34:	f7fd ff10 	bl	8005a58 <disk_write>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <f_sync+0x54>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e04f      	b.n	8007ce2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7d1b      	ldrb	r3, [r3, #20]
 8007c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c50:	f7fd fd1a 	bl	8005688 <get_fattime>
 8007c54:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7fe f9e8 	bl	8006034 <move_window>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d138      	bne.n	8007ce0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c72:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	330b      	adds	r3, #11
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	330b      	adds	r3, #11
 8007c7e:	f042 0220 	orr.w	r2, r2, #32
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68f9      	ldr	r1, [r7, #12]
 8007c92:	f7fe fef2 	bl	8006a7a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f103 021c 	add.w	r2, r3, #28
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f7fd ff6c 	bl	8005b80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3316      	adds	r3, #22
 8007cac:	6939      	ldr	r1, [r7, #16]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fd ff66 	bl	8005b80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3312      	adds	r3, #18
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fd ff45 	bl	8005b4a <st_word>
					fs->wflag = 1;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe f9e1 	bl	8006090 <sync_fs>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	7d1b      	ldrb	r3, [r3, #20]
 8007cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff ff7b 	bl	8007bee <f_sync>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d118      	bne.n	8007d34 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f107 0208 	add.w	r2, r7, #8
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fbc4 	bl	8007498 <validate>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10c      	bne.n	8007d34 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe f8e4 	bl	8005eec <dec_lock>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d102      	bne.n	8007d34 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b090      	sub	sp, #64	@ 0x40
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff fba1 	bl	8007498 <validate>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007d5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <f_lseek+0x2e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	7d5b      	ldrb	r3, [r3, #21]
 8007d68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007d6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <f_lseek+0x3c>
 8007d74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d78:	e1e6      	b.n	8008148 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80d1 	beq.w	8007f26 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d15a      	bne.n	8007e42 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d03a      	beq.n	8007e22 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	2300      	movs	r3, #0
 8007db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	3302      	adds	r3, #2
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe f9ee 	bl	80061aa <get_fat>
 8007dce:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d804      	bhi.n	8007de0 <f_lseek+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	755a      	strb	r2, [r3, #21]
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e1b3      	b.n	8008148 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d104      	bne.n	8007df2 <f_lseek+0xb4>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	755a      	strb	r2, [r3, #21]
 8007dee:	2301      	movs	r3, #1
 8007df0:	e1aa      	b.n	8008148 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d0de      	beq.n	8007dba <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d809      	bhi.n	8007e18 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3c4      	bcc.n	8007dac <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e28:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d803      	bhi.n	8007e3a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	e184      	b.n	8008144 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007e3a:	2311      	movs	r3, #17
 8007e3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007e40:	e180      	b.n	8008144 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d902      	bls.n	8007e52 <f_lseek+0x114>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 8172 	beq.w	8008144 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fe fc2d 	bl	80066c6 <clmt_clust>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fe f976 	bl	800616c <clust2sect>
 8007e80:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <f_lseek+0x154>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	755a      	strb	r2, [r3, #21]
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e15a      	b.n	8008148 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	0a5b      	lsrs	r3, r3, #9
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	8952      	ldrh	r2, [r2, #10]
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8148 	beq.w	8008144 <f_lseek+0x406>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	f000 8142 	beq.w	8008144 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7d1b      	ldrb	r3, [r3, #20]
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da18      	bge.n	8007efc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	7858      	ldrb	r0, [r3, #1]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1a      	ldr	r2, [r3, #32]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f7fd fdbd 	bl	8005a58 <disk_write>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <f_lseek+0x1b0>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	755a      	strb	r2, [r3, #21]
 8007eea:	2301      	movs	r3, #1
 8007eec:	e12c      	b.n	8008148 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7d1b      	ldrb	r3, [r3, #20]
 8007ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	7858      	ldrb	r0, [r3, #1]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f06:	2301      	movs	r3, #1
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	f7fd fd85 	bl	8005a18 <disk_read>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <f_lseek+0x1e0>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	755a      	strb	r2, [r3, #21]
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e114      	b.n	8008148 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	621a      	str	r2, [r3, #32]
 8007f24:	e10e      	b.n	8008144 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d908      	bls.n	8007f42 <f_lseek+0x204>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7d1b      	ldrb	r3, [r3, #20]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f50:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 80a7 	beq.w	80080a8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	895b      	ldrh	r3, [r3, #10]
 8007f5e:	025b      	lsls	r3, r3, #9
 8007f60:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01b      	beq.n	8007fa0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	1e5a      	subs	r2, r3, #1
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	1e59      	subs	r1, r3, #1
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d30f      	bcc.n	8007fa0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	1e5a      	subs	r2, r3, #1
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	425b      	negs	r3, r3
 8007f88:	401a      	ands	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f9e:	e022      	b.n	8007fe6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d119      	bne.n	8007fe0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe faf0 	bl	8006596 <create_chain>
 8007fb6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d104      	bne.n	8007fc8 <f_lseek+0x28a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	755a      	strb	r2, [r3, #21]
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e0bf      	b.n	8008148 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d104      	bne.n	8007fda <f_lseek+0x29c>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	755a      	strb	r2, [r3, #21]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e0b6      	b.n	8008148 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fde:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fe4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d05d      	beq.n	80080a8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007fec:	e03a      	b.n	8008064 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	441a      	add	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7d1b      	ldrb	r3, [r3, #20]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fabf 	bl	8006596 <create_chain>
 8008018:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d108      	bne.n	8008032 <f_lseek+0x2f4>
							ofs = 0; break;
 8008020:	2300      	movs	r3, #0
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	e022      	b.n	800806c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe f8bd 	bl	80061aa <get_fat>
 8008030:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d104      	bne.n	8008044 <f_lseek+0x306>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	755a      	strb	r2, [r3, #21]
 8008040:	2301      	movs	r3, #1
 8008042:	e081      	b.n	8008148 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008046:	2b01      	cmp	r3, #1
 8008048:	d904      	bls.n	8008054 <f_lseek+0x316>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008050:	429a      	cmp	r2, r3
 8008052:	d304      	bcc.n	800805e <f_lseek+0x320>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	755a      	strb	r2, [r3, #21]
 800805a:	2302      	movs	r3, #2
 800805c:	e074      	b.n	8008148 <f_lseek+0x40a>
					fp->clust = clst;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008062:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	429a      	cmp	r2, r3
 800806a:	d8c0      	bhi.n	8007fee <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	441a      	add	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807e:	2b00      	cmp	r3, #0
 8008080:	d012      	beq.n	80080a8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe f870 	bl	800616c <clust2sect>
 800808c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800808e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <f_lseek+0x360>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	755a      	strb	r2, [r3, #21]
 800809a:	2302      	movs	r3, #2
 800809c:	e054      	b.n	8008148 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	0a5b      	lsrs	r3, r3, #9
 80080a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080a4:	4413      	add	r3, r2
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d90a      	bls.n	80080ca <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699a      	ldr	r2, [r3, #24]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7d1b      	ldrb	r3, [r3, #20]
 80080c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d036      	beq.n	8008144 <f_lseek+0x406>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080dc:	429a      	cmp	r2, r3
 80080de:	d031      	beq.n	8008144 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7d1b      	ldrb	r3, [r3, #20]
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da18      	bge.n	800811c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	7858      	ldrb	r0, [r3, #1]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a1a      	ldr	r2, [r3, #32]
 80080f8:	2301      	movs	r3, #1
 80080fa:	f7fd fcad 	bl	8005a58 <disk_write>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <f_lseek+0x3d0>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	755a      	strb	r2, [r3, #21]
 800810a:	2301      	movs	r3, #1
 800810c:	e01c      	b.n	8008148 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7d1b      	ldrb	r3, [r3, #20]
 8008112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008116:	b2da      	uxtb	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	7858      	ldrb	r0, [r3, #1]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008126:	2301      	movs	r3, #1
 8008128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800812a:	f7fd fc75 	bl	8005a18 <disk_read>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <f_lseek+0x400>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	755a      	strb	r2, [r3, #21]
 800813a:	2301      	movs	r3, #1
 800813c:	e004      	b.n	8008148 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008142:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008144:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008148:	4618      	mov	r0, r3
 800814a:	3740      	adds	r7, #64	@ 0x40
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b09e      	sub	sp, #120	@ 0x78
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800815c:	f107 010c 	add.w	r1, r7, #12
 8008160:	1d3b      	adds	r3, r7, #4
 8008162:	2202      	movs	r2, #2
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe ff4b 	bl	8007000 <find_volume>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008174:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 808e 	bne.w	800829a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fe2e 	bl	8006de8 <follow_path>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008192:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008196:	2b00      	cmp	r3, #0
 8008198:	d108      	bne.n	80081ac <f_unlink+0x5c>
 800819a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fd fd97 	bl	8005cd4 <chk_lock>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80081ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d172      	bne.n	800829a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80081b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da03      	bge.n	80081c6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80081be:	2306      	movs	r3, #6
 80081c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80081c4:	e008      	b.n	80081d8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80081c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80081d2:	2307      	movs	r3, #7
 80081d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 80081d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d134      	bne.n	800824a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fc28 	bl	8006a3c <ld_clust>
 80081ec:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80081ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d027      	beq.n	800824a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80081fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008200:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fa90 	bl	800672e <dir_sdi>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8008214:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008218:	2b00      	cmp	r3, #0
 800821a:	d116      	bne.n	800824a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800821c:	f107 0310 	add.w	r3, r7, #16
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fc49 	bl	8006aba <dir_read>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800822e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008232:	2b00      	cmp	r3, #0
 8008234:	d102      	bne.n	800823c <f_unlink+0xec>
 8008236:	2307      	movs	r3, #7
 8008238:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800823c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008240:	2b04      	cmp	r3, #4
 8008242:	d102      	bne.n	800824a <f_unlink+0xfa>
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800824a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800824e:	2b00      	cmp	r3, #0
 8008250:	d123      	bne.n	800829a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008252:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fd13 	bl	8006c82 <dir_remove>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008262:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10c      	bne.n	8008284 <f_unlink+0x134>
 800826a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008270:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008274:	2200      	movs	r2, #0
 8008276:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe f927 	bl	80064cc <remove_chain>
 800827e:	4603      	mov	r3, r0
 8008280:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008284:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <f_unlink+0x14a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd fefe 	bl	8006090 <sync_fs>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800829a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3778      	adds	r7, #120	@ 0x78
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	2b0a      	cmp	r3, #10
 80082b6:	d103      	bne.n	80082c0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80082b8:	210d      	movs	r1, #13
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fff3 	bl	80082a6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db25      	blt.n	8008318 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	60fa      	str	r2, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b3c      	cmp	r3, #60	@ 0x3c
 80082de:	dd12      	ble.n	8008306 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f103 010c 	add.w	r1, r3, #12
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	f7ff fb08 	bl	8007904 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d101      	bne.n	8008300 <putc_bfd+0x5a>
 80082fc:	2300      	movs	r3, #0
 80082fe:	e001      	b.n	8008304 <putc_bfd+0x5e>
 8008300:	f04f 33ff 	mov.w	r3, #4294967295
 8008304:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	609a      	str	r2, [r3, #8]
 8008316:	e000      	b.n	800831a <putc_bfd+0x74>
	if (i < 0) return;
 8008318:	bf00      	nop
}
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	db16      	blt.n	800835e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f103 010c 	add.w	r1, r3, #12
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	461a      	mov	r2, r3
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	f7ff fade 	bl	8007904 <f_write>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d107      	bne.n	800835e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4293      	cmp	r3, r2
 8008356:	d102      	bne.n	800835e <putc_flush+0x3e>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	e001      	b.n	8008362 <putc_flush+0x42>
	return EOF;
 800835e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	605a      	str	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	609a      	str	r2, [r3, #8]
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b096      	sub	sp, #88	@ 0x58
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ffe0 	bl	800836a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80083aa:	e009      	b.n	80083c0 <f_puts+0x2c>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	607a      	str	r2, [r7, #4]
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	f107 030c 	add.w	r3, r7, #12
 80083b8:	4611      	mov	r1, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff ff73 	bl	80082a6 <putc_bfd>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f1      	bne.n	80083ac <f_puts+0x18>
	return putc_flush(&pb);
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff ffa7 	bl	8008320 <putc_flush>
 80083d2:	4603      	mov	r3, r0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3758      	adds	r7, #88	@ 0x58
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80083ea:	2301      	movs	r3, #1
 80083ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80083f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 80083f4:	7a5b      	ldrb	r3, [r3, #9]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d131      	bne.n	8008460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80083fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 80083fe:	7a5b      	ldrb	r3, [r3, #9]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	461a      	mov	r2, r3
 8008404:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 8008406:	2100      	movs	r1, #0
 8008408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800840a:	4b19      	ldr	r3, [pc, #100]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 800840c:	7a5b      	ldrb	r3, [r3, #9]
 800840e:	b2db      	uxtb	r3, r3
 8008410:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800841a:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 800841c:	7a5b      	ldrb	r3, [r3, #9]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	4b13      	ldr	r3, [pc, #76]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 8008424:	4413      	add	r3, r2
 8008426:	79fa      	ldrb	r2, [r7, #7]
 8008428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800842a:	4b11      	ldr	r3, [pc, #68]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 800842c:	7a5b      	ldrb	r3, [r3, #9]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	b2d1      	uxtb	r1, r2
 8008434:	4a0e      	ldr	r2, [pc, #56]	@ (8008470 <FATFS_LinkDriverEx+0x94>)
 8008436:	7251      	strb	r1, [r2, #9]
 8008438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800843a:	7dbb      	ldrb	r3, [r7, #22]
 800843c:	3330      	adds	r3, #48	@ 0x30
 800843e:	b2da      	uxtb	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3301      	adds	r3, #1
 8008448:	223a      	movs	r2, #58	@ 0x3a
 800844a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3302      	adds	r3, #2
 8008450:	222f      	movs	r2, #47	@ 0x2f
 8008452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3303      	adds	r3, #3
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	2000068c 	.word	0x2000068c

08008474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800847e:	2200      	movs	r2, #0
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ffaa 	bl	80083dc <FATFS_LinkDriverEx>
 8008488:	4603      	mov	r3, r0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <sniprintf>:
 8008494:	b40c      	push	{r2, r3}
 8008496:	b530      	push	{r4, r5, lr}
 8008498:	4b17      	ldr	r3, [pc, #92]	@ (80084f8 <sniprintf+0x64>)
 800849a:	1e0c      	subs	r4, r1, #0
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	b09d      	sub	sp, #116	@ 0x74
 80084a0:	da08      	bge.n	80084b4 <sniprintf+0x20>
 80084a2:	238b      	movs	r3, #139	@ 0x8b
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295
 80084aa:	b01d      	add	sp, #116	@ 0x74
 80084ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b0:	b002      	add	sp, #8
 80084b2:	4770      	bx	lr
 80084b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084bc:	bf14      	ite	ne
 80084be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084c2:	4623      	moveq	r3, r4
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	9307      	str	r3, [sp, #28]
 80084c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084cc:	9002      	str	r0, [sp, #8]
 80084ce:	9006      	str	r0, [sp, #24]
 80084d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084d6:	ab21      	add	r3, sp, #132	@ 0x84
 80084d8:	a902      	add	r1, sp, #8
 80084da:	4628      	mov	r0, r5
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	f000 f995 	bl	800880c <_svfiprintf_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	bfbc      	itt	lt
 80084e6:	238b      	movlt	r3, #139	@ 0x8b
 80084e8:	602b      	strlt	r3, [r5, #0]
 80084ea:	2c00      	cmp	r4, #0
 80084ec:	d0dd      	beq.n	80084aa <sniprintf+0x16>
 80084ee:	9b02      	ldr	r3, [sp, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e7d9      	b.n	80084aa <sniprintf+0x16>
 80084f6:	bf00      	nop
 80084f8:	20000018 	.word	0x20000018

080084fc <memset>:
 80084fc:	4402      	add	r2, r0
 80084fe:	4603      	mov	r3, r0
 8008500:	4293      	cmp	r3, r2
 8008502:	d100      	bne.n	8008506 <memset+0xa>
 8008504:	4770      	bx	lr
 8008506:	f803 1b01 	strb.w	r1, [r3], #1
 800850a:	e7f9      	b.n	8008500 <memset+0x4>

0800850c <__errno>:
 800850c:	4b01      	ldr	r3, [pc, #4]	@ (8008514 <__errno+0x8>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000018 	.word	0x20000018

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4d0d      	ldr	r5, [pc, #52]	@ (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	@ (8008554 <__libc_init_array+0x3c>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2600      	movs	r6, #0
 8008524:	42a6      	cmp	r6, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4d0b      	ldr	r5, [pc, #44]	@ (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	@ (800855c <__libc_init_array+0x44>)
 800852c:	f000 fc66 	bl	8008dfc <_init>
 8008530:	1b64      	subs	r4, r4, r5
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2600      	movs	r6, #0
 8008536:	42a6      	cmp	r6, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008540:	4798      	blx	r3
 8008542:	3601      	adds	r6, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f855 3b04 	ldr.w	r3, [r5], #4
 800854a:	4798      	blx	r3
 800854c:	3601      	adds	r6, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	08008f90 	.word	0x08008f90
 8008554:	08008f90 	.word	0x08008f90
 8008558:	08008f90 	.word	0x08008f90
 800855c:	08008f94 	.word	0x08008f94

08008560 <__retarget_lock_acquire_recursive>:
 8008560:	4770      	bx	lr

08008562 <__retarget_lock_release_recursive>:
 8008562:	4770      	bx	lr

08008564 <_free_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4605      	mov	r5, r0
 8008568:	2900      	cmp	r1, #0
 800856a:	d041      	beq.n	80085f0 <_free_r+0x8c>
 800856c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008570:	1f0c      	subs	r4, r1, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	bfb8      	it	lt
 8008576:	18e4      	addlt	r4, r4, r3
 8008578:	f000 f8e0 	bl	800873c <__malloc_lock>
 800857c:	4a1d      	ldr	r2, [pc, #116]	@ (80085f4 <_free_r+0x90>)
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	b933      	cbnz	r3, 8008590 <_free_r+0x2c>
 8008582:	6063      	str	r3, [r4, #4]
 8008584:	6014      	str	r4, [r2, #0]
 8008586:	4628      	mov	r0, r5
 8008588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800858c:	f000 b8dc 	b.w	8008748 <__malloc_unlock>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d908      	bls.n	80085a6 <_free_r+0x42>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	1821      	adds	r1, r4, r0
 8008598:	428b      	cmp	r3, r1
 800859a:	bf01      	itttt	eq
 800859c:	6819      	ldreq	r1, [r3, #0]
 800859e:	685b      	ldreq	r3, [r3, #4]
 80085a0:	1809      	addeq	r1, r1, r0
 80085a2:	6021      	streq	r1, [r4, #0]
 80085a4:	e7ed      	b.n	8008582 <_free_r+0x1e>
 80085a6:	461a      	mov	r2, r3
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	b10b      	cbz	r3, 80085b0 <_free_r+0x4c>
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	d9fa      	bls.n	80085a6 <_free_r+0x42>
 80085b0:	6811      	ldr	r1, [r2, #0]
 80085b2:	1850      	adds	r0, r2, r1
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d10b      	bne.n	80085d0 <_free_r+0x6c>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	4401      	add	r1, r0
 80085bc:	1850      	adds	r0, r2, r1
 80085be:	4283      	cmp	r3, r0
 80085c0:	6011      	str	r1, [r2, #0]
 80085c2:	d1e0      	bne.n	8008586 <_free_r+0x22>
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	6053      	str	r3, [r2, #4]
 80085ca:	4408      	add	r0, r1
 80085cc:	6010      	str	r0, [r2, #0]
 80085ce:	e7da      	b.n	8008586 <_free_r+0x22>
 80085d0:	d902      	bls.n	80085d8 <_free_r+0x74>
 80085d2:	230c      	movs	r3, #12
 80085d4:	602b      	str	r3, [r5, #0]
 80085d6:	e7d6      	b.n	8008586 <_free_r+0x22>
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	1821      	adds	r1, r4, r0
 80085dc:	428b      	cmp	r3, r1
 80085de:	bf04      	itt	eq
 80085e0:	6819      	ldreq	r1, [r3, #0]
 80085e2:	685b      	ldreq	r3, [r3, #4]
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	bf04      	itt	eq
 80085e8:	1809      	addeq	r1, r1, r0
 80085ea:	6021      	streq	r1, [r4, #0]
 80085ec:	6054      	str	r4, [r2, #4]
 80085ee:	e7ca      	b.n	8008586 <_free_r+0x22>
 80085f0:	bd38      	pop	{r3, r4, r5, pc}
 80085f2:	bf00      	nop
 80085f4:	200007dc 	.word	0x200007dc

080085f8 <sbrk_aligned>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008638 <sbrk_aligned+0x40>)
 80085fc:	460c      	mov	r4, r1
 80085fe:	6831      	ldr	r1, [r6, #0]
 8008600:	4605      	mov	r5, r0
 8008602:	b911      	cbnz	r1, 800860a <sbrk_aligned+0x12>
 8008604:	f000 fba6 	bl	8008d54 <_sbrk_r>
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fba1 	bl	8008d54 <_sbrk_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d103      	bne.n	800861e <sbrk_aligned+0x26>
 8008616:	f04f 34ff 	mov.w	r4, #4294967295
 800861a:	4620      	mov	r0, r4
 800861c:	bd70      	pop	{r4, r5, r6, pc}
 800861e:	1cc4      	adds	r4, r0, #3
 8008620:	f024 0403 	bic.w	r4, r4, #3
 8008624:	42a0      	cmp	r0, r4
 8008626:	d0f8      	beq.n	800861a <sbrk_aligned+0x22>
 8008628:	1a21      	subs	r1, r4, r0
 800862a:	4628      	mov	r0, r5
 800862c:	f000 fb92 	bl	8008d54 <_sbrk_r>
 8008630:	3001      	adds	r0, #1
 8008632:	d1f2      	bne.n	800861a <sbrk_aligned+0x22>
 8008634:	e7ef      	b.n	8008616 <sbrk_aligned+0x1e>
 8008636:	bf00      	nop
 8008638:	200007d8 	.word	0x200007d8

0800863c <_malloc_r>:
 800863c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008640:	1ccd      	adds	r5, r1, #3
 8008642:	f025 0503 	bic.w	r5, r5, #3
 8008646:	3508      	adds	r5, #8
 8008648:	2d0c      	cmp	r5, #12
 800864a:	bf38      	it	cc
 800864c:	250c      	movcc	r5, #12
 800864e:	2d00      	cmp	r5, #0
 8008650:	4606      	mov	r6, r0
 8008652:	db01      	blt.n	8008658 <_malloc_r+0x1c>
 8008654:	42a9      	cmp	r1, r5
 8008656:	d904      	bls.n	8008662 <_malloc_r+0x26>
 8008658:	230c      	movs	r3, #12
 800865a:	6033      	str	r3, [r6, #0]
 800865c:	2000      	movs	r0, #0
 800865e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008738 <_malloc_r+0xfc>
 8008666:	f000 f869 	bl	800873c <__malloc_lock>
 800866a:	f8d8 3000 	ldr.w	r3, [r8]
 800866e:	461c      	mov	r4, r3
 8008670:	bb44      	cbnz	r4, 80086c4 <_malloc_r+0x88>
 8008672:	4629      	mov	r1, r5
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff ffbf 	bl	80085f8 <sbrk_aligned>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	4604      	mov	r4, r0
 800867e:	d158      	bne.n	8008732 <_malloc_r+0xf6>
 8008680:	f8d8 4000 	ldr.w	r4, [r8]
 8008684:	4627      	mov	r7, r4
 8008686:	2f00      	cmp	r7, #0
 8008688:	d143      	bne.n	8008712 <_malloc_r+0xd6>
 800868a:	2c00      	cmp	r4, #0
 800868c:	d04b      	beq.n	8008726 <_malloc_r+0xea>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	4639      	mov	r1, r7
 8008692:	4630      	mov	r0, r6
 8008694:	eb04 0903 	add.w	r9, r4, r3
 8008698:	f000 fb5c 	bl	8008d54 <_sbrk_r>
 800869c:	4581      	cmp	r9, r0
 800869e:	d142      	bne.n	8008726 <_malloc_r+0xea>
 80086a0:	6821      	ldr	r1, [r4, #0]
 80086a2:	1a6d      	subs	r5, r5, r1
 80086a4:	4629      	mov	r1, r5
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7ff ffa6 	bl	80085f8 <sbrk_aligned>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d03a      	beq.n	8008726 <_malloc_r+0xea>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	442b      	add	r3, r5
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	f8d8 3000 	ldr.w	r3, [r8]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	bb62      	cbnz	r2, 8008718 <_malloc_r+0xdc>
 80086be:	f8c8 7000 	str.w	r7, [r8]
 80086c2:	e00f      	b.n	80086e4 <_malloc_r+0xa8>
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	1b52      	subs	r2, r2, r5
 80086c8:	d420      	bmi.n	800870c <_malloc_r+0xd0>
 80086ca:	2a0b      	cmp	r2, #11
 80086cc:	d917      	bls.n	80086fe <_malloc_r+0xc2>
 80086ce:	1961      	adds	r1, r4, r5
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	6025      	str	r5, [r4, #0]
 80086d4:	bf18      	it	ne
 80086d6:	6059      	strne	r1, [r3, #4]
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	bf08      	it	eq
 80086dc:	f8c8 1000 	streq.w	r1, [r8]
 80086e0:	5162      	str	r2, [r4, r5]
 80086e2:	604b      	str	r3, [r1, #4]
 80086e4:	4630      	mov	r0, r6
 80086e6:	f000 f82f 	bl	8008748 <__malloc_unlock>
 80086ea:	f104 000b 	add.w	r0, r4, #11
 80086ee:	1d23      	adds	r3, r4, #4
 80086f0:	f020 0007 	bic.w	r0, r0, #7
 80086f4:	1ac2      	subs	r2, r0, r3
 80086f6:	bf1c      	itt	ne
 80086f8:	1a1b      	subne	r3, r3, r0
 80086fa:	50a3      	strne	r3, [r4, r2]
 80086fc:	e7af      	b.n	800865e <_malloc_r+0x22>
 80086fe:	6862      	ldr	r2, [r4, #4]
 8008700:	42a3      	cmp	r3, r4
 8008702:	bf0c      	ite	eq
 8008704:	f8c8 2000 	streq.w	r2, [r8]
 8008708:	605a      	strne	r2, [r3, #4]
 800870a:	e7eb      	b.n	80086e4 <_malloc_r+0xa8>
 800870c:	4623      	mov	r3, r4
 800870e:	6864      	ldr	r4, [r4, #4]
 8008710:	e7ae      	b.n	8008670 <_malloc_r+0x34>
 8008712:	463c      	mov	r4, r7
 8008714:	687f      	ldr	r7, [r7, #4]
 8008716:	e7b6      	b.n	8008686 <_malloc_r+0x4a>
 8008718:	461a      	mov	r2, r3
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	42a3      	cmp	r3, r4
 800871e:	d1fb      	bne.n	8008718 <_malloc_r+0xdc>
 8008720:	2300      	movs	r3, #0
 8008722:	6053      	str	r3, [r2, #4]
 8008724:	e7de      	b.n	80086e4 <_malloc_r+0xa8>
 8008726:	230c      	movs	r3, #12
 8008728:	6033      	str	r3, [r6, #0]
 800872a:	4630      	mov	r0, r6
 800872c:	f000 f80c 	bl	8008748 <__malloc_unlock>
 8008730:	e794      	b.n	800865c <_malloc_r+0x20>
 8008732:	6005      	str	r5, [r0, #0]
 8008734:	e7d6      	b.n	80086e4 <_malloc_r+0xa8>
 8008736:	bf00      	nop
 8008738:	200007dc 	.word	0x200007dc

0800873c <__malloc_lock>:
 800873c:	4801      	ldr	r0, [pc, #4]	@ (8008744 <__malloc_lock+0x8>)
 800873e:	f7ff bf0f 	b.w	8008560 <__retarget_lock_acquire_recursive>
 8008742:	bf00      	nop
 8008744:	200007d4 	.word	0x200007d4

08008748 <__malloc_unlock>:
 8008748:	4801      	ldr	r0, [pc, #4]	@ (8008750 <__malloc_unlock+0x8>)
 800874a:	f7ff bf0a 	b.w	8008562 <__retarget_lock_release_recursive>
 800874e:	bf00      	nop
 8008750:	200007d4 	.word	0x200007d4

08008754 <__ssputs_r>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	688e      	ldr	r6, [r1, #8]
 800875a:	461f      	mov	r7, r3
 800875c:	42be      	cmp	r6, r7
 800875e:	680b      	ldr	r3, [r1, #0]
 8008760:	4682      	mov	sl, r0
 8008762:	460c      	mov	r4, r1
 8008764:	4690      	mov	r8, r2
 8008766:	d82d      	bhi.n	80087c4 <__ssputs_r+0x70>
 8008768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800876c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008770:	d026      	beq.n	80087c0 <__ssputs_r+0x6c>
 8008772:	6965      	ldr	r5, [r4, #20]
 8008774:	6909      	ldr	r1, [r1, #16]
 8008776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877a:	eba3 0901 	sub.w	r9, r3, r1
 800877e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008782:	1c7b      	adds	r3, r7, #1
 8008784:	444b      	add	r3, r9
 8008786:	106d      	asrs	r5, r5, #1
 8008788:	429d      	cmp	r5, r3
 800878a:	bf38      	it	cc
 800878c:	461d      	movcc	r5, r3
 800878e:	0553      	lsls	r3, r2, #21
 8008790:	d527      	bpl.n	80087e2 <__ssputs_r+0x8e>
 8008792:	4629      	mov	r1, r5
 8008794:	f7ff ff52 	bl	800863c <_malloc_r>
 8008798:	4606      	mov	r6, r0
 800879a:	b360      	cbz	r0, 80087f6 <__ssputs_r+0xa2>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	464a      	mov	r2, r9
 80087a0:	f000 fae8 	bl	8008d74 <memcpy>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	6126      	str	r6, [r4, #16]
 80087b2:	6165      	str	r5, [r4, #20]
 80087b4:	444e      	add	r6, r9
 80087b6:	eba5 0509 	sub.w	r5, r5, r9
 80087ba:	6026      	str	r6, [r4, #0]
 80087bc:	60a5      	str	r5, [r4, #8]
 80087be:	463e      	mov	r6, r7
 80087c0:	42be      	cmp	r6, r7
 80087c2:	d900      	bls.n	80087c6 <__ssputs_r+0x72>
 80087c4:	463e      	mov	r6, r7
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	4632      	mov	r2, r6
 80087ca:	4641      	mov	r1, r8
 80087cc:	f000 faa8 	bl	8008d20 <memmove>
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	1b9b      	subs	r3, r3, r6
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4433      	add	r3, r6
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	2000      	movs	r0, #0
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	462a      	mov	r2, r5
 80087e4:	f000 fad4 	bl	8008d90 <_realloc_r>
 80087e8:	4606      	mov	r6, r0
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1e0      	bne.n	80087b0 <__ssputs_r+0x5c>
 80087ee:	6921      	ldr	r1, [r4, #16]
 80087f0:	4650      	mov	r0, sl
 80087f2:	f7ff feb7 	bl	8008564 <_free_r>
 80087f6:	230c      	movs	r3, #12
 80087f8:	f8ca 3000 	str.w	r3, [sl]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e7e9      	b.n	80087de <__ssputs_r+0x8a>
	...

0800880c <_svfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	4698      	mov	r8, r3
 8008812:	898b      	ldrh	r3, [r1, #12]
 8008814:	061b      	lsls	r3, r3, #24
 8008816:	b09d      	sub	sp, #116	@ 0x74
 8008818:	4607      	mov	r7, r0
 800881a:	460d      	mov	r5, r1
 800881c:	4614      	mov	r4, r2
 800881e:	d510      	bpl.n	8008842 <_svfiprintf_r+0x36>
 8008820:	690b      	ldr	r3, [r1, #16]
 8008822:	b973      	cbnz	r3, 8008842 <_svfiprintf_r+0x36>
 8008824:	2140      	movs	r1, #64	@ 0x40
 8008826:	f7ff ff09 	bl	800863c <_malloc_r>
 800882a:	6028      	str	r0, [r5, #0]
 800882c:	6128      	str	r0, [r5, #16]
 800882e:	b930      	cbnz	r0, 800883e <_svfiprintf_r+0x32>
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	b01d      	add	sp, #116	@ 0x74
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	2340      	movs	r3, #64	@ 0x40
 8008840:	616b      	str	r3, [r5, #20]
 8008842:	2300      	movs	r3, #0
 8008844:	9309      	str	r3, [sp, #36]	@ 0x24
 8008846:	2320      	movs	r3, #32
 8008848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800884c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008850:	2330      	movs	r3, #48	@ 0x30
 8008852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f0 <_svfiprintf_r+0x1e4>
 8008856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800885a:	f04f 0901 	mov.w	r9, #1
 800885e:	4623      	mov	r3, r4
 8008860:	469a      	mov	sl, r3
 8008862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008866:	b10a      	cbz	r2, 800886c <_svfiprintf_r+0x60>
 8008868:	2a25      	cmp	r2, #37	@ 0x25
 800886a:	d1f9      	bne.n	8008860 <_svfiprintf_r+0x54>
 800886c:	ebba 0b04 	subs.w	fp, sl, r4
 8008870:	d00b      	beq.n	800888a <_svfiprintf_r+0x7e>
 8008872:	465b      	mov	r3, fp
 8008874:	4622      	mov	r2, r4
 8008876:	4629      	mov	r1, r5
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff ff6b 	bl	8008754 <__ssputs_r>
 800887e:	3001      	adds	r0, #1
 8008880:	f000 80a7 	beq.w	80089d2 <_svfiprintf_r+0x1c6>
 8008884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008886:	445a      	add	r2, fp
 8008888:	9209      	str	r2, [sp, #36]	@ 0x24
 800888a:	f89a 3000 	ldrb.w	r3, [sl]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 809f 	beq.w	80089d2 <_svfiprintf_r+0x1c6>
 8008894:	2300      	movs	r3, #0
 8008896:	f04f 32ff 	mov.w	r2, #4294967295
 800889a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889e:	f10a 0a01 	add.w	sl, sl, #1
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ac:	4654      	mov	r4, sl
 80088ae:	2205      	movs	r2, #5
 80088b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b4:	484e      	ldr	r0, [pc, #312]	@ (80089f0 <_svfiprintf_r+0x1e4>)
 80088b6:	f7f7 fc93 	bl	80001e0 <memchr>
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	b9d8      	cbnz	r0, 80088f6 <_svfiprintf_r+0xea>
 80088be:	06d0      	lsls	r0, r2, #27
 80088c0:	bf44      	itt	mi
 80088c2:	2320      	movmi	r3, #32
 80088c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c8:	0711      	lsls	r1, r2, #28
 80088ca:	bf44      	itt	mi
 80088cc:	232b      	movmi	r3, #43	@ 0x2b
 80088ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d2:	f89a 3000 	ldrb.w	r3, [sl]
 80088d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088d8:	d015      	beq.n	8008906 <_svfiprintf_r+0xfa>
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4654      	mov	r4, sl
 80088de:	2000      	movs	r0, #0
 80088e0:	f04f 0c0a 	mov.w	ip, #10
 80088e4:	4621      	mov	r1, r4
 80088e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ea:	3b30      	subs	r3, #48	@ 0x30
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	d94b      	bls.n	8008988 <_svfiprintf_r+0x17c>
 80088f0:	b1b0      	cbz	r0, 8008920 <_svfiprintf_r+0x114>
 80088f2:	9207      	str	r2, [sp, #28]
 80088f4:	e014      	b.n	8008920 <_svfiprintf_r+0x114>
 80088f6:	eba0 0308 	sub.w	r3, r0, r8
 80088fa:	fa09 f303 	lsl.w	r3, r9, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	46a2      	mov	sl, r4
 8008904:	e7d2      	b.n	80088ac <_svfiprintf_r+0xa0>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	1d19      	adds	r1, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	9103      	str	r1, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfbb      	ittet	lt
 8008912:	425b      	neglt	r3, r3
 8008914:	f042 0202 	orrlt.w	r2, r2, #2
 8008918:	9307      	strge	r3, [sp, #28]
 800891a:	9307      	strlt	r3, [sp, #28]
 800891c:	bfb8      	it	lt
 800891e:	9204      	strlt	r2, [sp, #16]
 8008920:	7823      	ldrb	r3, [r4, #0]
 8008922:	2b2e      	cmp	r3, #46	@ 0x2e
 8008924:	d10a      	bne.n	800893c <_svfiprintf_r+0x130>
 8008926:	7863      	ldrb	r3, [r4, #1]
 8008928:	2b2a      	cmp	r3, #42	@ 0x2a
 800892a:	d132      	bne.n	8008992 <_svfiprintf_r+0x186>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9203      	str	r2, [sp, #12]
 8008934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008938:	3402      	adds	r4, #2
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a00 <_svfiprintf_r+0x1f4>
 8008940:	7821      	ldrb	r1, [r4, #0]
 8008942:	2203      	movs	r2, #3
 8008944:	4650      	mov	r0, sl
 8008946:	f7f7 fc4b 	bl	80001e0 <memchr>
 800894a:	b138      	cbz	r0, 800895c <_svfiprintf_r+0x150>
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	eba0 000a 	sub.w	r0, r0, sl
 8008952:	2240      	movs	r2, #64	@ 0x40
 8008954:	4082      	lsls	r2, r0
 8008956:	4313      	orrs	r3, r2
 8008958:	3401      	adds	r4, #1
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008960:	4824      	ldr	r0, [pc, #144]	@ (80089f4 <_svfiprintf_r+0x1e8>)
 8008962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008966:	2206      	movs	r2, #6
 8008968:	f7f7 fc3a 	bl	80001e0 <memchr>
 800896c:	2800      	cmp	r0, #0
 800896e:	d036      	beq.n	80089de <_svfiprintf_r+0x1d2>
 8008970:	4b21      	ldr	r3, [pc, #132]	@ (80089f8 <_svfiprintf_r+0x1ec>)
 8008972:	bb1b      	cbnz	r3, 80089bc <_svfiprintf_r+0x1b0>
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	3307      	adds	r3, #7
 8008978:	f023 0307 	bic.w	r3, r3, #7
 800897c:	3308      	adds	r3, #8
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008982:	4433      	add	r3, r6
 8008984:	9309      	str	r3, [sp, #36]	@ 0x24
 8008986:	e76a      	b.n	800885e <_svfiprintf_r+0x52>
 8008988:	fb0c 3202 	mla	r2, ip, r2, r3
 800898c:	460c      	mov	r4, r1
 800898e:	2001      	movs	r0, #1
 8008990:	e7a8      	b.n	80088e4 <_svfiprintf_r+0xd8>
 8008992:	2300      	movs	r3, #0
 8008994:	3401      	adds	r4, #1
 8008996:	9305      	str	r3, [sp, #20]
 8008998:	4619      	mov	r1, r3
 800899a:	f04f 0c0a 	mov.w	ip, #10
 800899e:	4620      	mov	r0, r4
 80089a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a4:	3a30      	subs	r2, #48	@ 0x30
 80089a6:	2a09      	cmp	r2, #9
 80089a8:	d903      	bls.n	80089b2 <_svfiprintf_r+0x1a6>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0c6      	beq.n	800893c <_svfiprintf_r+0x130>
 80089ae:	9105      	str	r1, [sp, #20]
 80089b0:	e7c4      	b.n	800893c <_svfiprintf_r+0x130>
 80089b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b6:	4604      	mov	r4, r0
 80089b8:	2301      	movs	r3, #1
 80089ba:	e7f0      	b.n	800899e <_svfiprintf_r+0x192>
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	462a      	mov	r2, r5
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <_svfiprintf_r+0x1f0>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4638      	mov	r0, r7
 80089c8:	f3af 8000 	nop.w
 80089cc:	1c42      	adds	r2, r0, #1
 80089ce:	4606      	mov	r6, r0
 80089d0:	d1d6      	bne.n	8008980 <_svfiprintf_r+0x174>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	065b      	lsls	r3, r3, #25
 80089d6:	f53f af2d 	bmi.w	8008834 <_svfiprintf_r+0x28>
 80089da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089dc:	e72c      	b.n	8008838 <_svfiprintf_r+0x2c>
 80089de:	ab03      	add	r3, sp, #12
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	462a      	mov	r2, r5
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <_svfiprintf_r+0x1f0>)
 80089e6:	a904      	add	r1, sp, #16
 80089e8:	4638      	mov	r0, r7
 80089ea:	f000 f879 	bl	8008ae0 <_printf_i>
 80089ee:	e7ed      	b.n	80089cc <_svfiprintf_r+0x1c0>
 80089f0:	08008f54 	.word	0x08008f54
 80089f4:	08008f5e 	.word	0x08008f5e
 80089f8:	00000000 	.word	0x00000000
 80089fc:	08008755 	.word	0x08008755
 8008a00:	08008f5a 	.word	0x08008f5a

08008a04 <_printf_common>:
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	4616      	mov	r6, r2
 8008a0a:	4698      	mov	r8, r3
 8008a0c:	688a      	ldr	r2, [r1, #8]
 8008a0e:	690b      	ldr	r3, [r1, #16]
 8008a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	bfb8      	it	lt
 8008a18:	4613      	movlt	r3, r2
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a20:	4607      	mov	r7, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	b10a      	cbz	r2, 8008a2a <_printf_common+0x26>
 8008a26:	3301      	adds	r3, #1
 8008a28:	6033      	str	r3, [r6, #0]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	0699      	lsls	r1, r3, #26
 8008a2e:	bf42      	ittt	mi
 8008a30:	6833      	ldrmi	r3, [r6, #0]
 8008a32:	3302      	addmi	r3, #2
 8008a34:	6033      	strmi	r3, [r6, #0]
 8008a36:	6825      	ldr	r5, [r4, #0]
 8008a38:	f015 0506 	ands.w	r5, r5, #6
 8008a3c:	d106      	bne.n	8008a4c <_printf_common+0x48>
 8008a3e:	f104 0a19 	add.w	sl, r4, #25
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	6832      	ldr	r2, [r6, #0]
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	dc26      	bgt.n	8008a9a <_printf_common+0x96>
 8008a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	3b00      	subs	r3, #0
 8008a54:	bf18      	it	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	0692      	lsls	r2, r2, #26
 8008a5a:	d42b      	bmi.n	8008ab4 <_printf_common+0xb0>
 8008a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a60:	4641      	mov	r1, r8
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c8      	blx	r9
 8008a66:	3001      	adds	r0, #1
 8008a68:	d01e      	beq.n	8008aa8 <_printf_common+0xa4>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	f003 0306 	and.w	r3, r3, #6
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	bf02      	ittt	eq
 8008a76:	68e5      	ldreq	r5, [r4, #12]
 8008a78:	6833      	ldreq	r3, [r6, #0]
 8008a7a:	1aed      	subeq	r5, r5, r3
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	bf0c      	ite	eq
 8008a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a84:	2500      	movne	r5, #0
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bfc4      	itt	gt
 8008a8a:	1a9b      	subgt	r3, r3, r2
 8008a8c:	18ed      	addgt	r5, r5, r3
 8008a8e:	2600      	movs	r6, #0
 8008a90:	341a      	adds	r4, #26
 8008a92:	42b5      	cmp	r5, r6
 8008a94:	d11a      	bne.n	8008acc <_printf_common+0xc8>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e008      	b.n	8008aac <_printf_common+0xa8>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	47c8      	blx	r9
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d103      	bne.n	8008ab0 <_printf_common+0xac>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	e7c6      	b.n	8008a42 <_printf_common+0x3e>
 8008ab4:	18e1      	adds	r1, r4, r3
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	2030      	movs	r0, #48	@ 0x30
 8008aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008abe:	4422      	add	r2, r4
 8008ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac8:	3302      	adds	r3, #2
 8008aca:	e7c7      	b.n	8008a5c <_printf_common+0x58>
 8008acc:	2301      	movs	r3, #1
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	47c8      	blx	r9
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d0e6      	beq.n	8008aa8 <_printf_common+0xa4>
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7d9      	b.n	8008a92 <_printf_common+0x8e>
	...

08008ae0 <_printf_i>:
 8008ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	7e0f      	ldrb	r7, [r1, #24]
 8008ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae8:	2f78      	cmp	r7, #120	@ 0x78
 8008aea:	4691      	mov	r9, r2
 8008aec:	4680      	mov	r8, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	469a      	mov	sl, r3
 8008af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008af6:	d807      	bhi.n	8008b08 <_printf_i+0x28>
 8008af8:	2f62      	cmp	r7, #98	@ 0x62
 8008afa:	d80a      	bhi.n	8008b12 <_printf_i+0x32>
 8008afc:	2f00      	cmp	r7, #0
 8008afe:	f000 80d2 	beq.w	8008ca6 <_printf_i+0x1c6>
 8008b02:	2f58      	cmp	r7, #88	@ 0x58
 8008b04:	f000 80b9 	beq.w	8008c7a <_printf_i+0x19a>
 8008b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b10:	e03a      	b.n	8008b88 <_printf_i+0xa8>
 8008b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b16:	2b15      	cmp	r3, #21
 8008b18:	d8f6      	bhi.n	8008b08 <_printf_i+0x28>
 8008b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8008b20 <_printf_i+0x40>)
 8008b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b8d 	.word	0x08008b8d
 8008b28:	08008b09 	.word	0x08008b09
 8008b2c:	08008b09 	.word	0x08008b09
 8008b30:	08008b09 	.word	0x08008b09
 8008b34:	08008b09 	.word	0x08008b09
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008b09 	.word	0x08008b09
 8008b40:	08008b09 	.word	0x08008b09
 8008b44:	08008b09 	.word	0x08008b09
 8008b48:	08008b09 	.word	0x08008b09
 8008b4c:	08008c8d 	.word	0x08008c8d
 8008b50:	08008bb7 	.word	0x08008bb7
 8008b54:	08008c47 	.word	0x08008c47
 8008b58:	08008b09 	.word	0x08008b09
 8008b5c:	08008b09 	.word	0x08008b09
 8008b60:	08008caf 	.word	0x08008caf
 8008b64:	08008b09 	.word	0x08008b09
 8008b68:	08008bb7 	.word	0x08008bb7
 8008b6c:	08008b09 	.word	0x08008b09
 8008b70:	08008b09 	.word	0x08008b09
 8008b74:	08008c4f 	.word	0x08008c4f
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6032      	str	r2, [r6, #0]
 8008b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e09d      	b.n	8008cc8 <_printf_i+0x1e8>
 8008b8c:	6833      	ldr	r3, [r6, #0]
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	6031      	str	r1, [r6, #0]
 8008b94:	0606      	lsls	r6, r0, #24
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0xbc>
 8008b98:	681d      	ldr	r5, [r3, #0]
 8008b9a:	e003      	b.n	8008ba4 <_printf_i+0xc4>
 8008b9c:	0645      	lsls	r5, r0, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0xb8>
 8008ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	da03      	bge.n	8008bb0 <_printf_i+0xd0>
 8008ba8:	232d      	movs	r3, #45	@ 0x2d
 8008baa:	426d      	negs	r5, r5
 8008bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb0:	4859      	ldr	r0, [pc, #356]	@ (8008d18 <_printf_i+0x238>)
 8008bb2:	230a      	movs	r3, #10
 8008bb4:	e011      	b.n	8008bda <_printf_i+0xfa>
 8008bb6:	6821      	ldr	r1, [r4, #0]
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	0608      	lsls	r0, r1, #24
 8008bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc0:	d402      	bmi.n	8008bc8 <_printf_i+0xe8>
 8008bc2:	0649      	lsls	r1, r1, #25
 8008bc4:	bf48      	it	mi
 8008bc6:	b2ad      	uxthmi	r5, r5
 8008bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bca:	4853      	ldr	r0, [pc, #332]	@ (8008d18 <_printf_i+0x238>)
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	bf14      	ite	ne
 8008bd0:	230a      	movne	r3, #10
 8008bd2:	2308      	moveq	r3, #8
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bda:	6866      	ldr	r6, [r4, #4]
 8008bdc:	60a6      	str	r6, [r4, #8]
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	bfa2      	ittt	ge
 8008be2:	6821      	ldrge	r1, [r4, #0]
 8008be4:	f021 0104 	bicge.w	r1, r1, #4
 8008be8:	6021      	strge	r1, [r4, #0]
 8008bea:	b90d      	cbnz	r5, 8008bf0 <_printf_i+0x110>
 8008bec:	2e00      	cmp	r6, #0
 8008bee:	d04b      	beq.n	8008c88 <_printf_i+0x1a8>
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8008bfa:	5dc7      	ldrb	r7, [r0, r7]
 8008bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c00:	462f      	mov	r7, r5
 8008c02:	42bb      	cmp	r3, r7
 8008c04:	460d      	mov	r5, r1
 8008c06:	d9f4      	bls.n	8008bf2 <_printf_i+0x112>
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d10b      	bne.n	8008c24 <_printf_i+0x144>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	07df      	lsls	r7, r3, #31
 8008c10:	d508      	bpl.n	8008c24 <_printf_i+0x144>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	6861      	ldr	r1, [r4, #4]
 8008c16:	4299      	cmp	r1, r3
 8008c18:	bfde      	ittt	le
 8008c1a:	2330      	movle	r3, #48	@ 0x30
 8008c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c24:	1b92      	subs	r2, r2, r6
 8008c26:	6122      	str	r2, [r4, #16]
 8008c28:	f8cd a000 	str.w	sl, [sp]
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	aa03      	add	r2, sp, #12
 8008c30:	4621      	mov	r1, r4
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7ff fee6 	bl	8008a04 <_printf_common>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d14a      	bne.n	8008cd2 <_printf_i+0x1f2>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b004      	add	sp, #16
 8008c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f043 0320 	orr.w	r3, r3, #32
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	4833      	ldr	r0, [pc, #204]	@ (8008d1c <_printf_i+0x23c>)
 8008c50:	2778      	movs	r7, #120	@ 0x78
 8008c52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	6831      	ldr	r1, [r6, #0]
 8008c5a:	061f      	lsls	r7, r3, #24
 8008c5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c60:	d402      	bmi.n	8008c68 <_printf_i+0x188>
 8008c62:	065f      	lsls	r7, r3, #25
 8008c64:	bf48      	it	mi
 8008c66:	b2ad      	uxthmi	r5, r5
 8008c68:	6031      	str	r1, [r6, #0]
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	bf44      	itt	mi
 8008c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c72:	6023      	strmi	r3, [r4, #0]
 8008c74:	b11d      	cbz	r5, 8008c7e <_printf_i+0x19e>
 8008c76:	2310      	movs	r3, #16
 8008c78:	e7ac      	b.n	8008bd4 <_printf_i+0xf4>
 8008c7a:	4827      	ldr	r0, [pc, #156]	@ (8008d18 <_printf_i+0x238>)
 8008c7c:	e7e9      	b.n	8008c52 <_printf_i+0x172>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	f023 0320 	bic.w	r3, r3, #32
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	e7f6      	b.n	8008c76 <_printf_i+0x196>
 8008c88:	4616      	mov	r6, r2
 8008c8a:	e7bd      	b.n	8008c08 <_printf_i+0x128>
 8008c8c:	6833      	ldr	r3, [r6, #0]
 8008c8e:	6825      	ldr	r5, [r4, #0]
 8008c90:	6961      	ldr	r1, [r4, #20]
 8008c92:	1d18      	adds	r0, r3, #4
 8008c94:	6030      	str	r0, [r6, #0]
 8008c96:	062e      	lsls	r6, r5, #24
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0x1c0>
 8008c9c:	6019      	str	r1, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <_printf_i+0x1c6>
 8008ca0:	0668      	lsls	r0, r5, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0x1bc>
 8008ca4:	8019      	strh	r1, [r3, #0]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6123      	str	r3, [r4, #16]
 8008caa:	4616      	mov	r6, r2
 8008cac:	e7bc      	b.n	8008c28 <_printf_i+0x148>
 8008cae:	6833      	ldr	r3, [r6, #0]
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	6032      	str	r2, [r6, #0]
 8008cb4:	681e      	ldr	r6, [r3, #0]
 8008cb6:	6862      	ldr	r2, [r4, #4]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7f7 fa90 	bl	80001e0 <memchr>
 8008cc0:	b108      	cbz	r0, 8008cc6 <_printf_i+0x1e6>
 8008cc2:	1b80      	subs	r0, r0, r6
 8008cc4:	6060      	str	r0, [r4, #4]
 8008cc6:	6863      	ldr	r3, [r4, #4]
 8008cc8:	6123      	str	r3, [r4, #16]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd0:	e7aa      	b.n	8008c28 <_printf_i+0x148>
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	47d0      	blx	sl
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d0ad      	beq.n	8008c3c <_printf_i+0x15c>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	079b      	lsls	r3, r3, #30
 8008ce4:	d413      	bmi.n	8008d0e <_printf_i+0x22e>
 8008ce6:	68e0      	ldr	r0, [r4, #12]
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	4298      	cmp	r0, r3
 8008cec:	bfb8      	it	lt
 8008cee:	4618      	movlt	r0, r3
 8008cf0:	e7a6      	b.n	8008c40 <_printf_i+0x160>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4632      	mov	r2, r6
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	47d0      	blx	sl
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d09d      	beq.n	8008c3c <_printf_i+0x15c>
 8008d00:	3501      	adds	r5, #1
 8008d02:	68e3      	ldr	r3, [r4, #12]
 8008d04:	9903      	ldr	r1, [sp, #12]
 8008d06:	1a5b      	subs	r3, r3, r1
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dcf2      	bgt.n	8008cf2 <_printf_i+0x212>
 8008d0c:	e7eb      	b.n	8008ce6 <_printf_i+0x206>
 8008d0e:	2500      	movs	r5, #0
 8008d10:	f104 0619 	add.w	r6, r4, #25
 8008d14:	e7f5      	b.n	8008d02 <_printf_i+0x222>
 8008d16:	bf00      	nop
 8008d18:	08008f65 	.word	0x08008f65
 8008d1c:	08008f76 	.word	0x08008f76

08008d20 <memmove>:
 8008d20:	4288      	cmp	r0, r1
 8008d22:	b510      	push	{r4, lr}
 8008d24:	eb01 0402 	add.w	r4, r1, r2
 8008d28:	d902      	bls.n	8008d30 <memmove+0x10>
 8008d2a:	4284      	cmp	r4, r0
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	d807      	bhi.n	8008d40 <memmove+0x20>
 8008d30:	1e43      	subs	r3, r0, #1
 8008d32:	42a1      	cmp	r1, r4
 8008d34:	d008      	beq.n	8008d48 <memmove+0x28>
 8008d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d3e:	e7f8      	b.n	8008d32 <memmove+0x12>
 8008d40:	4402      	add	r2, r0
 8008d42:	4601      	mov	r1, r0
 8008d44:	428a      	cmp	r2, r1
 8008d46:	d100      	bne.n	8008d4a <memmove+0x2a>
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d52:	e7f7      	b.n	8008d44 <memmove+0x24>

08008d54 <_sbrk_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d06      	ldr	r5, [pc, #24]	@ (8008d70 <_sbrk_r+0x1c>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	f7f9 fa02 	bl	8002168 <_sbrk>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_sbrk_r+0x1a>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_sbrk_r+0x1a>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200007d0 	.word	0x200007d0

08008d74 <memcpy>:
 8008d74:	440a      	add	r2, r1
 8008d76:	4291      	cmp	r1, r2
 8008d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d7c:	d100      	bne.n	8008d80 <memcpy+0xc>
 8008d7e:	4770      	bx	lr
 8008d80:	b510      	push	{r4, lr}
 8008d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	d1f9      	bne.n	8008d82 <memcpy+0xe>
 8008d8e:	bd10      	pop	{r4, pc}

08008d90 <_realloc_r>:
 8008d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d94:	4680      	mov	r8, r0
 8008d96:	4615      	mov	r5, r2
 8008d98:	460c      	mov	r4, r1
 8008d9a:	b921      	cbnz	r1, 8008da6 <_realloc_r+0x16>
 8008d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	4611      	mov	r1, r2
 8008da2:	f7ff bc4b 	b.w	800863c <_malloc_r>
 8008da6:	b92a      	cbnz	r2, 8008db4 <_realloc_r+0x24>
 8008da8:	f7ff fbdc 	bl	8008564 <_free_r>
 8008dac:	2400      	movs	r4, #0
 8008dae:	4620      	mov	r0, r4
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	f000 f81a 	bl	8008dec <_malloc_usable_size_r>
 8008db8:	4285      	cmp	r5, r0
 8008dba:	4606      	mov	r6, r0
 8008dbc:	d802      	bhi.n	8008dc4 <_realloc_r+0x34>
 8008dbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008dc2:	d8f4      	bhi.n	8008dae <_realloc_r+0x1e>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7ff fc38 	bl	800863c <_malloc_r>
 8008dcc:	4607      	mov	r7, r0
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0ec      	beq.n	8008dac <_realloc_r+0x1c>
 8008dd2:	42b5      	cmp	r5, r6
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	bf28      	it	cs
 8008dda:	4632      	movcs	r2, r6
 8008ddc:	f7ff ffca 	bl	8008d74 <memcpy>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4640      	mov	r0, r8
 8008de4:	f7ff fbbe 	bl	8008564 <_free_r>
 8008de8:	463c      	mov	r4, r7
 8008dea:	e7e0      	b.n	8008dae <_realloc_r+0x1e>

08008dec <_malloc_usable_size_r>:
 8008dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df0:	1f18      	subs	r0, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bfbc      	itt	lt
 8008df6:	580b      	ldrlt	r3, [r1, r0]
 8008df8:	18c0      	addlt	r0, r0, r3
 8008dfa:	4770      	bx	lr

08008dfc <_init>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	bf00      	nop
 8008e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e02:	bc08      	pop	{r3}
 8008e04:	469e      	mov	lr, r3
 8008e06:	4770      	bx	lr

08008e08 <_fini>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr
