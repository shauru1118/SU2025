
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000360c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080037ac  080037ac  000047ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003804  08003804  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003808  08003808  00004808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800380c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08003874  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003874  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c8b  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  0000bd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0000d418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004dc  00000000  00000000  0000dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015994  00000000  00000000  0000df8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000864a  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c3d  00000000  00000000  0002bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0ba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e5c  00000000  00000000  000b0bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000b2a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003794 	.word	0x08003794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003794 	.word	0x08003794

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000574:	b08b      	sub	sp, #44	@ 0x2c
 8000576:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 ff2a 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8e2 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f980 	bl	8000884 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000584:	f000 f948 	bl	8000818 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	LED2_GPIO_Port->ODR |= LED2_Pin;
 8000588:	4b66      	ldr	r3, [pc, #408]	@ (8000724 <main+0x1b4>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a65      	ldr	r2, [pc, #404]	@ (8000724 <main+0x1b4>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 8000594:	4b63      	ldr	r3, [pc, #396]	@ (8000724 <main+0x1b4>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a62      	ldr	r2, [pc, #392]	@ (8000724 <main+0x1b4>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 80005a0:	4b60      	ldr	r3, [pc, #384]	@ (8000724 <main+0x1b4>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a5f      	ldr	r2, [pc, #380]	@ (8000724 <main+0x1b4>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6153      	str	r3, [r2, #20]

	HAL_Delay(2000);
 80005ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005b0:	f000 ff80 	bl	80014b4 <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 80005b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000724 <main+0x1b4>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a5a      	ldr	r2, [pc, #360]	@ (8000724 <main+0x1b4>)
 80005ba:	f023 0301 	bic.w	r3, r3, #1
 80005be:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 80005c0:	4b58      	ldr	r3, [pc, #352]	@ (8000724 <main+0x1b4>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a57      	ldr	r2, [pc, #348]	@ (8000724 <main+0x1b4>)
 80005c6:	f023 0302 	bic.w	r3, r3, #2
 80005ca:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 80005cc:	4b55      	ldr	r3, [pc, #340]	@ (8000724 <main+0x1b4>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a54      	ldr	r2, [pc, #336]	@ (8000724 <main+0x1b4>)
 80005d2:	f023 0304 	bic.w	r3, r3, #4
 80005d6:	6153      	str	r3, [r2, #20]

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin))
 80005d8:	2220      	movs	r2, #32
 80005da:	4953      	ldr	r1, [pc, #332]	@ (8000728 <main+0x1b8>)
 80005dc:	4853      	ldr	r0, [pc, #332]	@ (800072c <main+0x1bc>)
 80005de:	f000 f9f3 	bl	80009c8 <LORA_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <main+0x80>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80005e8:	2102      	movs	r1, #2
 80005ea:	484e      	ldr	r0, [pc, #312]	@ (8000724 <main+0x1b4>)
 80005ec:	f001 fa09 	bl	8001a02 <HAL_GPIO_TogglePin>
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 80005f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000724 <main+0x1b4>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a4b      	ldr	r2, [pc, #300]	@ (8000724 <main+0x1b4>)
 80005f6:	f023 0302 	bic.w	r3, r3, #2
 80005fa:	6153      	str	r3, [r2, #20]

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 80005fc:	2201      	movs	r2, #1
 80005fe:	494c      	ldr	r1, [pc, #304]	@ (8000730 <main+0x1c0>)
 8000600:	484a      	ldr	r0, [pc, #296]	@ (800072c <main+0x1bc>)
 8000602:	f000 fb1f 	bl	8000c44 <MS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000606:	466b      	mov	r3, sp
 8000608:	461e      	mov	r6, r3
		MS_ReadData(MS_Data);
 800060a:	484a      	ldr	r0, [pc, #296]	@ (8000734 <main+0x1c4>)
 800060c:	f000 fb40 	bl	8000c90 <MS_ReadData>

		SensorsData.press = MS_Data[0];
 8000610:	4b48      	ldr	r3, [pc, #288]	@ (8000734 <main+0x1c4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <main+0x1c8>)
 8000616:	6013      	str	r3, [r2, #0]
		SensorsData.temp = MS_Data[1];
 8000618:	4b46      	ldr	r3, [pc, #280]	@ (8000734 <main+0x1c4>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a46      	ldr	r2, [pc, #280]	@ (8000738 <main+0x1c8>)
 800061e:	6053      	str	r3, [r2, #4]

		char buffer[sizeOfBufferToLora];
 8000620:	4b46      	ldr	r3, [pc, #280]	@ (800073c <main+0x1cc>)
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	1e4b      	subs	r3, r1, #1
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	460a      	mov	r2, r1
 800062a:	2300      	movs	r3, #0
 800062c:	4614      	mov	r4, r2
 800062e:	461d      	mov	r5, r3
 8000630:	f04f 0200 	mov.w	r2, #0
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	00eb      	lsls	r3, r5, #3
 800063a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800063e:	00e2      	lsls	r2, r4, #3
 8000640:	460a      	mov	r2, r1
 8000642:	2300      	movs	r3, #0
 8000644:	4690      	mov	r8, r2
 8000646:	4699      	mov	r9, r3
 8000648:	f04f 0200 	mov.w	r2, #0
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000654:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000658:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800065c:	460b      	mov	r3, r1
 800065e:	3307      	adds	r3, #7
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	ebad 0d03 	sub.w	sp, sp, r3
 8000668:	ab02      	add	r3, sp, #8
 800066a:	3300      	adds	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

		snprintf(buffer, sizeOfBufferToLora, "%ld;%ld;\n", SensorsData.press,
 800066e:	4b33      	ldr	r3, [pc, #204]	@ (800073c <main+0x1cc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <main+0x1c8>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <main+0x1c8>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4613      	mov	r3, r2
 8000680:	4a2f      	ldr	r2, [pc, #188]	@ (8000740 <main+0x1d0>)
 8000682:	6978      	ldr	r0, [r7, #20]
 8000684:	f002 fbd2 	bl	8002e2c <sniprintf>
				SensorsData.temp);

		uint8_t bufferToLora[sizeOfBufferToLora];
 8000688:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <main+0x1cc>)
 800068a:	6819      	ldr	r1, [r3, #0]
 800068c:	1e4b      	subs	r3, r1, #1
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	460a      	mov	r2, r1
 8000692:	2300      	movs	r3, #0
 8000694:	4692      	mov	sl, r2
 8000696:	469b      	mov	fp, r3
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80006a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80006a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80006ac:	460a      	mov	r2, r1
 80006ae:	2300      	movs	r3, #0
 80006b0:	603a      	str	r2, [r7, #0]
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	00c3      	lsls	r3, r0, #3
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	00c2      	lsls	r2, r0, #3
 80006ca:	460b      	mov	r3, r1
 80006cc:	3307      	adds	r3, #7
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	ebad 0d03 	sub.w	sp, sp, r3
 80006d6:	ab02      	add	r3, sp, #8
 80006d8:	3300      	adds	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]

		for (int i = 0; i < sizeOfBufferToLora; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	e00b      	b.n	80006fa <main+0x18a>
			bufferToLora[i] = (uint8_t) buffer[i];
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	4413      	add	r3, r2
 80006e8:	7819      	ldrb	r1, [r3, #0]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	4413      	add	r3, r2
 80006f0:	460a      	mov	r2, r1
 80006f2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeOfBufferToLora; i++) {
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	3301      	adds	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <main+0x1cc>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbee      	blt.n	80006e2 <main+0x172>
		}

		LORA_TransmitData(bufferToLora, sizeOfBufferToLora);
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <main+0x1cc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 fa41 	bl	8000b94 <LORA_TransmitData>

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000712:	2101      	movs	r1, #1
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <main+0x1b4>)
 8000716:	f001 f974 	bl	8001a02 <HAL_GPIO_TogglePin>

		HAL_Delay(100);
 800071a:	2064      	movs	r0, #100	@ 0x64
 800071c:	f000 feca 	bl	80014b4 <HAL_Delay>
 8000720:	46b5      	mov	sp, r6
	while (1) {
 8000722:	e770      	b.n	8000606 <main+0x96>
 8000724:	40020000 	.word	0x40020000
 8000728:	40020800 	.word	0x40020800
 800072c:	20000084 	.word	0x20000084
 8000730:	40020400 	.word	0x40020400
 8000734:	200000dc 	.word	0x200000dc
 8000738:	200000e4 	.word	0x200000e4
 800073c:	20000000 	.word	0x20000000
 8000740:	080037ac 	.word	0x080037ac

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	@ 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	@ 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fb9e 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	@ (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000790:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <SystemClock_Config+0xd0>)
 8000792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007b8:	2319      	movs	r3, #25
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007bc:	23a8      	movs	r3, #168	@ 0xa8
 80007be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f933 	bl	8001a38 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 f8f0 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fb95 	bl	8001f28 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000804:	f000 f8da 	bl	80009bc <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	@ 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_SPI1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	@ (8000880 <MX_SPI1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_SPI1_Init+0x64>)
 800084c:	2210      	movs	r2, #16
 800084e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_SPI1_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_SPI1_Init+0x64>)
 800086a:	f001 fd09 	bl	8002280 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f8a2 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000084 	.word	0x20000084
 8000880:	40013000 	.word	0x40013000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b43      	ldr	r3, [pc, #268]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a42      	ldr	r2, [pc, #264]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b40      	ldr	r3, [pc, #256]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b3c      	ldr	r3, [pc, #240]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a3b      	ldr	r2, [pc, #236]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b39      	ldr	r3, [pc, #228]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a34      	ldr	r2, [pc, #208]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <MX_GPIO_Init+0x128>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <MX_GPIO_Init+0x128>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2131      	movs	r1, #49	@ 0x31
 800090e:	4828      	ldr	r0, [pc, #160]	@ (80009b0 <MX_GPIO_Init+0x12c>)
 8000910:	f001 f85e 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2107      	movs	r1, #7
 8000918:	4826      	ldr	r0, [pc, #152]	@ (80009b4 <MX_GPIO_Init+0x130>)
 800091a:	f001 f859 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2110      	movs	r1, #16
 8000922:	4824      	ldr	r0, [pc, #144]	@ (80009b4 <MX_GPIO_Init+0x130>)
 8000924:	f001 f854 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f240 2107 	movw	r1, #519	@ 0x207
 800092e:	4822      	ldr	r0, [pc, #136]	@ (80009b8 <MX_GPIO_Init+0x134>)
 8000930:	f001 f84e 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin;
 8000934:	2331      	movs	r3, #49	@ 0x31
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <MX_GPIO_Init+0x12c>)
 800094c:	f000 febc 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|WQ_HOLD_Pin;
 8000950:	2317      	movs	r3, #23
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <MX_GPIO_Init+0x130>)
 8000968:	f000 feae 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
  GPIO_InitStruct.Pin = MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin;
 800096c:	f240 2307 	movw	r3, #519	@ 0x207
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_GPIO_Init+0x134>)
 8000986:	f000 fe9f 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin|JMP_PROG_Pin;
 800098a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_GPIO_Init+0x134>)
 80009a0:	f000 fe92 	bl	80016c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 80009d6:	4a32      	ldr	r2, [pc, #200]	@ (8000aa0 <LORA_Init+0xd8>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 80009dc:	4a31      	ldr	r2, [pc, #196]	@ (8000aa4 <LORA_Init+0xdc>)
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 80009e2:	4a31      	ldr	r2, [pc, #196]	@ (8000aa8 <LORA_Init+0xe0>)
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 80009e8:	2042      	movs	r0, #66	@ 0x42
 80009ea:	f000 f861 	bl	8000ab0 <_loraReadReg>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d001      	beq.n	80009f8 <LORA_Init+0x30>
		return 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e04e      	b.n	8000a96 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2001      	movs	r0, #1
 80009fc:	f000 f88e 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 8000a00:	2188      	movs	r1, #136	@ 0x88
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 f88a 	bl	8000b1c <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8000a08:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <LORA_Init+0xe4>)
 8000a0a:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	2006      	movs	r0, #6
 8000a16:	f000 f881 	bl	8000b1c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 f87a 	bl	8000b1c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f000 f874 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8000a34:	21ff      	movs	r1, #255	@ 0xff
 8000a36:	2009      	movs	r0, #9
 8000a38:	f000 f870 	bl	8000b1c <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8000a3c:	210b      	movs	r1, #11
 8000a3e:	200b      	movs	r0, #11
 8000a40:	f000 f86c 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8000a44:	2120      	movs	r1, #32
 8000a46:	200c      	movs	r0, #12
 8000a48:	f000 f868 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8000a4c:	21ff      	movs	r1, #255	@ 0xff
 8000a4e:	200e      	movs	r0, #14
 8000a50:	f000 f864 	bl	8000b1c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8000a54:	2100      	movs	r1, #0
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 f860 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8000a5c:	2182      	movs	r1, #130	@ 0x82
 8000a5e:	201d      	movs	r0, #29
 8000a60:	f000 f85c 	bl	8000b1c <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8000a64:	2170      	movs	r1, #112	@ 0x70
 8000a66:	201e      	movs	r0, #30
 8000a68:	f000 f858 	bl	8000b1c <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2020      	movs	r0, #32
 8000a70:	f000 f854 	bl	8000b1c <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8000a74:	2106      	movs	r1, #6
 8000a76:	2021      	movs	r0, #33	@ 0x21
 8000a78:	f000 f850 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8000a7c:	213c      	movs	r1, #60	@ 0x3c
 8000a7e:	2022      	movs	r0, #34	@ 0x22
 8000a80:	f000 f84c 	bl	8000b1c <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8000a84:	213c      	movs	r1, #60	@ 0x3c
 8000a86:	2023      	movs	r0, #35	@ 0x23
 8000a88:	f000 f848 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 f844 	bl	8000b1c <_loraWriteReg>

	return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000ec 	.word	0x200000ec
 8000aa4:	200000f0 	.word	0x200000f0
 8000aa8:	200000f4 	.word	0x200000f4
 8000aac:	006c4000 	.word	0x006c4000

08000ab0 <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <_loraReadReg+0x60>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <_loraReadReg+0x64>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_loraReadReg+0x60>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	400a      	ands	r2, r1
 8000ace:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <_loraReadReg+0x68>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	1df9      	adds	r1, r7, #7
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	2201      	movs	r2, #1
 8000adc:	f001 fc59 	bl	8002392 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <_loraReadReg+0x68>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	1df9      	adds	r1, r7, #7
 8000ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aea:	2201      	movs	r2, #1
 8000aec:	f001 fd94 	bl	8002618 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8000af0:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_loraReadReg+0x60>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <_loraReadReg+0x64>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <_loraReadReg+0x60>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	615a      	str	r2, [r3, #20]
	return reg;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000f0 	.word	0x200000f0
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	200000ec 	.word	0x200000ec

08000b1c <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <_loraWriteReg+0x6c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <_loraWriteReg+0x70>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_loraWriteReg+0x6c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	400a      	ands	r2, r1
 8000b4a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_loraWriteReg+0x74>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	1df9      	adds	r1, r7, #7
 8000b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b56:	2201      	movs	r2, #1
 8000b58:	f001 fc1b 	bl	8002392 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <_loraWriteReg+0x74>)
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	1db9      	adds	r1, r7, #6
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	2201      	movs	r2, #1
 8000b68:	f001 fc13 	bl	8002392 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <_loraWriteReg+0x6c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <_loraWriteReg+0x70>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <_loraWriteReg+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000f0 	.word	0x200000f0
 8000b8c:	200000f4 	.word	0x200000f4
 8000b90:	200000ec 	.word	0x200000ec

08000b94 <LORA_TransmitData>:
		return packetSize;
	}
	return 0;
}

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8000ba0:	21ff      	movs	r1, #255	@ 0xff
 8000ba2:	200d      	movs	r0, #13
 8000ba4:	f7ff ffba 	bl	8000b1c <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	4619      	mov	r1, r3
 8000bac:	2022      	movs	r0, #34	@ 0x22
 8000bae:	f7ff ffb5 	bl	8000b1c <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000bb6:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <LORA_TransmitData+0xa4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <LORA_TransmitData+0xa8>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <LORA_TransmitData+0xa4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	400a      	ands	r2, r1
 8000bca:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <LORA_TransmitData+0xac>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	f107 010f 	add.w	r1, r7, #15
 8000bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f001 fbda 	bl	8002392 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <LORA_TransmitData+0xac>)
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f001 fbd1 	bl	8002392 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <LORA_TransmitData+0xa4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	695a      	ldr	r2, [r3, #20]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <LORA_TransmitData+0xa8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <LORA_TransmitData+0xa4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8000c04:	2103      	movs	r1, #3
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ff88 	bl	8000b1c <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 8000c0c:	bf00      	nop
 8000c0e:	2012      	movs	r0, #18
 8000c10:	f7ff ff4e 	bl	8000ab0 <_loraReadReg>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f7      	beq.n	8000c0e <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8000c1e:	2108      	movs	r1, #8
 8000c20:	2012      	movs	r0, #18
 8000c22:	f7ff ff7b 	bl	8000b1c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000c26:	2105      	movs	r1, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff ff77 	bl	8000b1c <_loraWriteReg>

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000f0 	.word	0x200000f0
 8000c3c:	200000f4 	.word	0x200000f4
 8000c40:	200000ec 	.word	0x200000ec

08000c44 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <MS_Init+0x3c>)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <MS_Init+0x40>)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <MS_Init+0x44>)
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 8000c64:	201e      	movs	r0, #30
 8000c66:	f000 f989 	bl	8000f7c <_msSendCmd>
	HAL_Delay(100);
 8000c6a:	2064      	movs	r0, #100	@ 0x64
 8000c6c:	f000 fc22 	bl	80014b4 <HAL_Delay>

	_msReadProm(_calibrCoeff);
 8000c70:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <MS_Init+0x48>)
 8000c72:	f000 f82d 	bl	8000cd0 <_msReadProm>

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000f8 	.word	0x200000f8
 8000c84:	200000fc 	.word	0x200000fc
 8000c88:	20000100 	.word	0x20000100
 8000c8c:	20000104 	.word	0x20000104

08000c90 <MS_ReadData>:

void MS_ReadData(int32_t endBufer[]) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f80a 	bl	8000cb6 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f845 	bl	8000d38 <_calculate>

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f9df 	bl	8001084 <_msSendCmdGetData32>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <_msReadProm+0x64>)
 8000cda:	785b      	ldrb	r3, [r3, #1]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f977 	bl	8000fd4 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_msReadProm+0x64>)
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	2202      	movs	r2, #2
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f970 	bl	8000fd4 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <_msReadProm+0x64>)
 8000cf6:	78db      	ldrb	r3, [r3, #3]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f969 	bl	8000fd4 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <_msReadProm+0x64>)
 8000d04:	791b      	ldrb	r3, [r3, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f962 	bl	8000fd4 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_msReadProm+0x64>)
 8000d12:	795b      	ldrb	r3, [r3, #5]
 8000d14:	2205      	movs	r2, #5
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f95b 	bl	8000fd4 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <_msReadProm+0x64>)
 8000d20:	799b      	ldrb	r3, [r3, #6]
 8000d22:	2206      	movs	r2, #6
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f954 	bl	8000fd4 <_msSendCmdGetData16>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000004 	.word	0x20000004

08000d38 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], int32_t bufer[]) {
 8000d38:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d3c:	b0a1      	sub	sp, #132	@ 0x84
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6478      	str	r0, [r7, #68]	@ 0x44
 8000d42:	6439      	str	r1, [r7, #64]	@ 0x40
	uint32_t D1 = dataWithPressTemp[0];
 8000d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint32_t D2 = dataWithPressTemp[1];
 8000d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	65bb      	str	r3, [r7, #88]	@ 0x58

	int32_t dT = D2 - (_calibrCoeff[5] * (2 << 7));
 8000d50:	4b86      	ldr	r3, [pc, #536]	@ (8000f6c <_calculate+0x234>)
 8000d52:	895b      	ldrh	r3, [r3, #10]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	461a      	mov	r2, r3
 8000d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	657b      	str	r3, [r7, #84]	@ 0x54
	int32_t TEMP = 2000 + dT * _calibrCoeff[6] / (2 << 22);
 8000d5e:	4b83      	ldr	r3, [pc, #524]	@ (8000f6c <_calculate+0x234>)
 8000d60:	899b      	ldrh	r3, [r3, #12]
 8000d62:	461a      	mov	r2, r3
 8000d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	da02      	bge.n	8000d76 <_calculate+0x3e>
 8000d70:	4b7f      	ldr	r3, [pc, #508]	@ (8000f70 <_calculate+0x238>)
 8000d72:	4413      	add	r3, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	15d3      	asrs	r3, r2, #23
 8000d78:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c

	int64_t OFF = _calibrCoeff[2] * (2 << 15)
 8000d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f6c <_calculate+0x234>)
 8000d80:	889b      	ldrh	r3, [r3, #4]
 8000d82:	0419      	lsls	r1, r3, #16
			+ (_calibrCoeff[4] * dT) / (2 << 6);
 8000d84:	4b79      	ldr	r3, [pc, #484]	@ (8000f6c <_calculate+0x234>)
 8000d86:	891b      	ldrh	r3, [r3, #8]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da00      	bge.n	8000d96 <_calculate+0x5e>
 8000d94:	337f      	adds	r3, #127	@ 0x7f
 8000d96:	11db      	asrs	r3, r3, #7
 8000d98:	440b      	add	r3, r1
	int64_t OFF = _calibrCoeff[2] * (2 << 15)
 8000d9a:	17da      	asrs	r2, r3, #31
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	4693      	mov	fp, r2
 8000da0:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	@ 0x70

	int64_t SENS = _calibrCoeff[1] * (2 << 14)
 8000da4:	4b71      	ldr	r3, [pc, #452]	@ (8000f6c <_calculate+0x234>)
 8000da6:	885b      	ldrh	r3, [r3, #2]
 8000da8:	03d9      	lsls	r1, r3, #15
			+ (_calibrCoeff[3] * dT) / (2 << 7);
 8000daa:	4b70      	ldr	r3, [pc, #448]	@ (8000f6c <_calculate+0x234>)
 8000dac:	88db      	ldrh	r3, [r3, #6]
 8000dae:	461a      	mov	r2, r3
 8000db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da00      	bge.n	8000dbc <_calculate+0x84>
 8000dba:	33ff      	adds	r3, #255	@ 0xff
 8000dbc:	121b      	asrs	r3, r3, #8
 8000dbe:	440b      	add	r3, r1
	int64_t SENS = _calibrCoeff[1] * (2 << 14)
 8000dc0:	17da      	asrs	r2, r3, #31
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dca:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	if (TEMP < 2000) {
 8000dce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000dd0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dd4:	da78      	bge.n	8000ec8 <_calculate+0x190>
			uint32_t T2 = (dT * dT) / (2 << 30);
 8000dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000dd8:	fb03 f303 	mul.w	r3, r3, r3
 8000ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	653b      	str	r3, [r7, #80]	@ 0x50
			uint32_t OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8000de8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000dea:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000dee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000df0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000df4:	fb03 f202 	mul.w	r2, r3, r2
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	441a      	add	r2, r3
 8000dfe:	0fd3      	lsrs	r3, r2, #31
 8000e00:	4413      	add	r3, r2
 8000e02:	105b      	asrs	r3, r3, #1
 8000e04:	667b      	str	r3, [r7, #100]	@ 0x64
			uint32_t SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / (2 * 2);
 8000e06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e08:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e0e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000e12:	fb03 f202 	mul.w	r2, r3, r2
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da00      	bge.n	8000e22 <_calculate+0xea>
 8000e20:	3303      	adds	r3, #3
 8000e22:	109b      	asrs	r3, r3, #2
 8000e24:	663b      	str	r3, [r7, #96]	@ 0x60

			if (TEMP < -1500) {
 8000e26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000e28:	4b52      	ldr	r3, [pc, #328]	@ (8000f74 <_calculate+0x23c>)
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	da22      	bge.n	8000e74 <_calculate+0x13c>
				OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8000e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e30:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8000e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e36:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000e3a:	fb03 f202 	mul.w	r2, r3, r2
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e48:	4413      	add	r3, r2
 8000e4a:	667b      	str	r3, [r7, #100]	@ 0x64
				SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2;
 8000e4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e4e:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8000e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e54:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000e58:	fb03 f202 	mul.w	r2, r3, r2
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	441a      	add	r2, r3
 8000e66:	0fd3      	lsrs	r3, r2, #31
 8000e68:	4413      	add	r3, r2
 8000e6a:	105b      	asrs	r3, r3, #1
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e70:	4413      	add	r3, r2
 8000e72:	663b      	str	r3, [r7, #96]	@ 0x60
			}

			TEMP -= T2;
 8000e74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
			OFF -= OFF2;
 8000e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e7e:	2200      	movs	r2, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e82:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000e88:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8000e8c:	4651      	mov	r1, sl
 8000e8e:	1a51      	subs	r1, r2, r1
 8000e90:	61b9      	str	r1, [r7, #24]
 8000e92:	4659      	mov	r1, fp
 8000e94:	eb63 0301 	sbc.w	r3, r3, r1
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e9e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			SENS -= SENS2;
 8000ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ea8:	637a      	str	r2, [r7, #52]	@ 0x34
 8000eaa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000eae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8000eb2:	4651      	mov	r1, sl
 8000eb4:	1a51      	subs	r1, r2, r1
 8000eb6:	6139      	str	r1, [r7, #16]
 8000eb8:	4659      	mov	r1, fp
 8000eba:	eb63 0301 	sbc.w	r3, r3, r1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ec4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		}

	int32_t PRES = (D1 * SENS / (2 << 20) - OFF) / (2 << 14);
 8000ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4698      	mov	r8, r3
 8000ece:	4691      	mov	r9, r2
 8000ed0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ed2:	fb09 f203 	mul.w	r2, r9, r3
 8000ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ed8:	fb08 f303 	mul.w	r3, r8, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ee0:	fba2 4508 	umull	r4, r5, r2, r8
 8000ee4:	442b      	add	r3, r5
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	4622      	mov	r2, r4
 8000eea:	462b      	mov	r3, r5
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da07      	bge.n	8000f00 <_calculate+0x1c8>
 8000ef0:	4921      	ldr	r1, [pc, #132]	@ (8000f78 <_calculate+0x240>)
 8000ef2:	1851      	adds	r1, r2, r1
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	f143 0300 	adc.w	r3, r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	f04f 0100 	mov.w	r1, #0
 8000f08:	0d50      	lsrs	r0, r2, #21
 8000f0a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8000f0e:	1559      	asrs	r1, r3, #21
 8000f10:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f14:	1a84      	subs	r4, r0, r2
 8000f16:	62bc      	str	r4, [r7, #40]	@ 0x28
 8000f18:	eb61 0303 	sbc.w	r3, r1, r3
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da08      	bge.n	8000f38 <_calculate+0x200>
 8000f26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000f2a:	1851      	adds	r1, r2, r1
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	f143 0300 	adc.w	r3, r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f38:	f04f 0000 	mov.w	r0, #0
 8000f3c:	f04f 0100 	mov.w	r1, #0
 8000f40:	0bd0      	lsrs	r0, r2, #15
 8000f42:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8000f46:	13d9      	asrs	r1, r3, #15
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	bufer[0] = PRES;
 8000f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f54:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 8000f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f58:	3304      	adds	r3, #4
 8000f5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	3784      	adds	r7, #132	@ 0x84
 8000f62:	46bd      	mov	sp, r7
 8000f64:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	007fffff 	.word	0x007fffff
 8000f74:	fffffa24 	.word	0xfffffa24
 8000f78:	001fffff 	.word	0x001fffff

08000f7c <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <_msSendCmd+0x4c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <_msSendCmd+0x50>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <_msSendCmd+0x4c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	400a      	ands	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <_msSendCmd+0x54>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	1df9      	adds	r1, r7, #7
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f001 f9f3 	bl	8002392 <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <_msSendCmd+0x4c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <_msSendCmd+0x50>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <_msSendCmd+0x4c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000fc 	.word	0x200000fc
 8000fcc:	20000100 	.word	0x20000100
 8000fd0:	200000f8 	.word	0x200000f8

08000fd4 <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <_msSendCmdGetData16+0xa4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <_msSendCmdGetData16+0xa8>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <_msSendCmdGetData16+0xa4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <_msSendCmdGetData16+0xac>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	1df9      	adds	r1, r7, #7
 8001000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001004:	2201      	movs	r2, #1
 8001006:	f001 f9c4 	bl	8002392 <HAL_SPI_Transmit>
	HAL_Delay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fa52 	bl	80014b4 <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <_msSendCmdGetData16+0xac>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	f107 010d 	add.w	r1, r7, #13
 8001018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101c:	2201      	movs	r2, #1
 800101e:	f001 fafb 	bl	8002618 <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <_msSendCmdGetData16+0xac>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f107 010c 	add.w	r1, r7, #12
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	f001 faf2 	bl	8002618 <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 8001034:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_msSendCmdGetData16+0xa4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_msSendCmdGetData16+0xa8>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <_msSendCmdGetData16+0xa4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	461a      	mov	r2, r3
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	4313      	orrs	r3, r2
 800105a:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	89fa      	ldrh	r2, [r7, #14]
 8001066:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 8001068:	2014      	movs	r0, #20
 800106a:	f000 fa23 	bl	80014b4 <HAL_Delay>

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000fc 	.word	0x200000fc
 800107c:	20000100 	.word	0x20000100
 8001080:	200000f8 	.word	0x200000f8

08001084 <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 8001090:	2044      	movs	r0, #68	@ 0x44
 8001092:	f7ff ff73 	bl	8000f7c <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001096:	200c      	movs	r0, #12
 8001098:	f000 fa0c 	bl	80014b4 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 800109c:	4b40      	ldr	r3, [pc, #256]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <_msSendCmdGetData32+0x120>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	400a      	ands	r2, r1
 80010b0:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 80010b2:	4b3d      	ldr	r3, [pc, #244]	@ (80011a8 <_msSendCmdGetData32+0x124>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	1df9      	adds	r1, r7, #7
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f001 f968 	bl	8002392 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <_msSendCmdGetData32+0x124>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	f107 010c 	add.w	r1, r7, #12
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	2203      	movs	r2, #3
 80010d0:	f001 faa2 	bl	8002618 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 80010d4:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <_msSendCmdGetData32+0x120>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 80010e8:	2054      	movs	r0, #84	@ 0x54
 80010ea:	f7ff ff47 	bl	8000f7c <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 80010ee:	200c      	movs	r0, #12
 80010f0:	f000 f9e0 	bl	80014b4 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <_msSendCmdGetData32+0x120>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4619      	mov	r1, r3
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	400a      	ands	r2, r1
 8001108:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <_msSendCmdGetData32+0x124>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	1df9      	adds	r1, r7, #7
 8001110:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001114:	2201      	movs	r2, #1
 8001116:	f001 f93c 	bl	8002392 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <_msSendCmdGetData32+0x124>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f107 0108 	add.w	r1, r7, #8
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	2203      	movs	r2, #3
 8001128:	f001 fa76 	bl	8002618 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <_msSendCmdGetData32+0x120>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <_msSendCmdGetData32+0x11c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	461a      	mov	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	461a      	mov	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 8001164:	7a3b      	ldrb	r3, [r7, #8]
 8001166:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 800116e:	7a7b      	ldrb	r3, [r7, #9]
 8001170:	461a      	mov	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	461a      	mov	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3304      	adds	r3, #4
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000fc 	.word	0x200000fc
 80011a4:	20000100 	.word	0x20000100
 80011a8:	200000f8 	.word	0x200000f8

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <HAL_SPI_MspInit+0x84>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12b      	bne.n	8001276 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_SPI_MspInit+0x88>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <HAL_SPI_MspInit+0x88>)
 8001228:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800122c:	6453      	str	r3, [r2, #68]	@ 0x44
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_SPI_MspInit+0x88>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_SPI_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_SPI_MspInit+0x88>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <HAL_SPI_MspInit+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001256:	23e0      	movs	r3, #224	@ 0xe0
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001266:	2305      	movs	r3, #5
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_SPI_MspInit+0x8c>)
 8001272:	f000 fa29 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40013000 	.word	0x40013000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <NMI_Handler+0x4>

08001294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <MemManage_Handler+0x4>

080012a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f8c7 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f001 fdc2 	bl	8002ea4 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20018000 	.word	0x20018000
 800134c:	00000400 	.word	0x00000400
 8001350:	20000114 	.word	0x20000114
 8001354:	20000268 	.word	0x20000268

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001380:	f7ff ffea 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f001 fd81 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f8df 	bl	8000570 <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013c0:	0800380c 	.word	0x0800380c
  ldr r2, =_sbss
 80013c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013c8:	20000264 	.word	0x20000264

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f931 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fed2 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f93b 	bl	80016ae <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 f911 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000000c 	.word	0x2000000c
 800146c:	20000014 	.word	0x20000014
 8001470:	20000010 	.word	0x20000010

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000014 	.word	0x20000014
 8001498:	20000118 	.word	0x20000118

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000118 	.word	0x20000118

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000014 	.word	0x20000014

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	@ (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	@ (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff47 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff5c 	bl	8001544 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffb0 	bl	800161c <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	e159      	b.n	8001998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f040 8148 	bne.w	8001992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d005      	beq.n	800171a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001716:	2b02      	cmp	r3, #2
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b03      	cmp	r3, #3
 8001786:	d017      	beq.n	80017b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d123      	bne.n	800180c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	69b9      	ldr	r1, [r7, #24]
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a2 	beq.w	8001992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b57      	ldr	r3, [pc, #348]	@ (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a56      	ldr	r2, [pc, #344]	@ (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b54      	ldr	r3, [pc, #336]	@ (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186a:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_GPIO_Init+0x2ec>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a49      	ldr	r2, [pc, #292]	@ (80019b8 <HAL_GPIO_Init+0x2f0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x202>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a48      	ldr	r2, [pc, #288]	@ (80019bc <HAL_GPIO_Init+0x2f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x1fe>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a47      	ldr	r2, [pc, #284]	@ (80019c0 <HAL_GPIO_Init+0x2f8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a46      	ldr	r2, [pc, #280]	@ (80019c4 <HAL_GPIO_Init+0x2fc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x1f6>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a45      	ldr	r2, [pc, #276]	@ (80019c8 <HAL_GPIO_Init+0x300>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x1f2>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e008      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018be:	2303      	movs	r3, #3
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018ca:	2300      	movs	r3, #0
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018dc:	4935      	ldr	r1, [pc, #212]	@ (80019b4 <HAL_GPIO_Init+0x2ec>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ea:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <HAL_GPIO_Init+0x304>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190e:	4a2f      	ldr	r2, [pc, #188]	@ (80019cc <HAL_GPIO_Init+0x304>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001914:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <HAL_GPIO_Init+0x304>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001938:	4a24      	ldr	r2, [pc, #144]	@ (80019cc <HAL_GPIO_Init+0x304>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193e:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_GPIO_Init+0x304>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001962:	4a1a      	ldr	r2, [pc, #104]	@ (80019cc <HAL_GPIO_Init+0x304>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <HAL_GPIO_Init+0x304>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198c:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <HAL_GPIO_Init+0x304>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	f67f aea2 	bls.w	80016e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	041a      	lsls	r2, r3, #16
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	400b      	ands	r3, r1
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e267      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d075      	beq.n	8001b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	4b88      	ldr	r3, [pc, #544]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d00c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4b85      	ldr	r3, [pc, #532]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b82      	ldr	r3, [pc, #520]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a7a:	d10b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d05b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x108>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d157      	bne.n	8001b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e242      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x74>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x98>
 8001ab6:	4b70      	ldr	r3, [pc, #448]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6f      	ldr	r2, [pc, #444]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001ad0:	4b69      	ldr	r3, [pc, #420]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a68      	ldr	r2, [pc, #416]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b66      	ldr	r3, [pc, #408]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a65      	ldr	r2, [pc, #404]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fcd4 	bl	800149c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fcd0 	bl	800149c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e207      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xc0>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fcc0 	bl	800149c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fcbc 	bl	800149c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1f3      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b51      	ldr	r3, [pc, #324]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0xe8>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1c7      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4937      	ldr	r1, [pc, #220]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_OscConfig+0x244>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff fc75 	bl	800149c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fc71 	bl	800149c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1a8      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4925      	ldr	r1, [pc, #148]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_RCC_OscConfig+0x244>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc54 	bl	800149c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fc50 	bl	800149c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e187      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d036      	beq.n	8001c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_RCC_OscConfig+0x248>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff fc34 	bl	800149c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fc30 	bl	800149c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e167      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x200>
 8001c56:	e01b      	b.n	8001c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_OscConfig+0x248>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fc1d 	bl	800149c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff fc19 	bl	800149c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d907      	bls.n	8001c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e150      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470000 	.word	0x42470000
 8001c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b88      	ldr	r3, [pc, #544]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ea      	bne.n	8001c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8097 	beq.w	8001dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b81      	ldr	r3, [pc, #516]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b77      	ldr	r3, [pc, #476]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cda:	4b74      	ldr	r3, [pc, #464]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a73      	ldr	r2, [pc, #460]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fbd9 	bl	800149c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7ff fbd5 	bl	800149c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e10c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b6a      	ldr	r3, [pc, #424]	@ (8001eac <HAL_RCC_OscConfig+0x474>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2ea>
 8001d14:	4b64      	ldr	r3, [pc, #400]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a63      	ldr	r2, [pc, #396]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x324>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x30c>
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x324>
 8001d44:	4b58      	ldr	r3, [pc, #352]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a57      	ldr	r2, [pc, #348]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	4b55      	ldr	r3, [pc, #340]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a54      	ldr	r2, [pc, #336]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff fb9a 	bl	800149c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fb96 	bl	800149c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0cb      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	4b49      	ldr	r3, [pc, #292]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ee      	beq.n	8001d6c <HAL_RCC_OscConfig+0x334>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fb84 	bl	800149c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff fb80 	bl	800149c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0b5      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b39      	ldr	r3, [pc, #228]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a1 	beq.w	8001f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d05c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d141      	bne.n	8001e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fb54 	bl	800149c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fb50 	bl	800149c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e087      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	491b      	ldr	r1, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff fb29 	bl	800149c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff fb25 	bl	800149c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e05c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x416>
 8001e6c:	e054      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fb12 	bl	800149c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff fb0e 	bl	800149c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e045      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x444>
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e038      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4ec>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d028      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d121      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0cc      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a58      	ldr	r2, [pc, #352]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a52      	ldr	r2, [pc, #328]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d044      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e067      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4934      	ldr	r1, [pc, #208]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7ff fa40 	bl	800149c <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff fa3c 	bl	800149c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20c      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f9a0 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	080037b8 	.word	0x080037b8
 80020ec:	2000000c 	.word	0x2000000c
 80020f0:	20000010 	.word	0x20000010

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b090      	sub	sp, #64	@ 0x40
 80020fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002100:	2300      	movs	r3, #0
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210c:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x180>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d00d      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x40>
 8002118:	2b08      	cmp	r3, #8
 800211a:	f200 80a1 	bhi.w	8002260 <HAL_RCC_GetSysClockFreq+0x16c>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 8002122:	2b04      	cmp	r3, #4
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x3a>
 8002126:	e09b      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x184>)
 800212a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800212c:	e09b      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212e:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_GetSysClockFreq+0x188>)
 8002130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002132:	e098      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x180>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800213c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213e:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x180>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d028      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x180>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	627a      	str	r2, [r7, #36]	@ 0x24
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800215c:	2100      	movs	r1, #0
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_GetSysClockFreq+0x188>)
 8002160:	fb03 f201 	mul.w	r2, r3, r1
 8002164:	2300      	movs	r3, #0
 8002166:	fb00 f303 	mul.w	r3, r0, r3
 800216a:	4413      	add	r3, r2
 800216c:	4a43      	ldr	r2, [pc, #268]	@ (800227c <HAL_RCC_GetSysClockFreq+0x188>)
 800216e:	fba0 1202 	umull	r1, r2, r0, r2
 8002172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002174:	460a      	mov	r2, r1
 8002176:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800217a:	4413      	add	r3, r2
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800217e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002180:	2200      	movs	r2, #0
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	61fa      	str	r2, [r7, #28]
 8002186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800218e:	f7fe f877 	bl	8000280 <__aeabi_uldivmod>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4613      	mov	r3, r2
 8002198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800219a:	e053      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x180>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	2200      	movs	r2, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	617a      	str	r2, [r7, #20]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021ae:	f04f 0b00 	mov.w	fp, #0
 80021b2:	4652      	mov	r2, sl
 80021b4:	465b      	mov	r3, fp
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	0159      	lsls	r1, r3, #5
 80021c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c4:	0150      	lsls	r0, r2, #5
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	ebb2 080a 	subs.w	r8, r2, sl
 80021ce:	eb63 090b 	sbc.w	r9, r3, fp
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021e6:	ebb2 0408 	subs.w	r4, r2, r8
 80021ea:	eb63 0509 	sbc.w	r5, r3, r9
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	00eb      	lsls	r3, r5, #3
 80021f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021fc:	00e2      	lsls	r2, r4, #3
 80021fe:	4614      	mov	r4, r2
 8002200:	461d      	mov	r5, r3
 8002202:	eb14 030a 	adds.w	r3, r4, sl
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	eb45 030b 	adc.w	r3, r5, fp
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800221a:	4629      	mov	r1, r5
 800221c:	028b      	lsls	r3, r1, #10
 800221e:	4621      	mov	r1, r4
 8002220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002224:	4621      	mov	r1, r4
 8002226:	028a      	lsls	r2, r1, #10
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222e:	2200      	movs	r2, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	60fa      	str	r2, [r7, #12]
 8002234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002238:	f7fe f822 	bl	8000280 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4613      	mov	r3, r2
 8002242:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x180>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002254:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800225e:	e002      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x184>)
 8002262:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002268:	4618      	mov	r0, r3
 800226a:	3740      	adds	r7, #64	@ 0x40
 800226c:	46bd      	mov	sp, r7
 800226e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	00f42400 	.word	0x00f42400
 800227c:	017d7840 	.word	0x017d7840

08002280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07b      	b.n	800238a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022a2:	d009      	beq.n	80022b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
 80022aa:	e005      	b.n	80022b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe ff92 	bl	80011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233c:	ea42 0103 	orr.w	r1, r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0104 	and.w	r1, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	f003 0210 	and.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b088      	sub	sp, #32
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_SPI_Transmit+0x22>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e12d      	b.n	8002610 <HAL_SPI_Transmit+0x27e>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023bc:	f7ff f86e 	bl	800149c <HAL_GetTick>
 80023c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d002      	beq.n	80023d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023d6:	e116      	b.n	8002606 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_SPI_Transmit+0x52>
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023e8:	e10d      	b.n	8002606 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2203      	movs	r2, #3
 80023ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002430:	d10f      	bne.n	8002452 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002450:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d007      	beq.n	8002470 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002478:	d14f      	bne.n	800251a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_Transmit+0xf6>
 8002482:	8afb      	ldrh	r3, [r7, #22]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d142      	bne.n	800250e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	1c9a      	adds	r2, r3, #2
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024ac:	e02f      	b.n	800250e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d112      	bne.n	80024e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024e0:	e015      	b.n	800250e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e2:	f7fe ffdb 	bl	800149c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d803      	bhi.n	80024fa <HAL_SPI_Transmit+0x168>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d102      	bne.n	8002500 <HAL_SPI_Transmit+0x16e>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800250c:	e07b      	b.n	8002606 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ca      	bne.n	80024ae <HAL_SPI_Transmit+0x11c>
 8002518:	e050      	b.n	80025bc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_SPI_Transmit+0x196>
 8002522:	8afb      	ldrh	r3, [r7, #22]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d144      	bne.n	80025b2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800254e:	e030      	b.n	80025b2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d113      	bne.n	8002586 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002584:	e015      	b.n	80025b2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002586:	f7fe ff89 	bl	800149c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d803      	bhi.n	800259e <HAL_SPI_Transmit+0x20c>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d102      	bne.n	80025a4 <HAL_SPI_Transmit+0x212>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80025b0:	e029      	b.n	8002606 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1c9      	bne.n	8002550 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	6839      	ldr	r1, [r7, #0]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fbdf 	bl	8002d84 <SPI_EndRxTxTransaction>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	77fb      	strb	r3, [r7, #31]
 80025fc:	e003      	b.n	8002606 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800260e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d002      	beq.n	800263e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002638:	2302      	movs	r3, #2
 800263a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800263c:	e0fb      	b.n	8002836 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002646:	d112      	bne.n	800266e <HAL_SPI_Receive+0x56>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10e      	bne.n	800266e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2204      	movs	r2, #4
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f8ef 	bl	8002848 <HAL_SPI_TransmitReceive>
 800266a:	4603      	mov	r3, r0
 800266c:	e0e8      	b.n	8002840 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_SPI_Receive+0x64>
 8002678:	2302      	movs	r3, #2
 800267a:	e0e1      	b.n	8002840 <HAL_SPI_Receive+0x228>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002684:	f7fe ff0a 	bl	800149c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Receive+0x7e>
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    goto error;
 800269a:	e0cc      	b.n	8002836 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2204      	movs	r2, #4
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026e2:	d10f      	bne.n	8002704 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270e:	2b40      	cmp	r3, #64	@ 0x40
 8002710:	d007      	beq.n	8002722 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d16a      	bne.n	8002800 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800272a:	e032      	b.n	8002792 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d115      	bne.n	8002766 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f103 020c 	add.w	r2, r3, #12
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002764:	e015      	b.n	8002792 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002766:	f7fe fe99 	bl	800149c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d803      	bhi.n	800277e <HAL_SPI_Receive+0x166>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d102      	bne.n	8002784 <HAL_SPI_Receive+0x16c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002790:	e051      	b.n	8002836 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1c7      	bne.n	800272c <HAL_SPI_Receive+0x114>
 800279c:	e035      	b.n	800280a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d113      	bne.n	80027d4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	b292      	uxth	r2, r2
 80027b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027be:	1c9a      	adds	r2, r3, #2
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027d2:	e015      	b.n	8002800 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d4:	f7fe fe62 	bl	800149c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d803      	bhi.n	80027ec <HAL_SPI_Receive+0x1d4>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_Receive+0x1da>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80027fe:	e01a      	b.n	8002836 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1c9      	bne.n	800279e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa52 	bl	8002cb8 <SPI_EndRxTransaction>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
 800282c:	e003      	b.n	8002836 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	@ 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002856:	2301      	movs	r3, #1
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_SPI_TransmitReceive+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e198      	b.n	8002ba0 <HAL_SPI_TransmitReceive+0x358>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002876:	f7fe fe11 	bl	800149c <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002894:	2b01      	cmp	r3, #1
 8002896:	d00f      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x70>
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800289e:	d107      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x68>
 80028a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d003      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
 80028b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80028b6:	e16d      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x82>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x82>
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80028d0:	e160      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	887a      	ldrh	r2, [r7, #2]
 800290e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002926:	2b40      	cmp	r3, #64	@ 0x40
 8002928:	d007      	beq.n	800293a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002942:	d17c      	bne.n	8002a3e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SPI_TransmitReceive+0x10a>
 800294c:	8b7b      	ldrh	r3, [r7, #26]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d16a      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	881a      	ldrh	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	1c9a      	adds	r2, r3, #2
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002976:	e057      	b.n	8002a28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d11b      	bne.n	80029be <HAL_SPI_TransmitReceive+0x176>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d016      	beq.n	80029be <HAL_SPI_TransmitReceive+0x176>
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d113      	bne.n	80029be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	881a      	ldrh	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	1c9a      	adds	r2, r3, #2
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d119      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x1b8>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d014      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	b292      	uxth	r2, r2
 80029e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a00:	f7fe fd4c 	bl	800149c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d80b      	bhi.n	8002a28 <HAL_SPI_TransmitReceive+0x1e0>
 8002a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d007      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002a26:	e0b5      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1a2      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x130>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d19d      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x130>
 8002a3c:	e080      	b.n	8002b40 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x204>
 8002a46:	8b7b      	ldrh	r3, [r7, #26]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d16f      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a72:	e05b      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d11c      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x274>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d017      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x274>
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d114      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d119      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x2b6>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d014      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002afa:	2301      	movs	r3, #1
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002afe:	f7fe fccd 	bl	800149c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d803      	bhi.n	8002b16 <HAL_SPI_TransmitReceive+0x2ce>
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d102      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x2d4>
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002b2a:	e033      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d19e      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x22c>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d199      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f91d 	bl	8002d84 <SPI_EndRxTxTransaction>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002b5c:	e01a      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b8a:	e003      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3730      	adds	r7, #48	@ 0x30
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb8:	f7fe fc70 	bl	800149c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc8:	f7fe fc68 	bl	800149c <HAL_GetTick>
 8002bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	015b      	lsls	r3, r3, #5
 8002bd4:	0d1b      	lsrs	r3, r3, #20
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bde:	e054      	b.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d050      	beq.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be8:	f7fe fc58 	bl	800149c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d902      	bls.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13d      	bne.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c16:	d111      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c20:	d004      	beq.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d107      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c44:	d10f      	bne.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e017      	b.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d19b      	bne.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000000c 	.word	0x2000000c

08002cb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ccc:	d111      	bne.n	8002cf2 <SPI_EndRxTransaction+0x3a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd6:	d004      	beq.n	8002ce2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce0:	d107      	bne.n	8002cf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cfa:	d12a      	bne.n	8002d52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d04:	d012      	beq.n	8002d2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	@ 0x80
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7ff ff49 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02d      	beq.n	8002d78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e026      	b.n	8002d7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2101      	movs	r1, #1
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff ff36 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01a      	beq.n	8002d78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e013      	b.n	8002d7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ff23 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e000      	b.n	8002d7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2201      	movs	r2, #1
 8002d98:	2102      	movs	r1, #2
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ff04 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e032      	b.n	8002e1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <SPI_EndRxTxTransaction+0xa0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	@ (8002e28 <SPI_EndRxTxTransaction+0xa4>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd4:	d112      	bne.n	8002dfc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	@ 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fee1 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e00f      	b.n	8002e1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b80      	cmp	r3, #128	@ 0x80
 8002e14:	d0f2      	beq.n	8002dfc <SPI_EndRxTxTransaction+0x78>
 8002e16:	e000      	b.n	8002e1a <SPI_EndRxTxTransaction+0x96>
        break;
 8002e18:	bf00      	nop
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000000c 	.word	0x2000000c
 8002e28:	165e9f81 	.word	0x165e9f81

08002e2c <sniprintf>:
 8002e2c:	b40c      	push	{r2, r3}
 8002e2e:	b530      	push	{r4, r5, lr}
 8002e30:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <sniprintf+0x64>)
 8002e32:	1e0c      	subs	r4, r1, #0
 8002e34:	681d      	ldr	r5, [r3, #0]
 8002e36:	b09d      	sub	sp, #116	@ 0x74
 8002e38:	da08      	bge.n	8002e4c <sniprintf+0x20>
 8002e3a:	238b      	movs	r3, #139	@ 0x8b
 8002e3c:	602b      	str	r3, [r5, #0]
 8002e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e42:	b01d      	add	sp, #116	@ 0x74
 8002e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e48:	b002      	add	sp, #8
 8002e4a:	4770      	bx	lr
 8002e4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e54:	bf14      	ite	ne
 8002e56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e5a:	4623      	moveq	r3, r4
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	9307      	str	r3, [sp, #28]
 8002e60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e64:	9002      	str	r0, [sp, #8]
 8002e66:	9006      	str	r0, [sp, #24]
 8002e68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e6e:	ab21      	add	r3, sp, #132	@ 0x84
 8002e70:	a902      	add	r1, sp, #8
 8002e72:	4628      	mov	r0, r5
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	f000 f995 	bl	80031a4 <_svfiprintf_r>
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	bfbc      	itt	lt
 8002e7e:	238b      	movlt	r3, #139	@ 0x8b
 8002e80:	602b      	strlt	r3, [r5, #0]
 8002e82:	2c00      	cmp	r4, #0
 8002e84:	d0dd      	beq.n	8002e42 <sniprintf+0x16>
 8002e86:	9b02      	ldr	r3, [sp, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e7d9      	b.n	8002e42 <sniprintf+0x16>
 8002e8e:	bf00      	nop
 8002e90:	20000018 	.word	0x20000018

08002e94 <memset>:
 8002e94:	4402      	add	r2, r0
 8002e96:	4603      	mov	r3, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <__errno>:
 8002ea4:	4b01      	ldr	r3, [pc, #4]	@ (8002eac <__errno+0x8>)
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000018 	.word	0x20000018

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ee8 <__libc_init_array+0x38>)
 8002eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8002eec <__libc_init_array+0x3c>)
 8002eb6:	1b64      	subs	r4, r4, r5
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	2600      	movs	r6, #0
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ef0 <__libc_init_array+0x40>)
 8002ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ef4 <__libc_init_array+0x44>)
 8002ec4:	f000 fc66 	bl	8003794 <_init>
 8002ec8:	1b64      	subs	r4, r4, r5
 8002eca:	10a4      	asrs	r4, r4, #2
 8002ecc:	2600      	movs	r6, #0
 8002ece:	42a6      	cmp	r6, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed8:	4798      	blx	r3
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee2:	4798      	blx	r3
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	08003804 	.word	0x08003804
 8002eec:	08003804 	.word	0x08003804
 8002ef0:	08003804 	.word	0x08003804
 8002ef4:	08003808 	.word	0x08003808

08002ef8 <__retarget_lock_acquire_recursive>:
 8002ef8:	4770      	bx	lr

08002efa <__retarget_lock_release_recursive>:
 8002efa:	4770      	bx	lr

08002efc <_free_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d041      	beq.n	8002f88 <_free_r+0x8c>
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f0c      	subs	r4, r1, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	18e4      	addlt	r4, r4, r3
 8002f10:	f000 f8e0 	bl	80030d4 <__malloc_lock>
 8002f14:	4a1d      	ldr	r2, [pc, #116]	@ (8002f8c <_free_r+0x90>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	b933      	cbnz	r3, 8002f28 <_free_r+0x2c>
 8002f1a:	6063      	str	r3, [r4, #4]
 8002f1c:	6014      	str	r4, [r2, #0]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f24:	f000 b8dc 	b.w	80030e0 <__malloc_unlock>
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d908      	bls.n	8002f3e <_free_r+0x42>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	1821      	adds	r1, r4, r0
 8002f30:	428b      	cmp	r3, r1
 8002f32:	bf01      	itttt	eq
 8002f34:	6819      	ldreq	r1, [r3, #0]
 8002f36:	685b      	ldreq	r3, [r3, #4]
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	e7ed      	b.n	8002f1a <_free_r+0x1e>
 8002f3e:	461a      	mov	r2, r3
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b10b      	cbz	r3, 8002f48 <_free_r+0x4c>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d9fa      	bls.n	8002f3e <_free_r+0x42>
 8002f48:	6811      	ldr	r1, [r2, #0]
 8002f4a:	1850      	adds	r0, r2, r1
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d10b      	bne.n	8002f68 <_free_r+0x6c>
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	4401      	add	r1, r0
 8002f54:	1850      	adds	r0, r2, r1
 8002f56:	4283      	cmp	r3, r0
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	d1e0      	bne.n	8002f1e <_free_r+0x22>
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6053      	str	r3, [r2, #4]
 8002f62:	4408      	add	r0, r1
 8002f64:	6010      	str	r0, [r2, #0]
 8002f66:	e7da      	b.n	8002f1e <_free_r+0x22>
 8002f68:	d902      	bls.n	8002f70 <_free_r+0x74>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	e7d6      	b.n	8002f1e <_free_r+0x22>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	1821      	adds	r1, r4, r0
 8002f74:	428b      	cmp	r3, r1
 8002f76:	bf04      	itt	eq
 8002f78:	6819      	ldreq	r1, [r3, #0]
 8002f7a:	685b      	ldreq	r3, [r3, #4]
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	bf04      	itt	eq
 8002f80:	1809      	addeq	r1, r1, r0
 8002f82:	6021      	streq	r1, [r4, #0]
 8002f84:	6054      	str	r4, [r2, #4]
 8002f86:	e7ca      	b.n	8002f1e <_free_r+0x22>
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000260 	.word	0x20000260

08002f90 <sbrk_aligned>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4e0f      	ldr	r6, [pc, #60]	@ (8002fd0 <sbrk_aligned+0x40>)
 8002f94:	460c      	mov	r4, r1
 8002f96:	6831      	ldr	r1, [r6, #0]
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b911      	cbnz	r1, 8002fa2 <sbrk_aligned+0x12>
 8002f9c:	f000 fba6 	bl	80036ec <_sbrk_r>
 8002fa0:	6030      	str	r0, [r6, #0]
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 fba1 	bl	80036ec <_sbrk_r>
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	d103      	bne.n	8002fb6 <sbrk_aligned+0x26>
 8002fae:	f04f 34ff 	mov.w	r4, #4294967295
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	1cc4      	adds	r4, r0, #3
 8002fb8:	f024 0403 	bic.w	r4, r4, #3
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d0f8      	beq.n	8002fb2 <sbrk_aligned+0x22>
 8002fc0:	1a21      	subs	r1, r4, r0
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f000 fb92 	bl	80036ec <_sbrk_r>
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d1f2      	bne.n	8002fb2 <sbrk_aligned+0x22>
 8002fcc:	e7ef      	b.n	8002fae <sbrk_aligned+0x1e>
 8002fce:	bf00      	nop
 8002fd0:	2000025c 	.word	0x2000025c

08002fd4 <_malloc_r>:
 8002fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd8:	1ccd      	adds	r5, r1, #3
 8002fda:	f025 0503 	bic.w	r5, r5, #3
 8002fde:	3508      	adds	r5, #8
 8002fe0:	2d0c      	cmp	r5, #12
 8002fe2:	bf38      	it	cc
 8002fe4:	250c      	movcc	r5, #12
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	4606      	mov	r6, r0
 8002fea:	db01      	blt.n	8002ff0 <_malloc_r+0x1c>
 8002fec:	42a9      	cmp	r1, r5
 8002fee:	d904      	bls.n	8002ffa <_malloc_r+0x26>
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	6033      	str	r3, [r6, #0]
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030d0 <_malloc_r+0xfc>
 8002ffe:	f000 f869 	bl	80030d4 <__malloc_lock>
 8003002:	f8d8 3000 	ldr.w	r3, [r8]
 8003006:	461c      	mov	r4, r3
 8003008:	bb44      	cbnz	r4, 800305c <_malloc_r+0x88>
 800300a:	4629      	mov	r1, r5
 800300c:	4630      	mov	r0, r6
 800300e:	f7ff ffbf 	bl	8002f90 <sbrk_aligned>
 8003012:	1c43      	adds	r3, r0, #1
 8003014:	4604      	mov	r4, r0
 8003016:	d158      	bne.n	80030ca <_malloc_r+0xf6>
 8003018:	f8d8 4000 	ldr.w	r4, [r8]
 800301c:	4627      	mov	r7, r4
 800301e:	2f00      	cmp	r7, #0
 8003020:	d143      	bne.n	80030aa <_malloc_r+0xd6>
 8003022:	2c00      	cmp	r4, #0
 8003024:	d04b      	beq.n	80030be <_malloc_r+0xea>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	4639      	mov	r1, r7
 800302a:	4630      	mov	r0, r6
 800302c:	eb04 0903 	add.w	r9, r4, r3
 8003030:	f000 fb5c 	bl	80036ec <_sbrk_r>
 8003034:	4581      	cmp	r9, r0
 8003036:	d142      	bne.n	80030be <_malloc_r+0xea>
 8003038:	6821      	ldr	r1, [r4, #0]
 800303a:	1a6d      	subs	r5, r5, r1
 800303c:	4629      	mov	r1, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f7ff ffa6 	bl	8002f90 <sbrk_aligned>
 8003044:	3001      	adds	r0, #1
 8003046:	d03a      	beq.n	80030be <_malloc_r+0xea>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	442b      	add	r3, r5
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	f8d8 3000 	ldr.w	r3, [r8]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	bb62      	cbnz	r2, 80030b0 <_malloc_r+0xdc>
 8003056:	f8c8 7000 	str.w	r7, [r8]
 800305a:	e00f      	b.n	800307c <_malloc_r+0xa8>
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	1b52      	subs	r2, r2, r5
 8003060:	d420      	bmi.n	80030a4 <_malloc_r+0xd0>
 8003062:	2a0b      	cmp	r2, #11
 8003064:	d917      	bls.n	8003096 <_malloc_r+0xc2>
 8003066:	1961      	adds	r1, r4, r5
 8003068:	42a3      	cmp	r3, r4
 800306a:	6025      	str	r5, [r4, #0]
 800306c:	bf18      	it	ne
 800306e:	6059      	strne	r1, [r3, #4]
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	bf08      	it	eq
 8003074:	f8c8 1000 	streq.w	r1, [r8]
 8003078:	5162      	str	r2, [r4, r5]
 800307a:	604b      	str	r3, [r1, #4]
 800307c:	4630      	mov	r0, r6
 800307e:	f000 f82f 	bl	80030e0 <__malloc_unlock>
 8003082:	f104 000b 	add.w	r0, r4, #11
 8003086:	1d23      	adds	r3, r4, #4
 8003088:	f020 0007 	bic.w	r0, r0, #7
 800308c:	1ac2      	subs	r2, r0, r3
 800308e:	bf1c      	itt	ne
 8003090:	1a1b      	subne	r3, r3, r0
 8003092:	50a3      	strne	r3, [r4, r2]
 8003094:	e7af      	b.n	8002ff6 <_malloc_r+0x22>
 8003096:	6862      	ldr	r2, [r4, #4]
 8003098:	42a3      	cmp	r3, r4
 800309a:	bf0c      	ite	eq
 800309c:	f8c8 2000 	streq.w	r2, [r8]
 80030a0:	605a      	strne	r2, [r3, #4]
 80030a2:	e7eb      	b.n	800307c <_malloc_r+0xa8>
 80030a4:	4623      	mov	r3, r4
 80030a6:	6864      	ldr	r4, [r4, #4]
 80030a8:	e7ae      	b.n	8003008 <_malloc_r+0x34>
 80030aa:	463c      	mov	r4, r7
 80030ac:	687f      	ldr	r7, [r7, #4]
 80030ae:	e7b6      	b.n	800301e <_malloc_r+0x4a>
 80030b0:	461a      	mov	r2, r3
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	d1fb      	bne.n	80030b0 <_malloc_r+0xdc>
 80030b8:	2300      	movs	r3, #0
 80030ba:	6053      	str	r3, [r2, #4]
 80030bc:	e7de      	b.n	800307c <_malloc_r+0xa8>
 80030be:	230c      	movs	r3, #12
 80030c0:	6033      	str	r3, [r6, #0]
 80030c2:	4630      	mov	r0, r6
 80030c4:	f000 f80c 	bl	80030e0 <__malloc_unlock>
 80030c8:	e794      	b.n	8002ff4 <_malloc_r+0x20>
 80030ca:	6005      	str	r5, [r0, #0]
 80030cc:	e7d6      	b.n	800307c <_malloc_r+0xa8>
 80030ce:	bf00      	nop
 80030d0:	20000260 	.word	0x20000260

080030d4 <__malloc_lock>:
 80030d4:	4801      	ldr	r0, [pc, #4]	@ (80030dc <__malloc_lock+0x8>)
 80030d6:	f7ff bf0f 	b.w	8002ef8 <__retarget_lock_acquire_recursive>
 80030da:	bf00      	nop
 80030dc:	20000258 	.word	0x20000258

080030e0 <__malloc_unlock>:
 80030e0:	4801      	ldr	r0, [pc, #4]	@ (80030e8 <__malloc_unlock+0x8>)
 80030e2:	f7ff bf0a 	b.w	8002efa <__retarget_lock_release_recursive>
 80030e6:	bf00      	nop
 80030e8:	20000258 	.word	0x20000258

080030ec <__ssputs_r>:
 80030ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f0:	688e      	ldr	r6, [r1, #8]
 80030f2:	461f      	mov	r7, r3
 80030f4:	42be      	cmp	r6, r7
 80030f6:	680b      	ldr	r3, [r1, #0]
 80030f8:	4682      	mov	sl, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	4690      	mov	r8, r2
 80030fe:	d82d      	bhi.n	800315c <__ssputs_r+0x70>
 8003100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003108:	d026      	beq.n	8003158 <__ssputs_r+0x6c>
 800310a:	6965      	ldr	r5, [r4, #20]
 800310c:	6909      	ldr	r1, [r1, #16]
 800310e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003112:	eba3 0901 	sub.w	r9, r3, r1
 8003116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800311a:	1c7b      	adds	r3, r7, #1
 800311c:	444b      	add	r3, r9
 800311e:	106d      	asrs	r5, r5, #1
 8003120:	429d      	cmp	r5, r3
 8003122:	bf38      	it	cc
 8003124:	461d      	movcc	r5, r3
 8003126:	0553      	lsls	r3, r2, #21
 8003128:	d527      	bpl.n	800317a <__ssputs_r+0x8e>
 800312a:	4629      	mov	r1, r5
 800312c:	f7ff ff52 	bl	8002fd4 <_malloc_r>
 8003130:	4606      	mov	r6, r0
 8003132:	b360      	cbz	r0, 800318e <__ssputs_r+0xa2>
 8003134:	6921      	ldr	r1, [r4, #16]
 8003136:	464a      	mov	r2, r9
 8003138:	f000 fae8 	bl	800370c <memcpy>
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	6126      	str	r6, [r4, #16]
 800314a:	6165      	str	r5, [r4, #20]
 800314c:	444e      	add	r6, r9
 800314e:	eba5 0509 	sub.w	r5, r5, r9
 8003152:	6026      	str	r6, [r4, #0]
 8003154:	60a5      	str	r5, [r4, #8]
 8003156:	463e      	mov	r6, r7
 8003158:	42be      	cmp	r6, r7
 800315a:	d900      	bls.n	800315e <__ssputs_r+0x72>
 800315c:	463e      	mov	r6, r7
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	4632      	mov	r2, r6
 8003162:	4641      	mov	r1, r8
 8003164:	f000 faa8 	bl	80036b8 <memmove>
 8003168:	68a3      	ldr	r3, [r4, #8]
 800316a:	1b9b      	subs	r3, r3, r6
 800316c:	60a3      	str	r3, [r4, #8]
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	4433      	add	r3, r6
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	2000      	movs	r0, #0
 8003176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800317a:	462a      	mov	r2, r5
 800317c:	f000 fad4 	bl	8003728 <_realloc_r>
 8003180:	4606      	mov	r6, r0
 8003182:	2800      	cmp	r0, #0
 8003184:	d1e0      	bne.n	8003148 <__ssputs_r+0x5c>
 8003186:	6921      	ldr	r1, [r4, #16]
 8003188:	4650      	mov	r0, sl
 800318a:	f7ff feb7 	bl	8002efc <_free_r>
 800318e:	230c      	movs	r3, #12
 8003190:	f8ca 3000 	str.w	r3, [sl]
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	e7e9      	b.n	8003176 <__ssputs_r+0x8a>
	...

080031a4 <_svfiprintf_r>:
 80031a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a8:	4698      	mov	r8, r3
 80031aa:	898b      	ldrh	r3, [r1, #12]
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	b09d      	sub	sp, #116	@ 0x74
 80031b0:	4607      	mov	r7, r0
 80031b2:	460d      	mov	r5, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	d510      	bpl.n	80031da <_svfiprintf_r+0x36>
 80031b8:	690b      	ldr	r3, [r1, #16]
 80031ba:	b973      	cbnz	r3, 80031da <_svfiprintf_r+0x36>
 80031bc:	2140      	movs	r1, #64	@ 0x40
 80031be:	f7ff ff09 	bl	8002fd4 <_malloc_r>
 80031c2:	6028      	str	r0, [r5, #0]
 80031c4:	6128      	str	r0, [r5, #16]
 80031c6:	b930      	cbnz	r0, 80031d6 <_svfiprintf_r+0x32>
 80031c8:	230c      	movs	r3, #12
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	b01d      	add	sp, #116	@ 0x74
 80031d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d6:	2340      	movs	r3, #64	@ 0x40
 80031d8:	616b      	str	r3, [r5, #20]
 80031da:	2300      	movs	r3, #0
 80031dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80031de:	2320      	movs	r3, #32
 80031e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80031e8:	2330      	movs	r3, #48	@ 0x30
 80031ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003388 <_svfiprintf_r+0x1e4>
 80031ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031f2:	f04f 0901 	mov.w	r9, #1
 80031f6:	4623      	mov	r3, r4
 80031f8:	469a      	mov	sl, r3
 80031fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031fe:	b10a      	cbz	r2, 8003204 <_svfiprintf_r+0x60>
 8003200:	2a25      	cmp	r2, #37	@ 0x25
 8003202:	d1f9      	bne.n	80031f8 <_svfiprintf_r+0x54>
 8003204:	ebba 0b04 	subs.w	fp, sl, r4
 8003208:	d00b      	beq.n	8003222 <_svfiprintf_r+0x7e>
 800320a:	465b      	mov	r3, fp
 800320c:	4622      	mov	r2, r4
 800320e:	4629      	mov	r1, r5
 8003210:	4638      	mov	r0, r7
 8003212:	f7ff ff6b 	bl	80030ec <__ssputs_r>
 8003216:	3001      	adds	r0, #1
 8003218:	f000 80a7 	beq.w	800336a <_svfiprintf_r+0x1c6>
 800321c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800321e:	445a      	add	r2, fp
 8003220:	9209      	str	r2, [sp, #36]	@ 0x24
 8003222:	f89a 3000 	ldrb.w	r3, [sl]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 809f 	beq.w	800336a <_svfiprintf_r+0x1c6>
 800322c:	2300      	movs	r3, #0
 800322e:	f04f 32ff 	mov.w	r2, #4294967295
 8003232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003236:	f10a 0a01 	add.w	sl, sl, #1
 800323a:	9304      	str	r3, [sp, #16]
 800323c:	9307      	str	r3, [sp, #28]
 800323e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003242:	931a      	str	r3, [sp, #104]	@ 0x68
 8003244:	4654      	mov	r4, sl
 8003246:	2205      	movs	r2, #5
 8003248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800324c:	484e      	ldr	r0, [pc, #312]	@ (8003388 <_svfiprintf_r+0x1e4>)
 800324e:	f7fc ffc7 	bl	80001e0 <memchr>
 8003252:	9a04      	ldr	r2, [sp, #16]
 8003254:	b9d8      	cbnz	r0, 800328e <_svfiprintf_r+0xea>
 8003256:	06d0      	lsls	r0, r2, #27
 8003258:	bf44      	itt	mi
 800325a:	2320      	movmi	r3, #32
 800325c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003260:	0711      	lsls	r1, r2, #28
 8003262:	bf44      	itt	mi
 8003264:	232b      	movmi	r3, #43	@ 0x2b
 8003266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800326a:	f89a 3000 	ldrb.w	r3, [sl]
 800326e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003270:	d015      	beq.n	800329e <_svfiprintf_r+0xfa>
 8003272:	9a07      	ldr	r2, [sp, #28]
 8003274:	4654      	mov	r4, sl
 8003276:	2000      	movs	r0, #0
 8003278:	f04f 0c0a 	mov.w	ip, #10
 800327c:	4621      	mov	r1, r4
 800327e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003282:	3b30      	subs	r3, #48	@ 0x30
 8003284:	2b09      	cmp	r3, #9
 8003286:	d94b      	bls.n	8003320 <_svfiprintf_r+0x17c>
 8003288:	b1b0      	cbz	r0, 80032b8 <_svfiprintf_r+0x114>
 800328a:	9207      	str	r2, [sp, #28]
 800328c:	e014      	b.n	80032b8 <_svfiprintf_r+0x114>
 800328e:	eba0 0308 	sub.w	r3, r0, r8
 8003292:	fa09 f303 	lsl.w	r3, r9, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	9304      	str	r3, [sp, #16]
 800329a:	46a2      	mov	sl, r4
 800329c:	e7d2      	b.n	8003244 <_svfiprintf_r+0xa0>
 800329e:	9b03      	ldr	r3, [sp, #12]
 80032a0:	1d19      	adds	r1, r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	9103      	str	r1, [sp, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfbb      	ittet	lt
 80032aa:	425b      	neglt	r3, r3
 80032ac:	f042 0202 	orrlt.w	r2, r2, #2
 80032b0:	9307      	strge	r3, [sp, #28]
 80032b2:	9307      	strlt	r3, [sp, #28]
 80032b4:	bfb8      	it	lt
 80032b6:	9204      	strlt	r2, [sp, #16]
 80032b8:	7823      	ldrb	r3, [r4, #0]
 80032ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80032bc:	d10a      	bne.n	80032d4 <_svfiprintf_r+0x130>
 80032be:	7863      	ldrb	r3, [r4, #1]
 80032c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032c2:	d132      	bne.n	800332a <_svfiprintf_r+0x186>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	9203      	str	r2, [sp, #12]
 80032cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032d0:	3402      	adds	r4, #2
 80032d2:	9305      	str	r3, [sp, #20]
 80032d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003398 <_svfiprintf_r+0x1f4>
 80032d8:	7821      	ldrb	r1, [r4, #0]
 80032da:	2203      	movs	r2, #3
 80032dc:	4650      	mov	r0, sl
 80032de:	f7fc ff7f 	bl	80001e0 <memchr>
 80032e2:	b138      	cbz	r0, 80032f4 <_svfiprintf_r+0x150>
 80032e4:	9b04      	ldr	r3, [sp, #16]
 80032e6:	eba0 000a 	sub.w	r0, r0, sl
 80032ea:	2240      	movs	r2, #64	@ 0x40
 80032ec:	4082      	lsls	r2, r0
 80032ee:	4313      	orrs	r3, r2
 80032f0:	3401      	adds	r4, #1
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f8:	4824      	ldr	r0, [pc, #144]	@ (800338c <_svfiprintf_r+0x1e8>)
 80032fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032fe:	2206      	movs	r2, #6
 8003300:	f7fc ff6e 	bl	80001e0 <memchr>
 8003304:	2800      	cmp	r0, #0
 8003306:	d036      	beq.n	8003376 <_svfiprintf_r+0x1d2>
 8003308:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <_svfiprintf_r+0x1ec>)
 800330a:	bb1b      	cbnz	r3, 8003354 <_svfiprintf_r+0x1b0>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	3307      	adds	r3, #7
 8003310:	f023 0307 	bic.w	r3, r3, #7
 8003314:	3308      	adds	r3, #8
 8003316:	9303      	str	r3, [sp, #12]
 8003318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800331a:	4433      	add	r3, r6
 800331c:	9309      	str	r3, [sp, #36]	@ 0x24
 800331e:	e76a      	b.n	80031f6 <_svfiprintf_r+0x52>
 8003320:	fb0c 3202 	mla	r2, ip, r2, r3
 8003324:	460c      	mov	r4, r1
 8003326:	2001      	movs	r0, #1
 8003328:	e7a8      	b.n	800327c <_svfiprintf_r+0xd8>
 800332a:	2300      	movs	r3, #0
 800332c:	3401      	adds	r4, #1
 800332e:	9305      	str	r3, [sp, #20]
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 0c0a 	mov.w	ip, #10
 8003336:	4620      	mov	r0, r4
 8003338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800333c:	3a30      	subs	r2, #48	@ 0x30
 800333e:	2a09      	cmp	r2, #9
 8003340:	d903      	bls.n	800334a <_svfiprintf_r+0x1a6>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0c6      	beq.n	80032d4 <_svfiprintf_r+0x130>
 8003346:	9105      	str	r1, [sp, #20]
 8003348:	e7c4      	b.n	80032d4 <_svfiprintf_r+0x130>
 800334a:	fb0c 2101 	mla	r1, ip, r1, r2
 800334e:	4604      	mov	r4, r0
 8003350:	2301      	movs	r3, #1
 8003352:	e7f0      	b.n	8003336 <_svfiprintf_r+0x192>
 8003354:	ab03      	add	r3, sp, #12
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	462a      	mov	r2, r5
 800335a:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <_svfiprintf_r+0x1f0>)
 800335c:	a904      	add	r1, sp, #16
 800335e:	4638      	mov	r0, r7
 8003360:	f3af 8000 	nop.w
 8003364:	1c42      	adds	r2, r0, #1
 8003366:	4606      	mov	r6, r0
 8003368:	d1d6      	bne.n	8003318 <_svfiprintf_r+0x174>
 800336a:	89ab      	ldrh	r3, [r5, #12]
 800336c:	065b      	lsls	r3, r3, #25
 800336e:	f53f af2d 	bmi.w	80031cc <_svfiprintf_r+0x28>
 8003372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003374:	e72c      	b.n	80031d0 <_svfiprintf_r+0x2c>
 8003376:	ab03      	add	r3, sp, #12
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	462a      	mov	r2, r5
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <_svfiprintf_r+0x1f0>)
 800337e:	a904      	add	r1, sp, #16
 8003380:	4638      	mov	r0, r7
 8003382:	f000 f879 	bl	8003478 <_printf_i>
 8003386:	e7ed      	b.n	8003364 <_svfiprintf_r+0x1c0>
 8003388:	080037c8 	.word	0x080037c8
 800338c:	080037d2 	.word	0x080037d2
 8003390:	00000000 	.word	0x00000000
 8003394:	080030ed 	.word	0x080030ed
 8003398:	080037ce 	.word	0x080037ce

0800339c <_printf_common>:
 800339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	4616      	mov	r6, r2
 80033a2:	4698      	mov	r8, r3
 80033a4:	688a      	ldr	r2, [r1, #8]
 80033a6:	690b      	ldr	r3, [r1, #16]
 80033a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033ac:	4293      	cmp	r3, r2
 80033ae:	bfb8      	it	lt
 80033b0:	4613      	movlt	r3, r2
 80033b2:	6033      	str	r3, [r6, #0]
 80033b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033b8:	4607      	mov	r7, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	b10a      	cbz	r2, 80033c2 <_printf_common+0x26>
 80033be:	3301      	adds	r3, #1
 80033c0:	6033      	str	r3, [r6, #0]
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	0699      	lsls	r1, r3, #26
 80033c6:	bf42      	ittt	mi
 80033c8:	6833      	ldrmi	r3, [r6, #0]
 80033ca:	3302      	addmi	r3, #2
 80033cc:	6033      	strmi	r3, [r6, #0]
 80033ce:	6825      	ldr	r5, [r4, #0]
 80033d0:	f015 0506 	ands.w	r5, r5, #6
 80033d4:	d106      	bne.n	80033e4 <_printf_common+0x48>
 80033d6:	f104 0a19 	add.w	sl, r4, #25
 80033da:	68e3      	ldr	r3, [r4, #12]
 80033dc:	6832      	ldr	r2, [r6, #0]
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	42ab      	cmp	r3, r5
 80033e2:	dc26      	bgt.n	8003432 <_printf_common+0x96>
 80033e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033e8:	6822      	ldr	r2, [r4, #0]
 80033ea:	3b00      	subs	r3, #0
 80033ec:	bf18      	it	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	0692      	lsls	r2, r2, #26
 80033f2:	d42b      	bmi.n	800344c <_printf_common+0xb0>
 80033f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033f8:	4641      	mov	r1, r8
 80033fa:	4638      	mov	r0, r7
 80033fc:	47c8      	blx	r9
 80033fe:	3001      	adds	r0, #1
 8003400:	d01e      	beq.n	8003440 <_printf_common+0xa4>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	6922      	ldr	r2, [r4, #16]
 8003406:	f003 0306 	and.w	r3, r3, #6
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf02      	ittt	eq
 800340e:	68e5      	ldreq	r5, [r4, #12]
 8003410:	6833      	ldreq	r3, [r6, #0]
 8003412:	1aed      	subeq	r5, r5, r3
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	bf0c      	ite	eq
 8003418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800341c:	2500      	movne	r5, #0
 800341e:	4293      	cmp	r3, r2
 8003420:	bfc4      	itt	gt
 8003422:	1a9b      	subgt	r3, r3, r2
 8003424:	18ed      	addgt	r5, r5, r3
 8003426:	2600      	movs	r6, #0
 8003428:	341a      	adds	r4, #26
 800342a:	42b5      	cmp	r5, r6
 800342c:	d11a      	bne.n	8003464 <_printf_common+0xc8>
 800342e:	2000      	movs	r0, #0
 8003430:	e008      	b.n	8003444 <_printf_common+0xa8>
 8003432:	2301      	movs	r3, #1
 8003434:	4652      	mov	r2, sl
 8003436:	4641      	mov	r1, r8
 8003438:	4638      	mov	r0, r7
 800343a:	47c8      	blx	r9
 800343c:	3001      	adds	r0, #1
 800343e:	d103      	bne.n	8003448 <_printf_common+0xac>
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003448:	3501      	adds	r5, #1
 800344a:	e7c6      	b.n	80033da <_printf_common+0x3e>
 800344c:	18e1      	adds	r1, r4, r3
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	2030      	movs	r0, #48	@ 0x30
 8003452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003456:	4422      	add	r2, r4
 8003458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800345c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003460:	3302      	adds	r3, #2
 8003462:	e7c7      	b.n	80033f4 <_printf_common+0x58>
 8003464:	2301      	movs	r3, #1
 8003466:	4622      	mov	r2, r4
 8003468:	4641      	mov	r1, r8
 800346a:	4638      	mov	r0, r7
 800346c:	47c8      	blx	r9
 800346e:	3001      	adds	r0, #1
 8003470:	d0e6      	beq.n	8003440 <_printf_common+0xa4>
 8003472:	3601      	adds	r6, #1
 8003474:	e7d9      	b.n	800342a <_printf_common+0x8e>
	...

08003478 <_printf_i>:
 8003478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800347c:	7e0f      	ldrb	r7, [r1, #24]
 800347e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003480:	2f78      	cmp	r7, #120	@ 0x78
 8003482:	4691      	mov	r9, r2
 8003484:	4680      	mov	r8, r0
 8003486:	460c      	mov	r4, r1
 8003488:	469a      	mov	sl, r3
 800348a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800348e:	d807      	bhi.n	80034a0 <_printf_i+0x28>
 8003490:	2f62      	cmp	r7, #98	@ 0x62
 8003492:	d80a      	bhi.n	80034aa <_printf_i+0x32>
 8003494:	2f00      	cmp	r7, #0
 8003496:	f000 80d2 	beq.w	800363e <_printf_i+0x1c6>
 800349a:	2f58      	cmp	r7, #88	@ 0x58
 800349c:	f000 80b9 	beq.w	8003612 <_printf_i+0x19a>
 80034a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034a8:	e03a      	b.n	8003520 <_printf_i+0xa8>
 80034aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ae:	2b15      	cmp	r3, #21
 80034b0:	d8f6      	bhi.n	80034a0 <_printf_i+0x28>
 80034b2:	a101      	add	r1, pc, #4	@ (adr r1, 80034b8 <_printf_i+0x40>)
 80034b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034b8:	08003511 	.word	0x08003511
 80034bc:	08003525 	.word	0x08003525
 80034c0:	080034a1 	.word	0x080034a1
 80034c4:	080034a1 	.word	0x080034a1
 80034c8:	080034a1 	.word	0x080034a1
 80034cc:	080034a1 	.word	0x080034a1
 80034d0:	08003525 	.word	0x08003525
 80034d4:	080034a1 	.word	0x080034a1
 80034d8:	080034a1 	.word	0x080034a1
 80034dc:	080034a1 	.word	0x080034a1
 80034e0:	080034a1 	.word	0x080034a1
 80034e4:	08003625 	.word	0x08003625
 80034e8:	0800354f 	.word	0x0800354f
 80034ec:	080035df 	.word	0x080035df
 80034f0:	080034a1 	.word	0x080034a1
 80034f4:	080034a1 	.word	0x080034a1
 80034f8:	08003647 	.word	0x08003647
 80034fc:	080034a1 	.word	0x080034a1
 8003500:	0800354f 	.word	0x0800354f
 8003504:	080034a1 	.word	0x080034a1
 8003508:	080034a1 	.word	0x080034a1
 800350c:	080035e7 	.word	0x080035e7
 8003510:	6833      	ldr	r3, [r6, #0]
 8003512:	1d1a      	adds	r2, r3, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6032      	str	r2, [r6, #0]
 8003518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800351c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003520:	2301      	movs	r3, #1
 8003522:	e09d      	b.n	8003660 <_printf_i+0x1e8>
 8003524:	6833      	ldr	r3, [r6, #0]
 8003526:	6820      	ldr	r0, [r4, #0]
 8003528:	1d19      	adds	r1, r3, #4
 800352a:	6031      	str	r1, [r6, #0]
 800352c:	0606      	lsls	r6, r0, #24
 800352e:	d501      	bpl.n	8003534 <_printf_i+0xbc>
 8003530:	681d      	ldr	r5, [r3, #0]
 8003532:	e003      	b.n	800353c <_printf_i+0xc4>
 8003534:	0645      	lsls	r5, r0, #25
 8003536:	d5fb      	bpl.n	8003530 <_printf_i+0xb8>
 8003538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800353c:	2d00      	cmp	r5, #0
 800353e:	da03      	bge.n	8003548 <_printf_i+0xd0>
 8003540:	232d      	movs	r3, #45	@ 0x2d
 8003542:	426d      	negs	r5, r5
 8003544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003548:	4859      	ldr	r0, [pc, #356]	@ (80036b0 <_printf_i+0x238>)
 800354a:	230a      	movs	r3, #10
 800354c:	e011      	b.n	8003572 <_printf_i+0xfa>
 800354e:	6821      	ldr	r1, [r4, #0]
 8003550:	6833      	ldr	r3, [r6, #0]
 8003552:	0608      	lsls	r0, r1, #24
 8003554:	f853 5b04 	ldr.w	r5, [r3], #4
 8003558:	d402      	bmi.n	8003560 <_printf_i+0xe8>
 800355a:	0649      	lsls	r1, r1, #25
 800355c:	bf48      	it	mi
 800355e:	b2ad      	uxthmi	r5, r5
 8003560:	2f6f      	cmp	r7, #111	@ 0x6f
 8003562:	4853      	ldr	r0, [pc, #332]	@ (80036b0 <_printf_i+0x238>)
 8003564:	6033      	str	r3, [r6, #0]
 8003566:	bf14      	ite	ne
 8003568:	230a      	movne	r3, #10
 800356a:	2308      	moveq	r3, #8
 800356c:	2100      	movs	r1, #0
 800356e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003572:	6866      	ldr	r6, [r4, #4]
 8003574:	60a6      	str	r6, [r4, #8]
 8003576:	2e00      	cmp	r6, #0
 8003578:	bfa2      	ittt	ge
 800357a:	6821      	ldrge	r1, [r4, #0]
 800357c:	f021 0104 	bicge.w	r1, r1, #4
 8003580:	6021      	strge	r1, [r4, #0]
 8003582:	b90d      	cbnz	r5, 8003588 <_printf_i+0x110>
 8003584:	2e00      	cmp	r6, #0
 8003586:	d04b      	beq.n	8003620 <_printf_i+0x1a8>
 8003588:	4616      	mov	r6, r2
 800358a:	fbb5 f1f3 	udiv	r1, r5, r3
 800358e:	fb03 5711 	mls	r7, r3, r1, r5
 8003592:	5dc7      	ldrb	r7, [r0, r7]
 8003594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003598:	462f      	mov	r7, r5
 800359a:	42bb      	cmp	r3, r7
 800359c:	460d      	mov	r5, r1
 800359e:	d9f4      	bls.n	800358a <_printf_i+0x112>
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d10b      	bne.n	80035bc <_printf_i+0x144>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	07df      	lsls	r7, r3, #31
 80035a8:	d508      	bpl.n	80035bc <_printf_i+0x144>
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	6861      	ldr	r1, [r4, #4]
 80035ae:	4299      	cmp	r1, r3
 80035b0:	bfde      	ittt	le
 80035b2:	2330      	movle	r3, #48	@ 0x30
 80035b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035bc:	1b92      	subs	r2, r2, r6
 80035be:	6122      	str	r2, [r4, #16]
 80035c0:	f8cd a000 	str.w	sl, [sp]
 80035c4:	464b      	mov	r3, r9
 80035c6:	aa03      	add	r2, sp, #12
 80035c8:	4621      	mov	r1, r4
 80035ca:	4640      	mov	r0, r8
 80035cc:	f7ff fee6 	bl	800339c <_printf_common>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d14a      	bne.n	800366a <_printf_i+0x1f2>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	b004      	add	sp, #16
 80035da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	f043 0320 	orr.w	r3, r3, #32
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	4833      	ldr	r0, [pc, #204]	@ (80036b4 <_printf_i+0x23c>)
 80035e8:	2778      	movs	r7, #120	@ 0x78
 80035ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	6831      	ldr	r1, [r6, #0]
 80035f2:	061f      	lsls	r7, r3, #24
 80035f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80035f8:	d402      	bmi.n	8003600 <_printf_i+0x188>
 80035fa:	065f      	lsls	r7, r3, #25
 80035fc:	bf48      	it	mi
 80035fe:	b2ad      	uxthmi	r5, r5
 8003600:	6031      	str	r1, [r6, #0]
 8003602:	07d9      	lsls	r1, r3, #31
 8003604:	bf44      	itt	mi
 8003606:	f043 0320 	orrmi.w	r3, r3, #32
 800360a:	6023      	strmi	r3, [r4, #0]
 800360c:	b11d      	cbz	r5, 8003616 <_printf_i+0x19e>
 800360e:	2310      	movs	r3, #16
 8003610:	e7ac      	b.n	800356c <_printf_i+0xf4>
 8003612:	4827      	ldr	r0, [pc, #156]	@ (80036b0 <_printf_i+0x238>)
 8003614:	e7e9      	b.n	80035ea <_printf_i+0x172>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	f023 0320 	bic.w	r3, r3, #32
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	e7f6      	b.n	800360e <_printf_i+0x196>
 8003620:	4616      	mov	r6, r2
 8003622:	e7bd      	b.n	80035a0 <_printf_i+0x128>
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	6825      	ldr	r5, [r4, #0]
 8003628:	6961      	ldr	r1, [r4, #20]
 800362a:	1d18      	adds	r0, r3, #4
 800362c:	6030      	str	r0, [r6, #0]
 800362e:	062e      	lsls	r6, r5, #24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	d501      	bpl.n	8003638 <_printf_i+0x1c0>
 8003634:	6019      	str	r1, [r3, #0]
 8003636:	e002      	b.n	800363e <_printf_i+0x1c6>
 8003638:	0668      	lsls	r0, r5, #25
 800363a:	d5fb      	bpl.n	8003634 <_printf_i+0x1bc>
 800363c:	8019      	strh	r1, [r3, #0]
 800363e:	2300      	movs	r3, #0
 8003640:	6123      	str	r3, [r4, #16]
 8003642:	4616      	mov	r6, r2
 8003644:	e7bc      	b.n	80035c0 <_printf_i+0x148>
 8003646:	6833      	ldr	r3, [r6, #0]
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	6032      	str	r2, [r6, #0]
 800364c:	681e      	ldr	r6, [r3, #0]
 800364e:	6862      	ldr	r2, [r4, #4]
 8003650:	2100      	movs	r1, #0
 8003652:	4630      	mov	r0, r6
 8003654:	f7fc fdc4 	bl	80001e0 <memchr>
 8003658:	b108      	cbz	r0, 800365e <_printf_i+0x1e6>
 800365a:	1b80      	subs	r0, r0, r6
 800365c:	6060      	str	r0, [r4, #4]
 800365e:	6863      	ldr	r3, [r4, #4]
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	2300      	movs	r3, #0
 8003664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003668:	e7aa      	b.n	80035c0 <_printf_i+0x148>
 800366a:	6923      	ldr	r3, [r4, #16]
 800366c:	4632      	mov	r2, r6
 800366e:	4649      	mov	r1, r9
 8003670:	4640      	mov	r0, r8
 8003672:	47d0      	blx	sl
 8003674:	3001      	adds	r0, #1
 8003676:	d0ad      	beq.n	80035d4 <_printf_i+0x15c>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	079b      	lsls	r3, r3, #30
 800367c:	d413      	bmi.n	80036a6 <_printf_i+0x22e>
 800367e:	68e0      	ldr	r0, [r4, #12]
 8003680:	9b03      	ldr	r3, [sp, #12]
 8003682:	4298      	cmp	r0, r3
 8003684:	bfb8      	it	lt
 8003686:	4618      	movlt	r0, r3
 8003688:	e7a6      	b.n	80035d8 <_printf_i+0x160>
 800368a:	2301      	movs	r3, #1
 800368c:	4632      	mov	r2, r6
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	47d0      	blx	sl
 8003694:	3001      	adds	r0, #1
 8003696:	d09d      	beq.n	80035d4 <_printf_i+0x15c>
 8003698:	3501      	adds	r5, #1
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	9903      	ldr	r1, [sp, #12]
 800369e:	1a5b      	subs	r3, r3, r1
 80036a0:	42ab      	cmp	r3, r5
 80036a2:	dcf2      	bgt.n	800368a <_printf_i+0x212>
 80036a4:	e7eb      	b.n	800367e <_printf_i+0x206>
 80036a6:	2500      	movs	r5, #0
 80036a8:	f104 0619 	add.w	r6, r4, #25
 80036ac:	e7f5      	b.n	800369a <_printf_i+0x222>
 80036ae:	bf00      	nop
 80036b0:	080037d9 	.word	0x080037d9
 80036b4:	080037ea 	.word	0x080037ea

080036b8 <memmove>:
 80036b8:	4288      	cmp	r0, r1
 80036ba:	b510      	push	{r4, lr}
 80036bc:	eb01 0402 	add.w	r4, r1, r2
 80036c0:	d902      	bls.n	80036c8 <memmove+0x10>
 80036c2:	4284      	cmp	r4, r0
 80036c4:	4623      	mov	r3, r4
 80036c6:	d807      	bhi.n	80036d8 <memmove+0x20>
 80036c8:	1e43      	subs	r3, r0, #1
 80036ca:	42a1      	cmp	r1, r4
 80036cc:	d008      	beq.n	80036e0 <memmove+0x28>
 80036ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036d6:	e7f8      	b.n	80036ca <memmove+0x12>
 80036d8:	4402      	add	r2, r0
 80036da:	4601      	mov	r1, r0
 80036dc:	428a      	cmp	r2, r1
 80036de:	d100      	bne.n	80036e2 <memmove+0x2a>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036ea:	e7f7      	b.n	80036dc <memmove+0x24>

080036ec <_sbrk_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d06      	ldr	r5, [pc, #24]	@ (8003708 <_sbrk_r+0x1c>)
 80036f0:	2300      	movs	r3, #0
 80036f2:	4604      	mov	r4, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	f7fd fdf8 	bl	80012ec <_sbrk>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_sbrk_r+0x1a>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	b103      	cbz	r3, 8003706 <_sbrk_r+0x1a>
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	20000254 	.word	0x20000254

0800370c <memcpy>:
 800370c:	440a      	add	r2, r1
 800370e:	4291      	cmp	r1, r2
 8003710:	f100 33ff 	add.w	r3, r0, #4294967295
 8003714:	d100      	bne.n	8003718 <memcpy+0xc>
 8003716:	4770      	bx	lr
 8003718:	b510      	push	{r4, lr}
 800371a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800371e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003722:	4291      	cmp	r1, r2
 8003724:	d1f9      	bne.n	800371a <memcpy+0xe>
 8003726:	bd10      	pop	{r4, pc}

08003728 <_realloc_r>:
 8003728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372c:	4680      	mov	r8, r0
 800372e:	4615      	mov	r5, r2
 8003730:	460c      	mov	r4, r1
 8003732:	b921      	cbnz	r1, 800373e <_realloc_r+0x16>
 8003734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003738:	4611      	mov	r1, r2
 800373a:	f7ff bc4b 	b.w	8002fd4 <_malloc_r>
 800373e:	b92a      	cbnz	r2, 800374c <_realloc_r+0x24>
 8003740:	f7ff fbdc 	bl	8002efc <_free_r>
 8003744:	2400      	movs	r4, #0
 8003746:	4620      	mov	r0, r4
 8003748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800374c:	f000 f81a 	bl	8003784 <_malloc_usable_size_r>
 8003750:	4285      	cmp	r5, r0
 8003752:	4606      	mov	r6, r0
 8003754:	d802      	bhi.n	800375c <_realloc_r+0x34>
 8003756:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800375a:	d8f4      	bhi.n	8003746 <_realloc_r+0x1e>
 800375c:	4629      	mov	r1, r5
 800375e:	4640      	mov	r0, r8
 8003760:	f7ff fc38 	bl	8002fd4 <_malloc_r>
 8003764:	4607      	mov	r7, r0
 8003766:	2800      	cmp	r0, #0
 8003768:	d0ec      	beq.n	8003744 <_realloc_r+0x1c>
 800376a:	42b5      	cmp	r5, r6
 800376c:	462a      	mov	r2, r5
 800376e:	4621      	mov	r1, r4
 8003770:	bf28      	it	cs
 8003772:	4632      	movcs	r2, r6
 8003774:	f7ff ffca 	bl	800370c <memcpy>
 8003778:	4621      	mov	r1, r4
 800377a:	4640      	mov	r0, r8
 800377c:	f7ff fbbe 	bl	8002efc <_free_r>
 8003780:	463c      	mov	r4, r7
 8003782:	e7e0      	b.n	8003746 <_realloc_r+0x1e>

08003784 <_malloc_usable_size_r>:
 8003784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003788:	1f18      	subs	r0, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfbc      	itt	lt
 800378e:	580b      	ldrlt	r3, [r1, r0]
 8003790:	18c0      	addlt	r0, r0, r3
 8003792:	4770      	bx	lr

08003794 <_init>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr

080037a0 <_fini>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr
