
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003694  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003834  08003834  00004834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003888  08003888  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003888  08003888  00004888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003890  08003890  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003898  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08003900  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003900  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cbc  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  0000bd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0000d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004dd  00000000  00000000  0000dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015994  00000000  00000000  0000dfbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000866a  00000000  00000000  00023951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c5f  00000000  00000000  0002bfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e48  00000000  00000000  000b0c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000b2aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800381c 	.word	0x0800381c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800381c 	.word	0x0800381c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000574:	b08d      	sub	sp, #52	@ 0x34
 8000576:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 ff6e 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8e8 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f986 	bl	8000890 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000584:	f000 f94e 	bl	8000824 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	LED2_GPIO_Port->ODR |= LED2_Pin;
 8000588:	4b69      	ldr	r3, [pc, #420]	@ (8000730 <main+0x1c0>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a68      	ldr	r2, [pc, #416]	@ (8000730 <main+0x1c0>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 8000594:	4b66      	ldr	r3, [pc, #408]	@ (8000730 <main+0x1c0>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a65      	ldr	r2, [pc, #404]	@ (8000730 <main+0x1c0>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 80005a0:	4b63      	ldr	r3, [pc, #396]	@ (8000730 <main+0x1c0>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a62      	ldr	r2, [pc, #392]	@ (8000730 <main+0x1c0>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6153      	str	r3, [r2, #20]

	HAL_Delay(2000);
 80005ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005b0:	f000 ffc4 	bl	800153c <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 80005b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000730 <main+0x1c0>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a5d      	ldr	r2, [pc, #372]	@ (8000730 <main+0x1c0>)
 80005ba:	f023 0301 	bic.w	r3, r3, #1
 80005be:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 80005c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000730 <main+0x1c0>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a5a      	ldr	r2, [pc, #360]	@ (8000730 <main+0x1c0>)
 80005c6:	f023 0302 	bic.w	r3, r3, #2
 80005ca:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 80005cc:	4b58      	ldr	r3, [pc, #352]	@ (8000730 <main+0x1c0>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a57      	ldr	r2, [pc, #348]	@ (8000730 <main+0x1c0>)
 80005d2:	f023 0304 	bic.w	r3, r3, #4
 80005d6:	6153      	str	r3, [r2, #20]

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin))
 80005d8:	2220      	movs	r2, #32
 80005da:	4956      	ldr	r1, [pc, #344]	@ (8000734 <main+0x1c4>)
 80005dc:	4856      	ldr	r0, [pc, #344]	@ (8000738 <main+0x1c8>)
 80005de:	f000 f9f9 	bl	80009d4 <LORA_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <main+0x80>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80005e8:	2102      	movs	r1, #2
 80005ea:	4851      	ldr	r0, [pc, #324]	@ (8000730 <main+0x1c0>)
 80005ec:	f001 fa4d 	bl	8001a8a <HAL_GPIO_TogglePin>
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 80005f0:	4b4f      	ldr	r3, [pc, #316]	@ (8000730 <main+0x1c0>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a4e      	ldr	r2, [pc, #312]	@ (8000730 <main+0x1c0>)
 80005f6:	f023 0302 	bic.w	r3, r3, #2
 80005fa:	6153      	str	r3, [r2, #20]

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 80005fc:	2201      	movs	r2, #1
 80005fe:	494f      	ldr	r1, [pc, #316]	@ (800073c <main+0x1cc>)
 8000600:	484d      	ldr	r0, [pc, #308]	@ (8000738 <main+0x1c8>)
 8000602:	f000 fb25 	bl	8000c50 <MS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000606:	466b      	mov	r3, sp
 8000608:	461e      	mov	r6, r3
		MS_ReadData(MS_Data);
 800060a:	484d      	ldr	r0, [pc, #308]	@ (8000740 <main+0x1d0>)
 800060c:	f000 fb46 	bl	8000c9c <MS_ReadData>

		SensorsData.press = MS_Data[0];
 8000610:	4b4b      	ldr	r3, [pc, #300]	@ (8000740 <main+0x1d0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a4b      	ldr	r2, [pc, #300]	@ (8000744 <main+0x1d4>)
 8000616:	6013      	str	r3, [r2, #0]
		SensorsData.temp = MS_Data[1];
 8000618:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <main+0x1d0>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a49      	ldr	r2, [pc, #292]	@ (8000744 <main+0x1d4>)
 800061e:	6053      	str	r3, [r2, #4]

		char buffer[sizeOfBufferToLora];
 8000620:	4b49      	ldr	r3, [pc, #292]	@ (8000748 <main+0x1d8>)
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	1e4b      	subs	r3, r1, #1
 8000626:	623b      	str	r3, [r7, #32]
 8000628:	460a      	mov	r2, r1
 800062a:	2300      	movs	r3, #0
 800062c:	4614      	mov	r4, r2
 800062e:	461d      	mov	r5, r3
 8000630:	f04f 0200 	mov.w	r2, #0
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	00eb      	lsls	r3, r5, #3
 800063a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800063e:	00e2      	lsls	r2, r4, #3
 8000640:	460a      	mov	r2, r1
 8000642:	2300      	movs	r3, #0
 8000644:	4690      	mov	r8, r2
 8000646:	4699      	mov	r9, r3
 8000648:	f04f 0200 	mov.w	r2, #0
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000654:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000658:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800065c:	460b      	mov	r3, r1
 800065e:	3307      	adds	r3, #7
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	ebad 0d03 	sub.w	sp, sp, r3
 8000668:	ab02      	add	r3, sp, #8
 800066a:	3300      	adds	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

		snprintf(buffer, sizeOfBufferToLora, "%ld;%ld;%ld;\n", HAL_GetTick(),
 800066e:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <main+0x1d8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	f000 ff56 	bl	8001524 <HAL_GetTick>
 8000678:	4601      	mov	r1, r0
 800067a:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <main+0x1d4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a31      	ldr	r2, [pc, #196]	@ (8000744 <main+0x1d4>)
 8000680:	6852      	ldr	r2, [r2, #4]
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	460b      	mov	r3, r1
 8000688:	4a30      	ldr	r2, [pc, #192]	@ (800074c <main+0x1dc>)
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	69f8      	ldr	r0, [r7, #28]
 800068e:	f002 fc11 	bl	8002eb4 <sniprintf>
				SensorsData.press, SensorsData.temp);

		uint8_t bufferToLora[sizeOfBufferToLora];
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <main+0x1d8>)
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	1e4b      	subs	r3, r1, #1
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	460a      	mov	r2, r1
 800069c:	2300      	movs	r3, #0
 800069e:	4692      	mov	sl, r2
 80006a0:	469b      	mov	fp, r3
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80006ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80006b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80006b6:	460a      	mov	r2, r1
 80006b8:	2300      	movs	r3, #0
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	00c3      	lsls	r3, r0, #3
 80006ca:	68b8      	ldr	r0, [r7, #8]
 80006cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	00c2      	lsls	r2, r0, #3
 80006d4:	460b      	mov	r3, r1
 80006d6:	3307      	adds	r3, #7
 80006d8:	08db      	lsrs	r3, r3, #3
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	ebad 0d03 	sub.w	sp, sp, r3
 80006e0:	ab02      	add	r3, sp, #8
 80006e2:	3300      	adds	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

		for (int i = 0; i < sizeOfBufferToLora; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ea:	e00b      	b.n	8000704 <main+0x194>
			bufferToLora[i] = (uint8_t) buffer[i];
 80006ec:	69fa      	ldr	r2, [r7, #28]
 80006ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f0:	4413      	add	r3, r2
 80006f2:	7819      	ldrb	r1, [r3, #0]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeOfBufferToLora; i++) {
 80006fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000700:	3301      	adds	r3, #1
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <main+0x1d8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800070a:	429a      	cmp	r2, r3
 800070c:	dbee      	blt.n	80006ec <main+0x17c>
		}

		LORA_TransmitData(bufferToLora, sizeOfBufferToLora);
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <main+0x1d8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	6978      	ldr	r0, [r7, #20]
 8000718:	f000 fa42 	bl	8000ba0 <LORA_TransmitData>

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800071c:	2101      	movs	r1, #1
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <main+0x1c0>)
 8000720:	f001 f9b3 	bl	8001a8a <HAL_GPIO_TogglePin>

		HAL_Delay(100);
 8000724:	2064      	movs	r0, #100	@ 0x64
 8000726:	f000 ff09 	bl	800153c <HAL_Delay>
 800072a:	46b5      	mov	sp, r6
	while (1) {
 800072c:	e76b      	b.n	8000606 <main+0x96>
 800072e:	bf00      	nop
 8000730:	40020000 	.word	0x40020000
 8000734:	40020800 	.word	0x40020800
 8000738:	20000084 	.word	0x20000084
 800073c:	40020400 	.word	0x40020400
 8000740:	200000dc 	.word	0x200000dc
 8000744:	200000e4 	.word	0x200000e4
 8000748:	20000000 	.word	0x20000000
 800074c:	08003834 	.word	0x08003834

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fbdc 	bl	8002f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b28      	ldr	r3, [pc, #160]	@ (800081c <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a27      	ldr	r2, [pc, #156]	@ (800081c <SystemClock_Config+0xcc>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b25      	ldr	r3, [pc, #148]	@ (800081c <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800079c:	4a20      	ldr	r2, [pc, #128]	@ (8000820 <SystemClock_Config+0xd0>)
 800079e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c4:	2319      	movs	r3, #25
 80007c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c8:	23a8      	movs	r3, #168	@ 0xa8
 80007ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 f971 	bl	8001ac0 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e4:	f000 f8f0 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2102      	movs	r1, #2
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fbd3 	bl	8001fb0 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000810:	f000 f8da 	bl	80009c8 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	@ 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	@ (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2210      	movs	r2, #16
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f001 fd47 	bl	8002308 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f8a2 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000084 	.word	0x20000084
 800088c:	40013000 	.word	0x40013000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b43      	ldr	r3, [pc, #268]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a42      	ldr	r2, [pc, #264]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b40      	ldr	r3, [pc, #256]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b3c      	ldr	r3, [pc, #240]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a3b      	ldr	r2, [pc, #236]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b35      	ldr	r3, [pc, #212]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a34      	ldr	r2, [pc, #208]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b32      	ldr	r3, [pc, #200]	@ (80009b8 <MX_GPIO_Init+0x128>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <MX_GPIO_Init+0x128>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a2d      	ldr	r2, [pc, #180]	@ (80009b8 <MX_GPIO_Init+0x128>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <MX_GPIO_Init+0x128>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2131      	movs	r1, #49	@ 0x31
 800091a:	4828      	ldr	r0, [pc, #160]	@ (80009bc <MX_GPIO_Init+0x12c>)
 800091c:	f001 f89c 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2107      	movs	r1, #7
 8000924:	4826      	ldr	r0, [pc, #152]	@ (80009c0 <MX_GPIO_Init+0x130>)
 8000926:	f001 f897 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	4824      	ldr	r0, [pc, #144]	@ (80009c0 <MX_GPIO_Init+0x130>)
 8000930:	f001 f892 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f240 2107 	movw	r1, #519	@ 0x207
 800093a:	4822      	ldr	r0, [pc, #136]	@ (80009c4 <MX_GPIO_Init+0x134>)
 800093c:	f001 f88c 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin;
 8000940:	2331      	movs	r3, #49	@ 0x31
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4819      	ldr	r0, [pc, #100]	@ (80009bc <MX_GPIO_Init+0x12c>)
 8000958:	f000 fefa 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|WQ_HOLD_Pin;
 800095c:	2317      	movs	r3, #23
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <MX_GPIO_Init+0x130>)
 8000974:	f000 feec 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
  GPIO_InitStruct.Pin = MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin;
 8000978:	f240 2307 	movw	r3, #519	@ 0x207
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <MX_GPIO_Init+0x134>)
 8000992:	f000 fedd 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin|JMP_PROG_Pin;
 8000996:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80009ac:	f000 fed0 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	@ 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	4613      	mov	r3, r2
 80009e0:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 80009e2:	4a32      	ldr	r2, [pc, #200]	@ (8000aac <LORA_Init+0xd8>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 80009e8:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <LORA_Init+0xdc>)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 80009ee:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <LORA_Init+0xe0>)
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 80009f4:	2042      	movs	r0, #66	@ 0x42
 80009f6:	f000 f861 	bl	8000abc <_loraReadReg>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b12      	cmp	r3, #18
 80009fe:	d001      	beq.n	8000a04 <LORA_Init+0x30>
		return 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e04e      	b.n	8000aa2 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 f88e 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 8000a0c:	2188      	movs	r1, #136	@ 0x88
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 f88a 	bl	8000b28 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <LORA_Init+0xe4>)
 8000a16:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2006      	movs	r0, #6
 8000a22:	f000 f881 	bl	8000b28 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f000 f87a 	bl	8000b28 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	f000 f874 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8000a40:	21ff      	movs	r1, #255	@ 0xff
 8000a42:	2009      	movs	r0, #9
 8000a44:	f000 f870 	bl	8000b28 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8000a48:	210b      	movs	r1, #11
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f000 f86c 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8000a50:	2120      	movs	r1, #32
 8000a52:	200c      	movs	r0, #12
 8000a54:	f000 f868 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8000a58:	21ff      	movs	r1, #255	@ 0xff
 8000a5a:	200e      	movs	r0, #14
 8000a5c:	f000 f864 	bl	8000b28 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8000a60:	2100      	movs	r1, #0
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f860 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8000a68:	2182      	movs	r1, #130	@ 0x82
 8000a6a:	201d      	movs	r0, #29
 8000a6c:	f000 f85c 	bl	8000b28 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8000a70:	2170      	movs	r1, #112	@ 0x70
 8000a72:	201e      	movs	r0, #30
 8000a74:	f000 f858 	bl	8000b28 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2020      	movs	r0, #32
 8000a7c:	f000 f854 	bl	8000b28 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8000a80:	2106      	movs	r1, #6
 8000a82:	2021      	movs	r0, #33	@ 0x21
 8000a84:	f000 f850 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8000a88:	213c      	movs	r1, #60	@ 0x3c
 8000a8a:	2022      	movs	r0, #34	@ 0x22
 8000a8c:	f000 f84c 	bl	8000b28 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8000a90:	213c      	movs	r1, #60	@ 0x3c
 8000a92:	2023      	movs	r0, #35	@ 0x23
 8000a94:	f000 f848 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000a98:	2105      	movs	r1, #5
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f844 	bl	8000b28 <_loraWriteReg>

	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000ec 	.word	0x200000ec
 8000ab0:	200000f0 	.word	0x200000f0
 8000ab4:	200000f4 	.word	0x200000f4
 8000ab8:	006c4000 	.word	0x006c4000

08000abc <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <_loraReadReg+0x60>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <_loraReadReg+0x64>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <_loraReadReg+0x60>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	400a      	ands	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <_loraReadReg+0x68>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	1df9      	adds	r1, r7, #7
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f001 fc97 	bl	800241a <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <_loraReadReg+0x68>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	1df9      	adds	r1, r7, #7
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	2201      	movs	r2, #1
 8000af8:	f001 fdd2 	bl	80026a0 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <_loraReadReg+0x60>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <_loraReadReg+0x64>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <_loraReadReg+0x60>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	615a      	str	r2, [r3, #20]
	return reg;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000f0 	.word	0x200000f0
 8000b20:	200000f4 	.word	0x200000f4
 8000b24:	200000ec 	.word	0x200000ec

08000b28 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <_loraWriteReg+0x6c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_loraWriteReg+0x70>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <_loraWriteReg+0x6c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	400a      	ands	r2, r1
 8000b56:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_loraWriteReg+0x74>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	1df9      	adds	r1, r7, #7
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	2201      	movs	r2, #1
 8000b64:	f001 fc59 	bl	800241a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <_loraWriteReg+0x74>)
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	1db9      	adds	r1, r7, #6
 8000b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b72:	2201      	movs	r2, #1
 8000b74:	f001 fc51 	bl	800241a <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <_loraWriteReg+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <_loraWriteReg+0x70>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <_loraWriteReg+0x6c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000f0 	.word	0x200000f0
 8000b98:	200000f4 	.word	0x200000f4
 8000b9c:	200000ec 	.word	0x200000ec

08000ba0 <LORA_TransmitData>:
		return packetSize;
	}
	return 0;
}

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8000bac:	21ff      	movs	r1, #255	@ 0xff
 8000bae:	200d      	movs	r0, #13
 8000bb0:	f7ff ffba 	bl	8000b28 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2022      	movs	r0, #34	@ 0x22
 8000bba:	f7ff ffb5 	bl	8000b28 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <LORA_TransmitData+0xa4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <LORA_TransmitData+0xa8>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <LORA_TransmitData+0xa4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <LORA_TransmitData+0xac>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	f107 010f 	add.w	r1, r7, #15
 8000be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be4:	2201      	movs	r2, #1
 8000be6:	f001 fc18 	bl	800241a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <LORA_TransmitData+0xac>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f001 fc0f 	bl	800241a <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <LORA_TransmitData+0xa4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <LORA_TransmitData+0xa8>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	4619      	mov	r1, r3
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <LORA_TransmitData+0xa4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8000c10:	2103      	movs	r1, #3
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff ff88 	bl	8000b28 <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 8000c18:	bf00      	nop
 8000c1a:	2012      	movs	r0, #18
 8000c1c:	f7ff ff4e 	bl	8000abc <_loraReadReg>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f7      	beq.n	8000c1a <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f7ff ff7b 	bl	8000b28 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000c32:	2105      	movs	r1, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ff77 	bl	8000b28 <_loraWriteReg>

}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000f0 	.word	0x200000f0
 8000c48:	200000f4 	.word	0x200000f4
 8000c4c:	200000ec 	.word	0x200000ec

08000c50 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <MS_Init+0x3c>)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <MS_Init+0x40>)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <MS_Init+0x44>)
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 8000c70:	201e      	movs	r0, #30
 8000c72:	f000 f9c7 	bl	8001004 <_msSendCmd>
	HAL_Delay(100);
 8000c76:	2064      	movs	r0, #100	@ 0x64
 8000c78:	f000 fc60 	bl	800153c <HAL_Delay>

	_msReadProm(_calibrCoeff);
 8000c7c:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MS_Init+0x48>)
 8000c7e:	f000 f82d 	bl	8000cdc <_msReadProm>

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000f8 	.word	0x200000f8
 8000c90:	200000fc 	.word	0x200000fc
 8000c94:	20000100 	.word	0x20000100
 8000c98:	20000104 	.word	0x20000104

08000c9c <MS_ReadData>:

void MS_ReadData(uint32_t endBufer[]) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f80a 	bl	8000cc2 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f88f 	bl	8000dd8 <_calculate>

}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fa1d 	bl	800110c <_msSendCmdGetData32>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 8000ce4:	4b38      	ldr	r3, [pc, #224]	@ (8000dc8 <_msReadProm+0xec>)
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f9b5 	bl	800105c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8000cf2:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <_msReadProm+0xec>)
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f9ae 	bl	800105c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8000d00:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <_msReadProm+0xec>)
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	2203      	movs	r2, #3
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f9a7 	bl	800105c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <_msReadProm+0xec>)
 8000d10:	791b      	ldrb	r3, [r3, #4]
 8000d12:	2204      	movs	r2, #4
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f9a0 	bl	800105c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <_msReadProm+0xec>)
 8000d1e:	795b      	ldrb	r3, [r3, #5]
 8000d20:	2205      	movs	r2, #5
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f999 	bl	800105c <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 8000d2a:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <_msReadProm+0xec>)
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	2206      	movs	r2, #6
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f992 	bl	800105c <_msSendCmdGetData16>

	_realCalibrCoeff.Tref = (_calibrCoeff[5] * (2 << 7));
 8000d38:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <_msReadProm+0xf0>)
 8000d3a:	895b      	ldrh	r3, [r3, #10]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <_msReadProm+0xf4>)
 8000d48:	edc3 7a00 	vstr	s15, [r3]
	_realCalibrCoeff.TempSens = _calibrCoeff[6] / (2 << 22) + 1;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <_msReadProm+0xf0>)
 8000d4e:	899b      	ldrh	r3, [r3, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da02      	bge.n	8000d5a <_msReadProm+0x7e>
 8000d54:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd4 <_msReadProm+0xf8>)
 8000d56:	441a      	add	r2, r3
 8000d58:	4613      	mov	r3, r2
 8000d5a:	15db      	asrs	r3, r3, #23
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d66:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <_msReadProm+0xf4>)
 8000d68:	edc3 7a01 	vstr	s15, [r3, #4]
	_realCalibrCoeff.OffT1 = _calibrCoeff[2] * (2 << 15);
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <_msReadProm+0xf0>)
 8000d6e:	889b      	ldrh	r3, [r3, #4]
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <_msReadProm+0xf4>)
 8000d7c:	edc3 7a02 	vstr	s15, [r3, #8]
	_realCalibrCoeff.Tco = (_calibrCoeff[4]) / (2 << 6);
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <_msReadProm+0xf0>)
 8000d82:	891b      	ldrh	r3, [r3, #8]
 8000d84:	09db      	lsrs	r3, r3, #7
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <_msReadProm+0xf4>)
 8000d92:	edc3 7a03 	vstr	s15, [r3, #12]
	_realCalibrCoeff.SensT1 = _calibrCoeff[1] * (2 << 14);
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <_msReadProm+0xf0>)
 8000d98:	885b      	ldrh	r3, [r3, #2]
 8000d9a:	03db      	lsls	r3, r3, #15
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <_msReadProm+0xf4>)
 8000da6:	edc3 7a04 	vstr	s15, [r3, #16]
	_realCalibrCoeff.Tcs = (_calibrCoeff[3]) / (2 << 7);
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <_msReadProm+0xf0>)
 8000dac:	88db      	ldrh	r3, [r3, #6]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dba:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <_msReadProm+0xf4>)
 8000dbc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000104 	.word	0x20000104
 8000dd0:	20000114 	.word	0x20000114
 8000dd4:	007fffff 	.word	0x007fffff

08000dd8 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], uint32_t bufer[]) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b08d      	sub	sp, #52	@ 0x34
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	uint32_t D1 = dataWithPressTemp[0];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	61bb      	str	r3, [r7, #24]
	uint32_t D2 = dataWithPressTemp[1];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	617b      	str	r3, [r7, #20]

	float dT = D2 - _realCalibrCoeff.Tref;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000df8:	4b7b      	ldr	r3, [pc, #492]	@ (8000fe8 <_calculate+0x210>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]
	float TEMP = 2000 + dT * _realCalibrCoeff.TempSens;
 8000e06:	4b78      	ldr	r3, [pc, #480]	@ (8000fe8 <_calculate+0x210>)
 8000e08:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e14:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000fec <_calculate+0x214>
 8000e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e1c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float OFF = _realCalibrCoeff.OffT1 + _realCalibrCoeff.Tco * dT;
 8000e20:	4b71      	ldr	r3, [pc, #452]	@ (8000fe8 <_calculate+0x210>)
 8000e22:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e26:	4b70      	ldr	r3, [pc, #448]	@ (8000fe8 <_calculate+0x210>)
 8000e28:	edd3 6a03 	vldr	s13, [r3, #12]
 8000e2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e38:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	float SENS = _realCalibrCoeff.SensT1 + _realCalibrCoeff.Tcs * dT;
 8000e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8000fe8 <_calculate+0x210>)
 8000e3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e42:	4b69      	ldr	r3, [pc, #420]	@ (8000fe8 <_calculate+0x210>)
 8000e44:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (TEMP < 2000) {
 8000e58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e5c:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8000fec <_calculate+0x214>
 8000e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	f140 808f 	bpl.w	8000f8a <_calculate+0x1b2>
		float T2 = (dT * dT) / (2 << 30);
 8000e6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e74:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000ff0 <_calculate+0x218>
 8000e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e7c:	edc7 7a03 	vstr	s15, [r7, #12]
		float OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8000e80:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e84:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8000fec <_calculate+0x214>
 8000e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e8c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000e90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e94:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e98:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8000fec <_calculate+0x214>
 8000e9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eac:	edc7 7a08 	vstr	s15, [r7, #32]
		float SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / (2 * 2);
 8000eb0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000eb4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000fec <_calculate+0x214>
 8000eb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ebc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ec4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ec8:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8000fec <_calculate+0x214>
 8000ecc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000edc:	edc7 7a07 	vstr	s15, [r7, #28]

		if (TEMP < -1500) {
 8000ee0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ee4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000ff4 <_calculate+0x21c>
 8000ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	d533      	bpl.n	8000f5a <_calculate+0x182>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8000ef2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ef6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000ff8 <_calculate+0x220>
 8000efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000efe:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8000f02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f0a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000ff8 <_calculate+0x220>
 8000f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f16:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1e:	edc7 7a08 	vstr	s15, [r7, #32]
			SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2;
 8000f22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f26:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000ff8 <_calculate+0x220>
 8000f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f2e:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8000f32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f36:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f3a:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000ff8 <_calculate+0x220>
 8000f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f46:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		TEMP -= T2;
 8000f5a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		OFF -= OFF2;
 8000f6a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000f6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		SENS -= SENS2;
 8000f7a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	float PRES = (D1 * SENS / (2 << 20) - OFF) / (2 << 14);
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f94:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000ffc <_calculate+0x224>
 8000fa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fa4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fac:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001000 <_calculate+0x228>
 8000fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb4:	edc7 7a02 	vstr	s15, [r7, #8]

	bufer[0] = PRES;
 8000fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc0:	ee17 2a90 	vmov	r2, s15
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd4:	ee17 2a90 	vmov	r2, s15
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3734      	adds	r7, #52	@ 0x34
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000114 	.word	0x20000114
 8000fec:	44fa0000 	.word	0x44fa0000
 8000ff0:	cf000000 	.word	0xcf000000
 8000ff4:	c4bb8000 	.word	0xc4bb8000
 8000ff8:	44bb8000 	.word	0x44bb8000
 8000ffc:	4a000000 	.word	0x4a000000
 8001000:	47000000 	.word	0x47000000

08001004 <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <_msSendCmd+0x4c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <_msSendCmd+0x50>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	43db      	mvns	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <_msSendCmd+0x4c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	400a      	ands	r2, r1
 8001022:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <_msSendCmd+0x54>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	1df9      	adds	r1, r7, #7
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	f001 f9f3 	bl	800241a <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <_msSendCmd+0x4c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <_msSendCmd+0x50>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <_msSendCmd+0x4c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200000fc 	.word	0x200000fc
 8001054:	20000100 	.word	0x20000100
 8001058:	200000f8 	.word	0x200000f8

0800105c <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <_msSendCmdGetData16+0xa4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <_msSendCmdGetData16+0xa8>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	43db      	mvns	r3, r3
 8001078:	4619      	mov	r1, r3
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <_msSendCmdGetData16+0xa4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	400a      	ands	r2, r1
 8001080:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <_msSendCmdGetData16+0xac>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	1df9      	adds	r1, r7, #7
 8001088:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108c:	2201      	movs	r2, #1
 800108e:	f001 f9c4 	bl	800241a <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 fa52 	bl	800153c <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <_msSendCmdGetData16+0xac>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f107 010d 	add.w	r1, r7, #13
 80010a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a4:	2201      	movs	r2, #1
 80010a6:	f001 fafb 	bl	80026a0 <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <_msSendCmdGetData16+0xac>)
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f107 010c 	add.w	r1, r7, #12
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	2201      	movs	r2, #1
 80010b8:	f001 faf2 	bl	80026a0 <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_msSendCmdGetData16+0xa4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <_msSendCmdGetData16+0xa8>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <_msSendCmdGetData16+0xa4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	461a      	mov	r2, r3
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	89fa      	ldrh	r2, [r7, #14]
 80010ee:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 80010f0:	2014      	movs	r0, #20
 80010f2:	f000 fa23 	bl	800153c <HAL_Delay>

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000fc 	.word	0x200000fc
 8001104:	20000100 	.word	0x20000100
 8001108:	200000f8 	.word	0x200000f8

0800110c <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 8001118:	2044      	movs	r0, #68	@ 0x44
 800111a:	f7ff ff73 	bl	8001004 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 800111e:	200c      	movs	r0, #12
 8001120:	f000 fa0c 	bl	800153c <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001124:	4b40      	ldr	r3, [pc, #256]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	4b40      	ldr	r3, [pc, #256]	@ (800122c <_msSendCmdGetData32+0x120>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	43db      	mvns	r3, r3
 8001130:	4619      	mov	r1, r3
 8001132:	4b3d      	ldr	r3, [pc, #244]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	400a      	ands	r2, r1
 8001138:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 800113a:	4b3d      	ldr	r3, [pc, #244]	@ (8001230 <_msSendCmdGetData32+0x124>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	1df9      	adds	r1, r7, #7
 8001140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001144:	2201      	movs	r2, #1
 8001146:	f001 f968 	bl	800241a <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 800114a:	4b39      	ldr	r3, [pc, #228]	@ (8001230 <_msSendCmdGetData32+0x124>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f107 010c 	add.w	r1, r7, #12
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	2203      	movs	r2, #3
 8001158:	f001 faa2 	bl	80026a0 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 800115c:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	4b32      	ldr	r3, [pc, #200]	@ (800122c <_msSendCmdGetData32+0x120>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 8001170:	2054      	movs	r0, #84	@ 0x54
 8001172:	f7ff ff47 	bl	8001004 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001176:	200c      	movs	r0, #12
 8001178:	f000 f9e0 	bl	800153c <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 800117c:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <_msSendCmdGetData32+0x120>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	43db      	mvns	r3, r3
 8001188:	4619      	mov	r1, r3
 800118a:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <_msSendCmdGetData32+0x124>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	1df9      	adds	r1, r7, #7
 8001198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119c:	2201      	movs	r2, #1
 800119e:	f001 f93c 	bl	800241a <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <_msSendCmdGetData32+0x124>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f107 0108 	add.w	r1, r7, #8
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	2203      	movs	r2, #3
 80011b0:	f001 fa76 	bl	80026a0 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <_msSendCmdGetData32+0x120>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <_msSendCmdGetData32+0x11c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 80011c8:	7b3b      	ldrb	r3, [r7, #12]
 80011ca:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
 80011d4:	461a      	mov	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	461a      	mov	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 80011ec:	7a3b      	ldrb	r3, [r7, #8]
 80011ee:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 80011f6:	7a7b      	ldrb	r3, [r7, #9]
 80011f8:	461a      	mov	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 8001206:	7abb      	ldrb	r3, [r7, #10]
 8001208:	461a      	mov	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3304      	adds	r3, #4
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000fc 	.word	0x200000fc
 800122c:	20000100 	.word	0x20000100
 8001230:	200000f8 	.word	0x200000f8

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a0f      	ldr	r2, [pc, #60]	@ (8001280 <HAL_MspInit+0x4c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_SPI_MspInit+0x84>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a10      	ldr	r2, [pc, #64]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012de:	23e0      	movs	r3, #224	@ 0xe0
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ee:	2305      	movs	r3, #5
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <HAL_SPI_MspInit+0x8c>)
 80012fa:	f000 fa29 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	@ 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40013000 	.word	0x40013000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 f8c7 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f001 fdc2 	bl	8002f2c <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	220c      	movs	r2, #12
 80013ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20018000 	.word	0x20018000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	2000012c 	.word	0x2000012c
 80013dc:	20000280 	.word	0x20000280

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001408:	f7ff ffea 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001432:	f001 fd81 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff f89b 	bl	8000570 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001448:	08003898 	.word	0x08003898
  ldr r2, =_sbss
 800144c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001450:	2000027c 	.word	0x2000027c

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f931 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fed2 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f93b 	bl	8001736 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f911 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	@ (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	20000014 	.word	0x20000014
 80014f8:	20000010 	.word	0x20000010

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000014 	.word	0x20000014
 8001520:	20000130 	.word	0x20000130

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000130 	.word	0x20000130

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000014 	.word	0x20000014

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff47 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5c 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb0 	bl	80016a4 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e159      	b.n	8001a20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8148 	bne.w	8001a1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a2 	beq.w	8001a1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b54      	ldr	r3, [pc, #336]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_GPIO_Init+0x2f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x202>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2f4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1fe>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1fa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1f6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_GPIO_Init+0x300>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1f2>
 800193e:	2304      	movs	r3, #4
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001942:	2307      	movs	r3, #7
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f aea2 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e267      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ade:	4b88      	ldr	r3, [pc, #544]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d00c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aea:	4b85      	ldr	r3, [pc, #532]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b82      	ldr	r3, [pc, #520]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4b7e      	ldr	r3, [pc, #504]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e242      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b69      	ldr	r3, [pc, #420]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fcd4 	bl	8001524 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fcd0 	bl	8001524 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e207      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5b      	ldr	r3, [pc, #364]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fcc0 	bl	8001524 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fcbc 	bl	8001524 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	@ 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1f3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b51      	ldr	r3, [pc, #324]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be2:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b44      	ldr	r3, [pc, #272]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff fc75 	bl	8001524 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fc71 	bl	8001524 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fc54 	bl	8001524 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fc50 	bl	8001524 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e187      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc34 	bl	8001524 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc30 	bl	8001524 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e167      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fc1d 	bl	8001524 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fc19 	bl	8001524 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e150      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b88      	ldr	r3, [pc, #544]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b81      	ldr	r3, [pc, #516]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b7a      	ldr	r3, [pc, #488]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b77      	ldr	r3, [pc, #476]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b74      	ldr	r3, [pc, #464]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fbd9 	bl	8001524 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fbd5 	bl	8001524 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ea>
 8001d9c:	4b64      	ldr	r3, [pc, #400]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da0:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x30c>
 8001db2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001dcc:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	4a57      	ldr	r2, [pc, #348]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd8:	4b55      	ldr	r3, [pc, #340]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	4a54      	ldr	r2, [pc, #336]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fb9a 	bl	8001524 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff fb96 	bl	8001524 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0cb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fb84 	bl	8001524 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb80 	bl	8001524 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a1 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d05c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d141      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fb54 	bl	8001524 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fb50 	bl	8001524 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e087      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	491b      	ldr	r1, [pc, #108]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fb29 	bl	8001524 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fb25 	bl	8001524 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e05c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x416>
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fb12 	bl	8001524 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fb0e 	bl	8001524 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e045      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
 8001f22:	e03d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b68      	ldr	r3, [pc, #416]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b37      	ldr	r3, [pc, #220]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7ff fa40 	bl	8001524 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff fa3c 	bl	8001524 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2b      	ldr	r3, [pc, #172]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f9a0 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	08003844 	.word	0x08003844
 8002174:	2000000c 	.word	0x2000000c
 8002178:	20000010 	.word	0x20000010

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b090      	sub	sp, #64	@ 0x40
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80a1 	bhi.w	80022e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e09b      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x184>)
 80021b2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80021b4:	e09b      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ba:	e098      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b4f      	ldr	r3, [pc, #316]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c6:	4b4d      	ldr	r3, [pc, #308]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	623b      	str	r3, [r7, #32]
 80021dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021e4:	2100      	movs	r1, #0
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e8:	fb03 f201 	mul.w	r2, r3, r1
 80021ec:	2300      	movs	r3, #0
 80021ee:	fb00 f303 	mul.w	r3, r0, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	4a43      	ldr	r2, [pc, #268]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x188>)
 80021f6:	fba0 1202 	umull	r1, r2, r0, r2
 80021fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021fc:	460a      	mov	r2, r1
 80021fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002202:	4413      	add	r3, r2
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	2200      	movs	r2, #0
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	61fa      	str	r2, [r7, #28]
 800220e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002216:	f7fe f833 	bl	8000280 <__aeabi_uldivmod>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4613      	mov	r3, r2
 8002220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002222:	e053      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002224:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	2200      	movs	r2, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	617a      	str	r2, [r7, #20]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002236:	f04f 0b00 	mov.w	fp, #0
 800223a:	4652      	mov	r2, sl
 800223c:	465b      	mov	r3, fp
 800223e:	f04f 0000 	mov.w	r0, #0
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	0159      	lsls	r1, r3, #5
 8002248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224c:	0150      	lsls	r0, r2, #5
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	ebb2 080a 	subs.w	r8, r2, sl
 8002256:	eb63 090b 	sbc.w	r9, r3, fp
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002266:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800226a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800226e:	ebb2 0408 	subs.w	r4, r2, r8
 8002272:	eb63 0509 	sbc.w	r5, r3, r9
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	00eb      	lsls	r3, r5, #3
 8002280:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002284:	00e2      	lsls	r2, r4, #3
 8002286:	4614      	mov	r4, r2
 8002288:	461d      	mov	r5, r3
 800228a:	eb14 030a 	adds.w	r3, r4, sl
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	eb45 030b 	adc.w	r3, r5, fp
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a2:	4629      	mov	r1, r5
 80022a4:	028b      	lsls	r3, r1, #10
 80022a6:	4621      	mov	r1, r4
 80022a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ac:	4621      	mov	r1, r4
 80022ae:	028a      	lsls	r2, r1, #10
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	2200      	movs	r2, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c0:	f7fd ffde 	bl	8000280 <__aeabi_uldivmod>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4613      	mov	r3, r2
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80022dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3740      	adds	r7, #64	@ 0x40
 80022f4:	46bd      	mov	sp, r7
 80022f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	00f42400 	.word	0x00f42400
 8002304:	017d7840 	.word	0x017d7840

08002308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07b      	b.n	8002412 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800232a:	d009      	beq.n	8002340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
 8002332:	e005      	b.n	8002340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe ff92 	bl	8001284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c4:	ea42 0103 	orr.w	r1, r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 0104 	and.w	r1, r3, #4
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f003 0210 	and.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002400:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b088      	sub	sp, #32
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_SPI_Transmit+0x22>
 8002438:	2302      	movs	r3, #2
 800243a:	e12d      	b.n	8002698 <HAL_SPI_Transmit+0x27e>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002444:	f7ff f86e 	bl	8001524 <HAL_GetTick>
 8002448:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d002      	beq.n	8002460 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800245e:	e116      	b.n	800268e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_SPI_Transmit+0x52>
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002470:	e10d      	b.n	800268e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2203      	movs	r2, #3
 8002476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b8:	d10f      	bne.n	80024da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e4:	2b40      	cmp	r3, #64	@ 0x40
 80024e6:	d007      	beq.n	80024f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002500:	d14f      	bne.n	80025a2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_SPI_Transmit+0xf6>
 800250a:	8afb      	ldrh	r3, [r7, #22]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d142      	bne.n	8002596 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002534:	e02f      	b.n	8002596 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d112      	bne.n	800256a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	1c9a      	adds	r2, r3, #2
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002568:	e015      	b.n	8002596 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800256a:	f7fe ffdb 	bl	8001524 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d803      	bhi.n	8002582 <HAL_SPI_Transmit+0x168>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d102      	bne.n	8002588 <HAL_SPI_Transmit+0x16e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002594:	e07b      	b.n	800268e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ca      	bne.n	8002536 <HAL_SPI_Transmit+0x11c>
 80025a0:	e050      	b.n	8002644 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_Transmit+0x196>
 80025aa:	8afb      	ldrh	r3, [r7, #22]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d144      	bne.n	800263a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025d6:	e030      	b.n	800263a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d113      	bne.n	800260e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800260c:	e015      	b.n	800263a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800260e:	f7fe ff89 	bl	8001524 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d803      	bhi.n	8002626 <HAL_SPI_Transmit+0x20c>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d102      	bne.n	800262c <HAL_SPI_Transmit+0x212>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002638:	e029      	b.n	800268e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1c9      	bne.n	80025d8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fbdf 	bl	8002e0c <SPI_EndRxTxTransaction>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	77fb      	strb	r3, [r7, #31]
 8002684:	e003      	b.n	800268e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002696:	7ffb      	ldrb	r3, [r7, #31]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d002      	beq.n	80026c6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
 80026c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026c4:	e0fb      	b.n	80028be <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ce:	d112      	bne.n	80026f6 <HAL_SPI_Receive+0x56>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10e      	bne.n	80026f6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2204      	movs	r2, #4
 80026dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f8ef 	bl	80028d0 <HAL_SPI_TransmitReceive>
 80026f2:	4603      	mov	r3, r0
 80026f4:	e0e8      	b.n	80028c8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_SPI_Receive+0x64>
 8002700:	2302      	movs	r3, #2
 8002702:	e0e1      	b.n	80028c8 <HAL_SPI_Receive+0x228>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800270c:	f7fe ff0a 	bl	8001524 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_SPI_Receive+0x7e>
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002722:	e0cc      	b.n	80028be <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2204      	movs	r2, #4
 8002728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800276a:	d10f      	bne.n	800278c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800277a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b40      	cmp	r3, #64	@ 0x40
 8002798:	d007      	beq.n	80027aa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d16a      	bne.n	8002888 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027b2:	e032      	b.n	800281a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d115      	bne.n	80027ee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f103 020c 	add.w	r2, r3, #12
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027ec:	e015      	b.n	800281a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ee:	f7fe fe99 	bl	8001524 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d803      	bhi.n	8002806 <HAL_SPI_Receive+0x166>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d102      	bne.n	800280c <HAL_SPI_Receive+0x16c>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002818:	e051      	b.n	80028be <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1c7      	bne.n	80027b4 <HAL_SPI_Receive+0x114>
 8002824:	e035      	b.n	8002892 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d113      	bne.n	800285c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	b292      	uxth	r2, r2
 8002840:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002846:	1c9a      	adds	r2, r3, #2
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800285a:	e015      	b.n	8002888 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800285c:	f7fe fe62 	bl	8001524 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d803      	bhi.n	8002874 <HAL_SPI_Receive+0x1d4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d102      	bne.n	800287a <HAL_SPI_Receive+0x1da>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002886:	e01a      	b.n	80028be <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1c9      	bne.n	8002826 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa52 	bl	8002d40 <SPI_EndRxTransaction>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
 80028b4:	e003      	b.n	80028be <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	@ 0x30
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028de:	2301      	movs	r3, #1
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_TransmitReceive+0x26>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e198      	b.n	8002c28 <HAL_SPI_TransmitReceive+0x358>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028fe:	f7fe fe11 	bl	8001524 <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002918:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00f      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x70>
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002926:	d107      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x68>
 8002930:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002934:	2b04      	cmp	r3, #4
 8002936:	d003      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800293e:	e16d      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_SPI_TransmitReceive+0x82>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SPI_TransmitReceive+0x82>
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002958:	e160      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b04      	cmp	r3, #4
 8002964:	d003      	beq.n	800296e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2205      	movs	r2, #5
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	887a      	ldrh	r2, [r7, #2]
 800297e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	2b40      	cmp	r3, #64	@ 0x40
 80029b0:	d007      	beq.n	80029c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ca:	d17c      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_SPI_TransmitReceive+0x10a>
 80029d4:	8b7b      	ldrh	r3, [r7, #26]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d16a      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fe:	e057      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d11b      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x176>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x176>
 8002a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d113      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	881a      	ldrh	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	1c9a      	adds	r2, r3, #2
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d119      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x1b8>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d014      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a88:	f7fe fd4c 	bl	8001524 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d80b      	bhi.n	8002ab0 <HAL_SPI_TransmitReceive+0x1e0>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d007      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002aae:	e0b5      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1a2      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x130>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d19d      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x130>
 8002ac4:	e080      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x204>
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d16f      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afa:	e05b      	b.n	8002bb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d11c      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x274>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d017      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x274>
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d114      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d119      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x2b6>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d014      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b82:	2301      	movs	r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b86:	f7fe fccd 	bl	8001524 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d803      	bhi.n	8002b9e <HAL_SPI_TransmitReceive+0x2ce>
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d102      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x2d4>
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002bb2:	e033      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d19e      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x22c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d199      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f91d 	bl	8002e0c <SPI_EndRxTxTransaction>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002be4:	e01a      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c12:	e003      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002c24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3730      	adds	r7, #48	@ 0x30
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c40:	f7fe fc70 	bl	8001524 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c50:	f7fe fc68 	bl	8001524 <HAL_GetTick>
 8002c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c56:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	0d1b      	lsrs	r3, r3, #20
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c66:	e054      	b.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d050      	beq.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c70:	f7fe fc58 	bl	8001524 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d902      	bls.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d13d      	bne.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c9e:	d111      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca8:	d004      	beq.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb2:	d107      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ccc:	d10f      	bne.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e017      	b.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d19b      	bne.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000000c 	.word	0x2000000c

08002d40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d54:	d111      	bne.n	8002d7a <SPI_EndRxTransaction+0x3a>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5e:	d004      	beq.n	8002d6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d68:	d107      	bne.n	8002d7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d82:	d12a      	bne.n	8002dda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8c:	d012      	beq.n	8002db4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff ff49 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02d      	beq.n	8002e00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e026      	b.n	8002e02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff36 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01a      	beq.n	8002e00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e013      	b.n	8002e02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2101      	movs	r1, #1
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff ff23 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2102      	movs	r1, #2
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff04 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e032      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <SPI_EndRxTxTransaction+0xa0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <SPI_EndRxTxTransaction+0xa4>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0d5b      	lsrs	r3, r3, #21
 8002e4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e5c:	d112      	bne.n	8002e84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2180      	movs	r1, #128	@ 0x80
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff fee1 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d016      	beq.n	8002ea2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e00f      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b80      	cmp	r3, #128	@ 0x80
 8002e9c:	d0f2      	beq.n	8002e84 <SPI_EndRxTxTransaction+0x78>
 8002e9e:	e000      	b.n	8002ea2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ea0:	bf00      	nop
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	165e9f81 	.word	0x165e9f81

08002eb4 <sniprintf>:
 8002eb4:	b40c      	push	{r2, r3}
 8002eb6:	b530      	push	{r4, r5, lr}
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <sniprintf+0x64>)
 8002eba:	1e0c      	subs	r4, r1, #0
 8002ebc:	681d      	ldr	r5, [r3, #0]
 8002ebe:	b09d      	sub	sp, #116	@ 0x74
 8002ec0:	da08      	bge.n	8002ed4 <sniprintf+0x20>
 8002ec2:	238b      	movs	r3, #139	@ 0x8b
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eca:	b01d      	add	sp, #116	@ 0x74
 8002ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ed0:	b002      	add	sp, #8
 8002ed2:	4770      	bx	lr
 8002ed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002ed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002edc:	bf14      	ite	ne
 8002ede:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002ee2:	4623      	moveq	r3, r4
 8002ee4:	9304      	str	r3, [sp, #16]
 8002ee6:	9307      	str	r3, [sp, #28]
 8002ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002eec:	9002      	str	r0, [sp, #8]
 8002eee:	9006      	str	r0, [sp, #24]
 8002ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002ef4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002ef6:	ab21      	add	r3, sp, #132	@ 0x84
 8002ef8:	a902      	add	r1, sp, #8
 8002efa:	4628      	mov	r0, r5
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	f000 f995 	bl	800322c <_svfiprintf_r>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	bfbc      	itt	lt
 8002f06:	238b      	movlt	r3, #139	@ 0x8b
 8002f08:	602b      	strlt	r3, [r5, #0]
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	d0dd      	beq.n	8002eca <sniprintf+0x16>
 8002f0e:	9b02      	ldr	r3, [sp, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e7d9      	b.n	8002eca <sniprintf+0x16>
 8002f16:	bf00      	nop
 8002f18:	20000018 	.word	0x20000018

08002f1c <memset>:
 8002f1c:	4402      	add	r2, r0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d100      	bne.n	8002f26 <memset+0xa>
 8002f24:	4770      	bx	lr
 8002f26:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2a:	e7f9      	b.n	8002f20 <memset+0x4>

08002f2c <__errno>:
 8002f2c:	4b01      	ldr	r3, [pc, #4]	@ (8002f34 <__errno+0x8>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000018 	.word	0x20000018

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002f70 <__libc_init_array+0x38>)
 8002f3c:	4c0d      	ldr	r4, [pc, #52]	@ (8002f74 <__libc_init_array+0x3c>)
 8002f3e:	1b64      	subs	r4, r4, r5
 8002f40:	10a4      	asrs	r4, r4, #2
 8002f42:	2600      	movs	r6, #0
 8002f44:	42a6      	cmp	r6, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	4d0b      	ldr	r5, [pc, #44]	@ (8002f78 <__libc_init_array+0x40>)
 8002f4a:	4c0c      	ldr	r4, [pc, #48]	@ (8002f7c <__libc_init_array+0x44>)
 8002f4c:	f000 fc66 	bl	800381c <_init>
 8002f50:	1b64      	subs	r4, r4, r5
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	2600      	movs	r6, #0
 8002f56:	42a6      	cmp	r6, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f60:	4798      	blx	r3
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6a:	4798      	blx	r3
 8002f6c:	3601      	adds	r6, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08003890 	.word	0x08003890
 8002f74:	08003890 	.word	0x08003890
 8002f78:	08003890 	.word	0x08003890
 8002f7c:	08003894 	.word	0x08003894

08002f80 <__retarget_lock_acquire_recursive>:
 8002f80:	4770      	bx	lr

08002f82 <__retarget_lock_release_recursive>:
 8002f82:	4770      	bx	lr

08002f84 <_free_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4605      	mov	r5, r0
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d041      	beq.n	8003010 <_free_r+0x8c>
 8002f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f90:	1f0c      	subs	r4, r1, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bfb8      	it	lt
 8002f96:	18e4      	addlt	r4, r4, r3
 8002f98:	f000 f8e0 	bl	800315c <__malloc_lock>
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <_free_r+0x90>)
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	b933      	cbnz	r3, 8002fb0 <_free_r+0x2c>
 8002fa2:	6063      	str	r3, [r4, #4]
 8002fa4:	6014      	str	r4, [r2, #0]
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fac:	f000 b8dc 	b.w	8003168 <__malloc_unlock>
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d908      	bls.n	8002fc6 <_free_r+0x42>
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	1821      	adds	r1, r4, r0
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	bf01      	itttt	eq
 8002fbc:	6819      	ldreq	r1, [r3, #0]
 8002fbe:	685b      	ldreq	r3, [r3, #4]
 8002fc0:	1809      	addeq	r1, r1, r0
 8002fc2:	6021      	streq	r1, [r4, #0]
 8002fc4:	e7ed      	b.n	8002fa2 <_free_r+0x1e>
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b10b      	cbz	r3, 8002fd0 <_free_r+0x4c>
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d9fa      	bls.n	8002fc6 <_free_r+0x42>
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	1850      	adds	r0, r2, r1
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d10b      	bne.n	8002ff0 <_free_r+0x6c>
 8002fd8:	6820      	ldr	r0, [r4, #0]
 8002fda:	4401      	add	r1, r0
 8002fdc:	1850      	adds	r0, r2, r1
 8002fde:	4283      	cmp	r3, r0
 8002fe0:	6011      	str	r1, [r2, #0]
 8002fe2:	d1e0      	bne.n	8002fa6 <_free_r+0x22>
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	6053      	str	r3, [r2, #4]
 8002fea:	4408      	add	r0, r1
 8002fec:	6010      	str	r0, [r2, #0]
 8002fee:	e7da      	b.n	8002fa6 <_free_r+0x22>
 8002ff0:	d902      	bls.n	8002ff8 <_free_r+0x74>
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	602b      	str	r3, [r5, #0]
 8002ff6:	e7d6      	b.n	8002fa6 <_free_r+0x22>
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	1821      	adds	r1, r4, r0
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	bf04      	itt	eq
 8003000:	6819      	ldreq	r1, [r3, #0]
 8003002:	685b      	ldreq	r3, [r3, #4]
 8003004:	6063      	str	r3, [r4, #4]
 8003006:	bf04      	itt	eq
 8003008:	1809      	addeq	r1, r1, r0
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	6054      	str	r4, [r2, #4]
 800300e:	e7ca      	b.n	8002fa6 <_free_r+0x22>
 8003010:	bd38      	pop	{r3, r4, r5, pc}
 8003012:	bf00      	nop
 8003014:	20000278 	.word	0x20000278

08003018 <sbrk_aligned>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	4e0f      	ldr	r6, [pc, #60]	@ (8003058 <sbrk_aligned+0x40>)
 800301c:	460c      	mov	r4, r1
 800301e:	6831      	ldr	r1, [r6, #0]
 8003020:	4605      	mov	r5, r0
 8003022:	b911      	cbnz	r1, 800302a <sbrk_aligned+0x12>
 8003024:	f000 fba6 	bl	8003774 <_sbrk_r>
 8003028:	6030      	str	r0, [r6, #0]
 800302a:	4621      	mov	r1, r4
 800302c:	4628      	mov	r0, r5
 800302e:	f000 fba1 	bl	8003774 <_sbrk_r>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	d103      	bne.n	800303e <sbrk_aligned+0x26>
 8003036:	f04f 34ff 	mov.w	r4, #4294967295
 800303a:	4620      	mov	r0, r4
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	1cc4      	adds	r4, r0, #3
 8003040:	f024 0403 	bic.w	r4, r4, #3
 8003044:	42a0      	cmp	r0, r4
 8003046:	d0f8      	beq.n	800303a <sbrk_aligned+0x22>
 8003048:	1a21      	subs	r1, r4, r0
 800304a:	4628      	mov	r0, r5
 800304c:	f000 fb92 	bl	8003774 <_sbrk_r>
 8003050:	3001      	adds	r0, #1
 8003052:	d1f2      	bne.n	800303a <sbrk_aligned+0x22>
 8003054:	e7ef      	b.n	8003036 <sbrk_aligned+0x1e>
 8003056:	bf00      	nop
 8003058:	20000274 	.word	0x20000274

0800305c <_malloc_r>:
 800305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003060:	1ccd      	adds	r5, r1, #3
 8003062:	f025 0503 	bic.w	r5, r5, #3
 8003066:	3508      	adds	r5, #8
 8003068:	2d0c      	cmp	r5, #12
 800306a:	bf38      	it	cc
 800306c:	250c      	movcc	r5, #12
 800306e:	2d00      	cmp	r5, #0
 8003070:	4606      	mov	r6, r0
 8003072:	db01      	blt.n	8003078 <_malloc_r+0x1c>
 8003074:	42a9      	cmp	r1, r5
 8003076:	d904      	bls.n	8003082 <_malloc_r+0x26>
 8003078:	230c      	movs	r3, #12
 800307a:	6033      	str	r3, [r6, #0]
 800307c:	2000      	movs	r0, #0
 800307e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003158 <_malloc_r+0xfc>
 8003086:	f000 f869 	bl	800315c <__malloc_lock>
 800308a:	f8d8 3000 	ldr.w	r3, [r8]
 800308e:	461c      	mov	r4, r3
 8003090:	bb44      	cbnz	r4, 80030e4 <_malloc_r+0x88>
 8003092:	4629      	mov	r1, r5
 8003094:	4630      	mov	r0, r6
 8003096:	f7ff ffbf 	bl	8003018 <sbrk_aligned>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	4604      	mov	r4, r0
 800309e:	d158      	bne.n	8003152 <_malloc_r+0xf6>
 80030a0:	f8d8 4000 	ldr.w	r4, [r8]
 80030a4:	4627      	mov	r7, r4
 80030a6:	2f00      	cmp	r7, #0
 80030a8:	d143      	bne.n	8003132 <_malloc_r+0xd6>
 80030aa:	2c00      	cmp	r4, #0
 80030ac:	d04b      	beq.n	8003146 <_malloc_r+0xea>
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	4639      	mov	r1, r7
 80030b2:	4630      	mov	r0, r6
 80030b4:	eb04 0903 	add.w	r9, r4, r3
 80030b8:	f000 fb5c 	bl	8003774 <_sbrk_r>
 80030bc:	4581      	cmp	r9, r0
 80030be:	d142      	bne.n	8003146 <_malloc_r+0xea>
 80030c0:	6821      	ldr	r1, [r4, #0]
 80030c2:	1a6d      	subs	r5, r5, r1
 80030c4:	4629      	mov	r1, r5
 80030c6:	4630      	mov	r0, r6
 80030c8:	f7ff ffa6 	bl	8003018 <sbrk_aligned>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d03a      	beq.n	8003146 <_malloc_r+0xea>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	442b      	add	r3, r5
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	f8d8 3000 	ldr.w	r3, [r8]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	bb62      	cbnz	r2, 8003138 <_malloc_r+0xdc>
 80030de:	f8c8 7000 	str.w	r7, [r8]
 80030e2:	e00f      	b.n	8003104 <_malloc_r+0xa8>
 80030e4:	6822      	ldr	r2, [r4, #0]
 80030e6:	1b52      	subs	r2, r2, r5
 80030e8:	d420      	bmi.n	800312c <_malloc_r+0xd0>
 80030ea:	2a0b      	cmp	r2, #11
 80030ec:	d917      	bls.n	800311e <_malloc_r+0xc2>
 80030ee:	1961      	adds	r1, r4, r5
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	6025      	str	r5, [r4, #0]
 80030f4:	bf18      	it	ne
 80030f6:	6059      	strne	r1, [r3, #4]
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	bf08      	it	eq
 80030fc:	f8c8 1000 	streq.w	r1, [r8]
 8003100:	5162      	str	r2, [r4, r5]
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	4630      	mov	r0, r6
 8003106:	f000 f82f 	bl	8003168 <__malloc_unlock>
 800310a:	f104 000b 	add.w	r0, r4, #11
 800310e:	1d23      	adds	r3, r4, #4
 8003110:	f020 0007 	bic.w	r0, r0, #7
 8003114:	1ac2      	subs	r2, r0, r3
 8003116:	bf1c      	itt	ne
 8003118:	1a1b      	subne	r3, r3, r0
 800311a:	50a3      	strne	r3, [r4, r2]
 800311c:	e7af      	b.n	800307e <_malloc_r+0x22>
 800311e:	6862      	ldr	r2, [r4, #4]
 8003120:	42a3      	cmp	r3, r4
 8003122:	bf0c      	ite	eq
 8003124:	f8c8 2000 	streq.w	r2, [r8]
 8003128:	605a      	strne	r2, [r3, #4]
 800312a:	e7eb      	b.n	8003104 <_malloc_r+0xa8>
 800312c:	4623      	mov	r3, r4
 800312e:	6864      	ldr	r4, [r4, #4]
 8003130:	e7ae      	b.n	8003090 <_malloc_r+0x34>
 8003132:	463c      	mov	r4, r7
 8003134:	687f      	ldr	r7, [r7, #4]
 8003136:	e7b6      	b.n	80030a6 <_malloc_r+0x4a>
 8003138:	461a      	mov	r2, r3
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	42a3      	cmp	r3, r4
 800313e:	d1fb      	bne.n	8003138 <_malloc_r+0xdc>
 8003140:	2300      	movs	r3, #0
 8003142:	6053      	str	r3, [r2, #4]
 8003144:	e7de      	b.n	8003104 <_malloc_r+0xa8>
 8003146:	230c      	movs	r3, #12
 8003148:	6033      	str	r3, [r6, #0]
 800314a:	4630      	mov	r0, r6
 800314c:	f000 f80c 	bl	8003168 <__malloc_unlock>
 8003150:	e794      	b.n	800307c <_malloc_r+0x20>
 8003152:	6005      	str	r5, [r0, #0]
 8003154:	e7d6      	b.n	8003104 <_malloc_r+0xa8>
 8003156:	bf00      	nop
 8003158:	20000278 	.word	0x20000278

0800315c <__malloc_lock>:
 800315c:	4801      	ldr	r0, [pc, #4]	@ (8003164 <__malloc_lock+0x8>)
 800315e:	f7ff bf0f 	b.w	8002f80 <__retarget_lock_acquire_recursive>
 8003162:	bf00      	nop
 8003164:	20000270 	.word	0x20000270

08003168 <__malloc_unlock>:
 8003168:	4801      	ldr	r0, [pc, #4]	@ (8003170 <__malloc_unlock+0x8>)
 800316a:	f7ff bf0a 	b.w	8002f82 <__retarget_lock_release_recursive>
 800316e:	bf00      	nop
 8003170:	20000270 	.word	0x20000270

08003174 <__ssputs_r>:
 8003174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003178:	688e      	ldr	r6, [r1, #8]
 800317a:	461f      	mov	r7, r3
 800317c:	42be      	cmp	r6, r7
 800317e:	680b      	ldr	r3, [r1, #0]
 8003180:	4682      	mov	sl, r0
 8003182:	460c      	mov	r4, r1
 8003184:	4690      	mov	r8, r2
 8003186:	d82d      	bhi.n	80031e4 <__ssputs_r+0x70>
 8003188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800318c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003190:	d026      	beq.n	80031e0 <__ssputs_r+0x6c>
 8003192:	6965      	ldr	r5, [r4, #20]
 8003194:	6909      	ldr	r1, [r1, #16]
 8003196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800319a:	eba3 0901 	sub.w	r9, r3, r1
 800319e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031a2:	1c7b      	adds	r3, r7, #1
 80031a4:	444b      	add	r3, r9
 80031a6:	106d      	asrs	r5, r5, #1
 80031a8:	429d      	cmp	r5, r3
 80031aa:	bf38      	it	cc
 80031ac:	461d      	movcc	r5, r3
 80031ae:	0553      	lsls	r3, r2, #21
 80031b0:	d527      	bpl.n	8003202 <__ssputs_r+0x8e>
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7ff ff52 	bl	800305c <_malloc_r>
 80031b8:	4606      	mov	r6, r0
 80031ba:	b360      	cbz	r0, 8003216 <__ssputs_r+0xa2>
 80031bc:	6921      	ldr	r1, [r4, #16]
 80031be:	464a      	mov	r2, r9
 80031c0:	f000 fae8 	bl	8003794 <memcpy>
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ce:	81a3      	strh	r3, [r4, #12]
 80031d0:	6126      	str	r6, [r4, #16]
 80031d2:	6165      	str	r5, [r4, #20]
 80031d4:	444e      	add	r6, r9
 80031d6:	eba5 0509 	sub.w	r5, r5, r9
 80031da:	6026      	str	r6, [r4, #0]
 80031dc:	60a5      	str	r5, [r4, #8]
 80031de:	463e      	mov	r6, r7
 80031e0:	42be      	cmp	r6, r7
 80031e2:	d900      	bls.n	80031e6 <__ssputs_r+0x72>
 80031e4:	463e      	mov	r6, r7
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	4632      	mov	r2, r6
 80031ea:	4641      	mov	r1, r8
 80031ec:	f000 faa8 	bl	8003740 <memmove>
 80031f0:	68a3      	ldr	r3, [r4, #8]
 80031f2:	1b9b      	subs	r3, r3, r6
 80031f4:	60a3      	str	r3, [r4, #8]
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	4433      	add	r3, r6
 80031fa:	6023      	str	r3, [r4, #0]
 80031fc:	2000      	movs	r0, #0
 80031fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003202:	462a      	mov	r2, r5
 8003204:	f000 fad4 	bl	80037b0 <_realloc_r>
 8003208:	4606      	mov	r6, r0
 800320a:	2800      	cmp	r0, #0
 800320c:	d1e0      	bne.n	80031d0 <__ssputs_r+0x5c>
 800320e:	6921      	ldr	r1, [r4, #16]
 8003210:	4650      	mov	r0, sl
 8003212:	f7ff feb7 	bl	8002f84 <_free_r>
 8003216:	230c      	movs	r3, #12
 8003218:	f8ca 3000 	str.w	r3, [sl]
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003222:	81a3      	strh	r3, [r4, #12]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	e7e9      	b.n	80031fe <__ssputs_r+0x8a>
	...

0800322c <_svfiprintf_r>:
 800322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003230:	4698      	mov	r8, r3
 8003232:	898b      	ldrh	r3, [r1, #12]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	b09d      	sub	sp, #116	@ 0x74
 8003238:	4607      	mov	r7, r0
 800323a:	460d      	mov	r5, r1
 800323c:	4614      	mov	r4, r2
 800323e:	d510      	bpl.n	8003262 <_svfiprintf_r+0x36>
 8003240:	690b      	ldr	r3, [r1, #16]
 8003242:	b973      	cbnz	r3, 8003262 <_svfiprintf_r+0x36>
 8003244:	2140      	movs	r1, #64	@ 0x40
 8003246:	f7ff ff09 	bl	800305c <_malloc_r>
 800324a:	6028      	str	r0, [r5, #0]
 800324c:	6128      	str	r0, [r5, #16]
 800324e:	b930      	cbnz	r0, 800325e <_svfiprintf_r+0x32>
 8003250:	230c      	movs	r3, #12
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	b01d      	add	sp, #116	@ 0x74
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800325e:	2340      	movs	r3, #64	@ 0x40
 8003260:	616b      	str	r3, [r5, #20]
 8003262:	2300      	movs	r3, #0
 8003264:	9309      	str	r3, [sp, #36]	@ 0x24
 8003266:	2320      	movs	r3, #32
 8003268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800326c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003270:	2330      	movs	r3, #48	@ 0x30
 8003272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003410 <_svfiprintf_r+0x1e4>
 8003276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800327a:	f04f 0901 	mov.w	r9, #1
 800327e:	4623      	mov	r3, r4
 8003280:	469a      	mov	sl, r3
 8003282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003286:	b10a      	cbz	r2, 800328c <_svfiprintf_r+0x60>
 8003288:	2a25      	cmp	r2, #37	@ 0x25
 800328a:	d1f9      	bne.n	8003280 <_svfiprintf_r+0x54>
 800328c:	ebba 0b04 	subs.w	fp, sl, r4
 8003290:	d00b      	beq.n	80032aa <_svfiprintf_r+0x7e>
 8003292:	465b      	mov	r3, fp
 8003294:	4622      	mov	r2, r4
 8003296:	4629      	mov	r1, r5
 8003298:	4638      	mov	r0, r7
 800329a:	f7ff ff6b 	bl	8003174 <__ssputs_r>
 800329e:	3001      	adds	r0, #1
 80032a0:	f000 80a7 	beq.w	80033f2 <_svfiprintf_r+0x1c6>
 80032a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032a6:	445a      	add	r2, fp
 80032a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80032aa:	f89a 3000 	ldrb.w	r3, [sl]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 809f 	beq.w	80033f2 <_svfiprintf_r+0x1c6>
 80032b4:	2300      	movs	r3, #0
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032be:	f10a 0a01 	add.w	sl, sl, #1
 80032c2:	9304      	str	r3, [sp, #16]
 80032c4:	9307      	str	r3, [sp, #28]
 80032c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80032cc:	4654      	mov	r4, sl
 80032ce:	2205      	movs	r2, #5
 80032d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d4:	484e      	ldr	r0, [pc, #312]	@ (8003410 <_svfiprintf_r+0x1e4>)
 80032d6:	f7fc ff83 	bl	80001e0 <memchr>
 80032da:	9a04      	ldr	r2, [sp, #16]
 80032dc:	b9d8      	cbnz	r0, 8003316 <_svfiprintf_r+0xea>
 80032de:	06d0      	lsls	r0, r2, #27
 80032e0:	bf44      	itt	mi
 80032e2:	2320      	movmi	r3, #32
 80032e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032e8:	0711      	lsls	r1, r2, #28
 80032ea:	bf44      	itt	mi
 80032ec:	232b      	movmi	r3, #43	@ 0x2b
 80032ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032f2:	f89a 3000 	ldrb.w	r3, [sl]
 80032f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80032f8:	d015      	beq.n	8003326 <_svfiprintf_r+0xfa>
 80032fa:	9a07      	ldr	r2, [sp, #28]
 80032fc:	4654      	mov	r4, sl
 80032fe:	2000      	movs	r0, #0
 8003300:	f04f 0c0a 	mov.w	ip, #10
 8003304:	4621      	mov	r1, r4
 8003306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330a:	3b30      	subs	r3, #48	@ 0x30
 800330c:	2b09      	cmp	r3, #9
 800330e:	d94b      	bls.n	80033a8 <_svfiprintf_r+0x17c>
 8003310:	b1b0      	cbz	r0, 8003340 <_svfiprintf_r+0x114>
 8003312:	9207      	str	r2, [sp, #28]
 8003314:	e014      	b.n	8003340 <_svfiprintf_r+0x114>
 8003316:	eba0 0308 	sub.w	r3, r0, r8
 800331a:	fa09 f303 	lsl.w	r3, r9, r3
 800331e:	4313      	orrs	r3, r2
 8003320:	9304      	str	r3, [sp, #16]
 8003322:	46a2      	mov	sl, r4
 8003324:	e7d2      	b.n	80032cc <_svfiprintf_r+0xa0>
 8003326:	9b03      	ldr	r3, [sp, #12]
 8003328:	1d19      	adds	r1, r3, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	9103      	str	r1, [sp, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfbb      	ittet	lt
 8003332:	425b      	neglt	r3, r3
 8003334:	f042 0202 	orrlt.w	r2, r2, #2
 8003338:	9307      	strge	r3, [sp, #28]
 800333a:	9307      	strlt	r3, [sp, #28]
 800333c:	bfb8      	it	lt
 800333e:	9204      	strlt	r2, [sp, #16]
 8003340:	7823      	ldrb	r3, [r4, #0]
 8003342:	2b2e      	cmp	r3, #46	@ 0x2e
 8003344:	d10a      	bne.n	800335c <_svfiprintf_r+0x130>
 8003346:	7863      	ldrb	r3, [r4, #1]
 8003348:	2b2a      	cmp	r3, #42	@ 0x2a
 800334a:	d132      	bne.n	80033b2 <_svfiprintf_r+0x186>
 800334c:	9b03      	ldr	r3, [sp, #12]
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	9203      	str	r2, [sp, #12]
 8003354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003358:	3402      	adds	r4, #2
 800335a:	9305      	str	r3, [sp, #20]
 800335c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003420 <_svfiprintf_r+0x1f4>
 8003360:	7821      	ldrb	r1, [r4, #0]
 8003362:	2203      	movs	r2, #3
 8003364:	4650      	mov	r0, sl
 8003366:	f7fc ff3b 	bl	80001e0 <memchr>
 800336a:	b138      	cbz	r0, 800337c <_svfiprintf_r+0x150>
 800336c:	9b04      	ldr	r3, [sp, #16]
 800336e:	eba0 000a 	sub.w	r0, r0, sl
 8003372:	2240      	movs	r2, #64	@ 0x40
 8003374:	4082      	lsls	r2, r0
 8003376:	4313      	orrs	r3, r2
 8003378:	3401      	adds	r4, #1
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003380:	4824      	ldr	r0, [pc, #144]	@ (8003414 <_svfiprintf_r+0x1e8>)
 8003382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003386:	2206      	movs	r2, #6
 8003388:	f7fc ff2a 	bl	80001e0 <memchr>
 800338c:	2800      	cmp	r0, #0
 800338e:	d036      	beq.n	80033fe <_svfiprintf_r+0x1d2>
 8003390:	4b21      	ldr	r3, [pc, #132]	@ (8003418 <_svfiprintf_r+0x1ec>)
 8003392:	bb1b      	cbnz	r3, 80033dc <_svfiprintf_r+0x1b0>
 8003394:	9b03      	ldr	r3, [sp, #12]
 8003396:	3307      	adds	r3, #7
 8003398:	f023 0307 	bic.w	r3, r3, #7
 800339c:	3308      	adds	r3, #8
 800339e:	9303      	str	r3, [sp, #12]
 80033a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033a2:	4433      	add	r3, r6
 80033a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80033a6:	e76a      	b.n	800327e <_svfiprintf_r+0x52>
 80033a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033ac:	460c      	mov	r4, r1
 80033ae:	2001      	movs	r0, #1
 80033b0:	e7a8      	b.n	8003304 <_svfiprintf_r+0xd8>
 80033b2:	2300      	movs	r3, #0
 80033b4:	3401      	adds	r4, #1
 80033b6:	9305      	str	r3, [sp, #20]
 80033b8:	4619      	mov	r1, r3
 80033ba:	f04f 0c0a 	mov.w	ip, #10
 80033be:	4620      	mov	r0, r4
 80033c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c4:	3a30      	subs	r2, #48	@ 0x30
 80033c6:	2a09      	cmp	r2, #9
 80033c8:	d903      	bls.n	80033d2 <_svfiprintf_r+0x1a6>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0c6      	beq.n	800335c <_svfiprintf_r+0x130>
 80033ce:	9105      	str	r1, [sp, #20]
 80033d0:	e7c4      	b.n	800335c <_svfiprintf_r+0x130>
 80033d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d6:	4604      	mov	r4, r0
 80033d8:	2301      	movs	r3, #1
 80033da:	e7f0      	b.n	80033be <_svfiprintf_r+0x192>
 80033dc:	ab03      	add	r3, sp, #12
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	462a      	mov	r2, r5
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <_svfiprintf_r+0x1f0>)
 80033e4:	a904      	add	r1, sp, #16
 80033e6:	4638      	mov	r0, r7
 80033e8:	f3af 8000 	nop.w
 80033ec:	1c42      	adds	r2, r0, #1
 80033ee:	4606      	mov	r6, r0
 80033f0:	d1d6      	bne.n	80033a0 <_svfiprintf_r+0x174>
 80033f2:	89ab      	ldrh	r3, [r5, #12]
 80033f4:	065b      	lsls	r3, r3, #25
 80033f6:	f53f af2d 	bmi.w	8003254 <_svfiprintf_r+0x28>
 80033fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033fc:	e72c      	b.n	8003258 <_svfiprintf_r+0x2c>
 80033fe:	ab03      	add	r3, sp, #12
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	462a      	mov	r2, r5
 8003404:	4b05      	ldr	r3, [pc, #20]	@ (800341c <_svfiprintf_r+0x1f0>)
 8003406:	a904      	add	r1, sp, #16
 8003408:	4638      	mov	r0, r7
 800340a:	f000 f879 	bl	8003500 <_printf_i>
 800340e:	e7ed      	b.n	80033ec <_svfiprintf_r+0x1c0>
 8003410:	08003854 	.word	0x08003854
 8003414:	0800385e 	.word	0x0800385e
 8003418:	00000000 	.word	0x00000000
 800341c:	08003175 	.word	0x08003175
 8003420:	0800385a 	.word	0x0800385a

08003424 <_printf_common>:
 8003424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	4616      	mov	r6, r2
 800342a:	4698      	mov	r8, r3
 800342c:	688a      	ldr	r2, [r1, #8]
 800342e:	690b      	ldr	r3, [r1, #16]
 8003430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003434:	4293      	cmp	r3, r2
 8003436:	bfb8      	it	lt
 8003438:	4613      	movlt	r3, r2
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003440:	4607      	mov	r7, r0
 8003442:	460c      	mov	r4, r1
 8003444:	b10a      	cbz	r2, 800344a <_printf_common+0x26>
 8003446:	3301      	adds	r3, #1
 8003448:	6033      	str	r3, [r6, #0]
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	0699      	lsls	r1, r3, #26
 800344e:	bf42      	ittt	mi
 8003450:	6833      	ldrmi	r3, [r6, #0]
 8003452:	3302      	addmi	r3, #2
 8003454:	6033      	strmi	r3, [r6, #0]
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	f015 0506 	ands.w	r5, r5, #6
 800345c:	d106      	bne.n	800346c <_printf_common+0x48>
 800345e:	f104 0a19 	add.w	sl, r4, #25
 8003462:	68e3      	ldr	r3, [r4, #12]
 8003464:	6832      	ldr	r2, [r6, #0]
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	42ab      	cmp	r3, r5
 800346a:	dc26      	bgt.n	80034ba <_printf_common+0x96>
 800346c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003470:	6822      	ldr	r2, [r4, #0]
 8003472:	3b00      	subs	r3, #0
 8003474:	bf18      	it	ne
 8003476:	2301      	movne	r3, #1
 8003478:	0692      	lsls	r2, r2, #26
 800347a:	d42b      	bmi.n	80034d4 <_printf_common+0xb0>
 800347c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003480:	4641      	mov	r1, r8
 8003482:	4638      	mov	r0, r7
 8003484:	47c8      	blx	r9
 8003486:	3001      	adds	r0, #1
 8003488:	d01e      	beq.n	80034c8 <_printf_common+0xa4>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	6922      	ldr	r2, [r4, #16]
 800348e:	f003 0306 	and.w	r3, r3, #6
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf02      	ittt	eq
 8003496:	68e5      	ldreq	r5, [r4, #12]
 8003498:	6833      	ldreq	r3, [r6, #0]
 800349a:	1aed      	subeq	r5, r5, r3
 800349c:	68a3      	ldr	r3, [r4, #8]
 800349e:	bf0c      	ite	eq
 80034a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a4:	2500      	movne	r5, #0
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bfc4      	itt	gt
 80034aa:	1a9b      	subgt	r3, r3, r2
 80034ac:	18ed      	addgt	r5, r5, r3
 80034ae:	2600      	movs	r6, #0
 80034b0:	341a      	adds	r4, #26
 80034b2:	42b5      	cmp	r5, r6
 80034b4:	d11a      	bne.n	80034ec <_printf_common+0xc8>
 80034b6:	2000      	movs	r0, #0
 80034b8:	e008      	b.n	80034cc <_printf_common+0xa8>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4652      	mov	r2, sl
 80034be:	4641      	mov	r1, r8
 80034c0:	4638      	mov	r0, r7
 80034c2:	47c8      	blx	r9
 80034c4:	3001      	adds	r0, #1
 80034c6:	d103      	bne.n	80034d0 <_printf_common+0xac>
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7c6      	b.n	8003462 <_printf_common+0x3e>
 80034d4:	18e1      	adds	r1, r4, r3
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	2030      	movs	r0, #48	@ 0x30
 80034da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034de:	4422      	add	r2, r4
 80034e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034e8:	3302      	adds	r3, #2
 80034ea:	e7c7      	b.n	800347c <_printf_common+0x58>
 80034ec:	2301      	movs	r3, #1
 80034ee:	4622      	mov	r2, r4
 80034f0:	4641      	mov	r1, r8
 80034f2:	4638      	mov	r0, r7
 80034f4:	47c8      	blx	r9
 80034f6:	3001      	adds	r0, #1
 80034f8:	d0e6      	beq.n	80034c8 <_printf_common+0xa4>
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7d9      	b.n	80034b2 <_printf_common+0x8e>
	...

08003500 <_printf_i>:
 8003500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	7e0f      	ldrb	r7, [r1, #24]
 8003506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003508:	2f78      	cmp	r7, #120	@ 0x78
 800350a:	4691      	mov	r9, r2
 800350c:	4680      	mov	r8, r0
 800350e:	460c      	mov	r4, r1
 8003510:	469a      	mov	sl, r3
 8003512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003516:	d807      	bhi.n	8003528 <_printf_i+0x28>
 8003518:	2f62      	cmp	r7, #98	@ 0x62
 800351a:	d80a      	bhi.n	8003532 <_printf_i+0x32>
 800351c:	2f00      	cmp	r7, #0
 800351e:	f000 80d2 	beq.w	80036c6 <_printf_i+0x1c6>
 8003522:	2f58      	cmp	r7, #88	@ 0x58
 8003524:	f000 80b9 	beq.w	800369a <_printf_i+0x19a>
 8003528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800352c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003530:	e03a      	b.n	80035a8 <_printf_i+0xa8>
 8003532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003536:	2b15      	cmp	r3, #21
 8003538:	d8f6      	bhi.n	8003528 <_printf_i+0x28>
 800353a:	a101      	add	r1, pc, #4	@ (adr r1, 8003540 <_printf_i+0x40>)
 800353c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003540:	08003599 	.word	0x08003599
 8003544:	080035ad 	.word	0x080035ad
 8003548:	08003529 	.word	0x08003529
 800354c:	08003529 	.word	0x08003529
 8003550:	08003529 	.word	0x08003529
 8003554:	08003529 	.word	0x08003529
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003529 	.word	0x08003529
 8003560:	08003529 	.word	0x08003529
 8003564:	08003529 	.word	0x08003529
 8003568:	08003529 	.word	0x08003529
 800356c:	080036ad 	.word	0x080036ad
 8003570:	080035d7 	.word	0x080035d7
 8003574:	08003667 	.word	0x08003667
 8003578:	08003529 	.word	0x08003529
 800357c:	08003529 	.word	0x08003529
 8003580:	080036cf 	.word	0x080036cf
 8003584:	08003529 	.word	0x08003529
 8003588:	080035d7 	.word	0x080035d7
 800358c:	08003529 	.word	0x08003529
 8003590:	08003529 	.word	0x08003529
 8003594:	0800366f 	.word	0x0800366f
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	1d1a      	adds	r2, r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6032      	str	r2, [r6, #0]
 80035a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035a8:	2301      	movs	r3, #1
 80035aa:	e09d      	b.n	80036e8 <_printf_i+0x1e8>
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	1d19      	adds	r1, r3, #4
 80035b2:	6031      	str	r1, [r6, #0]
 80035b4:	0606      	lsls	r6, r0, #24
 80035b6:	d501      	bpl.n	80035bc <_printf_i+0xbc>
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	e003      	b.n	80035c4 <_printf_i+0xc4>
 80035bc:	0645      	lsls	r5, r0, #25
 80035be:	d5fb      	bpl.n	80035b8 <_printf_i+0xb8>
 80035c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	da03      	bge.n	80035d0 <_printf_i+0xd0>
 80035c8:	232d      	movs	r3, #45	@ 0x2d
 80035ca:	426d      	negs	r5, r5
 80035cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035d0:	4859      	ldr	r0, [pc, #356]	@ (8003738 <_printf_i+0x238>)
 80035d2:	230a      	movs	r3, #10
 80035d4:	e011      	b.n	80035fa <_printf_i+0xfa>
 80035d6:	6821      	ldr	r1, [r4, #0]
 80035d8:	6833      	ldr	r3, [r6, #0]
 80035da:	0608      	lsls	r0, r1, #24
 80035dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80035e0:	d402      	bmi.n	80035e8 <_printf_i+0xe8>
 80035e2:	0649      	lsls	r1, r1, #25
 80035e4:	bf48      	it	mi
 80035e6:	b2ad      	uxthmi	r5, r5
 80035e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80035ea:	4853      	ldr	r0, [pc, #332]	@ (8003738 <_printf_i+0x238>)
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	bf14      	ite	ne
 80035f0:	230a      	movne	r3, #10
 80035f2:	2308      	moveq	r3, #8
 80035f4:	2100      	movs	r1, #0
 80035f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035fa:	6866      	ldr	r6, [r4, #4]
 80035fc:	60a6      	str	r6, [r4, #8]
 80035fe:	2e00      	cmp	r6, #0
 8003600:	bfa2      	ittt	ge
 8003602:	6821      	ldrge	r1, [r4, #0]
 8003604:	f021 0104 	bicge.w	r1, r1, #4
 8003608:	6021      	strge	r1, [r4, #0]
 800360a:	b90d      	cbnz	r5, 8003610 <_printf_i+0x110>
 800360c:	2e00      	cmp	r6, #0
 800360e:	d04b      	beq.n	80036a8 <_printf_i+0x1a8>
 8003610:	4616      	mov	r6, r2
 8003612:	fbb5 f1f3 	udiv	r1, r5, r3
 8003616:	fb03 5711 	mls	r7, r3, r1, r5
 800361a:	5dc7      	ldrb	r7, [r0, r7]
 800361c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003620:	462f      	mov	r7, r5
 8003622:	42bb      	cmp	r3, r7
 8003624:	460d      	mov	r5, r1
 8003626:	d9f4      	bls.n	8003612 <_printf_i+0x112>
 8003628:	2b08      	cmp	r3, #8
 800362a:	d10b      	bne.n	8003644 <_printf_i+0x144>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	07df      	lsls	r7, r3, #31
 8003630:	d508      	bpl.n	8003644 <_printf_i+0x144>
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	6861      	ldr	r1, [r4, #4]
 8003636:	4299      	cmp	r1, r3
 8003638:	bfde      	ittt	le
 800363a:	2330      	movle	r3, #48	@ 0x30
 800363c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003640:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003644:	1b92      	subs	r2, r2, r6
 8003646:	6122      	str	r2, [r4, #16]
 8003648:	f8cd a000 	str.w	sl, [sp]
 800364c:	464b      	mov	r3, r9
 800364e:	aa03      	add	r2, sp, #12
 8003650:	4621      	mov	r1, r4
 8003652:	4640      	mov	r0, r8
 8003654:	f7ff fee6 	bl	8003424 <_printf_common>
 8003658:	3001      	adds	r0, #1
 800365a:	d14a      	bne.n	80036f2 <_printf_i+0x1f2>
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	b004      	add	sp, #16
 8003662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	f043 0320 	orr.w	r3, r3, #32
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	4833      	ldr	r0, [pc, #204]	@ (800373c <_printf_i+0x23c>)
 8003670:	2778      	movs	r7, #120	@ 0x78
 8003672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	6831      	ldr	r1, [r6, #0]
 800367a:	061f      	lsls	r7, r3, #24
 800367c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003680:	d402      	bmi.n	8003688 <_printf_i+0x188>
 8003682:	065f      	lsls	r7, r3, #25
 8003684:	bf48      	it	mi
 8003686:	b2ad      	uxthmi	r5, r5
 8003688:	6031      	str	r1, [r6, #0]
 800368a:	07d9      	lsls	r1, r3, #31
 800368c:	bf44      	itt	mi
 800368e:	f043 0320 	orrmi.w	r3, r3, #32
 8003692:	6023      	strmi	r3, [r4, #0]
 8003694:	b11d      	cbz	r5, 800369e <_printf_i+0x19e>
 8003696:	2310      	movs	r3, #16
 8003698:	e7ac      	b.n	80035f4 <_printf_i+0xf4>
 800369a:	4827      	ldr	r0, [pc, #156]	@ (8003738 <_printf_i+0x238>)
 800369c:	e7e9      	b.n	8003672 <_printf_i+0x172>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f023 0320 	bic.w	r3, r3, #32
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	e7f6      	b.n	8003696 <_printf_i+0x196>
 80036a8:	4616      	mov	r6, r2
 80036aa:	e7bd      	b.n	8003628 <_printf_i+0x128>
 80036ac:	6833      	ldr	r3, [r6, #0]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	6961      	ldr	r1, [r4, #20]
 80036b2:	1d18      	adds	r0, r3, #4
 80036b4:	6030      	str	r0, [r6, #0]
 80036b6:	062e      	lsls	r6, r5, #24
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	d501      	bpl.n	80036c0 <_printf_i+0x1c0>
 80036bc:	6019      	str	r1, [r3, #0]
 80036be:	e002      	b.n	80036c6 <_printf_i+0x1c6>
 80036c0:	0668      	lsls	r0, r5, #25
 80036c2:	d5fb      	bpl.n	80036bc <_printf_i+0x1bc>
 80036c4:	8019      	strh	r1, [r3, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	6123      	str	r3, [r4, #16]
 80036ca:	4616      	mov	r6, r2
 80036cc:	e7bc      	b.n	8003648 <_printf_i+0x148>
 80036ce:	6833      	ldr	r3, [r6, #0]
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	6032      	str	r2, [r6, #0]
 80036d4:	681e      	ldr	r6, [r3, #0]
 80036d6:	6862      	ldr	r2, [r4, #4]
 80036d8:	2100      	movs	r1, #0
 80036da:	4630      	mov	r0, r6
 80036dc:	f7fc fd80 	bl	80001e0 <memchr>
 80036e0:	b108      	cbz	r0, 80036e6 <_printf_i+0x1e6>
 80036e2:	1b80      	subs	r0, r0, r6
 80036e4:	6060      	str	r0, [r4, #4]
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	6123      	str	r3, [r4, #16]
 80036ea:	2300      	movs	r3, #0
 80036ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f0:	e7aa      	b.n	8003648 <_printf_i+0x148>
 80036f2:	6923      	ldr	r3, [r4, #16]
 80036f4:	4632      	mov	r2, r6
 80036f6:	4649      	mov	r1, r9
 80036f8:	4640      	mov	r0, r8
 80036fa:	47d0      	blx	sl
 80036fc:	3001      	adds	r0, #1
 80036fe:	d0ad      	beq.n	800365c <_printf_i+0x15c>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	079b      	lsls	r3, r3, #30
 8003704:	d413      	bmi.n	800372e <_printf_i+0x22e>
 8003706:	68e0      	ldr	r0, [r4, #12]
 8003708:	9b03      	ldr	r3, [sp, #12]
 800370a:	4298      	cmp	r0, r3
 800370c:	bfb8      	it	lt
 800370e:	4618      	movlt	r0, r3
 8003710:	e7a6      	b.n	8003660 <_printf_i+0x160>
 8003712:	2301      	movs	r3, #1
 8003714:	4632      	mov	r2, r6
 8003716:	4649      	mov	r1, r9
 8003718:	4640      	mov	r0, r8
 800371a:	47d0      	blx	sl
 800371c:	3001      	adds	r0, #1
 800371e:	d09d      	beq.n	800365c <_printf_i+0x15c>
 8003720:	3501      	adds	r5, #1
 8003722:	68e3      	ldr	r3, [r4, #12]
 8003724:	9903      	ldr	r1, [sp, #12]
 8003726:	1a5b      	subs	r3, r3, r1
 8003728:	42ab      	cmp	r3, r5
 800372a:	dcf2      	bgt.n	8003712 <_printf_i+0x212>
 800372c:	e7eb      	b.n	8003706 <_printf_i+0x206>
 800372e:	2500      	movs	r5, #0
 8003730:	f104 0619 	add.w	r6, r4, #25
 8003734:	e7f5      	b.n	8003722 <_printf_i+0x222>
 8003736:	bf00      	nop
 8003738:	08003865 	.word	0x08003865
 800373c:	08003876 	.word	0x08003876

08003740 <memmove>:
 8003740:	4288      	cmp	r0, r1
 8003742:	b510      	push	{r4, lr}
 8003744:	eb01 0402 	add.w	r4, r1, r2
 8003748:	d902      	bls.n	8003750 <memmove+0x10>
 800374a:	4284      	cmp	r4, r0
 800374c:	4623      	mov	r3, r4
 800374e:	d807      	bhi.n	8003760 <memmove+0x20>
 8003750:	1e43      	subs	r3, r0, #1
 8003752:	42a1      	cmp	r1, r4
 8003754:	d008      	beq.n	8003768 <memmove+0x28>
 8003756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800375a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800375e:	e7f8      	b.n	8003752 <memmove+0x12>
 8003760:	4402      	add	r2, r0
 8003762:	4601      	mov	r1, r0
 8003764:	428a      	cmp	r2, r1
 8003766:	d100      	bne.n	800376a <memmove+0x2a>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800376e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003772:	e7f7      	b.n	8003764 <memmove+0x24>

08003774 <_sbrk_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d06      	ldr	r5, [pc, #24]	@ (8003790 <_sbrk_r+0x1c>)
 8003778:	2300      	movs	r3, #0
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	f7fd fdf8 	bl	8001374 <_sbrk>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_sbrk_r+0x1a>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_sbrk_r+0x1a>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	2000026c 	.word	0x2000026c

08003794 <memcpy>:
 8003794:	440a      	add	r2, r1
 8003796:	4291      	cmp	r1, r2
 8003798:	f100 33ff 	add.w	r3, r0, #4294967295
 800379c:	d100      	bne.n	80037a0 <memcpy+0xc>
 800379e:	4770      	bx	lr
 80037a0:	b510      	push	{r4, lr}
 80037a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037aa:	4291      	cmp	r1, r2
 80037ac:	d1f9      	bne.n	80037a2 <memcpy+0xe>
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <_realloc_r>:
 80037b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b4:	4680      	mov	r8, r0
 80037b6:	4615      	mov	r5, r2
 80037b8:	460c      	mov	r4, r1
 80037ba:	b921      	cbnz	r1, 80037c6 <_realloc_r+0x16>
 80037bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	4611      	mov	r1, r2
 80037c2:	f7ff bc4b 	b.w	800305c <_malloc_r>
 80037c6:	b92a      	cbnz	r2, 80037d4 <_realloc_r+0x24>
 80037c8:	f7ff fbdc 	bl	8002f84 <_free_r>
 80037cc:	2400      	movs	r4, #0
 80037ce:	4620      	mov	r0, r4
 80037d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d4:	f000 f81a 	bl	800380c <_malloc_usable_size_r>
 80037d8:	4285      	cmp	r5, r0
 80037da:	4606      	mov	r6, r0
 80037dc:	d802      	bhi.n	80037e4 <_realloc_r+0x34>
 80037de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80037e2:	d8f4      	bhi.n	80037ce <_realloc_r+0x1e>
 80037e4:	4629      	mov	r1, r5
 80037e6:	4640      	mov	r0, r8
 80037e8:	f7ff fc38 	bl	800305c <_malloc_r>
 80037ec:	4607      	mov	r7, r0
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d0ec      	beq.n	80037cc <_realloc_r+0x1c>
 80037f2:	42b5      	cmp	r5, r6
 80037f4:	462a      	mov	r2, r5
 80037f6:	4621      	mov	r1, r4
 80037f8:	bf28      	it	cs
 80037fa:	4632      	movcs	r2, r6
 80037fc:	f7ff ffca 	bl	8003794 <memcpy>
 8003800:	4621      	mov	r1, r4
 8003802:	4640      	mov	r0, r8
 8003804:	f7ff fbbe 	bl	8002f84 <_free_r>
 8003808:	463c      	mov	r4, r7
 800380a:	e7e0      	b.n	80037ce <_realloc_r+0x1e>

0800380c <_malloc_usable_size_r>:
 800380c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003810:	1f18      	subs	r0, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bfbc      	itt	lt
 8003816:	580b      	ldrlt	r3, [r1, r0]
 8003818:	18c0      	addlt	r0, r0, r3
 800381a:	4770      	bx	lr

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
