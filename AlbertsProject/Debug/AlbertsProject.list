
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08008d28  08008d28  00009d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e8c  08008e8c  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008e8c  08008e8c  00009e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e94  08008e94  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e94  08008e94  00009e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e98  08008e98  00009e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008e9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000068  08008f04  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08008f04  0000a7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee9c  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a30  00000000  00000000  00018f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  0001c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004539  00000000  00000000  0001d174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130cb  00000000  00000000  000216ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb59  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c12d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  000c1314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c501c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d10 	.word	0x08008d10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08008d10 	.word	0x08008d10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <LSM_Init>:
uint16_t _lsm_nssPin;

uint8_t _lsmReadReg(uint8_t reg);
void _lsmWriteReg(uint8_t reg, uint8_t data);

uint8_t LSM_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	80fb      	strh	r3, [r7, #6]
	_lsm_hspi1 = hspi;
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <LSM_Init+0x5c>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6013      	str	r3, [r2, #0]
	_lsm_nssPort = port;
 8000dc0:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <LSM_Init+0x60>)
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	6013      	str	r3, [r2, #0]
	_lsm_nssPin = pin;
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <LSM_Init+0x64>)
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	8013      	strh	r3, [r2, #0]

	uint8_t whoAmI =_lsmReadReg(LSM_REG_WHO_AM_I);
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f000 f87f 	bl	8000ed0 <_lsmReadReg>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	75fb      	strb	r3, [r7, #23]

	if (whoAmI != LSM_SET_WHO_AM_I_VAL) {
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	2b6a      	cmp	r3, #106	@ 0x6a
 8000dda:	d001      	beq.n	8000de0 <LSM_Init+0x34>
		return 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e00e      	b.n	8000dfe <LSM_Init+0x52>
	}

	uint8_t xlmode = LSM_SET_CTRL1_XL_26_Hz;
 8000de0:	2324      	movs	r3, #36	@ 0x24
 8000de2:	75bb      	strb	r3, [r7, #22]
	uint8_t gmode = LSM_SET_CTRL2_G_26_Hz;
 8000de4:	232c      	movs	r3, #44	@ 0x2c
 8000de6:	757b      	strb	r3, [r7, #21]
	_lsmWriteReg(LSM_REG_CTRL1_XL, xlmode);
 8000de8:	7dbb      	ldrb	r3, [r7, #22]
 8000dea:	4619      	mov	r1, r3
 8000dec:	2010      	movs	r0, #16
 8000dee:	f000 f8a9 	bl	8000f44 <_lsmWriteReg>
	_lsmWriteReg(LSM_REG_CTRL2_G, gmode);
 8000df2:	7d7b      	ldrb	r3, [r7, #21]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2011      	movs	r0, #17
 8000df8:	f000 f8a4 	bl	8000f44 <_lsmWriteReg>

	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000084 	.word	0x20000084
 8000e0c:	20000088 	.word	0x20000088
 8000e10:	2000008c 	.word	0x2000008c

08000e14 <LSM_ReadData>:

void LSM_ReadData(int16_t endBufer[]) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];

	uint8_t dataReg = LSM_REG_OUTX_L_G;
 8000e1c:	2322      	movs	r3, #34	@ 0x22
 8000e1e:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i < 12; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	e012      	b.n	8000e4c <LSM_ReadData+0x38>
		buffer[i] = _lsmReadReg(dataReg+i);
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	7efb      	ldrb	r3, [r7, #27]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f84d 	bl	8000ed0 <_lsmReadReg>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f107 020c 	add.w	r2, r7, #12
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	4413      	add	r3, r2
 8000e42:	460a      	mov	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 12; i++) {
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	2b0b      	cmp	r3, #11
 8000e50:	dde9      	ble.n	8000e26 <LSM_ReadData+0x12>
	}

	endBufer[0] = (((uint16_t)buffer[1]) << 8) + buffer[0];
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	7b3a      	ldrb	r2, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	801a      	strh	r2, [r3, #0]
	endBufer[1] = (((uint16_t)buffer[3]) << 8) + buffer[2];
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	7bba      	ldrb	r2, [r7, #14]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3302      	adds	r3, #2
 8000e74:	b212      	sxth	r2, r2
 8000e76:	801a      	strh	r2, [r3, #0]
	endBufer[2] = (((uint16_t)buffer[5]) << 8) + buffer[4];
 8000e78:	7c7b      	ldrb	r3, [r7, #17]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	7c3a      	ldrb	r2, [r7, #16]
 8000e80:	4413      	add	r3, r2
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3304      	adds	r3, #4
 8000e88:	b212      	sxth	r2, r2
 8000e8a:	801a      	strh	r2, [r3, #0]
	endBufer[3] = (((uint16_t)buffer[7]) << 8) + buffer[6];
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	7cba      	ldrb	r2, [r7, #18]
 8000e94:	4413      	add	r3, r2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3306      	adds	r3, #6
 8000e9c:	b212      	sxth	r2, r2
 8000e9e:	801a      	strh	r2, [r3, #0]
	endBufer[4] = (((uint16_t)buffer[9]) << 8) + buffer[8];
 8000ea0:	7d7b      	ldrb	r3, [r7, #21]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	7d3a      	ldrb	r2, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3308      	adds	r3, #8
 8000eb0:	b212      	sxth	r2, r2
 8000eb2:	801a      	strh	r2, [r3, #0]
	endBufer[5] = (((uint16_t)buffer[11]) << 8) + buffer[10];
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	7dba      	ldrb	r2, [r7, #22]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	330a      	adds	r3, #10
 8000ec4:	b212      	sxth	r2, r2
 8000ec6:	801a      	strh	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_lsmReadReg>:

uint8_t _lsmReadReg(uint8_t reg) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	reg = reg | (1 << 7);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	71fb      	strb	r3, [r7, #7]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <_lsmReadReg+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <_lsmReadReg+0x6c>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <_lsmReadReg+0x68>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_lsmReadReg+0x70>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	1df9      	adds	r1, r7, #7
 8000f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f04:	2201      	movs	r2, #1
 8000f06:	f003 f8bc 	bl	8004082 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_lsm_hspi1, &reg, 1, 1000);
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <_lsmReadReg+0x70>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	1df9      	adds	r1, r7, #7
 8000f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f14:	2201      	movs	r2, #1
 8000f16:	f003 f9f8 	bl	800430a <HAL_SPI_Receive>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <_lsmReadReg+0x68>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <_lsmReadReg+0x6c>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <_lsmReadReg+0x68>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	615a      	str	r2, [r3, #20]
	return reg;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000088 	.word	0x20000088
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	20000084 	.word	0x20000084

08000f44 <_lsmWriteReg>:

void _lsmWriteReg(uint8_t reg, uint8_t data) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <_lsmWriteReg+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <_lsmWriteReg+0x68>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_lsmWriteReg+0x64>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	400a      	ands	r2, r1
 8000f68:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <_lsmWriteReg+0x6c>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	1df9      	adds	r1, r7, #7
 8000f70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f74:	2201      	movs	r2, #1
 8000f76:	f003 f884 	bl	8004082 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_lsm_hspi1, &data, 1, 1000);
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <_lsmWriteReg+0x6c>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	1db9      	adds	r1, r7, #6
 8000f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f84:	2201      	movs	r2, #1
 8000f86:	f003 f87c 	bl	8004082 <HAL_SPI_Transmit>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_lsmWriteReg+0x64>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	695a      	ldr	r2, [r3, #20]
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <_lsmWriteReg+0x68>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <_lsmWriteReg+0x64>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	615a      	str	r2, [r3, #20]
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000088 	.word	0x20000088
 8000fac:	2000008c 	.word	0x2000008c
 8000fb0:	20000084 	.word	0x20000084

08000fb4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb8:	f001 f8d2 	bl	8002160 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fbc:	f000 f816 	bl	8000fec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fc0:	f000 f8d4 	bl	800116c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000fc4:	f000 f89c 	bl	8001100 <MX_SPI1_Init>
	MX_SDIO_SD_Init();
 8000fc8:	f000 f87a 	bl	80010c0 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8000fcc:	f004 fad4 	bl	8005578 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	cheakAll();
 8000fd0:	f000 fa3c 	bl	800144c <cheakAll>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		readData();
 8000fd4:	f000 f974 	bl	80012c0 <readData>

		writeData();
 8000fd8:	f000 f9b6 	bl	8001348 <writeData>
//		f_lseek(&Fil, f_size(&Fil));
//		f_puts(buffer, &Fil);
//
//		f_close(&Fil);
//
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <main+0x34>)
 8000fe0:	f001 fbef 	bl	80027c2 <HAL_GPIO_TogglePin>
		readData();
 8000fe4:	bf00      	nop
 8000fe6:	e7f5      	b.n	8000fd4 <main+0x20>
 8000fe8:	40020000 	.word	0x40020000

08000fec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	@ 0x50
 8000ff0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2230      	movs	r2, #48	@ 0x30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fa08 	bl	8008410 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	4a27      	ldr	r2, [pc, #156]	@ (80010b8 <SystemClock_Config+0xcc>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001038:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <SystemClock_Config+0xd0>)
 800103a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001060:	2319      	movs	r3, #25
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001064:	23a8      	movs	r3, #168	@ 0xa8
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fbbf 	bl	80027f8 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x98>
		Error_Handler();
 8001080:	f000 faa4 	bl	80015cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2102      	movs	r1, #2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fe21 	bl	8002ce8 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xc4>
		Error_Handler();
 80010ac:	f000 fa8e 	bl	80015cc <Error_Handler>
	}
}
 80010b0:	bf00      	nop
 80010b2:	3750      	adds	r7, #80	@ 0x50
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010c6:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <MX_SDIO_SD_Init+0x3c>)
 80010c8:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <MX_SDIO_SD_Init+0x38>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000090 	.word	0x20000090
 80010fc:	40012c00 	.word	0x40012c00

08001100 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001106:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <MX_SPI1_Init+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_SPI1_Init+0x64>)
 800110c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001110:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_SPI1_Init+0x64>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001134:	2218      	movs	r2, #24
 8001136:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_SPI1_Init+0x64>)
 800114c:	220a      	movs	r2, #10
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001152:	f002 ff0d 	bl	8003f70 <HAL_SPI_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_SPI1_Init+0x60>
		Error_Handler();
 800115c:	f000 fa36 	bl	80015cc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000114 	.word	0x20000114
 8001168:	40013000 	.word	0x40013000

0800116c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b4a      	ldr	r3, [pc, #296]	@ (80012b0 <MX_GPIO_Init+0x144>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a49      	ldr	r2, [pc, #292]	@ (80012b0 <MX_GPIO_Init+0x144>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <MX_GPIO_Init+0x144>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a42      	ldr	r2, [pc, #264]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a3b      	ldr	r2, [pc, #236]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b39      	ldr	r3, [pc, #228]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b35      	ldr	r3, [pc, #212]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a34      	ldr	r2, [pc, #208]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b32      	ldr	r3, [pc, #200]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b2e      	ldr	r3, [pc, #184]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a2d      	ldr	r2, [pc, #180]	@ (80012b0 <MX_GPIO_Init+0x144>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <MX_GPIO_Init+0x144>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin,
 800120e:	2201      	movs	r2, #1
 8001210:	2131      	movs	r1, #49	@ 0x31
 8001212:	4828      	ldr	r0, [pc, #160]	@ (80012b4 <MX_GPIO_Init+0x148>)
 8001214:	f001 fabc 	bl	8002790 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED2_Pin | LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2107      	movs	r1, #7
 800121c:	4826      	ldr	r0, [pc, #152]	@ (80012b8 <MX_GPIO_Init+0x14c>)
 800121e:	f001 fab7 	bl	8002790 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2110      	movs	r1, #16
 8001226:	4824      	ldr	r0, [pc, #144]	@ (80012b8 <MX_GPIO_Init+0x14c>)
 8001228:	f001 fab2 	bl	8002790 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800122c:	2201      	movs	r2, #1
 800122e:	f240 2107 	movw	r1, #519	@ 0x207
 8001232:	4822      	ldr	r0, [pc, #136]	@ (80012bc <MX_GPIO_Init+0x150>)
 8001234:	f001 faac 	bl	8002790 <HAL_GPIO_WritePin>
	MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin, GPIO_PIN_SET);

	/*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = PWR2_EN_Pin | WQ_NSS_Pin | LORA_NSS_Pin;
 8001238:	2331      	movs	r3, #49	@ 0x31
 800123a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4819      	ldr	r0, [pc, #100]	@ (80012b4 <MX_GPIO_Init+0x148>)
 8001250:	f001 f902 	bl	8002458 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED3_Pin | LED4_Pin | WQ_HOLD_Pin;
 8001254:	2317      	movs	r3, #23
 8001256:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_GPIO_Init+0x14c>)
 800126c:	f001 f8f4 	bl	8002458 <HAL_GPIO_Init>

	/*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
	GPIO_InitStruct.Pin = MS_NSS_Pin | LIS_NSS_Pin | LSM_NSS_Pin | ADC_NSS_Pin;
 8001270:	f240 2307 	movw	r3, #519	@ 0x207
 8001274:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_GPIO_Init+0x150>)
 800128a:	f001 f8e5 	bl	8002458 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin | JMP_PROG_Pin;
 800128e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001292:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	@ (80012bc <MX_GPIO_Init+0x150>)
 80012a4:	f001 f8d8 	bl	8002458 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400

080012c0 <readData>:

/* USER CODE BEGIN 4 */
void readData() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 80012c4:	481d      	ldr	r0, [pc, #116]	@ (800133c <readData+0x7c>)
 80012c6:	f000 fa93 	bl	80017f0 <MS_ReadData>
	LSM_ReadData(LSM_Data);
 80012ca:	481d      	ldr	r0, [pc, #116]	@ (8001340 <readData+0x80>)
 80012cc:	f7ff fda2 	bl	8000e14 <LSM_ReadData>

	SensorsData.time = HAL_GetTick();
 80012d0:	f000 ffac 	bl	800222c <HAL_GetTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <readData+0x84>)
 80012d8:	6013      	str	r3, [r2, #0]
	SensorsData.press = MS_Data[0];
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <readData+0x7c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <readData+0x84>)
 80012e2:	609a      	str	r2, [r3, #8]
	SensorsData.temp = MS_Data[1];
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <readData+0x7c>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <readData+0x84>)
 80012ec:	60da      	str	r2, [r3, #12]
	SensorsData.accel1 = LSM_Data[3];
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <readData+0x80>)
 80012f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <readData+0x84>)
 80012f8:	611a      	str	r2, [r3, #16]
	SensorsData.accel2 = LSM_Data[4];
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <readData+0x80>)
 80012fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001300:	461a      	mov	r2, r3
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <readData+0x84>)
 8001304:	615a      	str	r2, [r3, #20]
	SensorsData.accel3 = LSM_Data[5];
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <readData+0x80>)
 8001308:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800130c:	461a      	mov	r2, r3
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <readData+0x84>)
 8001310:	619a      	str	r2, [r3, #24]
	SensorsData.gyro1 = LSM_Data[0];
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <readData+0x80>)
 8001314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001318:	461a      	mov	r2, r3
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <readData+0x84>)
 800131c:	61da      	str	r2, [r3, #28]
	SensorsData.gyro2 = LSM_Data[1];
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <readData+0x80>)
 8001320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001324:	461a      	mov	r2, r3
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <readData+0x84>)
 8001328:	621a      	str	r2, [r3, #32]
	SensorsData.gyro3 = LSM_Data[2];
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <readData+0x80>)
 800132c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001330:	461a      	mov	r2, r3
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <readData+0x84>)
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000016c 	.word	0x2000016c
 8001340:	20000174 	.word	0x20000174
 8001344:	2000017c 	.word	0x2000017c

08001348 <writeData>:

void writeData() {
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134c:	b090      	sub	sp, #64	@ 0x40
 800134e:	af0a      	add	r7, sp, #40	@ 0x28
 8001350:	466b      	mov	r3, sp
 8001352:	4698      	mov	r8, r3

	char buffer[sizeOfBufferToLora];
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <writeData+0xec>)
 8001356:	681e      	ldr	r6, [r3, #0]
 8001358:	1e73      	subs	r3, r6, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	4632      	mov	r2, r6
 800135e:	2300      	movs	r3, #0
 8001360:	4614      	mov	r4, r2
 8001362:	461d      	mov	r5, r3
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	00eb      	lsls	r3, r5, #3
 800136e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001372:	00e2      	lsls	r2, r4, #3
 8001374:	4632      	mov	r2, r6
 8001376:	2300      	movs	r3, #0
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	00cb      	lsls	r3, r1, #3
 8001386:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800138a:	00c2      	lsls	r2, r0, #3
 800138c:	4633      	mov	r3, r6
 800138e:	3307      	adds	r3, #7
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	ebad 0d03 	sub.w	sp, sp, r3
 8001398:	ab0a      	add	r3, sp, #40	@ 0x28
 800139a:	3300      	adds	r3, #0
 800139c:	613b      	str	r3, [r7, #16]

//	uint8_t sizeOfSnprintf =
	snprintf(buffer, sizeOfBufferToLora,
 800139e:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <writeData+0xec>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	469c      	mov	ip, r3
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <writeData+0xf0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <writeData+0xf0>)
 80013ac:	6852      	ldr	r2, [r2, #4]
 80013ae:	4922      	ldr	r1, [pc, #136]	@ (8001438 <writeData+0xf0>)
 80013b0:	6889      	ldr	r1, [r1, #8]
 80013b2:	4821      	ldr	r0, [pc, #132]	@ (8001438 <writeData+0xf0>)
 80013b4:	68c0      	ldr	r0, [r0, #12]
 80013b6:	4c20      	ldr	r4, [pc, #128]	@ (8001438 <writeData+0xf0>)
 80013b8:	6924      	ldr	r4, [r4, #16]
 80013ba:	4d1f      	ldr	r5, [pc, #124]	@ (8001438 <writeData+0xf0>)
 80013bc:	696d      	ldr	r5, [r5, #20]
 80013be:	4e1e      	ldr	r6, [pc, #120]	@ (8001438 <writeData+0xf0>)
 80013c0:	69b6      	ldr	r6, [r6, #24]
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <writeData+0xf0>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <writeData+0xf0>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <writeData+0xf0>)
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	9308      	str	r3, [sp, #32]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	9307      	str	r3, [sp, #28]
 80013dc:	9606      	str	r6, [sp, #24]
 80013de:	9505      	str	r5, [sp, #20]
 80013e0:	9404      	str	r4, [sp, #16]
 80013e2:	9003      	str	r0, [sp, #12]
 80013e4:	9102      	str	r1, [sp, #8]
 80013e6:	9201      	str	r2, [sp, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <writeData+0xf4>)
 80013ee:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <writeData+0xf8>)
 80013f0:	4661      	mov	r1, ip
 80013f2:	6938      	ldr	r0, [r7, #16]
 80013f4:	f006 ffd8 	bl	80083a8 <sniprintf>
			SensorsData.temp, SensorsData.accel1, SensorsData.accel2,
			SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
			SensorsData.gyro3);
//	LORA_TransmitData(buffer, sizeOfSnprintf);

	f_open(&Fil, "SULOG.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80013f8:	2212      	movs	r2, #18
 80013fa:	4912      	ldr	r1, [pc, #72]	@ (8001444 <writeData+0xfc>)
 80013fc:	4812      	ldr	r0, [pc, #72]	@ (8001448 <writeData+0x100>)
 80013fe:	f006 f851 	bl	80074a4 <f_open>

	f_lseek(&Fil, f_size(&Fil));
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <writeData+0x100>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	@ (8001448 <writeData+0x100>)
 800140a:	f006 fc22 	bl	8007c52 <f_lseek>
	HAL_Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 ff18 	bl	8002244 <HAL_Delay>
	f_puts(buffer, &Fil);
 8001414:	490c      	ldr	r1, [pc, #48]	@ (8001448 <writeData+0x100>)
 8001416:	6938      	ldr	r0, [r7, #16]
 8001418:	f006 ff46 	bl	80082a8 <f_puts>
	HAL_Delay(15);
 800141c:	200f      	movs	r0, #15
 800141e:	f000 ff11 	bl	8002244 <HAL_Delay>
	f_close(&Fil);
 8001422:	4809      	ldr	r0, [pc, #36]	@ (8001448 <writeData+0x100>)
 8001424:	f006 fbeb 	bl	8007bfe <f_close>
 8001428:	46c5      	mov	sp, r8

}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	2000017c 	.word	0x2000017c
 800143c:	08008d28 	.word	0x08008d28
 8001440:	08008d2c 	.word	0x08008d2c
 8001444:	08008d64 	.word	0x08008d64
 8001448:	200003d8 	.word	0x200003d8

0800144c <cheakAll>:

void cheakAll() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	LED2_GPIO_Port->ODR |= LED2_Pin;
 8001450:	4b55      	ldr	r3, [pc, #340]	@ (80015a8 <cheakAll+0x15c>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4a54      	ldr	r2, [pc, #336]	@ (80015a8 <cheakAll+0x15c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 800145c:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <cheakAll+0x15c>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	4a51      	ldr	r2, [pc, #324]	@ (80015a8 <cheakAll+0x15c>)
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 8001468:	4b4f      	ldr	r3, [pc, #316]	@ (80015a8 <cheakAll+0x15c>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <cheakAll+0x15c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6153      	str	r3, [r2, #20]

	HAL_Delay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001478:	f000 fee4 	bl	8002244 <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 800147c:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <cheakAll+0x15c>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a49      	ldr	r2, [pc, #292]	@ (80015a8 <cheakAll+0x15c>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 8001488:	4b47      	ldr	r3, [pc, #284]	@ (80015a8 <cheakAll+0x15c>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a46      	ldr	r2, [pc, #280]	@ (80015a8 <cheakAll+0x15c>)
 800148e:	f023 0302 	bic.w	r3, r3, #2
 8001492:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 8001494:	4b44      	ldr	r3, [pc, #272]	@ (80015a8 <cheakAll+0x15c>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	4a43      	ldr	r2, [pc, #268]	@ (80015a8 <cheakAll+0x15c>)
 800149a:	f023 0304 	bic.w	r3, r3, #4
 800149e:	6153      	str	r3, [r2, #20]

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin)) {
 80014a0:	2220      	movs	r2, #32
 80014a2:	4942      	ldr	r1, [pc, #264]	@ (80015ac <cheakAll+0x160>)
 80014a4:	4842      	ldr	r0, [pc, #264]	@ (80015b0 <cheakAll+0x164>)
 80014a6:	f000 f897 	bl	80015d8 <LORA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <cheakAll+0x7c>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014b0:	2102      	movs	r1, #2
 80014b2:	483d      	ldr	r0, [pc, #244]	@ (80015a8 <cheakAll+0x15c>)
 80014b4:	f001 f985 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80014b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014bc:	f000 fec2 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014c0:	2102      	movs	r1, #2
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <cheakAll+0x15c>)
 80014c4:	f001 f97d 	bl	80027c2 <HAL_GPIO_TogglePin>
	}

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 80014c8:	2201      	movs	r2, #1
 80014ca:	493a      	ldr	r1, [pc, #232]	@ (80015b4 <cheakAll+0x168>)
 80014cc:	4838      	ldr	r0, [pc, #224]	@ (80015b0 <cheakAll+0x164>)
 80014ce:	f000 f969 	bl	80017a4 <MS_Init>

	if (LSM_Init(&hspi1, LSM_NSS_GPIO_Port, LSM_NSS_Pin)) {
 80014d2:	2204      	movs	r2, #4
 80014d4:	4937      	ldr	r1, [pc, #220]	@ (80015b4 <cheakAll+0x168>)
 80014d6:	4836      	ldr	r0, [pc, #216]	@ (80015b0 <cheakAll+0x164>)
 80014d8:	f7ff fc68 	bl	8000dac <LSM_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01b      	beq.n	800151a <cheakAll+0xce>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014e2:	2102      	movs	r1, #2
 80014e4:	4830      	ldr	r0, [pc, #192]	@ (80015a8 <cheakAll+0x15c>)
 80014e6:	f001 f96c 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80014ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014ee:	f000 fea9 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014f2:	2102      	movs	r1, #2
 80014f4:	482c      	ldr	r0, [pc, #176]	@ (80015a8 <cheakAll+0x15c>)
 80014f6:	f001 f964 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80014fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014fe:	f000 fea1 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001502:	2102      	movs	r1, #2
 8001504:	4828      	ldr	r0, [pc, #160]	@ (80015a8 <cheakAll+0x15c>)
 8001506:	f001 f95c 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800150a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800150e:	f000 fe99 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001512:	2102      	movs	r1, #2
 8001514:	4824      	ldr	r0, [pc, #144]	@ (80015a8 <cheakAll+0x15c>)
 8001516:	f001 f954 	bl	80027c2 <HAL_GPIO_TogglePin>
	}

	FR_Status = f_mount(&FatFs, SDPath, 1);
 800151a:	2201      	movs	r2, #1
 800151c:	4926      	ldr	r1, [pc, #152]	@ (80015b8 <cheakAll+0x16c>)
 800151e:	4827      	ldr	r0, [pc, #156]	@ (80015bc <cheakAll+0x170>)
 8001520:	f005 ff7a 	bl	8007418 <f_mount>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <cheakAll+0x174>)
 800152a:	701a      	strb	r2, [r3, #0]

	if (FR_Status != FR_OK) {
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <cheakAll+0x174>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d02b      	beq.n	800158c <cheakAll+0x140>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001534:	2102      	movs	r1, #2
 8001536:	481c      	ldr	r0, [pc, #112]	@ (80015a8 <cheakAll+0x15c>)
 8001538:	f001 f943 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800153c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001540:	f000 fe80 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001544:	2102      	movs	r1, #2
 8001546:	4818      	ldr	r0, [pc, #96]	@ (80015a8 <cheakAll+0x15c>)
 8001548:	f001 f93b 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800154c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001550:	f000 fe78 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001554:	2102      	movs	r1, #2
 8001556:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <cheakAll+0x15c>)
 8001558:	f001 f933 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800155c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001560:	f000 fe70 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001564:	2102      	movs	r1, #2
 8001566:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <cheakAll+0x15c>)
 8001568:	f001 f92b 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800156c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001570:	f000 fe68 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001574:	2102      	movs	r1, #2
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <cheakAll+0x15c>)
 8001578:	f001 f923 	bl	80027c2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800157c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001580:	f000 fe60 	bl	8002244 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001584:	2102      	movs	r1, #2
 8001586:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <cheakAll+0x15c>)
 8001588:	f001 f91b 	bl	80027c2 <HAL_GPIO_TogglePin>

	}

	f_unlink("SULOG.txt");
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <cheakAll+0x178>)
 800158e:	f006 fd69 	bl	8008064 <f_unlink>

	f_open(&Fil, "SULOG.txt", FA_CREATE_ALWAYS);
 8001592:	2208      	movs	r2, #8
 8001594:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <cheakAll+0x178>)
 8001596:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <cheakAll+0x17c>)
 8001598:	f005 ff84 	bl	80074a4 <f_open>
	//	f_puts("BEFOR WHILE", &Fil);
	f_close(&Fil);
 800159c:	480a      	ldr	r0, [pc, #40]	@ (80015c8 <cheakAll+0x17c>)
 800159e:	f006 fb2e 	bl	8007bfe <f_close>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020800 	.word	0x40020800
 80015b0:	20000114 	.word	0x20000114
 80015b4:	40020400 	.word	0x40020400
 80015b8:	20000658 	.word	0x20000658
 80015bc:	200001a8 	.word	0x200001a8
 80015c0:	20000608 	.word	0x20000608
 80015c4:	08008d64 	.word	0x08008d64
 80015c8:	200003d8 	.word	0x200003d8

080015cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <Error_Handler+0x8>

080015d8 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 80015e6:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <LORA_Init+0xd8>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 80015ec:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <LORA_Init+0xdc>)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 80015f2:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <LORA_Init+0xe0>)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 80015f8:	2042      	movs	r0, #66	@ 0x42
 80015fa:	f000 f861 	bl	80016c0 <_loraReadReg>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b12      	cmp	r3, #18
 8001602:	d001      	beq.n	8001608 <LORA_Init+0x30>
		return 1;
 8001604:	2301      	movs	r3, #1
 8001606:	e04e      	b.n	80016a6 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8001608:	2100      	movs	r1, #0
 800160a:	2001      	movs	r0, #1
 800160c:	f000 f88e 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 8001610:	2188      	movs	r1, #136	@ 0x88
 8001612:	2001      	movs	r0, #1
 8001614:	f000 f88a 	bl	800172c <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8001618:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <LORA_Init+0xe4>)
 800161a:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	0c1b      	lsrs	r3, r3, #16
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	2006      	movs	r0, #6
 8001626:	f000 f881 	bl	800172c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	2007      	movs	r0, #7
 8001634:	f000 f87a 	bl	800172c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	2008      	movs	r0, #8
 8001640:	f000 f874 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8001644:	21ff      	movs	r1, #255	@ 0xff
 8001646:	2009      	movs	r0, #9
 8001648:	f000 f870 	bl	800172c <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 800164c:	210b      	movs	r1, #11
 800164e:	200b      	movs	r0, #11
 8001650:	f000 f86c 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8001654:	2120      	movs	r1, #32
 8001656:	200c      	movs	r0, #12
 8001658:	f000 f868 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 800165c:	21ff      	movs	r1, #255	@ 0xff
 800165e:	200e      	movs	r0, #14
 8001660:	f000 f864 	bl	800172c <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8001664:	2100      	movs	r1, #0
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f860 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 800166c:	2182      	movs	r1, #130	@ 0x82
 800166e:	201d      	movs	r0, #29
 8001670:	f000 f85c 	bl	800172c <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8001674:	2170      	movs	r1, #112	@ 0x70
 8001676:	201e      	movs	r0, #30
 8001678:	f000 f858 	bl	800172c <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 800167c:	2100      	movs	r1, #0
 800167e:	2020      	movs	r0, #32
 8001680:	f000 f854 	bl	800172c <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8001684:	2106      	movs	r1, #6
 8001686:	2021      	movs	r0, #33	@ 0x21
 8001688:	f000 f850 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 800168c:	213c      	movs	r1, #60	@ 0x3c
 800168e:	2022      	movs	r0, #34	@ 0x22
 8001690:	f000 f84c 	bl	800172c <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8001694:	213c      	movs	r1, #60	@ 0x3c
 8001696:	2023      	movs	r0, #35	@ 0x23
 8001698:	f000 f848 	bl	800172c <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 800169c:	2105      	movs	r1, #5
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 f844 	bl	800172c <_loraWriteReg>

	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000060c 	.word	0x2000060c
 80016b4:	20000610 	.word	0x20000610
 80016b8:	20000614 	.word	0x20000614
 80016bc:	006c4000 	.word	0x006c4000

080016c0 <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_loraReadReg+0x60>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <_loraReadReg+0x64>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <_loraReadReg+0x60>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	400a      	ands	r2, r1
 80016de:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <_loraReadReg+0x68>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	1df9      	adds	r1, r7, #7
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	2201      	movs	r2, #1
 80016ec:	f002 fcc9 	bl	8004082 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <_loraReadReg+0x68>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	1df9      	adds	r1, r7, #7
 80016f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fa:	2201      	movs	r2, #1
 80016fc:	f002 fe05 	bl	800430a <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <_loraReadReg+0x60>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_loraReadReg+0x64>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <_loraReadReg+0x60>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	615a      	str	r2, [r3, #20]
	return reg;
 8001714:	79fb      	ldrb	r3, [r7, #7]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000610 	.word	0x20000610
 8001724:	20000614 	.word	0x20000614
 8001728:	2000060c 	.word	0x2000060c

0800172c <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001742:	b2db      	uxtb	r3, r3
 8001744:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <_loraWriteReg+0x6c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <_loraWriteReg+0x70>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	43db      	mvns	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <_loraWriteReg+0x6c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	400a      	ands	r2, r1
 800175a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_loraWriteReg+0x74>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	1df9      	adds	r1, r7, #7
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	2201      	movs	r2, #1
 8001768:	f002 fc8b 	bl	8004082 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <_loraWriteReg+0x74>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	1db9      	adds	r1, r7, #6
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	2201      	movs	r2, #1
 8001778:	f002 fc83 	bl	8004082 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <_loraWriteReg+0x6c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <_loraWriteReg+0x70>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <_loraWriteReg+0x6c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000610 	.word	0x20000610
 800179c:	20000614 	.word	0x20000614
 80017a0:	2000060c 	.word	0x2000060c

080017a4 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 80017b2:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <MS_Init+0x3c>)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <MS_Init+0x40>)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <MS_Init+0x44>)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 80017c4:	201e      	movs	r0, #30
 80017c6:	f000 fa27 	bl	8001c18 <_msSendCmd>
	HAL_Delay(100);
 80017ca:	2064      	movs	r0, #100	@ 0x64
 80017cc:	f000 fd3a 	bl	8002244 <HAL_Delay>

	_msReadProm(_calibrCoeff);
 80017d0:	4806      	ldr	r0, [pc, #24]	@ (80017ec <MS_Init+0x48>)
 80017d2:	f000 f82d 	bl	8001830 <_msReadProm>

}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000618 	.word	0x20000618
 80017e4:	2000061c 	.word	0x2000061c
 80017e8:	20000620 	.word	0x20000620
 80017ec:	20000624 	.word	0x20000624

080017f0 <MS_ReadData>:

void MS_ReadData(uint32_t endBufer[]) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f80a 	bl	8001816 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f8c5 	bl	8001998 <_calculate>

}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	2000      	movs	r0, #0
 8001822:	f000 fa7d 	bl	8001d20 <_msSendCmdGetData32>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 8001838:	4b4f      	ldr	r3, [pc, #316]	@ (8001978 <_msReadProm+0x148>)
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	2201      	movs	r2, #1
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fa15 	bl	8001c70 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8001846:	4b4c      	ldr	r3, [pc, #304]	@ (8001978 <_msReadProm+0x148>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	2202      	movs	r2, #2
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fa0e 	bl	8001c70 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8001854:	4b48      	ldr	r3, [pc, #288]	@ (8001978 <_msReadProm+0x148>)
 8001856:	78db      	ldrb	r3, [r3, #3]
 8001858:	2203      	movs	r2, #3
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fa07 	bl	8001c70 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 8001862:	4b45      	ldr	r3, [pc, #276]	@ (8001978 <_msReadProm+0x148>)
 8001864:	791b      	ldrb	r3, [r3, #4]
 8001866:	2204      	movs	r2, #4
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fa00 	bl	8001c70 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 8001870:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <_msReadProm+0x148>)
 8001872:	795b      	ldrb	r3, [r3, #5]
 8001874:	2205      	movs	r2, #5
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f9f9 	bl	8001c70 <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 800187e:	4b3e      	ldr	r3, [pc, #248]	@ (8001978 <_msReadProm+0x148>)
 8001880:	799b      	ldrb	r3, [r3, #6]
 8001882:	2206      	movs	r2, #6
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f9f2 	bl	8001c70 <_msSendCmdGetData16>

	_realCalibrCoeff.Tref = _calibrCoeff[5] * 256.0;
 800188c:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <_msReadProm+0x14c>)
 800188e:	895b      	ldrh	r3, [r3, #10]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe47 	bl	8000524 <__aeabi_i2d>
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <_msReadProm+0x150>)
 800189c:	f7fe feac 	bl	80005f8 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f8b8 	bl	8000a1c <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a35      	ldr	r2, [pc, #212]	@ (8001984 <_msReadProm+0x154>)
 80018b0:	6013      	str	r3, [r2, #0]
	_realCalibrCoeff.TempSens = _calibrCoeff[6] / 8388608.0;
 80018b2:	4b32      	ldr	r3, [pc, #200]	@ (800197c <_msReadProm+0x14c>)
 80018b4:	899b      	ldrh	r3, [r3, #12]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe34 	bl	8000524 <__aeabi_i2d>
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <_msReadProm+0x158>)
 80018c2:	f7fe ffc3 	bl	800084c <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f8a5 	bl	8000a1c <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001984 <_msReadProm+0x154>)
 80018d6:	6053      	str	r3, [r2, #4]
	_realCalibrCoeff.OffT1 = _calibrCoeff[2] * (65536.0);
 80018d8:	4b28      	ldr	r3, [pc, #160]	@ (800197c <_msReadProm+0x14c>)
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe21 	bl	8000524 <__aeabi_i2d>
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b29      	ldr	r3, [pc, #164]	@ (800198c <_msReadProm+0x15c>)
 80018e8:	f7fe fe86 	bl	80005f8 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f892 	bl	8000a1c <__aeabi_d2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a22      	ldr	r2, [pc, #136]	@ (8001984 <_msReadProm+0x154>)
 80018fc:	6093      	str	r3, [r2, #8]
	_realCalibrCoeff.Tco = (_calibrCoeff[4]) / (128.0);
 80018fe:	4b1f      	ldr	r3, [pc, #124]	@ (800197c <_msReadProm+0x14c>)
 8001900:	891b      	ldrh	r3, [r3, #8]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe0e 	bl	8000524 <__aeabi_i2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <_msReadProm+0x160>)
 800190e:	f7fe ff9d 	bl	800084c <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f87f 	bl	8000a1c <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	4a18      	ldr	r2, [pc, #96]	@ (8001984 <_msReadProm+0x154>)
 8001922:	60d3      	str	r3, [r2, #12]
	_realCalibrCoeff.SensT1 = _calibrCoeff[1] * (32768.0);
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_msReadProm+0x14c>)
 8001926:	885b      	ldrh	r3, [r3, #2]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fdfb 	bl	8000524 <__aeabi_i2d>
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <_msReadProm+0x164>)
 8001934:	f7fe fe60 	bl	80005f8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f86c 	bl	8000a1c <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <_msReadProm+0x154>)
 8001948:	6113      	str	r3, [r2, #16]
	_realCalibrCoeff.Tcs = (_calibrCoeff[3]) / (256.0);
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <_msReadProm+0x14c>)
 800194c:	88db      	ldrh	r3, [r3, #6]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fde8 	bl	8000524 <__aeabi_i2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <_msReadProm+0x150>)
 800195a:	f7fe ff77 	bl	800084c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f859 	bl	8000a1c <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <_msReadProm+0x154>)
 800196e:	6153      	str	r3, [r2, #20]
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000004 	.word	0x20000004
 800197c:	20000624 	.word	0x20000624
 8001980:	40700000 	.word	0x40700000
 8001984:	20000634 	.word	0x20000634
 8001988:	41600000 	.word	0x41600000
 800198c:	40f00000 	.word	0x40f00000
 8001990:	40600000 	.word	0x40600000
 8001994:	40e00000 	.word	0x40e00000

08001998 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], uint32_t bufer[]) {
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	uint32_t D1 = dataWithPressTemp[0];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	61bb      	str	r3, [r7, #24]
	uint32_t D2 = dataWithPressTemp[1];
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	617b      	str	r3, [r7, #20]

	float dT = D2 - _realCalibrCoeff.Tref;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b8:	4b90      	ldr	r3, [pc, #576]	@ (8001bfc <_calculate+0x264>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a04 	vstr	s15, [r7, #16]
	float TEMP = 2000 + dT * _realCalibrCoeff.TempSens;
 80019c6:	4b8d      	ldr	r3, [pc, #564]	@ (8001bfc <_calculate+0x264>)
 80019c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001c00 <_calculate+0x268>
 80019d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019dc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float OFF = _realCalibrCoeff.OffT1 + _realCalibrCoeff.Tco * dT;
 80019e0:	4b86      	ldr	r3, [pc, #536]	@ (8001bfc <_calculate+0x264>)
 80019e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80019e6:	4b85      	ldr	r3, [pc, #532]	@ (8001bfc <_calculate+0x264>)
 80019e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80019ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	float SENS = _realCalibrCoeff.SensT1 + _realCalibrCoeff.Tcs * dT;
 80019fc:	4b7f      	ldr	r3, [pc, #508]	@ (8001bfc <_calculate+0x264>)
 80019fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a02:	4b7e      	ldr	r3, [pc, #504]	@ (8001bfc <_calculate+0x264>)
 8001a04:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (TEMP < 2000) {
 8001a18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a1c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001c00 <_calculate+0x268>
 8001a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	f140 80a2 	bpl.w	8001b70 <_calculate+0x1d8>
		float T2 = (dT * dT) / 2147483648.0;
 8001a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a30:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a34:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001c04 <_calculate+0x26c>
 8001a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3c:	edc7 7a03 	vstr	s15, [r7, #12]
		float OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2.0;
 8001a40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a44:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001c00 <_calculate+0x268>
 8001a48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a4c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a58:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001c00 <_calculate+0x268>
 8001a5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6c:	edc7 7a08 	vstr	s15, [r7, #32]
		float SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4.0;
 8001a70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a74:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001c00 <_calculate+0x268>
 8001a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a7c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a84:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a88:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001c00 <_calculate+0x268>
 8001a8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a94:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9c:	edc7 7a07 	vstr	s15, [r7, #28]

		if (TEMP < -1500) {
 8001aa0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aa4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001c08 <_calculate+0x270>
 8001aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	d546      	bpl.n	8001b40 <_calculate+0x1a8>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8001ab2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ab6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001c0c <_calculate+0x274>
 8001aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001abe:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001ac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aca:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001c0c <_calculate+0x274>
 8001ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	edc7 7a08 	vstr	s15, [r7, #32]
			SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2.0;
 8001ae2:	69f8      	ldr	r0, [r7, #28]
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	4604      	mov	r4, r0
 8001aea:	460d      	mov	r5, r1
 8001aec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001af0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001c0c <_calculate+0x274>
 8001af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001af8:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001afc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b04:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001c0c <_calculate+0x274>
 8001b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	ee17 0a90 	vmov	r0, s15
 8001b14:	f7fe fd18 	bl	8000548 <__aeabi_f2d>
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b20:	f7fe fe94 	bl	800084c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fbae 	bl	800028c <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe ff70 	bl	8000a1c <__aeabi_d2f>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	61fb      	str	r3, [r7, #28]
		}

		TEMP -= T2;
 8001b40:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		OFF -= OFF2;
 8001b50:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b54:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		SENS -= SENS2;
 8001b60:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	float PRES = (D1 * SENS / (2097152.0) - OFF) / 32768.0;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b82:	ee17 0a90 	vmov	r0, s15
 8001b86:	f7fe fcdf 	bl	8000548 <__aeabi_f2d>
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <_calculate+0x278>)
 8001b90:	f7fe fe5c 	bl	800084c <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4614      	mov	r4, r2
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b9e:	f7fe fcd3 	bl	8000548 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fb6d 	bl	8000288 <__aeabi_dsub>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <_calculate+0x27c>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff28 	bl	8000a1c <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60bb      	str	r3, [r7, #8]

	bufer[0] = PRES;
 8001bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd8:	ee17 2a90 	vmov	r2, s15
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3304      	adds	r3, #4
 8001be4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bec:	ee17 2a90 	vmov	r2, s15
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	@ 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000634 	.word	0x20000634
 8001c00:	44fa0000 	.word	0x44fa0000
 8001c04:	4f000000 	.word	0x4f000000
 8001c08:	c4bb8000 	.word	0xc4bb8000
 8001c0c:	44bb8000 	.word	0x44bb8000
 8001c10:	41400000 	.word	0x41400000
 8001c14:	40e00000 	.word	0x40e00000

08001c18 <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <_msSendCmd+0x4c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <_msSendCmd+0x50>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <_msSendCmd+0x4c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <_msSendCmd+0x54>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	1df9      	adds	r1, r7, #7
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	2201      	movs	r2, #1
 8001c44:	f002 fa1d 	bl	8004082 <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <_msSendCmd+0x4c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <_msSendCmd+0x50>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <_msSendCmd+0x4c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	615a      	str	r2, [r3, #20]
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000061c 	.word	0x2000061c
 8001c68:	20000620 	.word	0x20000620
 8001c6c:	20000618 	.word	0x20000618

08001c70 <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <_msSendCmdGetData16+0xa4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <_msSendCmdGetData16+0xa8>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <_msSendCmdGetData16+0xa4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	400a      	ands	r2, r1
 8001c94:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001c96:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <_msSendCmdGetData16+0xac>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	1df9      	adds	r1, r7, #7
 8001c9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f002 f9ee 	bl	8004082 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f000 facc 	bl	8002244 <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <_msSendCmdGetData16+0xac>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f107 010d 	add.w	r1, r7, #13
 8001cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f002 fb26 	bl	800430a <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <_msSendCmdGetData16+0xac>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f107 010c 	add.w	r1, r7, #12
 8001cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f002 fb1d 	bl	800430a <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_msSendCmdGetData16+0xa4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <_msSendCmdGetData16+0xa8>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <_msSendCmdGetData16+0xa4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 8001ce4:	7b7b      	ldrb	r3, [r7, #13]
 8001ce6:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	89fa      	ldrh	r2, [r7, #14]
 8001d02:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 8001d04:	2014      	movs	r0, #20
 8001d06:	f000 fa9d 	bl	8002244 <HAL_Delay>

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000061c 	.word	0x2000061c
 8001d18:	20000620 	.word	0x20000620
 8001d1c:	20000618 	.word	0x20000618

08001d20 <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 8001d2c:	2044      	movs	r0, #68	@ 0x44
 8001d2e:	f7ff ff73 	bl	8001c18 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001d32:	200c      	movs	r0, #12
 8001d34:	f000 fa86 	bl	8002244 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <_msSendCmdGetData32+0x120>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <_msSendCmdGetData32+0x124>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	1df9      	adds	r1, r7, #7
 8001d54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f002 f992 	bl	8004082 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <_msSendCmdGetData32+0x124>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	f107 010c 	add.w	r1, r7, #12
 8001d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f002 facd 	bl	800430a <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <_msSendCmdGetData32+0x120>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 8001d84:	2054      	movs	r0, #84	@ 0x54
 8001d86:	f7ff ff47 	bl	8001c18 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 8001d8a:	200c      	movs	r0, #12
 8001d8c:	f000 fa5a 	bl	8002244 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <_msSendCmdGetData32+0x120>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8001da6:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <_msSendCmdGetData32+0x124>)
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	1df9      	adds	r1, r7, #7
 8001dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db0:	2201      	movs	r2, #1
 8001db2:	f002 f966 	bl	8004082 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 8001db6:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <_msSendCmdGetData32+0x124>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f107 0108 	add.w	r1, r7, #8
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	f002 faa1 	bl	800430a <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <_msSendCmdGetData32+0x120>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <_msSendCmdGetData32+0x11c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 8001ddc:	7b3b      	ldrb	r3, [r7, #12]
 8001dde:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
 8001de8:	461a      	mov	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 8001df6:	7bbb      	ldrb	r3, [r7, #14]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 8001e00:	7a3b      	ldrb	r3, [r7, #8]
 8001e02:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 8001e0a:	7a7b      	ldrb	r3, [r7, #9]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 8001e1a:	7abb      	ldrb	r3, [r7, #10]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	601a      	str	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000061c 	.word	0x2000061c
 8001e40:	20000620 	.word	0x20000620
 8001e44:	20000618 	.word	0x20000618

08001e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a0f      	ldr	r2, [pc, #60]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a31      	ldr	r2, [pc, #196]	@ (8001f7c <HAL_SD_MspInit+0xe4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d15b      	bne.n	8001f72 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eca:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a21      	ldr	r2, [pc, #132]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <HAL_SD_MspInit+0xe8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f20:	230c      	movs	r3, #12
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4816      	ldr	r0, [pc, #88]	@ (8001f84 <HAL_SD_MspInit+0xec>)
 8001f2c:	f000 fa94 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f42:	230c      	movs	r3, #12
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <HAL_SD_MspInit+0xec>)
 8001f4e:	f000 fa83 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f52:	2304      	movs	r3, #4
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f62:	230c      	movs	r3, #12
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4806      	ldr	r0, [pc, #24]	@ (8001f88 <HAL_SD_MspInit+0xf0>)
 8001f6e:	f000 fa73 	bl	8002458 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00

08001f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	@ (8002010 <HAL_SPI_MspInit+0x84>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12b      	bne.n	8002006 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <HAL_SPI_MspInit+0x88>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <HAL_SPI_MspInit+0x88>)
 8001fb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <HAL_SPI_MspInit+0x88>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_SPI_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a10      	ldr	r2, [pc, #64]	@ (8002014 <HAL_SPI_MspInit+0x88>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_SPI_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fe6:	23e0      	movs	r3, #224	@ 0xe0
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <HAL_SPI_MspInit+0x8c>)
 8002002:	f000 fa29 	bl	8002458 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40013000 	.word	0x40013000
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002072:	f000 f8c7 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	@ (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f006 f9b8 	bl	8008420 <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20018000 	.word	0x20018000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	2000064c 	.word	0x2000064c
 80020e4:	200007d8 	.word	0x200007d8

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002110:	f7ff ffea 	bl	80020e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002114:	480c      	ldr	r0, [pc, #48]	@ (8002148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002116:	490d      	ldr	r1, [pc, #52]	@ (800214c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800211c:	e002      	b.n	8002124 <LoopCopyDataInit>

0800211e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002122:	3304      	adds	r3, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002128:	d3f9      	bcc.n	800211e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800212c:	4c0a      	ldr	r4, [pc, #40]	@ (8002158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002130:	e001      	b.n	8002136 <LoopFillZerobss>

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002134:	3204      	adds	r2, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800213a:	f006 f977 	bl	800842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7fe ff39 	bl	8000fb4 <main>
  bx  lr    
 8002142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002144:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800214c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002150:	08008e9c 	.word	0x08008e9c
  ldr r2, =_sbss
 8002154:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002158:	200007d8 	.word	0x200007d8

0800215c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC_IRQHandler>
	...

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f931 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	200f      	movs	r0, #15
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fe58 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f93b 	bl	800243e <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 f911 	bl	8002406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	@ (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	20000014 	.word	0x20000014
 8002200:	20000010 	.word	0x20000010

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000014 	.word	0x20000014
 8002228:	20000650 	.word	0x20000650

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000650 	.word	0x20000650

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffde 	bl	800222c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000014 	.word	0x20000014

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	@ (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	@ (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	@ 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f7ff ff8e 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff47 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff5c 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff8e 	bl	8002344 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffb0 	bl	80023ac <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e159      	b.n	8002728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8148 	bne.w	8002722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a2 	beq.w	8002722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_GPIO_Init+0x2e8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a56      	ldr	r2, [pc, #344]	@ (8002740 <HAL_GPIO_Init+0x2e8>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b54      	ldr	r3, [pc, #336]	@ (8002740 <HAL_GPIO_Init+0x2e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fa:	4a52      	ldr	r2, [pc, #328]	@ (8002744 <HAL_GPIO_Init+0x2ec>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a49      	ldr	r2, [pc, #292]	@ (8002748 <HAL_GPIO_Init+0x2f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x202>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a48      	ldr	r2, [pc, #288]	@ (800274c <HAL_GPIO_Init+0x2f4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x1fe>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a47      	ldr	r2, [pc, #284]	@ (8002750 <HAL_GPIO_Init+0x2f8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x1fa>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a46      	ldr	r2, [pc, #280]	@ (8002754 <HAL_GPIO_Init+0x2fc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x1f6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a45      	ldr	r2, [pc, #276]	@ (8002758 <HAL_GPIO_Init+0x300>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x1f2>
 8002646:	2304      	movs	r3, #4
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x204>
 800264a:	2307      	movs	r3, #7
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x204>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x204>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x204>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x204>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	@ (8002744 <HAL_GPIO_Init+0x2ec>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_GPIO_Init+0x304>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a24      	ldr	r2, [pc, #144]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b23      	ldr	r3, [pc, #140]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1a      	ldr	r2, [pc, #104]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a0f      	ldr	r2, [pc, #60]	@ (800275c <HAL_GPIO_Init+0x304>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f aea2 	bls.w	8002474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	e001      	b.n	8002782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ac:	e003      	b.n	80027b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	041a      	lsls	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	041a      	lsls	r2, r3, #16
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43d9      	mvns	r1, r3
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	400b      	ands	r3, r1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e267      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d075      	beq.n	8002902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002816:	4b88      	ldr	r3, [pc, #544]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b04      	cmp	r3, #4
 8002820:	d00c      	beq.n	800283c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b85      	ldr	r3, [pc, #532]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800282a:	2b08      	cmp	r3, #8
 800282c:	d112      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b82      	ldr	r3, [pc, #520]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05b      	beq.n	8002900 <HAL_RCC_OscConfig+0x108>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d157      	bne.n	8002900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e242      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x74>
 800285e:	4b76      	ldr	r3, [pc, #472]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a75      	ldr	r2, [pc, #468]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b70      	ldr	r3, [pc, #448]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6d      	ldr	r3, [pc, #436]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6c      	ldr	r2, [pc, #432]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 8002890:	4b69      	ldr	r3, [pc, #420]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a68      	ldr	r2, [pc, #416]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b66      	ldr	r3, [pc, #408]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a65      	ldr	r2, [pc, #404]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fcbc 	bl	800222c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fcb8 	bl	800222c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	@ 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e207      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xc0>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fca8 	bl	800222c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fca4 	bl	800222c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	@ 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1f3      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b51      	ldr	r3, [pc, #324]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0xe8>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800290e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c7      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4937      	ldr	r1, [pc, #220]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <HAL_RCC_OscConfig+0x244>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7ff fc5d 	bl	800222c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fc59 	bl	800222c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a8      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4925      	ldr	r1, [pc, #148]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7ff fc3c 	bl	800222c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff fc38 	bl	800222c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e187      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_RCC_OscConfig+0x248>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7ff fc1c 	bl	800222c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff fc18 	bl	800222c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e167      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x200>
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_OscConfig+0x248>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fc05 	bl	800222c <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	e00e      	b.n	8002a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a26:	f7ff fc01 	bl	800222c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d907      	bls.n	8002a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e150      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ea      	bne.n	8002a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8097 	beq.w	8002b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b81      	ldr	r3, [pc, #516]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b7d      	ldr	r3, [pc, #500]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	4a7c      	ldr	r2, [pc, #496]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b77      	ldr	r3, [pc, #476]	@ (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b74      	ldr	r3, [pc, #464]	@ (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	@ (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7ff fbc1 	bl	800222c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7ff fbbd 	bl	800222c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e10c      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2ea>
 8002ad4:	4b64      	ldr	r3, [pc, #400]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a63      	ldr	r2, [pc, #396]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x324>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x30c>
 8002aea:	4b5f      	ldr	r3, [pc, #380]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a5e      	ldr	r2, [pc, #376]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a5b      	ldr	r2, [pc, #364]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x324>
 8002b04:	4b58      	ldr	r3, [pc, #352]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	4a57      	ldr	r2, [pc, #348]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b10:	4b55      	ldr	r3, [pc, #340]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	4a54      	ldr	r2, [pc, #336]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7ff fb82 	bl	800222c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fb7e 	bl	800222c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0cb      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	4b49      	ldr	r3, [pc, #292]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7ff fb6c 	bl	800222c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7ff fb68 	bl	800222c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0b5      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b39      	ldr	r3, [pc, #228]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	4a38      	ldr	r2, [pc, #224]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a1 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b96:	4b34      	ldr	r3, [pc, #208]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d05c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d141      	bne.n	8002c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff fb3c 	bl	800222c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7ff fb38 	bl	800222c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e087      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b27      	ldr	r3, [pc, #156]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	019b      	lsls	r3, r3, #6
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	491b      	ldr	r1, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7ff fb11 	bl	800222c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7ff fb0d 	bl	800222c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e05c      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x416>
 8002c2c:	e054      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff fafa 	bl	800222c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff faf6 	bl	800222c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e045      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
 8002c5a:	e03d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e038      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4ec>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d121      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0cc      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b68      	ldr	r3, [pc, #416]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d90c      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b65      	ldr	r3, [pc, #404]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a58      	ldr	r2, [pc, #352]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a52      	ldr	r2, [pc, #328]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d044      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d119      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e067      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 0203 	bic.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4934      	ldr	r1, [pc, #208]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd8:	f7ff fa28 	bl	800222c <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7ff fa24 	bl	800222c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e04f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 020c 	and.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1eb      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d20c      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490a      	ldr	r1, [pc, #40]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f988 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08008db4 	.word	0x08008db4
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	20000010 	.word	0x20000010

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b090      	sub	sp, #64	@ 0x40
 8002eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f200 80a1 	bhi.w	8003020 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee6:	e09b      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b53      	ldr	r3, [pc, #332]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eec:	e09b      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eee:	4b53      	ldr	r3, [pc, #332]	@ (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ef2:	e098      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efe:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d028      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f20:	fb03 f201 	mul.w	r2, r3, r1
 8002f24:	2300      	movs	r3, #0
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a43      	ldr	r2, [pc, #268]	@ (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f34:	460a      	mov	r2, r1
 8002f36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f40:	2200      	movs	r2, #0
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	61fa      	str	r2, [r7, #28]
 8002f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f4e:	f7fd fdb5 	bl	8000abc <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4613      	mov	r3, r2
 8002f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f5a:	e053      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	2200      	movs	r2, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	617a      	str	r2, [r7, #20]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f6e:	f04f 0b00 	mov.w	fp, #0
 8002f72:	4652      	mov	r2, sl
 8002f74:	465b      	mov	r3, fp
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f84:	0150      	lsls	r0, r2, #5
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f8e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fa6:	ebb2 0408 	subs.w	r4, r2, r8
 8002faa:	eb63 0509 	sbc.w	r5, r3, r9
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	00eb      	lsls	r3, r5, #3
 8002fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fbc:	00e2      	lsls	r2, r4, #3
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	eb14 030a 	adds.w	r3, r4, sl
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	eb45 030b 	adc.w	r3, r5, fp
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	028b      	lsls	r3, r1, #10
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	028a      	lsls	r2, r1, #10
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	60fa      	str	r2, [r7, #12]
 8002ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff8:	f7fd fd60 	bl	8000abc <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4613      	mov	r3, r2
 8003002:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	3301      	adds	r3, #1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003014:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800301e:	e002      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003020:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x184>)
 8003022:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003028:	4618      	mov	r0, r3
 800302a:	3740      	adds	r7, #64	@ 0x40
 800302c:	46bd      	mov	sp, r7
 800302e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	00f42400 	.word	0x00f42400
 800303c:	017d7840 	.word	0x017d7840

08003040 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7fe ff17 	bl	8001e98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f814 	bl	80030a0 <HAL_SD_InitCard>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00a      	b.n	8003098 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b08e      	sub	sp, #56	@ 0x38
 80030a4:	af04      	add	r7, sp, #16
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030bc:	2376      	movs	r3, #118	@ 0x76
 80030be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681d      	ldr	r5, [r3, #0]
 80030c4:	466c      	mov	r4, sp
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d8:	4628      	mov	r0, r5
 80030da:	f001 fd1b 	bl	8004b14 <SDIO_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80030e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e04f      	b.n	8003190 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80030f0:	4b29      	ldr	r3, [pc, #164]	@ (8003198 <HAL_SD_InitCard+0xf8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fd53 	bl	8004ba6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003100:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <HAL_SD_InitCard+0xf8>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003106:	2002      	movs	r0, #2
 8003108:	f7ff f89c 	bl	8002244 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fe79 	bl	8003e04 <SD_PowerON>
 8003112:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02e      	b.n	8003190 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fd98 	bl	8003c68 <SD_InitCard>
 8003138:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e01b      	b.n	8003190 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003160:	4618      	mov	r0, r3
 8003162:	f001 fdb2 	bl	8004cca <SDMMC_CmdBlockLength>
 8003166:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00f      	beq.n	800318e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <HAL_SD_InitCard+0xfc>)
 8003174:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3728      	adds	r7, #40	@ 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bdb0      	pop	{r4, r5, r7, pc}
 8003198:	422580a0 	.word	0x422580a0
 800319c:	004005ff 	.word	0x004005ff

080031a0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b092      	sub	sp, #72	@ 0x48
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031ae:	f7ff f83d 	bl	800222c <HAL_GetTick>
 80031b2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1c5      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	f040 81b8 	bne.w	8003550 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	441a      	add	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d907      	bls.n	8003204 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e1ac      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2203      	movs	r2, #3
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2200      	movs	r2, #0
 8003212:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800321c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	025b      	lsls	r3, r3, #9
 800322c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800322e:	2390      	movs	r3, #144	@ 0x90
 8003230:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003232:	2302      	movs	r3, #2
 8003234:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f107 0214 	add.w	r2, r7, #20
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f001 fd12 	bl	8004c72 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d90a      	bls.n	800326a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2202      	movs	r2, #2
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fd76 	bl	8004d52 <SDMMC_CmdReadMultiBlock>
 8003266:	6478      	str	r0, [r7, #68]	@ 0x44
 8003268:	e009      	b.n	800327e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fd49 	bl	8004d0e <SDMMC_CmdReadSingleBlock>
 800327c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800327e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7e      	ldr	r2, [pc, #504]	@ (8003484 <HAL_SD_ReadBlocks+0x2e4>)
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003292:	431a      	orrs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e159      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032ae:	e061      	b.n	8003374 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d03c      	beq.n	8003338 <HAL_SD_ReadBlocks+0x198>
 80032be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d039      	beq.n	8003338 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032c8:	e033      	b.n	8003332 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fc4b 	bl	8004b6a <SDIO_ReadFIFO>
 80032d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	3301      	adds	r3, #1
 80032e2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80032e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e6:	3b01      	subs	r3, #1
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80032ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80032f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f6:	3301      	adds	r3, #1
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80032fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fc:	3b01      	subs	r3, #1
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	b2da      	uxtb	r2, r3
 8003306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003308:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	3301      	adds	r3, #1
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003312:	3b01      	subs	r3, #1
 8003314:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003318:	0e1b      	lsrs	r3, r3, #24
 800331a:	b2da      	uxtb	r2, r3
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003322:	3301      	adds	r3, #1
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003328:	3b01      	subs	r3, #1
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332e:	3301      	adds	r3, #1
 8003330:	643b      	str	r3, [r7, #64]	@ 0x40
 8003332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003334:	2b07      	cmp	r3, #7
 8003336:	d9c8      	bls.n	80032ca <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003338:	f7fe ff78 	bl	800222c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <HAL_SD_ReadBlocks+0x1ae>
 8003348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	d112      	bne.n	8003374 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4c      	ldr	r2, [pc, #304]	@ (8003484 <HAL_SD_ReadBlocks+0x2e4>)
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0f4      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337a:	f240 332a 	movw	r3, #810	@ 0x32a
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d095      	beq.n	80032b0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d022      	beq.n	80033d8 <HAL_SD_ReadBlocks+0x238>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d91f      	bls.n	80033d8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	2b03      	cmp	r3, #3
 800339e:	d01b      	beq.n	80033d8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fd3b 	bl	8004e20 <SDMMC_CmdStopTransfer>
 80033aa:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80033ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a33      	ldr	r2, [pc, #204]	@ (8003484 <HAL_SD_ReadBlocks+0x2e4>)
 80033b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0c2      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_SD_ReadBlocks+0x254>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_SD_ReadBlocks+0x2e4>)
 80033fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	f043 0208 	orr.w	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0a1      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <HAL_SD_ReadBlocks+0x2e4>)
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	f043 0202 	orr.w	r2, r3, #2
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e087      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d064      	beq.n	8003526 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a08      	ldr	r2, [pc, #32]	@ (8003484 <HAL_SD_ReadBlocks+0x2e4>)
 8003462:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06d      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
 8003482:	bf00      	nop
 8003484:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fb6c 	bl	8004b6a <SDIO_ReadFIFO>
 8003492:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	b2da      	uxtb	r2, r3
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	3301      	adds	r3, #1
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80034a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a4:	3b01      	subs	r3, #1
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	3301      	adds	r3, #1
 80034b6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80034b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ba:	3b01      	subs	r3, #1
 80034bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ca:	3301      	adds	r3, #1
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80034ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d0:	3b01      	subs	r3, #1
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d6:	0e1b      	lsrs	r3, r3, #24
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e0:	3301      	adds	r3, #1
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80034e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e6:	3b01      	subs	r3, #1
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034ea:	f7fe fe9f 	bl	800222c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d902      	bls.n	8003500 <HAL_SD_ReadBlocks+0x360>
 80034fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d112      	bne.n	8003526 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <HAL_SD_ReadBlocks+0x3c8>)
 8003506:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01b      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_SD_ReadBlocks+0x39a>
 8003534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1a6      	bne.n	8003488 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e006      	b.n	800355e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3748      	adds	r7, #72	@ 0x48
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	004005ff 	.word	0x004005ff

0800356c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b092      	sub	sp, #72	@ 0x48
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800357a:	f7fe fe57 	bl	800222c <HAL_GetTick>
 800357e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e16d      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	f040 8160 	bne.w	800386c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	441a      	add	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d907      	bls.n	80035d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e154      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2203      	movs	r2, #3
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2200      	movs	r2, #0
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d002      	beq.n	80035ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80035e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ea:	025b      	lsls	r3, r3, #9
 80035ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80035fa:	2390      	movs	r3, #144	@ 0x90
 80035fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003602:	2300      	movs	r3, #0
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003606:	2301      	movs	r3, #1
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f107 0218 	add.w	r2, r7, #24
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fb2c 	bl	8004c72 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d90a      	bls.n	8003636 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800362c:	4618      	mov	r0, r3
 800362e:	f001 fbd4 	bl	8004dda <SDMMC_CmdWriteMultiBlock>
 8003632:	6478      	str	r0, [r7, #68]	@ 0x44
 8003634:	e009      	b.n	800364a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2210      	movs	r2, #16
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fba7 	bl	8004d96 <SDMMC_CmdWriteSingleBlock>
 8003648:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800364a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8b      	ldr	r2, [pc, #556]	@ (8003884 <HAL_SD_WriteBlocks+0x318>)
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800365c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e101      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800367a:	e065      	b.n	8003748 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d040      	beq.n	800370c <HAL_SD_WriteBlocks+0x1a0>
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03d      	beq.n	800370c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003690:	2300      	movs	r3, #0
 8003692:	643b      	str	r3, [r7, #64]	@ 0x40
 8003694:	e037      	b.n	8003706 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	3301      	adds	r3, #1
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80036a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a4:	3b01      	subs	r3, #1
 80036a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80036a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	3301      	adds	r3, #1
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	3b01      	subs	r3, #1
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ce:	3301      	adds	r3, #1
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80036d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d4:	3b01      	subs	r3, #1
 80036d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	061a      	lsls	r2, r3, #24
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	3301      	adds	r3, #1
 80036e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80036ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ec:	3b01      	subs	r3, #1
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f107 0214 	add.w	r2, r7, #20
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fa42 	bl	8004b84 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003702:	3301      	adds	r3, #1
 8003704:	643b      	str	r3, [r7, #64]	@ 0x40
 8003706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003708:	2b07      	cmp	r3, #7
 800370a:	d9c4      	bls.n	8003696 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800370c:	f7fe fd8e 	bl	800222c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003718:	429a      	cmp	r2, r3
 800371a:	d902      	bls.n	8003722 <HAL_SD_WriteBlocks+0x1b6>
 800371c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800371e:	2b00      	cmp	r3, #0
 8003720:	d112      	bne.n	8003748 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_SD_WriteBlocks+0x318>)
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e098      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374e:	f240 331a 	movw	r3, #794	@ 0x31a
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d091      	beq.n	800367c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d022      	beq.n	80037ac <HAL_SD_WriteBlocks+0x240>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d91f      	bls.n	80037ac <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	2b03      	cmp	r3, #3
 8003772:	d01b      	beq.n	80037ac <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f001 fb51 	bl	8004e20 <SDMMC_CmdStopTransfer>
 800377e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3e      	ldr	r2, [pc, #248]	@ (8003884 <HAL_SD_WriteBlocks+0x318>)
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e066      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_SD_WriteBlocks+0x25c>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d012      	beq.n	80037ee <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003884 <HAL_SD_WriteBlocks+0x318>)
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	f043 0208 	orr.w	r2, r3, #8
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e045      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <HAL_SD_WriteBlocks+0x318>)
 8003802:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	f043 0202 	orr.w	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e02b      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d012      	beq.n	8003856 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <HAL_SD_WriteBlocks+0x318>)
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	f043 0210 	orr.w	r2, r3, #16
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e011      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e006      	b.n	800387a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3748      	adds	r7, #72	@ 0x48
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	004005ff 	.word	0x004005ff

08003888 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003896:	0f9b      	lsrs	r3, r3, #30
 8003898:	b2da      	uxtb	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a2:	0e9b      	lsrs	r3, r3, #26
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b4:	0e1b      	lsrs	r3, r3, #24
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003906:	0bdb      	lsrs	r3, r3, #15
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003918:	0b9b      	lsrs	r3, r3, #14
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	b2da      	uxtb	r2, r3
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800392a:	0b5b      	lsrs	r3, r3, #13
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	b2da      	uxtb	r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800393c:	0b1b      	lsrs	r3, r3, #12
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	b2da      	uxtb	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003954:	2b00      	cmp	r3, #0
 8003956:	d163      	bne.n	8003a20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003962:	4013      	ands	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003968:	0f92      	lsrs	r2, r2, #30
 800396a:	431a      	orrs	r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003974:	0edb      	lsrs	r3, r3, #27
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	b2da      	uxtb	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003986:	0e1b      	lsrs	r3, r3, #24
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003998:	0d5b      	lsrs	r3, r3, #21
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039aa:	0c9b      	lsrs	r3, r3, #18
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039bc:	0bdb      	lsrs	r3, r3, #15
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	7e1b      	ldrb	r3, [r3, #24]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	3302      	adds	r3, #2
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039ea:	fb03 f202 	mul.w	r2, r3, r2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	7a1b      	ldrb	r3, [r3, #8]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	2201      	movs	r2, #1
 80039fe:	409a      	lsls	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a0c:	0a52      	lsrs	r2, r2, #9
 8003a0e:	fb03 f202 	mul.w	r2, r3, r2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a1e:	e031      	b.n	8003a84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d11d      	bne.n	8003a64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a36:	0c1b      	lsrs	r3, r3, #16
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	3301      	adds	r3, #1
 8003a44:	029a      	lsls	r2, r3, #10
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a58:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a62:	e00f      	b.n	8003a84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a58      	ldr	r2, [pc, #352]	@ (8003bcc <HAL_SD_GetCardCSD+0x344>)
 8003a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e09d      	b.n	8003bc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a88:	0b9b      	lsrs	r3, r3, #14
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9a:	09db      	lsrs	r3, r3, #7
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	0fdb      	lsrs	r3, r3, #31
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	0f5b      	lsrs	r3, r3, #29
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	0d9b      	lsrs	r3, r3, #22
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	0d5b      	lsrs	r3, r3, #21
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	0bdb      	lsrs	r3, r3, #15
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	0b9b      	lsrs	r3, r3, #14
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	0b5b      	lsrs	r3, r3, #13
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	0b1b      	lsrs	r3, r3, #12
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	0a9b      	lsrs	r3, r3, #10
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	004005ff 	.word	0x004005ff

08003bd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f970 	bl	8003f20 <SD_SendStatus>
 8003c40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	0a5b      	lsrs	r3, r3, #9
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c5e:	693b      	ldr	r3, [r7, #16]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c68:	b5b0      	push	{r4, r5, r7, lr}
 8003c6a:	b094      	sub	sp, #80	@ 0x50
 8003c6c:	af04      	add	r7, sp, #16
 8003c6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003c70:	2301      	movs	r3, #1
 8003c72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ffa2 	bl	8004bc2 <SDIO_GetPowerState>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c88:	e0b8      	b.n	8003dfc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d02f      	beq.n	8003cf2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f989 	bl	8004fae <SDMMC_CmdSendCID>
 8003c9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <SD_InitCard+0x40>
    {
      return errorstate;
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca6:	e0a9      	b.n	8003dfc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 ffcc 	bl	8004c4c <SDIO_GetResponse>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 ffc3 	bl	8004c4c <SDIO_GetResponse>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ffba 	bl	8004c4c <SDIO_GetResponse>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	210c      	movs	r1, #12
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 ffb1 	bl	8004c4c <SDIO_GetResponse>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d00d      	beq.n	8003d16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f107 020e 	add.w	r2, r7, #14
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 f98f 	bl	8005028 <SDMMC_CmdSetRelAdd>
 8003d0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <SD_InitCard+0xae>
    {
      return errorstate;
 8003d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d14:	e072      	b.n	8003dfc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d036      	beq.n	8003d8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f001 f959 	bl	8004fea <SDMMC_CmdSendCSD>
 8003d38:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d42:	e05b      	b.n	8003dfc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ff7e 	bl	8004c4c <SDIO_GetResponse>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2104      	movs	r1, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ff75 	bl	8004c4c <SDIO_GetResponse>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2108      	movs	r1, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ff6c 	bl	8004c4c <SDIO_GetResponse>
 8003d74:	4602      	mov	r2, r0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	210c      	movs	r1, #12
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 ff63 	bl	8004c4c <SDIO_GetResponse>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2104      	movs	r1, #4
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 ff5a 	bl	8004c4c <SDIO_GetResponse>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	0d1a      	lsrs	r2, r3, #20
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003da0:	f107 0310 	add.w	r3, r7, #16
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fd6e 	bl	8003888 <HAL_SD_GetCardCSD>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003db2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003db6:	e021      	b.n	8003dfc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	461c      	mov	r4, r3
 8003dc6:	4615      	mov	r5, r2
 8003dc8:	4622      	mov	r2, r4
 8003dca:	462b      	mov	r3, r5
 8003dcc:	4608      	mov	r0, r1
 8003dce:	f001 f849 	bl	8004e64 <SDMMC_CmdSelDesel>
 8003dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <SD_InitCard+0x176>
  {
    return errorstate;
 8003dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ddc:	e00e      	b.n	8003dfc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681d      	ldr	r5, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	466c      	mov	r4, sp
 8003de6:	f103 0210 	add.w	r2, r3, #16
 8003dea:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003df0:	3304      	adds	r3, #4
 8003df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fe8d 	bl	8004b14 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3740      	adds	r7, #64	@ 0x40
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bdb0      	pop	{r4, r5, r7, pc}

08003e04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 f844 	bl	8004eaa <SDMMC_CmdGoIdleState>
 8003e22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	e072      	b.n	8003f14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 f857 	bl	8004ee6 <SDMMC_CmdOperCond>
 8003e38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f82d 	bl	8004eaa <SDMMC_CmdGoIdleState>
 8003e50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	e05b      	b.n	8003f14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d137      	bne.n	8003eda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f001 f857 	bl	8004f24 <SDMMC_CmdAppCommand>
 8003e76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02d      	beq.n	8003eda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e82:	e047      	b.n	8003f14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 f84a 	bl	8004f24 <SDMMC_CmdAppCommand>
 8003e90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <SD_PowerON+0x98>
    {
      return errorstate;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	e03b      	b.n	8003f14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	491e      	ldr	r1, [pc, #120]	@ (8003f1c <SD_PowerON+0x118>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f860 	bl	8004f68 <SDMMC_CmdAppOperCommand>
 8003ea8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003eb0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003eb4:	e02e      	b.n	8003f14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fec5 	bl	8004c4c <SDIO_GetResponse>
 8003ec2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	0fdb      	lsrs	r3, r3, #31
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <SD_PowerON+0xcc>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <SD_PowerON+0xce>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]

    count++;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d802      	bhi.n	8003eea <SD_PowerON+0xe6>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0cc      	beq.n	8003e84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d902      	bls.n	8003efa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef8:	e00c      	b.n	8003f14 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f0a:	e002      	b.n	8003f12 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	c1100000 	.word	0xc1100000

08003f20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003f30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f34:	e018      	b.n	8003f68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f001 f891 	bl	800506a <SDMMC_CmdSendStatus>
 8003f48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e009      	b.n	8003f68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fe76 	bl	8004c4c <SDIO_GetResponse>
 8003f60:	4602      	mov	r2, r0
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07b      	b.n	800407a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f92:	d009      	beq.n	8003fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	61da      	str	r2, [r3, #28]
 8003f9a:	e005      	b.n	8003fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd ffe2 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	ea42 0103 	orr.w	r1, r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0104 	and.w	r1, r3, #4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	f003 0210 	and.w	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004092:	f7fe f8cb 	bl	800222c <HAL_GetTick>
 8004096:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d001      	beq.n	80040ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e12a      	b.n	8004302 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Transmit+0x36>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e122      	b.n	8004302 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_SPI_Transmit+0x48>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e11b      	b.n	8004302 <HAL_SPI_Transmit+0x280>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2203      	movs	r2, #3
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004118:	d10f      	bne.n	800413a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d007      	beq.n	8004158 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004160:	d152      	bne.n	8004208 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_SPI_Transmit+0xee>
 800416a:	8b7b      	ldrh	r3, [r7, #26]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d145      	bne.n	80041fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004194:	e032      	b.n	80041fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d112      	bne.n	80041ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	881a      	ldrh	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b4:	1c9a      	adds	r2, r3, #2
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041c8:	e018      	b.n	80041fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ca:	f7fe f82f 	bl	800222c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d803      	bhi.n	80041e2 <HAL_SPI_Transmit+0x160>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d102      	bne.n	80041e8 <HAL_SPI_Transmit+0x166>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e082      	b.n	8004302 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1c7      	bne.n	8004196 <HAL_SPI_Transmit+0x114>
 8004206:	e053      	b.n	80042b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_SPI_Transmit+0x194>
 8004210:	8b7b      	ldrh	r3, [r7, #26]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d147      	bne.n	80042a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	7812      	ldrb	r2, [r2, #0]
 8004222:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800423c:	e033      	b.n	80042a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d113      	bne.n	8004274 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004272:	e018      	b.n	80042a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004274:	f7fd ffda 	bl	800222c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d803      	bhi.n	800428c <HAL_SPI_Transmit+0x20a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d102      	bne.n	8004292 <HAL_SPI_Transmit+0x210>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e02d      	b.n	8004302 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1c6      	bne.n	800423e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	6839      	ldr	r1, [r7, #0]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fbd9 	bl	8004a6c <SPI_EndRxTxTransaction>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004300:	2300      	movs	r3, #0
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b088      	sub	sp, #32
 800430e:	af02      	add	r7, sp, #8
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	e104      	b.n	8004534 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004332:	d112      	bne.n	800435a <HAL_SPI_Receive+0x50>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10e      	bne.n	800435a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2204      	movs	r2, #4
 8004340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f8f3 	bl	800453c <HAL_SPI_TransmitReceive>
 8004356:	4603      	mov	r3, r0
 8004358:	e0ec      	b.n	8004534 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435a:	f7fd ff67 	bl	800222c <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Receive+0x62>
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0e1      	b.n	8004534 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_SPI_Receive+0x74>
 800437a:	2302      	movs	r3, #2
 800437c:	e0da      	b.n	8004534 <HAL_SPI_Receive+0x22a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2204      	movs	r2, #4
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043cc:	d10f      	bne.n	80043ee <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b40      	cmp	r3, #64	@ 0x40
 80043fa:	d007      	beq.n	800440c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d170      	bne.n	80044f6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004414:	e035      	b.n	8004482 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d115      	bne.n	8004450 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f103 020c 	add.w	r2, r3, #12
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800444e:	e018      	b.n	8004482 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004450:	f7fd feec 	bl	800222c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d803      	bhi.n	8004468 <HAL_SPI_Receive+0x15e>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d102      	bne.n	800446e <HAL_SPI_Receive+0x164>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e058      	b.n	8004534 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1c4      	bne.n	8004416 <HAL_SPI_Receive+0x10c>
 800448c:	e038      	b.n	8004500 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d113      	bne.n	80044c4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a6:	b292      	uxth	r2, r2
 80044a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ae:	1c9a      	adds	r2, r3, #2
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044c2:	e018      	b.n	80044f6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c4:	f7fd feb2 	bl	800222c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d803      	bhi.n	80044dc <HAL_SPI_Receive+0x1d2>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Receive+0x1d8>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e01e      	b.n	8004534 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1c6      	bne.n	800448e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fa4b 	bl	80049a0 <SPI_EndRxTransaction>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004532:	2300      	movs	r3, #0
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800454a:	2301      	movs	r3, #1
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800454e:	f7fd fe6d 	bl	800222c <HAL_GetTick>
 8004552:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800455a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004566:	7ffb      	ldrb	r3, [r7, #31]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d00c      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x4a>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004572:	d106      	bne.n	8004582 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <HAL_SPI_TransmitReceive+0x46>
 800457c:	7ffb      	ldrb	r3, [r7, #31]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d001      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	e17f      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x5c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x5c>
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e174      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x6e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e16d      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2205      	movs	r2, #5
 80045c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	887a      	ldrh	r2, [r7, #2]
 80045ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b40      	cmp	r3, #64	@ 0x40
 8004608:	d007      	beq.n	800461a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004622:	d17e      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_SPI_TransmitReceive+0xf6>
 800462c:	8afb      	ldrh	r3, [r7, #22]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d16c      	bne.n	800470c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004656:	e059      	b.n	800470c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d11b      	bne.n	800469e <HAL_SPI_TransmitReceive+0x162>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <HAL_SPI_TransmitReceive+0x162>
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	2b01      	cmp	r3, #1
 8004674:	d113      	bne.n	800469e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	881a      	ldrh	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d119      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x1a4>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d014      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c0:	b292      	uxth	r2, r2
 80046c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	1c9a      	adds	r2, r3, #2
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046dc:	2301      	movs	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046e0:	f7fd fda4 	bl	800222c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d80d      	bhi.n	800470c <HAL_SPI_TransmitReceive+0x1d0>
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d009      	beq.n	800470c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0bc      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1a0      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x11c>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d19b      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x11c>
 8004720:	e082      	b.n	8004828 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_SPI_TransmitReceive+0x1f4>
 800472a:	8afb      	ldrh	r3, [r7, #22]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d171      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004756:	e05d      	b.n	8004814 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d11c      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x264>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x264>
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d114      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d119      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x2a6>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d014      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047de:	2301      	movs	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047e2:	f7fd fd23 	bl	800222c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d803      	bhi.n	80047fa <HAL_SPI_TransmitReceive+0x2be>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d102      	bne.n	8004800 <HAL_SPI_TransmitReceive+0x2c4>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e038      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d19c      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x21c>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d197      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f91d 	bl	8004a6c <SPI_EndRxTxTransaction>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e01d      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004884:	2300      	movs	r3, #0
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	3728      	adds	r7, #40	@ 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048a0:	f7fd fcc4 	bl	800222c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	4413      	add	r3, r2
 80048ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048b0:	f7fd fcbc 	bl	800222c <HAL_GetTick>
 80048b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048b6:	4b39      	ldr	r3, [pc, #228]	@ (800499c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	015b      	lsls	r3, r3, #5
 80048bc:	0d1b      	lsrs	r3, r3, #20
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c6:	e054      	b.n	8004972 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d050      	beq.n	8004972 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048d0:	f7fd fcac 	bl	800222c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d902      	bls.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d13d      	bne.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048fe:	d111      	bne.n	8004924 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004908:	d004      	beq.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d107      	bne.n	8004924 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004922:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800492c:	d10f      	bne.n	800494e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800494c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e017      	b.n	8004992 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3b01      	subs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d19b      	bne.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	2000000c 	.word	0x2000000c

080049a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b4:	d111      	bne.n	80049da <SPI_EndRxTransaction+0x3a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049be:	d004      	beq.n	80049ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c8:	d107      	bne.n	80049da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049e2:	d12a      	bne.n	8004a3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ec:	d012      	beq.n	8004a14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff49 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02d      	beq.n	8004a60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e026      	b.n	8004a62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff ff36 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01a      	beq.n	8004a60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e013      	b.n	8004a62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2101      	movs	r1, #1
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff ff23 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e000      	b.n	8004a62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2102      	movs	r1, #2
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ff04 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e032      	b.n	8004b04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <SPI_EndRxTxTransaction+0xa0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <SPI_EndRxTxTransaction+0xa4>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	0d5b      	lsrs	r3, r3, #21
 8004aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004abc:	d112      	bne.n	8004ae4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2180      	movs	r1, #128	@ 0x80
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fee1 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d016      	beq.n	8004b02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e00f      	b.n	8004b04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d0f2      	beq.n	8004ae4 <SPI_EndRxTxTransaction+0x78>
 8004afe:	e000      	b.n	8004b02 <SPI_EndRxTxTransaction+0x96>
        break;
 8004b00:	bf00      	nop
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	2000000c 	.word	0x2000000c
 8004b10:	165e9f81 	.word	0x165e9f81

08004b14 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004b14:	b084      	sub	sp, #16
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	f107 001c 	add.w	r0, r7, #28
 8004b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004b2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004b2e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004b32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004b36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004b3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004b3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004b4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	b004      	add	sp, #16
 8004b68:	4770      	bx	lr

08004b6a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0303 	and.w	r3, r3, #3
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bfc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004c02:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004c08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c18:	f023 030f 	bic.w	r3, r3, #15
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4413      	add	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
}  
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c98:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c9e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004ca4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0

}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004cd8:	2310      	movs	r3, #16
 8004cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cdc:	2340      	movs	r3, #64	@ 0x40
 8004cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ce8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff74 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	2110      	movs	r1, #16
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f9d7 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d04:	69fb      	ldr	r3, [r7, #28]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b088      	sub	sp, #32
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004d1c:	2311      	movs	r3, #17
 8004d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d20:	2340      	movs	r3, #64	@ 0x40
 8004d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff52 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	2111      	movs	r1, #17
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9b5 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d48:	69fb      	ldr	r3, [r7, #28]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004d60:	2312      	movs	r3, #18
 8004d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d64:	2340      	movs	r3, #64	@ 0x40
 8004d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff30 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	2112      	movs	r1, #18
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f993 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b088      	sub	sp, #32
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004da4:	2318      	movs	r3, #24
 8004da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004da8:	2340      	movs	r3, #64	@ 0x40
 8004daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004db4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff0e 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc6:	2118      	movs	r1, #24
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f971 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b088      	sub	sp, #32
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004de8:	2319      	movs	r3, #25
 8004dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dec:	2340      	movs	r3, #64	@ 0x40
 8004dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff feec 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	2119      	movs	r1, #25
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f94f 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e14:	69fb      	ldr	r3, [r7, #28]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e30:	2340      	movs	r3, #64	@ 0x40
 8004e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff feca 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004e4a:	4a05      	ldr	r2, [pc, #20]	@ (8004e60 <SDMMC_CmdStopTransfer+0x40>)
 8004e4c:	210c      	movs	r1, #12
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f92e 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e56:	69fb      	ldr	r3, [r7, #28]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	05f5e100 	.word	0x05f5e100

08004e64 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004e74:	2307      	movs	r3, #7
 8004e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e78:	2340      	movs	r3, #64	@ 0x40
 8004e7a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e84:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e86:	f107 0310 	add.w	r3, r7, #16
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fea6 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e96:	2107      	movs	r1, #7
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f909 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004e9e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3728      	adds	r7, #40	@ 0x28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b088      	sub	sp, #32
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ec8:	f107 0308 	add.w	r3, r7, #8
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fe85 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb23 	bl	8005520 <SDMMC_GetCmdError>
 8004eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b088      	sub	sp, #32
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004eee:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ef8:	2340      	movs	r3, #64	@ 0x40
 8004efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fe66 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fab6 	bl	8005484 <SDMMC_GetCmdResp7>
 8004f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004f32:	2337      	movs	r3, #55	@ 0x37
 8004f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f36:	2340      	movs	r3, #64	@ 0x40
 8004f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fe47 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	2137      	movs	r1, #55	@ 0x37
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8aa 	bl	80050b0 <SDMMC_GetCmdResp1>
 8004f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f7e:	2329      	movs	r3, #41	@ 0x29
 8004f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f82:	2340      	movs	r3, #64	@ 0x40
 8004f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f90:	f107 0308 	add.w	r3, r7, #8
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fe21 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f9bd 	bl	800531c <SDMMC_GetCmdResp3>
 8004fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004fbe:	23c0      	movs	r3, #192	@ 0xc0
 8004fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fe03 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f957 	bl	800528c <SDMMC_GetCmdResp2>
 8004fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b088      	sub	sp, #32
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004ff8:	2309      	movs	r3, #9
 8004ffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ffc:	23c0      	movs	r3, #192	@ 0xc0
 8004ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005008:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fde4 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f938 	bl	800528c <SDMMC_GetCmdResp2>
 800501c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501e:	69fb      	ldr	r3, [r7, #28]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005036:	2303      	movs	r3, #3
 8005038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800503a:	2340      	movs	r3, #64	@ 0x40
 800503c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fdc5 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	2103      	movs	r1, #3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f99d 	bl	8005398 <SDMMC_GetCmdResp6>
 800505e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005060:	69fb      	ldr	r3, [r7, #28]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005078:	230d      	movs	r3, #13
 800507a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800507c:	2340      	movs	r3, #64	@ 0x40
 800507e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800508a:	f107 0308 	add.w	r3, r7, #8
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fda4 	bl	8004bde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509a:	210d      	movs	r1, #13
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f807 	bl	80050b0 <SDMMC_GetCmdResp1>
 80050a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050a4:	69fb      	ldr	r3, [r7, #28]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	460b      	mov	r3, r1
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050be:	4b70      	ldr	r3, [pc, #448]	@ (8005280 <SDMMC_GetCmdResp1+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a70      	ldr	r2, [pc, #448]	@ (8005284 <SDMMC_GetCmdResp1+0x1d4>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	0a5a      	lsrs	r2, r3, #9
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
 80050d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	61fa      	str	r2, [r7, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80050e0:	e0c9      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0ef      	beq.n	80050d2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ea      	bne.n	80050d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2204      	movs	r2, #4
 800510c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800510e:	2304      	movs	r3, #4
 8005110:	e0b1      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005124:	2301      	movs	r3, #1
 8005126:	e0a6      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	22c5      	movs	r2, #197	@ 0xc5
 800512c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fd7f 	bl	8004c32 <SDIO_GetCommandResponse>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	4293      	cmp	r3, r2
 800513c:	d001      	beq.n	8005142 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800513e:	2301      	movs	r3, #1
 8005140:	e099      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005142:	2100      	movs	r1, #0
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fd81 	bl	8004c4c <SDIO_GetResponse>
 800514a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4b4e      	ldr	r3, [pc, #312]	@ (8005288 <SDMMC_GetCmdResp1+0x1d8>)
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005156:	2300      	movs	r3, #0
 8005158:	e08d      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	da02      	bge.n	8005166 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005164:	e087      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005170:	2340      	movs	r3, #64	@ 0x40
 8005172:	e080      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800517e:	2380      	movs	r3, #128	@ 0x80
 8005180:	e079      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800518c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005190:	e071      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800519c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051a0:	e069      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051b0:	e061      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051c0:	e059      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051d0:	e051      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051e0:	e049      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051f0:	e041      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80051fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005200:	e039      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800520c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005210:	e031      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800521c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005220:	e029      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800522c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005230:	e021      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800523c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005240:	e019      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800524c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005250:	e011      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800525c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005260:	e009      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800526c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005270:	e001      	b.n	8005276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	2000000c 	.word	0x2000000c
 8005284:	10624dd3 	.word	0x10624dd3
 8005288:	fdffe008 	.word	0xfdffe008

0800528c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005294:	4b1f      	ldr	r3, [pc, #124]	@ (8005314 <SDMMC_GetCmdResp2+0x88>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1f      	ldr	r2, [pc, #124]	@ (8005318 <SDMMC_GetCmdResp2+0x8c>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0a5b      	lsrs	r3, r3, #9
 80052a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1e5a      	subs	r2, r3, #1
 80052ae:	60fa      	str	r2, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80052b8:	e026      	b.n	8005308 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ef      	beq.n	80052aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ea      	bne.n	80052aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2204      	movs	r2, #4
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052e6:	2304      	movs	r3, #4
 80052e8:	e00e      	b.n	8005308 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e003      	b.n	8005308 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	22c5      	movs	r2, #197	@ 0xc5
 8005304:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	2000000c 	.word	0x2000000c
 8005318:	10624dd3 	.word	0x10624dd3

0800531c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005324:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <SDMMC_GetCmdResp3+0x74>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1a      	ldr	r2, [pc, #104]	@ (8005394 <SDMMC_GetCmdResp3+0x78>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	0a5b      	lsrs	r3, r3, #9
 8005330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	60fa      	str	r2, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005344:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005348:	e01b      	b.n	8005382 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ef      	beq.n	800533a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ea      	bne.n	800533a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2204      	movs	r2, #4
 8005374:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005376:	2304      	movs	r3, #4
 8005378:	e003      	b.n	8005382 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	22c5      	movs	r2, #197	@ 0xc5
 800537e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	2000000c 	.word	0x2000000c
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	460b      	mov	r3, r1
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053a6:	4b35      	ldr	r3, [pc, #212]	@ (800547c <SDMMC_GetCmdResp6+0xe4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a35      	ldr	r2, [pc, #212]	@ (8005480 <SDMMC_GetCmdResp6+0xe8>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	0a5b      	lsrs	r3, r3, #9
 80053b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1e5a      	subs	r2, r3, #1
 80053c0:	61fa      	str	r2, [r7, #28]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80053ca:	e052      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ea      	bne.n	80053bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2204      	movs	r2, #4
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053f8:	2304      	movs	r3, #4
 80053fa:	e03a      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800540e:	2301      	movs	r3, #1
 8005410:	e02f      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff fc0d 	bl	8004c32 <SDIO_GetCommandResponse>
 8005418:	4603      	mov	r3, r0
 800541a:	461a      	mov	r2, r3
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	4293      	cmp	r3, r2
 8005420:	d001      	beq.n	8005426 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005422:	2301      	movs	r3, #1
 8005424:	e025      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	22c5      	movs	r2, #197	@ 0xc5
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800542c:	2100      	movs	r1, #0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fc0c 	bl	8004c4c <SDIO_GetResponse>
 8005434:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	e011      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800545c:	e009      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800546c:	e001      	b.n	8005472 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800546e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c
 8005480:	10624dd3 	.word	0x10624dd3

08005484 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800548c:	4b22      	ldr	r3, [pc, #136]	@ (8005518 <SDMMC_GetCmdResp7+0x94>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a22      	ldr	r2, [pc, #136]	@ (800551c <SDMMC_GetCmdResp7+0x98>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0a5b      	lsrs	r3, r3, #9
 8005498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	60fa      	str	r2, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054b0:	e02c      	b.n	800550c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0ef      	beq.n	80054a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1ea      	bne.n	80054a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054de:	2304      	movs	r3, #4
 80054e0:	e014      	b.n	800550c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e009      	b.n	800550c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2240      	movs	r2, #64	@ 0x40
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800550a:	2300      	movs	r3, #0
  
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	2000000c 	.word	0x2000000c
 800551c:	10624dd3 	.word	0x10624dd3

08005520 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005528:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <SDMMC_GetCmdError+0x50>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a11      	ldr	r2, [pc, #68]	@ (8005574 <SDMMC_GetCmdError+0x54>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	0a5b      	lsrs	r3, r3, #9
 8005534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1e5a      	subs	r2, r3, #1
 8005542:	60fa      	str	r2, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005548:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800554c:	e009      	b.n	8005562 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f1      	beq.n	800553e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	22c5      	movs	r2, #197	@ 0xc5
 800555e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	2000000c 	.word	0x2000000c
 8005574:	10624dd3 	.word	0x10624dd3

08005578 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800557c:	4904      	ldr	r1, [pc, #16]	@ (8005590 <MX_FATFS_Init+0x18>)
 800557e:	4805      	ldr	r0, [pc, #20]	@ (8005594 <MX_FATFS_Init+0x1c>)
 8005580:	f002 ff02 	bl	8008388 <FATFS_LinkDriver>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	4b03      	ldr	r3, [pc, #12]	@ (8005598 <MX_FATFS_Init+0x20>)
 800558a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800558c:	bf00      	nop
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000658 	.word	0x20000658
 8005594:	08008dc4 	.word	0x08008dc4
 8005598:	20000654 	.word	0x20000654

0800559c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80055a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80055b6:	f000 f86b 	bl	8005690 <BSP_SD_IsDetected>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d001      	beq.n	80055c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e005      	b.n	80055d0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80055c4:	4804      	ldr	r0, [pc, #16]	@ (80055d8 <BSP_SD_Init+0x2c>)
 80055c6:	f7fd fd3b 	bl	8003040 <HAL_SD_Init>
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80055ce:	79fb      	ldrb	r3, [r7, #7]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000090 	.word	0x20000090

080055dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	4806      	ldr	r0, [pc, #24]	@ (8005614 <BSP_SD_ReadBlocks+0x38>)
 80055fa:	f7fd fdd1 	bl	80031a0 <HAL_SD_ReadBlocks>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000090 	.word	0x20000090

08005618 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	4806      	ldr	r0, [pc, #24]	@ (8005650 <BSP_SD_WriteBlocks+0x38>)
 8005636:	f7fd ff99 	bl	800356c <HAL_SD_WriteBlocks>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000090 	.word	0x20000090

08005654 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005658:	4805      	ldr	r0, [pc, #20]	@ (8005670 <BSP_SD_GetCardState+0x1c>)
 800565a:	f7fe fae5 	bl	8003c28 <HAL_SD_GetCardState>
 800565e:	4603      	mov	r3, r0
 8005660:	2b04      	cmp	r3, #4
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
}
 800566a:	4618      	mov	r0, r3
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000090 	.word	0x20000090

08005674 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4803      	ldr	r0, [pc, #12]	@ (800568c <BSP_SD_GetCardInfo+0x18>)
 8005680:	f7fe faa6 	bl	8003bd0 <HAL_SD_GetCardInfo>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000090 	.word	0x20000090

08005690 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005696:	2301      	movs	r3, #1
 8005698:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800569a:	f000 f80b 	bl	80056b4 <BSP_PlatformIsDetected>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80056a4:	2300      	movs	r3, #0
 80056a6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	b2db      	uxtb	r3, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80056ba:	2301      	movs	r3, #1
 80056bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80056be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056c2:	4806      	ldr	r0, [pc, #24]	@ (80056dc <BSP_PlatformIsDetected+0x28>)
 80056c4:	f7fd f84c 	bl	8002760 <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80056ce:	2300      	movs	r3, #0
 80056d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80056d2:	79fb      	ldrb	r3, [r7, #7]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40020400 	.word	0x40020400

080056e0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <SD_CheckStatus+0x38>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80056f0:	f7ff ffb0 	bl	8005654 <BSP_SD_GetCardState>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d107      	bne.n	800570a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80056fa:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <SD_CheckStatus+0x38>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	b2da      	uxtb	r2, r3
 8005706:	4b04      	ldr	r3, [pc, #16]	@ (8005718 <SD_CheckStatus+0x38>)
 8005708:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800570a:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <SD_CheckStatus+0x38>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000015 	.word	0x20000015

0800571c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005726:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <SD_initialize+0x38>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800572c:	f7ff ff3e 	bl	80055ac <BSP_SD_Init>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ffd1 	bl	80056e0 <SD_CheckStatus>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <SD_initialize+0x38>)
 8005744:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005746:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <SD_initialize+0x38>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b2db      	uxtb	r3, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000015 	.word	0x20000015

08005758 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ffbb 	bl	80056e0 <SD_CheckStatus>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005788:	f04f 33ff 	mov.w	r3, #4294967295
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	68b8      	ldr	r0, [r7, #8]
 8005792:	f7ff ff23 	bl	80055dc <BSP_SD_ReadBlocks>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d107      	bne.n	80057ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800579c:	bf00      	nop
 800579e:	f7ff ff59 	bl	8005654 <BSP_SD_GetCardState>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1fa      	bne.n	800579e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68b8      	ldr	r0, [r7, #8]
 80057d4:	f7ff ff20 	bl	8005618 <BSP_SD_WriteBlocks>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80057de:	bf00      	nop
 80057e0:	f7ff ff38 	bl	8005654 <BSP_SD_GetCardState>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1fa      	bne.n	80057e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	@ 0x30
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	603a      	str	r2, [r7, #0]
 8005802:	71fb      	strb	r3, [r7, #7]
 8005804:	460b      	mov	r3, r1
 8005806:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800580e:	4b25      	ldr	r3, [pc, #148]	@ (80058a4 <SD_ioctl+0xac>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <SD_ioctl+0x28>
 800581c:	2303      	movs	r3, #3
 800581e:	e03c      	b.n	800589a <SD_ioctl+0xa2>

  switch (cmd)
 8005820:	79bb      	ldrb	r3, [r7, #6]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d834      	bhi.n	8005890 <SD_ioctl+0x98>
 8005826:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <SD_ioctl+0x34>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	08005845 	.word	0x08005845
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005877 	.word	0x08005877
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005842:	e028      	b.n	8005896 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005844:	f107 030c 	add.w	r3, r7, #12
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ff13 	bl	8005674 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800584e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800585a:	e01c      	b.n	8005896 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800585c:	f107 030c 	add.w	r3, r7, #12
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ff07 	bl	8005674 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	b29a      	uxth	r2, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005874:	e00f      	b.n	8005896 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005876:	f107 030c 	add.w	r3, r7, #12
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fefa 	bl	8005674 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	0a5a      	lsrs	r2, r3, #9
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800588e:	e002      	b.n	8005896 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005890:	2304      	movs	r3, #4
 8005892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	@ 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000015 	.word	0x20000015

080058a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	4a08      	ldr	r2, [pc, #32]	@ (80058d8 <disk_status+0x30>)
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	79fa      	ldrb	r2, [r7, #7]
 80058c0:	4905      	ldr	r1, [pc, #20]	@ (80058d8 <disk_status+0x30>)
 80058c2:	440a      	add	r2, r1
 80058c4:	7a12      	ldrb	r2, [r2, #8]
 80058c6:	4610      	mov	r0, r2
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000684 	.word	0x20000684

080058dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005928 <disk_initialize+0x4c>)
 80058ee:	5cd3      	ldrb	r3, [r2, r3]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d114      	bne.n	800591e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005928 <disk_initialize+0x4c>)
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	79fa      	ldrb	r2, [r7, #7]
 8005902:	4909      	ldr	r1, [pc, #36]	@ (8005928 <disk_initialize+0x4c>)
 8005904:	440a      	add	r2, r1
 8005906:	7a12      	ldrb	r2, [r2, #8]
 8005908:	4610      	mov	r0, r2
 800590a:	4798      	blx	r3
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	4a03      	ldr	r2, [pc, #12]	@ (8005928 <disk_initialize+0x4c>)
 800591a:	2101      	movs	r1, #1
 800591c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000684 	.word	0x20000684

0800592c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	4a0a      	ldr	r2, [pc, #40]	@ (8005968 <disk_read+0x3c>)
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	689c      	ldr	r4, [r3, #8]
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	4a07      	ldr	r2, [pc, #28]	@ (8005968 <disk_read+0x3c>)
 800594c:	4413      	add	r3, r2
 800594e:	7a18      	ldrb	r0, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	47a0      	blx	r4
 8005958:	4603      	mov	r3, r0
 800595a:	75fb      	strb	r3, [r7, #23]
  return res;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	bf00      	nop
 8005968:	20000684 	.word	0x20000684

0800596c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <disk_write+0x3c>)
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68dc      	ldr	r4, [r3, #12]
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	4a07      	ldr	r2, [pc, #28]	@ (80059a8 <disk_write+0x3c>)
 800598c:	4413      	add	r3, r2
 800598e:	7a18      	ldrb	r0, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	47a0      	blx	r4
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]
  return res;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd90      	pop	{r4, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000684 	.word	0x20000684

080059ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	603a      	str	r2, [r7, #0]
 80059b6:	71fb      	strb	r3, [r7, #7]
 80059b8:	460b      	mov	r3, r1
 80059ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <disk_ioctl+0x38>)
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	79fa      	ldrb	r2, [r7, #7]
 80059ca:	4906      	ldr	r1, [pc, #24]	@ (80059e4 <disk_ioctl+0x38>)
 80059cc:	440a      	add	r2, r1
 80059ce:	7a10      	ldrb	r0, [r2, #8]
 80059d0:	79b9      	ldrb	r1, [r7, #6]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	4798      	blx	r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000684 	.word	0x20000684

080059e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3301      	adds	r3, #1
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80059f8:	89fb      	ldrh	r3, [r7, #14]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	b21a      	sxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b21b      	sxth	r3, r3
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005a0a:	89fb      	ldrh	r3, [r7, #14]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3303      	adds	r3, #3
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	3202      	adds	r2, #2
 8005a30:	7812      	ldrb	r2, [r2, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	7812      	ldrb	r2, [r2, #0]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	887a      	ldrh	r2, [r7, #2]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	887b      	ldrh	r3, [r7, #2]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	887a      	ldrh	r2, [r7, #2]
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	1c53      	adds	r3, r2, #1
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	6179      	str	r1, [r7, #20]
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f1      	bne.n	8005b06 <mem_cpy+0x1a>
	}
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b2e:	b480      	push	{r7}
 8005b30:	b087      	sub	sp, #28
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	617a      	str	r2, [r7, #20]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f3      	bne.n	8005b3e <mem_set+0x10>
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	@ 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	61fa      	str	r2, [r7, #28]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	4619      	mov	r1, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	61ba      	str	r2, [r7, #24]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <mem_cmp+0x40>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0eb      	beq.n	8005b7c <mem_cmp+0x18>

	return r;
 8005ba4:	697b      	ldr	r3, [r7, #20]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3724      	adds	r7, #36	@ 0x24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005bbc:	e002      	b.n	8005bc4 <chk_chr+0x12>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <chk_chr+0x26>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d1f2      	bne.n	8005bbe <chk_chr+0xc>
	return *str;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	781b      	ldrb	r3, [r3, #0]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e029      	b.n	8005c50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005bfc:	4a27      	ldr	r2, [pc, #156]	@ (8005c9c <chk_lock+0xb4>)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	4413      	add	r3, r2
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01d      	beq.n	8005c46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c0a:	4a24      	ldr	r2, [pc, #144]	@ (8005c9c <chk_lock+0xb4>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4413      	add	r3, r2
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d116      	bne.n	8005c4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005c9c <chk_lock+0xb4>)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d10c      	bne.n	8005c4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c30:	4a1a      	ldr	r2, [pc, #104]	@ (8005c9c <chk_lock+0xb4>)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4413      	add	r3, r2
 8005c38:	3308      	adds	r3, #8
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d102      	bne.n	8005c4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c44:	e007      	b.n	8005c56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d9d2      	bls.n	8005bfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d109      	bne.n	8005c70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <chk_lock+0x80>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d101      	bne.n	8005c6c <chk_lock+0x84>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e010      	b.n	8005c8e <chk_lock+0xa6>
 8005c6c:	2312      	movs	r3, #18
 8005c6e:	e00e      	b.n	8005c8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <chk_lock+0xa0>
 8005c76:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <chk_lock+0xb4>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	330c      	adds	r3, #12
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c86:	d101      	bne.n	8005c8c <chk_lock+0xa4>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	e000      	b.n	8005c8e <chk_lock+0xa6>
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000664 	.word	0x20000664

08005ca0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	607b      	str	r3, [r7, #4]
 8005caa:	e002      	b.n	8005cb2 <enq_lock+0x12>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d806      	bhi.n	8005cc6 <enq_lock+0x26>
 8005cb8:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <enq_lock+0x40>)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	4413      	add	r3, r2
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f2      	bne.n	8005cac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	bf14      	ite	ne
 8005ccc:	2301      	movne	r3, #1
 8005cce:	2300      	moveq	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000664 	.word	0x20000664

08005ce4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e01f      	b.n	8005d34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005cf4:	4a41      	ldr	r2, [pc, #260]	@ (8005dfc <inc_lock+0x118>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	4413      	add	r3, r2
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d113      	bne.n	8005d2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005d06:	4a3d      	ldr	r2, [pc, #244]	@ (8005dfc <inc_lock+0x118>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d109      	bne.n	8005d2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005d1a:	4a38      	ldr	r2, [pc, #224]	@ (8005dfc <inc_lock+0x118>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	4413      	add	r3, r2
 8005d22:	3308      	adds	r3, #8
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d006      	beq.n	8005d3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d9dc      	bls.n	8005cf4 <inc_lock+0x10>
 8005d3a:	e000      	b.n	8005d3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005d3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d132      	bne.n	8005daa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e002      	b.n	8005d50 <inc_lock+0x6c>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d806      	bhi.n	8005d64 <inc_lock+0x80>
 8005d56:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <inc_lock+0x118>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f2      	bne.n	8005d4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d101      	bne.n	8005d6e <inc_lock+0x8a>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e040      	b.n	8005df0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4922      	ldr	r1, [pc, #136]	@ (8005dfc <inc_lock+0x118>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	440b      	add	r3, r1
 8005d7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	491e      	ldr	r1, [pc, #120]	@ (8005dfc <inc_lock+0x118>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	440b      	add	r3, r1
 8005d88:	3304      	adds	r3, #4
 8005d8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	491a      	ldr	r1, [pc, #104]	@ (8005dfc <inc_lock+0x118>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	440b      	add	r3, r1
 8005d98:	3308      	adds	r3, #8
 8005d9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d9c:	4a17      	ldr	r2, [pc, #92]	@ (8005dfc <inc_lock+0x118>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	4413      	add	r3, r2
 8005da4:	330c      	adds	r3, #12
 8005da6:	2200      	movs	r2, #0
 8005da8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <inc_lock+0xe0>
 8005db0:	4a12      	ldr	r2, [pc, #72]	@ (8005dfc <inc_lock+0x118>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	4413      	add	r3, r2
 8005db8:	330c      	adds	r3, #12
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <inc_lock+0xe0>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e015      	b.n	8005df0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d108      	bne.n	8005ddc <inc_lock+0xf8>
 8005dca:	4a0c      	ldr	r2, [pc, #48]	@ (8005dfc <inc_lock+0x118>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	4413      	add	r3, r2
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	e001      	b.n	8005de0 <inc_lock+0xfc>
 8005ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005de0:	4906      	ldr	r1, [pc, #24]	@ (8005dfc <inc_lock+0x118>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	440b      	add	r3, r1
 8005de8:	330c      	adds	r3, #12
 8005dea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000664 	.word	0x20000664

08005e00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d825      	bhi.n	8005e60 <dec_lock+0x60>
		n = Files[i].ctr;
 8005e14:	4a17      	ldr	r2, [pc, #92]	@ (8005e74 <dec_lock+0x74>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e22:	89fb      	ldrh	r3, [r7, #14]
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e28:	d101      	bne.n	8005e2e <dec_lock+0x2e>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e2e:	89fb      	ldrh	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <dec_lock+0x3a>
 8005e34:	89fb      	ldrh	r3, [r7, #14]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005e74 <dec_lock+0x74>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	4413      	add	r3, r2
 8005e42:	330c      	adds	r3, #12
 8005e44:	89fa      	ldrh	r2, [r7, #14]
 8005e46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <dec_lock+0x5a>
 8005e4e:	4a09      	ldr	r2, [pc, #36]	@ (8005e74 <dec_lock+0x74>)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	4413      	add	r3, r2
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	737b      	strb	r3, [r7, #13]
 8005e5e:	e001      	b.n	8005e64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e60:	2302      	movs	r3, #2
 8005e62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005e64:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000664 	.word	0x20000664

08005e78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e010      	b.n	8005ea8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e86:	4a0d      	ldr	r2, [pc, #52]	@ (8005ebc <clear_lock+0x44>)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	4413      	add	r3, r2
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d105      	bne.n	8005ea2 <clear_lock+0x2a>
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <clear_lock+0x44>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4413      	add	r3, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d9eb      	bls.n	8005e86 <clear_lock+0xe>
	}
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20000664 	.word	0x20000664

08005ec0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	78db      	ldrb	r3, [r3, #3]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d034      	beq.n	8005f3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	7858      	ldrb	r0, [r3, #1]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	f7ff fd40 	bl	800596c <disk_write>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e022      	b.n	8005f3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d217      	bcs.n	8005f3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	789b      	ldrb	r3, [r3, #2]
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e010      	b.n	8005f38 <sync_window+0x78>
					wsect += fs->fsize;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7858      	ldrb	r0, [r3, #1]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	f7ff fd1d 	bl	800596c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d8eb      	bhi.n	8005f16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d01b      	beq.n	8005f98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff ffad 	bl	8005ec0 <sync_window>
 8005f66:	4603      	mov	r3, r0
 8005f68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d113      	bne.n	8005f98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7858      	ldrb	r0, [r3, #1]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	f7ff fcd5 	bl	800592c <disk_read>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff ff87 	bl	8005ec0 <sync_window>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d158      	bne.n	800606e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d148      	bne.n	8006056 <sync_fs+0xb2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	791b      	ldrb	r3, [r3, #4]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d144      	bne.n	8006056 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3330      	adds	r3, #48	@ 0x30
 8005fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fda9 	bl	8005b2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3330      	adds	r3, #48	@ 0x30
 8005fe0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005fe4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fd38 	bl	8005a5e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3330      	adds	r3, #48	@ 0x30
 8005ff2:	4921      	ldr	r1, [pc, #132]	@ (8006078 <sync_fs+0xd4>)
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fd4d 	bl	8005a94 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3330      	adds	r3, #48	@ 0x30
 8005ffe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006002:	491e      	ldr	r1, [pc, #120]	@ (800607c <sync_fs+0xd8>)
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fd45 	bl	8005a94 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3330      	adds	r3, #48	@ 0x30
 800600e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7ff fd3b 	bl	8005a94 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3330      	adds	r3, #48	@ 0x30
 8006022:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7ff fd31 	bl	8005a94 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	7858      	ldrb	r0, [r3, #1]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	2301      	movs	r3, #1
 800604c:	f7ff fc8e 	bl	800596c <disk_write>
			fs->fsi_flag = 0;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	785b      	ldrb	r3, [r3, #1]
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fca4 	bl	80059ac <disk_ioctl>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <sync_fs+0xca>
 800606a:	2301      	movs	r3, #1
 800606c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	41615252 	.word	0x41615252
 800607c:	61417272 	.word	0x61417272

08006080 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	3b02      	subs	r3, #2
 800608e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	3b02      	subs	r3, #2
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d301      	bcc.n	80060a0 <clust2sect+0x20>
 800609c:	2300      	movs	r3, #0
 800609e:	e008      	b.n	80060b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	895b      	ldrh	r3, [r3, #10]
 80060a4:	461a      	mov	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	fb03 f202 	mul.w	r2, r3, r2
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	4413      	add	r3, r2
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d904      	bls.n	80060de <get_fat+0x20>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80060de:	2301      	movs	r3, #1
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e08e      	b.n	8006202 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295
 80060e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d061      	beq.n	80061b6 <get_fat+0xf8>
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	dc7b      	bgt.n	80061ee <get_fat+0x130>
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d002      	beq.n	8006100 <get_fat+0x42>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d041      	beq.n	8006182 <get_fat+0xc4>
 80060fe:	e076      	b.n	80061ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6a1a      	ldr	r2, [r3, #32]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0a5b      	lsrs	r3, r3, #9
 8006116:	4413      	add	r3, r2
 8006118:	4619      	mov	r1, r3
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f7ff ff14 	bl	8005f48 <move_window>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d166      	bne.n	80061f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	60fa      	str	r2, [r7, #12]
 800612c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006138:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	0a5b      	lsrs	r3, r3, #9
 8006142:	4413      	add	r3, r2
 8006144:	4619      	mov	r1, r3
 8006146:	6938      	ldr	r0, [r7, #16]
 8006148:	f7ff fefe 	bl	8005f48 <move_window>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d152      	bne.n	80061f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <get_fat+0xba>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	e002      	b.n	800617e <get_fat+0xc0>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800617e:	617b      	str	r3, [r7, #20]
			break;
 8006180:	e03f      	b.n	8006202 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6a1a      	ldr	r2, [r3, #32]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	4413      	add	r3, r2
 800618c:	4619      	mov	r1, r3
 800618e:	6938      	ldr	r0, [r7, #16]
 8006190:	f7ff feda 	bl	8005f48 <move_window>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d130      	bne.n	80061fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80061a8:	4413      	add	r3, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fc1c 	bl	80059e8 <ld_word>
 80061b0:	4603      	mov	r3, r0
 80061b2:	617b      	str	r3, [r7, #20]
			break;
 80061b4:	e025      	b.n	8006202 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	09db      	lsrs	r3, r3, #7
 80061be:	4413      	add	r3, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	6938      	ldr	r0, [r7, #16]
 80061c4:	f7ff fec0 	bl	8005f48 <move_window>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d118      	bne.n	8006200 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80061dc:	4413      	add	r3, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fc1a 	bl	8005a18 <ld_dword>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80061ea:	617b      	str	r3, [r7, #20]
			break;
 80061ec:	e009      	b.n	8006202 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80061ee:	2301      	movs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e006      	b.n	8006202 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f4:	bf00      	nop
 80061f6:	e004      	b.n	8006202 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f8:	bf00      	nop
 80061fa:	e002      	b.n	8006202 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061fc:	bf00      	nop
 80061fe:	e000      	b.n	8006202 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006200:	bf00      	nop
		}
	}

	return val;
 8006202:	697b      	ldr	r3, [r7, #20]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b089      	sub	sp, #36	@ 0x24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006218:	2302      	movs	r3, #2
 800621a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b01      	cmp	r3, #1
 8006220:	f240 80d9 	bls.w	80063d6 <put_fat+0x1ca>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	f080 80d3 	bcs.w	80063d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b03      	cmp	r3, #3
 8006236:	f000 8096 	beq.w	8006366 <put_fat+0x15a>
 800623a:	2b03      	cmp	r3, #3
 800623c:	f300 80cb 	bgt.w	80063d6 <put_fat+0x1ca>
 8006240:	2b01      	cmp	r3, #1
 8006242:	d002      	beq.n	800624a <put_fat+0x3e>
 8006244:	2b02      	cmp	r3, #2
 8006246:	d06e      	beq.n	8006326 <put_fat+0x11a>
 8006248:	e0c5      	b.n	80063d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4413      	add	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	0a5b      	lsrs	r3, r3, #9
 8006260:	4413      	add	r3, r2
 8006262:	4619      	mov	r1, r3
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff fe6f 	bl	8005f48 <move_window>
 800626a:	4603      	mov	r3, r0
 800626c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 80a9 	bne.w	80063c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	61b9      	str	r1, [r7, #24]
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	4413      	add	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <put_fat+0xa4>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b25b      	sxtb	r3, r3
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	b25a      	sxtb	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b25b      	sxtb	r3, r3
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e001      	b.n	80062b4 <put_fat+0xa8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	0a5b      	lsrs	r3, r3, #9
 80062c6:	4413      	add	r3, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fe3c 	bl	8005f48 <move_window>
 80062d0:	4603      	mov	r3, r0
 80062d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d178      	bne.n	80063cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e6:	4413      	add	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <put_fat+0xf0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e00e      	b.n	800631a <put_fat+0x10e>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b25b      	sxtb	r3, r3
 8006302:	f023 030f 	bic.w	r3, r3, #15
 8006306:	b25a      	sxtb	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	b25b      	sxtb	r3, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	b25b      	sxtb	r3, r3
 8006318:	b2db      	uxtb	r3, r3
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	70da      	strb	r2, [r3, #3]
			break;
 8006324:	e057      	b.n	80063d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	4413      	add	r3, r2
 8006330:	4619      	mov	r1, r3
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff fe08 	bl	8005f48 <move_window>
 8006338:	4603      	mov	r3, r0
 800633a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800633c:	7ffb      	ldrb	r3, [r7, #31]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d146      	bne.n	80063d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006350:	4413      	add	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	b292      	uxth	r2, r2
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fb80 	bl	8005a5e <st_word>
			fs->wflag = 1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	70da      	strb	r2, [r3, #3]
			break;
 8006364:	e037      	b.n	80063d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	4413      	add	r3, r2
 8006370:	4619      	mov	r1, r3
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff fde8 	bl	8005f48 <move_window>
 8006378:	4603      	mov	r3, r0
 800637a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800637c:	7ffb      	ldrb	r3, [r7, #31]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d128      	bne.n	80063d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006396:	4413      	add	r3, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fb3d 	bl	8005a18 <ld_dword>
 800639e:	4603      	mov	r3, r0
 80063a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80063a4:	4323      	orrs	r3, r4
 80063a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80063b6:	4413      	add	r3, r2
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fb6a 	bl	8005a94 <st_dword>
			fs->wflag = 1;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	70da      	strb	r2, [r3, #3]
			break;
 80063c6:	e006      	b.n	80063d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80063c8:	bf00      	nop
 80063ca:	e004      	b.n	80063d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80063d4:	bf00      	nop
		}
	}
	return res;
 80063d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3724      	adds	r7, #36	@ 0x24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd90      	pop	{r4, r7, pc}

080063e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d904      	bls.n	8006406 <remove_chain+0x26>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	429a      	cmp	r2, r3
 8006404:	d301      	bcc.n	800640a <remove_chain+0x2a>
 8006406:	2302      	movs	r3, #2
 8006408:	e04b      	b.n	80064a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	69b8      	ldr	r0, [r7, #24]
 8006418:	f7ff fef8 	bl	800620c <put_fat>
 800641c:	4603      	mov	r3, r0
 800641e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <remove_chain+0x4a>
 8006426:	7ffb      	ldrb	r3, [r7, #31]
 8006428:	e03b      	b.n	80064a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fe46 	bl	80060be <get_fat>
 8006432:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d031      	beq.n	800649e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <remove_chain+0x64>
 8006440:	2302      	movs	r3, #2
 8006442:	e02e      	b.n	80064a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d101      	bne.n	8006450 <remove_chain+0x70>
 800644c:	2301      	movs	r3, #1
 800644e:	e028      	b.n	80064a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006450:	2200      	movs	r2, #0
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	69b8      	ldr	r0, [r7, #24]
 8006456:	f7ff fed9 	bl	800620c <put_fat>
 800645a:	4603      	mov	r3, r0
 800645c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800645e:	7ffb      	ldrb	r3, [r7, #31]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <remove_chain+0x88>
 8006464:	7ffb      	ldrb	r3, [r7, #31]
 8006466:	e01c      	b.n	80064a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	3b02      	subs	r3, #2
 8006472:	429a      	cmp	r2, r3
 8006474:	d20b      	bcs.n	800648e <remove_chain+0xae>
			fs->free_clst++;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	791b      	ldrb	r3, [r3, #4]
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	b2da      	uxtb	r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d3c6      	bcc.n	800642a <remove_chain+0x4a>
 800649c:	e000      	b.n	80064a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800649e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b088      	sub	sp, #32
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <create_chain+0x2c>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d31b      	bcc.n	800650e <create_chain+0x64>
 80064d6:	2301      	movs	r3, #1
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e018      	b.n	800650e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fded 	bl	80060be <get_fat>
 80064e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d801      	bhi.n	80064f0 <create_chain+0x46>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e070      	b.n	80065d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d101      	bne.n	80064fc <create_chain+0x52>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e06a      	b.n	80065d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	429a      	cmp	r2, r3
 8006504:	d201      	bcs.n	800650a <create_chain+0x60>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	e063      	b.n	80065d2 <create_chain+0x128>
		scl = clst;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	3301      	adds	r3, #1
 8006516:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	429a      	cmp	r2, r3
 8006520:	d307      	bcc.n	8006532 <create_chain+0x88>
				ncl = 2;
 8006522:	2302      	movs	r3, #2
 8006524:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	429a      	cmp	r2, r3
 800652c:	d901      	bls.n	8006532 <create_chain+0x88>
 800652e:	2300      	movs	r3, #0
 8006530:	e04f      	b.n	80065d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006532:	69f9      	ldr	r1, [r7, #28]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fdc2 	bl	80060be <get_fat>
 800653a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00e      	beq.n	8006560 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d003      	beq.n	8006550 <create_chain+0xa6>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d101      	bne.n	8006554 <create_chain+0xaa>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	e03e      	b.n	80065d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	429a      	cmp	r2, r3
 800655a:	d1da      	bne.n	8006512 <create_chain+0x68>
 800655c:	2300      	movs	r3, #0
 800655e:	e038      	b.n	80065d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006560:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	69f9      	ldr	r1, [r7, #28]
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f7ff fe4f 	bl	800620c <put_fat>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <create_chain+0xe2>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d006      	beq.n	800658c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6938      	ldr	r0, [r7, #16]
 8006584:	f7ff fe42 	bl	800620c <put_fat>
 8006588:	4603      	mov	r3, r0
 800658a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d116      	bne.n	80065c0 <create_chain+0x116>
		fs->last_clst = ncl;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	3b02      	subs	r3, #2
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d804      	bhi.n	80065b0 <create_chain+0x106>
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	1e5a      	subs	r2, r3, #1
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	791b      	ldrb	r3, [r3, #4]
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	711a      	strb	r2, [r3, #4]
 80065be:	e007      	b.n	80065d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d102      	bne.n	80065cc <create_chain+0x122>
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	e000      	b.n	80065ce <create_chain+0x124>
 80065cc:	2301      	movs	r3, #1
 80065ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80065d0:	69fb      	ldr	r3, [r7, #28]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80065da:	b480      	push	{r7}
 80065dc:	b087      	sub	sp, #28
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ee:	3304      	adds	r3, #4
 80065f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	0a5b      	lsrs	r3, r3, #9
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	8952      	ldrh	r2, [r2, #10]
 80065fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1d1a      	adds	r2, r3, #4
 8006604:	613a      	str	r2, [r7, #16]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <clmt_clust+0x3a>
 8006610:	2300      	movs	r3, #0
 8006612:	e010      	b.n	8006636 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	d307      	bcc.n	800662c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3304      	adds	r3, #4
 8006628:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800662a:	e7e9      	b.n	8006600 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800662c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
}
 8006636:	4618      	mov	r0, r3
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006658:	d204      	bcs.n	8006664 <dir_sdi+0x22>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006664:	2302      	movs	r3, #2
 8006666:	e063      	b.n	8006730 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <dir_sdi+0x46>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	8912      	ldrh	r2, [r2, #8]
 8006696:	4293      	cmp	r3, r2
 8006698:	d301      	bcc.n	800669e <dir_sdi+0x5c>
 800669a:	2302      	movs	r3, #2
 800669c:	e048      	b.n	8006730 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	61da      	str	r2, [r3, #28]
 80066a6:	e029      	b.n	80066fc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	895b      	ldrh	r3, [r3, #10]
 80066ac:	025b      	lsls	r3, r3, #9
 80066ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066b0:	e019      	b.n	80066e6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6979      	ldr	r1, [r7, #20]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fd01 	bl	80060be <get_fat>
 80066bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d101      	bne.n	80066ca <dir_sdi+0x88>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e032      	b.n	8006730 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d904      	bls.n	80066da <dir_sdi+0x98>
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d301      	bcc.n	80066de <dir_sdi+0x9c>
 80066da:	2302      	movs	r3, #2
 80066dc:	e028      	b.n	8006730 <dir_sdi+0xee>
			ofs -= csz;
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d2e1      	bcs.n	80066b2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f7ff fcc5 	bl	8006080 <clust2sect>
 80066f6:	4602      	mov	r2, r0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <dir_sdi+0xcc>
 800670a:	2302      	movs	r3, #2
 800670c:	e010      	b.n	8006730 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	0a5b      	lsrs	r3, r3, #9
 8006716:	441a      	add	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006728:	441a      	add	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	3320      	adds	r3, #32
 800674e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <dir_next+0x28>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800675e:	d301      	bcc.n	8006764 <dir_next+0x2c>
 8006760:	2304      	movs	r3, #4
 8006762:	e0aa      	b.n	80068ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8098 	bne.w	80068a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10b      	bne.n	800679a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	8912      	ldrh	r2, [r2, #8]
 800678a:	4293      	cmp	r3, r2
 800678c:	f0c0 8088 	bcc.w	80068a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	61da      	str	r2, [r3, #28]
 8006796:	2304      	movs	r3, #4
 8006798:	e08f      	b.n	80068ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	0a5b      	lsrs	r3, r3, #9
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	8952      	ldrh	r2, [r2, #10]
 80067a2:	3a01      	subs	r2, #1
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d17a      	bne.n	80068a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f7ff fc83 	bl	80060be <get_fat>
 80067b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d801      	bhi.n	80067c4 <dir_next+0x8c>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e07a      	b.n	80068ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d101      	bne.n	80067d0 <dir_next+0x98>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e074      	b.n	80068ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d358      	bcc.n	800688c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
 80067e6:	2304      	movs	r3, #4
 80067e8:	e067      	b.n	80068ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7ff fe59 	bl	80064aa <create_chain>
 80067f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <dir_next+0xcc>
 8006800:	2307      	movs	r3, #7
 8006802:	e05a      	b.n	80068ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <dir_next+0xd6>
 800680a:	2302      	movs	r3, #2
 800680c:	e055      	b.n	80068ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d101      	bne.n	800681a <dir_next+0xe2>
 8006816:	2301      	movs	r3, #1
 8006818:	e04f      	b.n	80068ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fb50 	bl	8005ec0 <sync_window>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <dir_next+0xf2>
 8006826:	2301      	movs	r3, #1
 8006828:	e047      	b.n	80068ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3330      	adds	r3, #48	@ 0x30
 800682e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff f97a 	bl	8005b2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	6979      	ldr	r1, [r7, #20]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff fc1d 	bl	8006080 <clust2sect>
 8006846:	4602      	mov	r2, r0
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800684c:	e012      	b.n	8006874 <dir_next+0x13c>
						fs->wflag = 1;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff fb33 	bl	8005ec0 <sync_window>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <dir_next+0x12c>
 8006860:	2301      	movs	r3, #1
 8006862:	e02a      	b.n	80068ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	3301      	adds	r3, #1
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	895b      	ldrh	r3, [r3, #10]
 8006878:	461a      	mov	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4293      	cmp	r3, r2
 800687e:	d3e6      	bcc.n	800684e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff fbf3 	bl	8006080 <clust2sect>
 800689a:	4602      	mov	r2, r0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	441a      	add	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80068d2:	2100      	movs	r1, #0
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff feb4 	bl	8006642 <dir_sdi>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d12b      	bne.n	800693c <dir_alloc+0x7a>
		n = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	4619      	mov	r1, r3
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fb2a 	bl	8005f48 <move_window>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11d      	bne.n	800693a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2be5      	cmp	r3, #229	@ 0xe5
 8006906:	d004      	beq.n	8006912 <dir_alloc+0x50>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d107      	bne.n	8006922 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d102      	bne.n	8006926 <dir_alloc+0x64>
 8006920:	e00c      	b.n	800693c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff05 	bl	8006738 <dir_next>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0d7      	beq.n	80068e8 <dir_alloc+0x26>
 8006938:	e000      	b.n	800693c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800693a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b04      	cmp	r3, #4
 8006940:	d101      	bne.n	8006946 <dir_alloc+0x84>
 8006942:	2307      	movs	r3, #7
 8006944:	75fb      	strb	r3, [r7, #23]
	return res;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	331a      	adds	r3, #26
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff f842 	bl	80059e8 <ld_word>
 8006964:	4603      	mov	r3, r0
 8006966:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d109      	bne.n	8006984 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff f837 	bl	80059e8 <ld_word>
 800697a:	4603      	mov	r3, r0
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006984:	68fb      	ldr	r3, [r7, #12]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	331a      	adds	r3, #26
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	b292      	uxth	r2, r2
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff f85a 	bl	8005a5e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d109      	bne.n	80069c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f103 0214 	add.w	r2, r3, #20
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f7ff f84c 	bl	8005a5e <st_word>
	}
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80069d8:	2304      	movs	r3, #4
 80069da:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80069e2:	e03c      	b.n	8006a5e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7ff faac 	bl	8005f48 <move_window>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d136      	bne.n	8006a68 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d102      	bne.n	8006a0e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006a08:	2304      	movs	r3, #4
 8006a0a:	75fb      	strb	r3, [r7, #23]
 8006a0c:	e031      	b.n	8006a72 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	330b      	adds	r3, #11
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1a:	73bb      	strb	r3, [r7, #14]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7bba      	ldrb	r2, [r7, #14]
 8006a20:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2be5      	cmp	r3, #229	@ 0xe5
 8006a26:	d011      	beq.n	8006a4c <dir_read+0x7e>
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a2c:	d00e      	beq.n	8006a4c <dir_read+0x7e>
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b0f      	cmp	r3, #15
 8006a32:	d00b      	beq.n	8006a4c <dir_read+0x7e>
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	f023 0320 	bic.w	r3, r3, #32
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00f      	beq.n	8006a6c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fe72 	bl	8006738 <dir_next>
 8006a54:	4603      	mov	r3, r0
 8006a56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <dir_read+0xa2>
	while (dp->sect) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1be      	bne.n	80069e4 <dir_read+0x16>
 8006a66:	e004      	b.n	8006a72 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <dir_read+0xa4>
				break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006a70:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <dir_read+0xb0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	61da      	str	r2, [r3, #28]
	return res;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a96:	2100      	movs	r1, #0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fdd2 	bl	8006642 <dir_sdi>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <dir_find+0x24>
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	e03e      	b.n	8006b2a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6938      	ldr	r0, [r7, #16]
 8006ab4:	f7ff fa48 	bl	8005f48 <move_window>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d12f      	bne.n	8006b22 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d102      	bne.n	8006ad6 <dir_find+0x4e>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	75fb      	strb	r3, [r7, #23]
 8006ad4:	e028      	b.n	8006b28 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	330b      	adds	r3, #11
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	330b      	adds	r3, #11
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <dir_find+0x86>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a18      	ldr	r0, [r3, #32]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3324      	adds	r3, #36	@ 0x24
 8006b00:	220b      	movs	r2, #11
 8006b02:	4619      	mov	r1, r3
 8006b04:	f7ff f82e 	bl	8005b64 <mem_cmp>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fe11 	bl	8006738 <dir_next>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0c5      	beq.n	8006aac <dir_find+0x24>
 8006b20:	e002      	b.n	8006b28 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006b22:	bf00      	nop
 8006b24:	e000      	b.n	8006b28 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b26:	bf00      	nop

	return res;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b40:	2101      	movs	r1, #1
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff febd 	bl	80068c2 <dir_alloc>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d11c      	bne.n	8006b8c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4619      	mov	r1, r3
 8006b58:	68b8      	ldr	r0, [r7, #8]
 8006b5a:	f7ff f9f5 	bl	8005f48 <move_window>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d111      	bne.n	8006b8c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe ffdc 	bl	8005b2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a18      	ldr	r0, [r3, #32]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3324      	adds	r3, #36	@ 0x24
 8006b7e:	220b      	movs	r2, #11
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7fe ffb3 	bl	8005aec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff f9cc 	bl	8005f48 <move_window>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	22e5      	movs	r2, #229	@ 0xe5
 8006bc0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3324      	adds	r3, #36	@ 0x24
 8006be8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006bea:	220b      	movs	r2, #11
 8006bec:	2120      	movs	r1, #32
 8006bee:	68b8      	ldr	r0, [r7, #8]
 8006bf0:	f7fe ff9d 	bl	8005b2e <mem_set>
	si = i = 0; ni = 8;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	61fa      	str	r2, [r7, #28]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c0e:	7efb      	ldrb	r3, [r7, #27]
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d94e      	bls.n	8006cb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c14:	7efb      	ldrb	r3, [r7, #27]
 8006c16:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c18:	d006      	beq.n	8006c28 <create_name+0x54>
 8006c1a:	7efb      	ldrb	r3, [r7, #27]
 8006c1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c1e:	d110      	bne.n	8006c42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c20:	e002      	b.n	8006c28 <create_name+0x54>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c32:	d0f6      	beq.n	8006c22 <create_name+0x4e>
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c3e:	d0f0      	beq.n	8006c22 <create_name+0x4e>
			break;
 8006c40:	e038      	b.n	8006cb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006c42:	7efb      	ldrb	r3, [r7, #27]
 8006c44:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c46:	d003      	beq.n	8006c50 <create_name+0x7c>
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d30c      	bcc.n	8006c6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b0b      	cmp	r3, #11
 8006c54:	d002      	beq.n	8006c5c <create_name+0x88>
 8006c56:	7efb      	ldrb	r3, [r7, #27]
 8006c58:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c5a:	d001      	beq.n	8006c60 <create_name+0x8c>
 8006c5c:	2306      	movs	r3, #6
 8006c5e:	e044      	b.n	8006cea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006c60:	2308      	movs	r3, #8
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	230b      	movs	r3, #11
 8006c66:	617b      	str	r3, [r7, #20]
			continue;
 8006c68:	e022      	b.n	8006cb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006c6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da04      	bge.n	8006c7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006c72:	7efb      	ldrb	r3, [r7, #27]
 8006c74:	3b80      	subs	r3, #128	@ 0x80
 8006c76:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf4 <create_name+0x120>)
 8006c78:	5cd3      	ldrb	r3, [r2, r3]
 8006c7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006c7c:	7efb      	ldrb	r3, [r7, #27]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	481d      	ldr	r0, [pc, #116]	@ (8006cf8 <create_name+0x124>)
 8006c82:	f7fe ff96 	bl	8005bb2 <chk_chr>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <create_name+0xbc>
 8006c8c:	2306      	movs	r3, #6
 8006c8e:	e02c      	b.n	8006cea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006c90:	7efb      	ldrb	r3, [r7, #27]
 8006c92:	2b60      	cmp	r3, #96	@ 0x60
 8006c94:	d905      	bls.n	8006ca2 <create_name+0xce>
 8006c96:	7efb      	ldrb	r3, [r7, #27]
 8006c98:	2b7a      	cmp	r3, #122	@ 0x7a
 8006c9a:	d802      	bhi.n	8006ca2 <create_name+0xce>
 8006c9c:	7efb      	ldrb	r3, [r7, #27]
 8006c9e:	3b20      	subs	r3, #32
 8006ca0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	613a      	str	r2, [r7, #16]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	4413      	add	r3, r2
 8006cac:	7efa      	ldrb	r2, [r7, #27]
 8006cae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006cb0:	e7a6      	b.n	8006c00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006cb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	441a      	add	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <create_name+0xf4>
 8006cc4:	2306      	movs	r3, #6
 8006cc6:	e010      	b.n	8006cea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2be5      	cmp	r3, #229	@ 0xe5
 8006cce:	d102      	bne.n	8006cd6 <create_name+0x102>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2205      	movs	r2, #5
 8006cd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006cd6:	7efb      	ldrb	r3, [r7, #27]
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d801      	bhi.n	8006ce0 <create_name+0x10c>
 8006cdc:	2204      	movs	r2, #4
 8006cde:	e000      	b.n	8006ce2 <create_name+0x10e>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	330b      	adds	r3, #11
 8006ce6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006ce8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08008dd8 	.word	0x08008dd8
 8006cf8:	08008d70 	.word	0x08008d70

08006cfc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d10:	e002      	b.n	8006d18 <follow_path+0x1c>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d1e:	d0f8      	beq.n	8006d12 <follow_path+0x16>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d26:	d0f4      	beq.n	8006d12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b1f      	cmp	r3, #31
 8006d34:	d80a      	bhi.n	8006d4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2280      	movs	r2, #128	@ 0x80
 8006d3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fc7e 	bl	8006642 <dir_sdi>
 8006d46:	4603      	mov	r3, r0
 8006d48:	75fb      	strb	r3, [r7, #23]
 8006d4a:	e043      	b.n	8006dd4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ff3f 	bl	8006bd4 <create_name>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d134      	bne.n	8006dca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fe91 	bl	8006a88 <dir_find>
 8006d66:	4603      	mov	r3, r0
 8006d68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006d70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d127      	bne.n	8006dce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d122      	bne.n	8006dce <follow_path+0xd2>
 8006d88:	2305      	movs	r3, #5
 8006d8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006d8c:	e01f      	b.n	8006dce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d8e:	7afb      	ldrb	r3, [r7, #11]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11c      	bne.n	8006dd2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	799b      	ldrb	r3, [r3, #6]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006da4:	2305      	movs	r3, #5
 8006da6:	75fb      	strb	r3, [r7, #23]
 8006da8:	e014      	b.n	8006dd4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	4413      	add	r3, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fdc7 	bl	8006950 <ld_clust>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006dc8:	e7c0      	b.n	8006d4c <follow_path+0x50>
			if (res != FR_OK) break;
 8006dca:	bf00      	nop
 8006dcc:	e002      	b.n	8006dd4 <follow_path+0xd8>
				break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dd2:	bf00      	nop
			}
		}
	}

	return res;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b087      	sub	sp, #28
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006de6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d031      	beq.n	8006e58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e002      	b.n	8006e02 <get_ldnumber+0x24>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d903      	bls.n	8006e12 <get_ldnumber+0x34>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e10:	d1f4      	bne.n	8006dfc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e18:	d11c      	bne.n	8006e54 <get_ldnumber+0x76>
			tp = *path;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	60fa      	str	r2, [r7, #12]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	3b30      	subs	r3, #48	@ 0x30
 8006e2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b09      	cmp	r3, #9
 8006e30:	d80e      	bhi.n	8006e50 <get_ldnumber+0x72>
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d10a      	bne.n	8006e50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d107      	bne.n	8006e50 <get_ldnumber+0x72>
					vol = (int)i;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3301      	adds	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	e002      	b.n	8006e5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e58:	693b      	ldr	r3, [r7, #16]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	70da      	strb	r2, [r3, #3]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff f860 	bl	8005f48 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <check_fs+0x2a>
 8006e8e:	2304      	movs	r3, #4
 8006e90:	e038      	b.n	8006f04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3330      	adds	r3, #48	@ 0x30
 8006e96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fda4 	bl	80059e8 <ld_word>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d001      	beq.n	8006eb0 <check_fs+0x48>
 8006eac:	2303      	movs	r3, #3
 8006eae:	e029      	b.n	8006f04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006eb6:	2be9      	cmp	r3, #233	@ 0xe9
 8006eb8:	d009      	beq.n	8006ece <check_fs+0x66>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ec0:	2beb      	cmp	r3, #235	@ 0xeb
 8006ec2:	d11e      	bne.n	8006f02 <check_fs+0x9a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006eca:	2b90      	cmp	r3, #144	@ 0x90
 8006ecc:	d119      	bne.n	8006f02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3330      	adds	r3, #48	@ 0x30
 8006ed2:	3336      	adds	r3, #54	@ 0x36
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fd9f 	bl	8005a18 <ld_dword>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f0c <check_fs+0xa4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <check_fs+0x82>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e00c      	b.n	8006f04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3330      	adds	r3, #48	@ 0x30
 8006eee:	3352      	adds	r3, #82	@ 0x52
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fd91 	bl	8005a18 <ld_dword>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a05      	ldr	r2, [pc, #20]	@ (8006f10 <check_fs+0xa8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d101      	bne.n	8006f02 <check_fs+0x9a>
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f02:	2302      	movs	r3, #2
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	00544146 	.word	0x00544146
 8006f10:	33544146 	.word	0x33544146

08006f14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b096      	sub	sp, #88	@ 0x58
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff ff58 	bl	8006dde <get_ldnumber>
 8006f2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	da01      	bge.n	8006f3a <find_volume+0x26>
 8006f36:	230b      	movs	r3, #11
 8006f38:	e22d      	b.n	8007396 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f3a:	4aa1      	ldr	r2, [pc, #644]	@ (80071c0 <find_volume+0x2ac>)
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <find_volume+0x3a>
 8006f4a:	230c      	movs	r3, #12
 8006f4c:	e223      	b.n	8007396 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01a      	beq.n	8006f9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe fc9d 	bl	80058a8 <disk_status>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10c      	bne.n	8006f9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <find_volume+0x82>
 8006f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f92:	230a      	movs	r3, #10
 8006f94:	e1ff      	b.n	8007396 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006f96:	2300      	movs	r3, #0
 8006f98:	e1fd      	b.n	8007396 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fc95 	bl	80058dc <disk_initialize>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e1e6      	b.n	8007396 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <find_volume+0xca>
 8006fce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006fda:	230a      	movs	r3, #10
 8006fdc:	e1db      	b.n	8007396 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006fe2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fe4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006fe6:	f7ff ff3f 	bl	8006e68 <check_fs>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d149      	bne.n	800708c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ffc:	e01e      	b.n	800703c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800700c:	4413      	add	r3, r2
 800700e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	3304      	adds	r3, #4
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d006      	beq.n	8007028 <find_volume+0x114>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	3308      	adds	r3, #8
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fcfa 	bl	8005a18 <ld_dword>
 8007024:	4602      	mov	r2, r0
 8007026:	e000      	b.n	800702a <find_volume+0x116>
 8007028:	2200      	movs	r2, #0
 800702a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	3358      	adds	r3, #88	@ 0x58
 8007030:	443b      	add	r3, r7
 8007032:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007038:	3301      	adds	r3, #1
 800703a:	643b      	str	r3, [r7, #64]	@ 0x40
 800703c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800703e:	2b03      	cmp	r3, #3
 8007040:	d9dd      	bls.n	8006ffe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007042:	2300      	movs	r3, #0
 8007044:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <find_volume+0x13e>
 800704c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704e:	3b01      	subs	r3, #1
 8007050:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	3358      	adds	r3, #88	@ 0x58
 8007058:	443b      	add	r3, r7
 800705a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800705e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <find_volume+0x15e>
 8007066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007068:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800706a:	f7ff fefd 	bl	8006e68 <check_fs>
 800706e:	4603      	mov	r3, r0
 8007070:	e000      	b.n	8007074 <find_volume+0x160>
 8007072:	2303      	movs	r3, #3
 8007074:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007078:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800707c:	2b01      	cmp	r3, #1
 800707e:	d905      	bls.n	800708c <find_volume+0x178>
 8007080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007082:	3301      	adds	r3, #1
 8007084:	643b      	str	r3, [r7, #64]	@ 0x40
 8007086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007088:	2b03      	cmp	r3, #3
 800708a:	d9e2      	bls.n	8007052 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800708c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007090:	2b04      	cmp	r3, #4
 8007092:	d101      	bne.n	8007098 <find_volume+0x184>
 8007094:	2301      	movs	r3, #1
 8007096:	e17e      	b.n	8007396 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007098:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800709c:	2b01      	cmp	r3, #1
 800709e:	d901      	bls.n	80070a4 <find_volume+0x190>
 80070a0:	230d      	movs	r3, #13
 80070a2:	e178      	b.n	8007396 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a6:	3330      	adds	r3, #48	@ 0x30
 80070a8:	330b      	adds	r3, #11
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fc9c 	bl	80059e8 <ld_word>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070b6:	d001      	beq.n	80070bc <find_volume+0x1a8>
 80070b8:	230d      	movs	r3, #13
 80070ba:	e16c      	b.n	8007396 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070be:	3330      	adds	r3, #48	@ 0x30
 80070c0:	3316      	adds	r3, #22
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fc90 	bl	80059e8 <ld_word>
 80070c8:	4603      	mov	r3, r0
 80070ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80070cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <find_volume+0x1cc>
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	3330      	adds	r3, #48	@ 0x30
 80070d6:	3324      	adds	r3, #36	@ 0x24
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fc9d 	bl	8005a18 <ld_dword>
 80070de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80070e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80070e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80070f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f2:	789b      	ldrb	r3, [r3, #2]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d005      	beq.n	8007104 <find_volume+0x1f0>
 80070f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fa:	789b      	ldrb	r3, [r3, #2]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d001      	beq.n	8007104 <find_volume+0x1f0>
 8007100:	230d      	movs	r3, #13
 8007102:	e148      	b.n	8007396 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	789b      	ldrb	r3, [r3, #2]
 8007108:	461a      	mov	r2, r3
 800710a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007118:	461a      	mov	r2, r3
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	895b      	ldrh	r3, [r3, #10]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <find_volume+0x224>
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	895b      	ldrh	r3, [r3, #10]
 800712a:	461a      	mov	r2, r3
 800712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712e:	895b      	ldrh	r3, [r3, #10]
 8007130:	3b01      	subs	r3, #1
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <find_volume+0x228>
 8007138:	230d      	movs	r3, #13
 800713a:	e12c      	b.n	8007396 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	3330      	adds	r3, #48	@ 0x30
 8007140:	3311      	adds	r3, #17
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fc50 	bl	80059e8 <ld_word>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	891b      	ldrh	r3, [r3, #8]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <find_volume+0x24e>
 800715e:	230d      	movs	r3, #13
 8007160:	e119      	b.n	8007396 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	3330      	adds	r3, #48	@ 0x30
 8007166:	3313      	adds	r3, #19
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fc3d 	bl	80059e8 <ld_word>
 800716e:	4603      	mov	r3, r0
 8007170:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <find_volume+0x272>
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	3330      	adds	r3, #48	@ 0x30
 800717c:	3320      	adds	r3, #32
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc4a 	bl	8005a18 <ld_dword>
 8007184:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007188:	3330      	adds	r3, #48	@ 0x30
 800718a:	330e      	adds	r3, #14
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fc2b 	bl	80059e8 <ld_word>
 8007192:	4603      	mov	r3, r0
 8007194:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007196:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <find_volume+0x28c>
 800719c:	230d      	movs	r3, #13
 800719e:	e0fa      	b.n	8007396 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80071a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a4:	4413      	add	r3, r2
 80071a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071a8:	8912      	ldrh	r2, [r2, #8]
 80071aa:	0912      	lsrs	r2, r2, #4
 80071ac:	b292      	uxth	r2, r2
 80071ae:	4413      	add	r3, r2
 80071b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d204      	bcs.n	80071c4 <find_volume+0x2b0>
 80071ba:	230d      	movs	r3, #13
 80071bc:	e0eb      	b.n	8007396 <find_volume+0x482>
 80071be:	bf00      	nop
 80071c0:	2000065c 	.word	0x2000065c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80071c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071cc:	8952      	ldrh	r2, [r2, #10]
 80071ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <find_volume+0x2ca>
 80071da:	230d      	movs	r3, #13
 80071dc:	e0db      	b.n	8007396 <find_volume+0x482>
		fmt = FS_FAT32;
 80071de:	2303      	movs	r3, #3
 80071e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d802      	bhi.n	80071f4 <find_volume+0x2e0>
 80071ee:	2302      	movs	r3, #2
 80071f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d802      	bhi.n	8007204 <find_volume+0x2f0>
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	1c9a      	adds	r2, r3, #2
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007210:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007212:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007216:	441a      	add	r2, r3
 8007218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800721c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	441a      	add	r2, r3
 8007222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007224:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007226:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800722a:	2b03      	cmp	r3, #3
 800722c:	d11e      	bne.n	800726c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	3330      	adds	r3, #48	@ 0x30
 8007232:	332a      	adds	r3, #42	@ 0x2a
 8007234:	4618      	mov	r0, r3
 8007236:	f7fe fbd7 	bl	80059e8 <ld_word>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <find_volume+0x330>
 8007240:	230d      	movs	r3, #13
 8007242:	e0a8      	b.n	8007396 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <find_volume+0x33c>
 800724c:	230d      	movs	r3, #13
 800724e:	e0a2      	b.n	8007396 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	3330      	adds	r3, #48	@ 0x30
 8007254:	332c      	adds	r3, #44	@ 0x2c
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fbde 	bl	8005a18 <ld_dword>
 800725c:	4602      	mov	r2, r0
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	647b      	str	r3, [r7, #68]	@ 0x44
 800726a:	e01f      	b.n	80072ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	891b      	ldrh	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <find_volume+0x364>
 8007274:	230d      	movs	r3, #13
 8007276:	e08e      	b.n	8007396 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727a:	6a1a      	ldr	r2, [r3, #32]
 800727c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800727e:	441a      	add	r2, r3
 8007280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007282:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007284:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007288:	2b02      	cmp	r3, #2
 800728a:	d103      	bne.n	8007294 <find_volume+0x380>
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	e00a      	b.n	80072aa <find_volume+0x396>
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	4613      	mov	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	4413      	add	r3, r2
 800729e:	085a      	lsrs	r2, r3, #1
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072aa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	699a      	ldr	r2, [r3, #24]
 80072b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80072b6:	0a5b      	lsrs	r3, r3, #9
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d201      	bcs.n	80072c0 <find_volume+0x3ac>
 80072bc:	230d      	movs	r3, #13
 80072be:	e06a      	b.n	8007396 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	f04f 32ff 	mov.w	r2, #4294967295
 80072c6:	611a      	str	r2, [r3, #16]
 80072c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	2280      	movs	r2, #128	@ 0x80
 80072d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80072d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d149      	bne.n	8007372 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80072de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e0:	3330      	adds	r3, #48	@ 0x30
 80072e2:	3330      	adds	r3, #48	@ 0x30
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fb7f 	bl	80059e8 <ld_word>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d140      	bne.n	8007372 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80072f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f2:	3301      	adds	r3, #1
 80072f4:	4619      	mov	r1, r3
 80072f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80072f8:	f7fe fe26 	bl	8005f48 <move_window>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d137      	bne.n	8007372 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	2200      	movs	r2, #0
 8007306:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	3330      	adds	r3, #48	@ 0x30
 800730c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007310:	4618      	mov	r0, r3
 8007312:	f7fe fb69 	bl	80059e8 <ld_word>
 8007316:	4603      	mov	r3, r0
 8007318:	461a      	mov	r2, r3
 800731a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800731e:	429a      	cmp	r2, r3
 8007320:	d127      	bne.n	8007372 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	3330      	adds	r3, #48	@ 0x30
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fb76 	bl	8005a18 <ld_dword>
 800732c:	4603      	mov	r3, r0
 800732e:	4a1c      	ldr	r2, [pc, #112]	@ (80073a0 <find_volume+0x48c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d11e      	bne.n	8007372 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	3330      	adds	r3, #48	@ 0x30
 8007338:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fb6b 	bl	8005a18 <ld_dword>
 8007342:	4603      	mov	r3, r0
 8007344:	4a17      	ldr	r2, [pc, #92]	@ (80073a4 <find_volume+0x490>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d113      	bne.n	8007372 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	3330      	adds	r3, #48	@ 0x30
 800734e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fb60 	bl	8005a18 <ld_dword>
 8007358:	4602      	mov	r2, r0
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	3330      	adds	r3, #48	@ 0x30
 8007362:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fb56 	bl	8005a18 <ld_dword>
 800736c:	4602      	mov	r2, r0
 800736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007370:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007378:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800737a:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <find_volume+0x494>)
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	3301      	adds	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <find_volume+0x494>)
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <find_volume+0x494>)
 8007388:	881a      	ldrh	r2, [r3, #0]
 800738a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800738e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007390:	f7fe fd72 	bl	8005e78 <clear_lock>
#endif
	return FR_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3758      	adds	r7, #88	@ 0x58
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	41615252 	.word	0x41615252
 80073a4:	61417272 	.word	0x61417272
 80073a8:	20000660 	.word	0x20000660

080073ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80073b6:	2309      	movs	r3, #9
 80073b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01c      	beq.n	80073fa <validate+0x4e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d018      	beq.n	80073fa <validate+0x4e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d013      	beq.n	80073fa <validate+0x4e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	889a      	ldrh	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	88db      	ldrh	r3, [r3, #6]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d10c      	bne.n	80073fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fa5e 	bl	80058a8 <disk_status>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <validate+0x4e>
			res = FR_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <validate+0x5a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	e000      	b.n	8007408 <validate+0x5c>
 8007406:	2300      	movs	r3, #0
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	6013      	str	r3, [r2, #0]
	return res;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800742a:	f107 0310 	add.w	r3, r7, #16
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fcd5 	bl	8006dde <get_ldnumber>
 8007434:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	da01      	bge.n	8007440 <f_mount+0x28>
 800743c:	230b      	movs	r3, #11
 800743e:	e02b      	b.n	8007498 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007440:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <f_mount+0x88>)
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007448:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007450:	69b8      	ldr	r0, [r7, #24]
 8007452:	f7fe fd11 	bl	8005e78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	490d      	ldr	r1, [pc, #52]	@ (80074a0 <f_mount+0x88>)
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <f_mount+0x66>
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d001      	beq.n	8007482 <f_mount+0x6a>
 800747e:	2300      	movs	r3, #0
 8007480:	e00a      	b.n	8007498 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007482:	f107 010c 	add.w	r1, r7, #12
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	2200      	movs	r2, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fd41 	bl	8006f14 <find_volume>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007496:	7dfb      	ldrb	r3, [r7, #23]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	2000065c 	.word	0x2000065c

080074a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b098      	sub	sp, #96	@ 0x60
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <f_open+0x18>
 80074b8:	2309      	movs	r3, #9
 80074ba:	e1a9      	b.n	8007810 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80074c4:	79fa      	ldrb	r2, [r7, #7]
 80074c6:	f107 0110 	add.w	r1, r7, #16
 80074ca:	f107 0308 	add.w	r3, r7, #8
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fd20 	bl	8006f14 <find_volume>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80074da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f040 818d 	bne.w	80077fe <f_open+0x35a>
		dj.obj.fs = fs;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fc03 	bl	8006cfc <follow_path>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80074fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007500:	2b00      	cmp	r3, #0
 8007502:	d118      	bne.n	8007536 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007504:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007508:	b25b      	sxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	da03      	bge.n	8007516 <f_open+0x72>
				res = FR_INVALID_NAME;
 800750e:	2306      	movs	r3, #6
 8007510:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007514:	e00f      	b.n	8007536 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	2b01      	cmp	r3, #1
 800751a:	bf8c      	ite	hi
 800751c:	2301      	movhi	r3, #1
 800751e:	2300      	movls	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	f107 0314 	add.w	r3, r7, #20
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fb5c 	bl	8005be8 <chk_lock>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	f003 031c 	and.w	r3, r3, #28
 800753c:	2b00      	cmp	r3, #0
 800753e:	d07f      	beq.n	8007640 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007540:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d017      	beq.n	8007578 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007548:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800754c:	2b04      	cmp	r3, #4
 800754e:	d10e      	bne.n	800756e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007550:	f7fe fba6 	bl	8005ca0 <enq_lock>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d006      	beq.n	8007568 <f_open+0xc4>
 800755a:	f107 0314 	add.w	r3, r7, #20
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff fae7 	bl	8006b32 <dir_register>
 8007564:	4603      	mov	r3, r0
 8007566:	e000      	b.n	800756a <f_open+0xc6>
 8007568:	2312      	movs	r3, #18
 800756a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	f043 0308 	orr.w	r3, r3, #8
 8007574:	71fb      	strb	r3, [r7, #7]
 8007576:	e010      	b.n	800759a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007578:	7ebb      	ldrb	r3, [r7, #26]
 800757a:	f003 0311 	and.w	r3, r3, #17
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <f_open+0xe6>
					res = FR_DENIED;
 8007582:	2307      	movs	r3, #7
 8007584:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007588:	e007      	b.n	800759a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <f_open+0xf6>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800759a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d168      	bne.n	8007674 <f_open+0x1d0>
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d063      	beq.n	8007674 <f_open+0x1d0>
				dw = GET_FATTIME();
 80075ac:	f7fd fff6 	bl	800559c <get_fattime>
 80075b0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80075b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b4:	330e      	adds	r3, #14
 80075b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fa6b 	bl	8005a94 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80075be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c0:	3316      	adds	r3, #22
 80075c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fa65 	bl	8005a94 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075cc:	330b      	adds	r3, #11
 80075ce:	2220      	movs	r2, #32
 80075d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff f9b9 	bl	8006950 <ld_clust>
 80075de:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80075e4:	2200      	movs	r2, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff f9d1 	bl	800698e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80075ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ee:	331c      	adds	r3, #28
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fa4e 	bl	8005a94 <st_dword>
					fs->wflag = 1;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2201      	movs	r2, #1
 80075fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80075fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d037      	beq.n	8007674 <f_open+0x1d0>
						dw = fs->winsect;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	2200      	movs	r2, #0
 8007610:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fee4 	bl	80063e0 <remove_chain>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800761e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007622:	2b00      	cmp	r3, #0
 8007624:	d126      	bne.n	8007674 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fc8c 	bl	8005f48 <move_window>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800763a:	3a01      	subs	r2, #1
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e019      	b.n	8007674 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007640:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007644:	2b00      	cmp	r3, #0
 8007646:	d115      	bne.n	8007674 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007648:	7ebb      	ldrb	r3, [r7, #26]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007652:	2304      	movs	r3, #4
 8007654:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007658:	e00c      	b.n	8007674 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <f_open+0x1d0>
 8007664:	7ebb      	ldrb	r3, [r7, #26]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <f_open+0x1d0>
						res = FR_DENIED;
 800766e:	2307      	movs	r3, #7
 8007670:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007674:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007678:	2b00      	cmp	r3, #0
 800767a:	d126      	bne.n	80076ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007696:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	bf8c      	ite	hi
 80076a2:	2301      	movhi	r3, #1
 80076a4:	2300      	movls	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	f107 0314 	add.w	r3, r7, #20
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fb17 	bl	8005ce4 <inc_lock>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <f_open+0x226>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80076ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8095 	bne.w	80077fe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076d8:	4611      	mov	r1, r2
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff f938 	bl	8006950 <ld_clust>
 80076e0:	4602      	mov	r2, r0
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80076e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e8:	331c      	adds	r3, #28
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe f994 	bl	8005a18 <ld_dword>
 80076f0:	4602      	mov	r2, r0
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	88da      	ldrh	r2, [r3, #6]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	79fa      	ldrb	r2, [r7, #7]
 800770e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3330      	adds	r3, #48	@ 0x30
 8007726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe f9fe 	bl	8005b2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d060      	beq.n	80077fe <f_open+0x35a>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d05c      	beq.n	80077fe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	895b      	ldrh	r3, [r3, #10]
 8007750:	025b      	lsls	r3, r3, #9
 8007752:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007760:	e016      	b.n	8007790 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fca9 	bl	80060be <get_fat>
 800776c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800776e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007770:	2b01      	cmp	r3, #1
 8007772:	d802      	bhi.n	800777a <f_open+0x2d6>
 8007774:	2302      	movs	r3, #2
 8007776:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800777a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d102      	bne.n	8007788 <f_open+0x2e4>
 8007782:	2301      	movs	r3, #1
 8007784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007788:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800778a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007790:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <f_open+0x2fc>
 8007798:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800779a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800779c:	429a      	cmp	r2, r3
 800779e:	d8e0      	bhi.n	8007762 <f_open+0x2be>
				}
				fp->clust = clst;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80077a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d127      	bne.n	80077fe <f_open+0x35a>
 80077ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d022      	beq.n	80077fe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe fc5f 	bl	8006080 <clust2sect>
 80077c2:	6478      	str	r0, [r7, #68]	@ 0x44
 80077c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <f_open+0x32e>
						res = FR_INT_ERR;
 80077ca:	2302      	movs	r3, #2
 80077cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80077d0:	e015      	b.n	80077fe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80077d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077d4:	0a5a      	lsrs	r2, r3, #9
 80077d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d8:	441a      	add	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	7858      	ldrb	r0, [r3, #1]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	2301      	movs	r3, #1
 80077ee:	f7fe f89d 	bl	800592c <disk_read>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <f_open+0x35a>
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80077fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <f_open+0x368>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800780c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007810:	4618      	mov	r0, r3
 8007812:	3760      	adds	r7, #96	@ 0x60
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	@ 0x30
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f107 0210 	add.w	r2, r7, #16
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fdb7 	bl	80073ac <validate>
 800783e:	4603      	mov	r3, r0
 8007840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <f_write+0x44>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	7d5b      	ldrb	r3, [r3, #21]
 8007850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007854:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <f_write+0x4a>
 800785c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007860:	e14b      	b.n	8007afa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <f_write+0x5a>
 800786e:	2307      	movs	r3, #7
 8007870:	e143      	b.n	8007afa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	429a      	cmp	r2, r3
 8007880:	f080 812d 	bcs.w	8007ade <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	43db      	mvns	r3, r3
 800788a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800788c:	e127      	b.n	8007ade <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 80e3 	bne.w	8007a62 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	0a5b      	lsrs	r3, r3, #9
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	8952      	ldrh	r2, [r2, #10]
 80078a6:	3a01      	subs	r2, #1
 80078a8:	4013      	ands	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d143      	bne.n	800793a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10c      	bne.n	80078d4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11a      	bne.n	80078fc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fded 	bl	80064aa <create_chain>
 80078d0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80078d2:	e013      	b.n	80078fc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	4619      	mov	r1, r3
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7fe fe79 	bl	80065da <clmt_clust>
 80078e8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80078ea:	e007      	b.n	80078fc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fe fdd8 	bl	80064aa <create_chain>
 80078fa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80f2 	beq.w	8007ae8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	2b01      	cmp	r3, #1
 8007908:	d104      	bne.n	8007914 <f_write+0xfc>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2202      	movs	r2, #2
 800790e:	755a      	strb	r2, [r3, #21]
 8007910:	2302      	movs	r3, #2
 8007912:	e0f2      	b.n	8007afa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d104      	bne.n	8007926 <f_write+0x10e>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	755a      	strb	r2, [r3, #21]
 8007922:	2301      	movs	r3, #1
 8007924:	e0e9      	b.n	8007afa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <f_write+0x122>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007938:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	7d1b      	ldrb	r3, [r3, #20]
 800793e:	b25b      	sxtb	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	da18      	bge.n	8007976 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	7858      	ldrb	r0, [r3, #1]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a1a      	ldr	r2, [r3, #32]
 8007952:	2301      	movs	r3, #1
 8007954:	f7fe f80a 	bl	800596c <disk_write>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <f_write+0x150>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	755a      	strb	r2, [r3, #21]
 8007964:	2301      	movs	r3, #1
 8007966:	e0c8      	b.n	8007afa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	7d1b      	ldrb	r3, [r3, #20]
 800796c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007970:	b2da      	uxtb	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f7fe fb7e 	bl	8006080 <clust2sect>
 8007984:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <f_write+0x17e>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2202      	movs	r2, #2
 8007990:	755a      	strb	r2, [r3, #21]
 8007992:	2302      	movs	r3, #2
 8007994:	e0b1      	b.n	8007afa <f_write+0x2e2>
			sect += csect;
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	4413      	add	r3, r2
 800799c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	0a5b      	lsrs	r3, r3, #9
 80079a2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d03c      	beq.n	8007a24 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	4413      	add	r3, r2
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	8952      	ldrh	r2, [r2, #10]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d905      	bls.n	80079c4 <f_write+0x1ac>
					cc = fs->csize - csect;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	895b      	ldrh	r3, [r3, #10]
 80079bc:	461a      	mov	r2, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	7858      	ldrb	r0, [r3, #1]
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	f7fd ffcd 	bl	800596c <disk_write>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <f_write+0x1ca>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	755a      	strb	r2, [r3, #21]
 80079de:	2301      	movs	r3, #1
 80079e0:	e08b      	b.n	8007afa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a1a      	ldr	r2, [r3, #32]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d915      	bls.n	8007a1c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1a      	ldr	r2, [r3, #32]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	025b      	lsls	r3, r3, #9
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a08:	4619      	mov	r1, r3
 8007a0a:	f7fe f86f 	bl	8005aec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	7d1b      	ldrb	r3, [r3, #20]
 8007a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	025b      	lsls	r3, r3, #9
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007a22:	e03f      	b.n	8007aa4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d016      	beq.n	8007a5c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d210      	bcs.n	8007a5c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	7858      	ldrb	r0, [r3, #1]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a44:	2301      	movs	r3, #1
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	f7fd ff70 	bl	800592c <disk_read>
 8007a4c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	755a      	strb	r2, [r3, #21]
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e04e      	b.n	8007afa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d901      	bls.n	8007a7c <f_write+0x264>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	4413      	add	r3, r2
 8007a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a8e:	69f9      	ldr	r1, [r7, #28]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe f82b 	bl	8005aec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	7d1b      	ldrb	r3, [r3, #20]
 8007a9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa8:	4413      	add	r3, r2
 8007aaa:	61fb      	str	r3, [r7, #28]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	619a      	str	r2, [r3, #24]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	bf38      	it	cc
 8007ac4:	461a      	movcc	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad0:	441a      	add	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f47f aed4 	bne.w	800788e <f_write+0x76>
 8007ae6:	e000      	b.n	8007aea <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ae8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	7d1b      	ldrb	r3, [r3, #20]
 8007aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3730      	adds	r7, #48	@ 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f107 0208 	add.w	r2, r7, #8
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fc4a 	bl	80073ac <validate>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d168      	bne.n	8007bf4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7d1b      	ldrb	r3, [r3, #20]
 8007b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d062      	beq.n	8007bf4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	7d1b      	ldrb	r3, [r3, #20]
 8007b32:	b25b      	sxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da15      	bge.n	8007b64 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	7858      	ldrb	r0, [r3, #1]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1a      	ldr	r2, [r3, #32]
 8007b46:	2301      	movs	r3, #1
 8007b48:	f7fd ff10 	bl	800596c <disk_write>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <f_sync+0x54>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e04f      	b.n	8007bf6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7d1b      	ldrb	r3, [r3, #20]
 8007b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b64:	f7fd fd1a 	bl	800559c <get_fattime>
 8007b68:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7fe f9e8 	bl	8005f48 <move_window>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d138      	bne.n	8007bf4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	330b      	adds	r3, #11
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	330b      	adds	r3, #11
 8007b92:	f042 0220 	orr.w	r2, r2, #32
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	f7fe fef2 	bl	800698e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f103 021c 	add.w	r2, r3, #28
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fd ff6c 	bl	8005a94 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3316      	adds	r3, #22
 8007bc0:	6939      	ldr	r1, [r7, #16]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd ff66 	bl	8005a94 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3312      	adds	r3, #18
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fd ff45 	bl	8005a5e <st_word>
					fs->wflag = 1;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe f9e1 	bl	8005fa4 <sync_fs>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7d1b      	ldrb	r3, [r3, #20]
 8007bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff ff7b 	bl	8007b02 <f_sync>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d118      	bne.n	8007c48 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f107 0208 	add.w	r2, r7, #8
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fbc4 	bl	80073ac <validate>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe f8e4 	bl	8005e00 <dec_lock>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b090      	sub	sp, #64	@ 0x40
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	4611      	mov	r1, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fba1 	bl	80073ac <validate>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007c70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <f_lseek+0x2e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7d5b      	ldrb	r3, [r3, #21]
 8007c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007c80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <f_lseek+0x3c>
 8007c88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c8c:	e1e6      	b.n	800805c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 80d1 	beq.w	8007e3a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d15a      	bne.n	8007d56 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d03a      	beq.n	8007d36 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc2:	613b      	str	r3, [r7, #16]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	3302      	adds	r3, #2
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe f9ee 	bl	80060be <get_fat>
 8007ce2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d804      	bhi.n	8007cf4 <f_lseek+0xa2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	755a      	strb	r2, [r3, #21]
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e1b3      	b.n	800805c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d104      	bne.n	8007d06 <f_lseek+0xb4>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	755a      	strb	r2, [r3, #21]
 8007d02:	2301      	movs	r3, #1
 8007d04:	e1aa      	b.n	800805c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d0de      	beq.n	8007cce <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d809      	bhi.n	8007d2c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	1d1a      	adds	r2, r3, #4
 8007d1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d3c4      	bcc.n	8007cc0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d3c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d803      	bhi.n	8007d4e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	e184      	b.n	8008058 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007d4e:	2311      	movs	r3, #17
 8007d50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007d54:	e180      	b.n	8008058 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d902      	bls.n	8007d66 <f_lseek+0x114>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8172 	beq.w	8008058 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fe fc2d 	bl	80065da <clmt_clust>
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe f976 	bl	8006080 <clust2sect>
 8007d94:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <f_lseek+0x154>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	755a      	strb	r2, [r3, #21]
 8007da2:	2302      	movs	r3, #2
 8007da4:	e15a      	b.n	800805c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	0a5b      	lsrs	r3, r3, #9
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	8952      	ldrh	r2, [r2, #10]
 8007db0:	3a01      	subs	r2, #1
 8007db2:	4013      	ands	r3, r2
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4413      	add	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 8148 	beq.w	8008058 <f_lseek+0x406>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	f000 8142 	beq.w	8008058 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7d1b      	ldrb	r3, [r3, #20]
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da18      	bge.n	8007e10 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	7858      	ldrb	r0, [r3, #1]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	2301      	movs	r3, #1
 8007dee:	f7fd fdbd 	bl	800596c <disk_write>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <f_lseek+0x1b0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	755a      	strb	r2, [r3, #21]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e12c      	b.n	800805c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7d1b      	ldrb	r3, [r3, #20]
 8007e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	7858      	ldrb	r0, [r3, #1]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	f7fd fd85 	bl	800592c <disk_read>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <f_lseek+0x1e0>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	755a      	strb	r2, [r3, #21]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e114      	b.n	800805c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	621a      	str	r2, [r3, #32]
 8007e38:	e10e      	b.n	8008058 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d908      	bls.n	8007e56 <f_lseek+0x204>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	7d1b      	ldrb	r3, [r3, #20]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d102      	bne.n	8007e56 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e64:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80a7 	beq.w	8007fbc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	895b      	ldrh	r3, [r3, #10]
 8007e72:	025b      	lsls	r3, r3, #9
 8007e74:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01b      	beq.n	8007eb4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	1e5a      	subs	r2, r3, #1
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	1e59      	subs	r1, r3, #1
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d30f      	bcc.n	8007eb4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	1e5a      	subs	r2, r3, #1
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	425b      	negs	r3, r3
 8007e9c:	401a      	ands	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007eb2:	e022      	b.n	8007efa <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d119      	bne.n	8007ef4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fe faf0 	bl	80064aa <create_chain>
 8007eca:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d104      	bne.n	8007edc <f_lseek+0x28a>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	755a      	strb	r2, [r3, #21]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e0bf      	b.n	800805c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d104      	bne.n	8007eee <f_lseek+0x29c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	755a      	strb	r2, [r3, #21]
 8007eea:	2301      	movs	r3, #1
 8007eec:	e0b6      	b.n	800805c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ef2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ef8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d05d      	beq.n	8007fbc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007f00:	e03a      	b.n	8007f78 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	603b      	str	r3, [r7, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	441a      	add	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7d1b      	ldrb	r3, [r3, #20]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fabf 	bl	80064aa <create_chain>
 8007f2c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d108      	bne.n	8007f46 <f_lseek+0x2f4>
							ofs = 0; break;
 8007f34:	2300      	movs	r3, #0
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	e022      	b.n	8007f80 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe f8bd 	bl	80060be <get_fat>
 8007f44:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d104      	bne.n	8007f58 <f_lseek+0x306>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	755a      	strb	r2, [r3, #21]
 8007f54:	2301      	movs	r3, #1
 8007f56:	e081      	b.n	800805c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d904      	bls.n	8007f68 <f_lseek+0x316>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d304      	bcc.n	8007f72 <f_lseek+0x320>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	755a      	strb	r2, [r3, #21]
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e074      	b.n	800805c <f_lseek+0x40a>
					fp->clust = clst;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f76:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d8c0      	bhi.n	8007f02 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699a      	ldr	r2, [r3, #24]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	441a      	add	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d012      	beq.n	8007fbc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe f870 	bl	8006080 <clust2sect>
 8007fa0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <f_lseek+0x360>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	755a      	strb	r2, [r3, #21]
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e054      	b.n	800805c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	0a5b      	lsrs	r3, r3, #9
 8007fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fb8:	4413      	add	r3, r2
 8007fba:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d90a      	bls.n	8007fde <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7d1b      	ldrb	r3, [r3, #20]
 8007fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d036      	beq.n	8008058 <f_lseek+0x406>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d031      	beq.n	8008058 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	7d1b      	ldrb	r3, [r3, #20]
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	da18      	bge.n	8008030 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	7858      	ldrb	r0, [r3, #1]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	2301      	movs	r3, #1
 800800e:	f7fd fcad 	bl	800596c <disk_write>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <f_lseek+0x3d0>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	755a      	strb	r2, [r3, #21]
 800801e:	2301      	movs	r3, #1
 8008020:	e01c      	b.n	800805c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7d1b      	ldrb	r3, [r3, #20]
 8008026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800802a:	b2da      	uxtb	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	7858      	ldrb	r0, [r3, #1]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800803a:	2301      	movs	r3, #1
 800803c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800803e:	f7fd fc75 	bl	800592c <disk_read>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <f_lseek+0x400>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	755a      	strb	r2, [r3, #21]
 800804e:	2301      	movs	r3, #1
 8008050:	e004      	b.n	800805c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008056:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008058:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800805c:	4618      	mov	r0, r3
 800805e:	3740      	adds	r7, #64	@ 0x40
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b09e      	sub	sp, #120	@ 0x78
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008070:	f107 010c 	add.w	r1, r7, #12
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	2202      	movs	r2, #2
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe ff4b 	bl	8006f14 <find_volume>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008088:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 808e 	bne.w	80081ae <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fe2e 	bl	8006cfc <follow_path>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80080a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <f_unlink+0x5c>
 80080ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80080b2:	2102      	movs	r1, #2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fd97 	bl	8005be8 <chk_lock>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80080c0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d172      	bne.n	80081ae <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80080c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80080cc:	b25b      	sxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da03      	bge.n	80080da <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80080d2:	2306      	movs	r3, #6
 80080d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80080d8:	e008      	b.n	80080ec <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80080da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80080e6:	2307      	movs	r3, #7
 80080e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 80080ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d134      	bne.n	800815e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80080f8:	4611      	mov	r1, r2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fc28 	bl	8006950 <ld_clust>
 8008100:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008102:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008106:	f003 0310 	and.w	r3, r3, #16
 800810a:	2b00      	cmp	r3, #0
 800810c:	d027      	beq.n	800815e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008114:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fa90 	bl	8006642 <dir_sdi>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8008128:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800812c:	2b00      	cmp	r3, #0
 800812e:	d116      	bne.n	800815e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008130:	f107 0310 	add.w	r3, r7, #16
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fc49 	bl	80069ce <dir_read>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008142:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <f_unlink+0xec>
 800814a:	2307      	movs	r3, #7
 800814c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008150:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008154:	2b04      	cmp	r3, #4
 8008156:	d102      	bne.n	800815e <f_unlink+0xfa>
 8008158:	2300      	movs	r3, #0
 800815a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800815e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008162:	2b00      	cmp	r3, #0
 8008164:	d123      	bne.n	80081ae <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008166:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe fd13 	bl	8006b96 <dir_remove>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008176:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10c      	bne.n	8008198 <f_unlink+0x134>
 800817e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008184:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008188:	2200      	movs	r2, #0
 800818a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f927 	bl	80063e0 <remove_chain>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008198:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800819c:	2b00      	cmp	r3, #0
 800819e:	d106      	bne.n	80081ae <f_unlink+0x14a>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fd fefe 	bl	8005fa4 <sync_fs>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80081ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3778      	adds	r7, #120	@ 0x78
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	2b0a      	cmp	r3, #10
 80081ca:	d103      	bne.n	80081d4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80081cc:	210d      	movs	r1, #13
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fff3 	bl	80081ba <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	db25      	blt.n	800822c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	60fa      	str	r2, [r7, #12]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b3c      	cmp	r3, #60	@ 0x3c
 80081f2:	dd12      	ble.n	800821a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f103 010c 	add.w	r1, r3, #12
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	f107 0308 	add.w	r3, r7, #8
 8008204:	f7ff fb08 	bl	8007818 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d101      	bne.n	8008214 <putc_bfd+0x5a>
 8008210:	2300      	movs	r3, #0
 8008212:	e001      	b.n	8008218 <putc_bfd+0x5e>
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	609a      	str	r2, [r3, #8]
 800822a:	e000      	b.n	800822e <putc_bfd+0x74>
	if (i < 0) return;
 800822c:	bf00      	nop
}
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	db16      	blt.n	8008272 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f103 010c 	add.w	r1, r3, #12
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	461a      	mov	r2, r3
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	f7ff fade 	bl	8007818 <f_write>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d107      	bne.n	8008272 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4293      	cmp	r3, r2
 800826a:	d102      	bne.n	8008272 <putc_flush+0x3e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	e001      	b.n	8008276 <putc_flush+0x42>
	return EOF;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	609a      	str	r2, [r3, #8]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b096      	sub	sp, #88	@ 0x58
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80082b2:	f107 030c 	add.w	r3, r7, #12
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff ffe0 	bl	800827e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80082be:	e009      	b.n	80082d4 <f_puts+0x2c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff ff73 	bl	80081ba <putc_bfd>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f1      	bne.n	80082c0 <f_puts+0x18>
	return putc_flush(&pb);
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff ffa7 	bl	8008234 <putc_flush>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3758      	adds	r7, #88	@ 0x58
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008306:	4b1f      	ldr	r3, [pc, #124]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008308:	7a5b      	ldrb	r3, [r3, #9]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d131      	bne.n	8008374 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008310:	4b1c      	ldr	r3, [pc, #112]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008312:	7a5b      	ldrb	r3, [r3, #9]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	4b1a      	ldr	r3, [pc, #104]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 800831a:	2100      	movs	r1, #0
 800831c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800831e:	4b19      	ldr	r3, [pc, #100]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008320:	7a5b      	ldrb	r3, [r3, #9]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4a17      	ldr	r2, [pc, #92]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800832e:	4b15      	ldr	r3, [pc, #84]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008330:	7a5b      	ldrb	r3, [r3, #9]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008338:	4413      	add	r3, r2
 800833a:	79fa      	ldrb	r2, [r7, #7]
 800833c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800833e:	4b11      	ldr	r3, [pc, #68]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 8008340:	7a5b      	ldrb	r3, [r3, #9]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	b2d1      	uxtb	r1, r2
 8008348:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <FATFS_LinkDriverEx+0x94>)
 800834a:	7251      	strb	r1, [r2, #9]
 800834c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800834e:	7dbb      	ldrb	r3, [r7, #22]
 8008350:	3330      	adds	r3, #48	@ 0x30
 8008352:	b2da      	uxtb	r2, r3
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3301      	adds	r3, #1
 800835c:	223a      	movs	r2, #58	@ 0x3a
 800835e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3302      	adds	r3, #2
 8008364:	222f      	movs	r2, #47	@ 0x2f
 8008366:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3303      	adds	r3, #3
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000684 	.word	0x20000684

08008388 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008392:	2200      	movs	r2, #0
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ffaa 	bl	80082f0 <FATFS_LinkDriverEx>
 800839c:	4603      	mov	r3, r0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <sniprintf>:
 80083a8:	b40c      	push	{r2, r3}
 80083aa:	b530      	push	{r4, r5, lr}
 80083ac:	4b17      	ldr	r3, [pc, #92]	@ (800840c <sniprintf+0x64>)
 80083ae:	1e0c      	subs	r4, r1, #0
 80083b0:	681d      	ldr	r5, [r3, #0]
 80083b2:	b09d      	sub	sp, #116	@ 0x74
 80083b4:	da08      	bge.n	80083c8 <sniprintf+0x20>
 80083b6:	238b      	movs	r3, #139	@ 0x8b
 80083b8:	602b      	str	r3, [r5, #0]
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	b01d      	add	sp, #116	@ 0x74
 80083c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083c4:	b002      	add	sp, #8
 80083c6:	4770      	bx	lr
 80083c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083d0:	bf14      	ite	ne
 80083d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083d6:	4623      	moveq	r3, r4
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083e0:	9002      	str	r0, [sp, #8]
 80083e2:	9006      	str	r0, [sp, #24]
 80083e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083ea:	ab21      	add	r3, sp, #132	@ 0x84
 80083ec:	a902      	add	r1, sp, #8
 80083ee:	4628      	mov	r0, r5
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	f000 f995 	bl	8008720 <_svfiprintf_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	bfbc      	itt	lt
 80083fa:	238b      	movlt	r3, #139	@ 0x8b
 80083fc:	602b      	strlt	r3, [r5, #0]
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d0dd      	beq.n	80083be <sniprintf+0x16>
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e7d9      	b.n	80083be <sniprintf+0x16>
 800840a:	bf00      	nop
 800840c:	20000018 	.word	0x20000018

08008410 <memset>:
 8008410:	4402      	add	r2, r0
 8008412:	4603      	mov	r3, r0
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <__errno>:
 8008420:	4b01      	ldr	r3, [pc, #4]	@ (8008428 <__errno+0x8>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000018 	.word	0x20000018

0800842c <__libc_init_array>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4d0d      	ldr	r5, [pc, #52]	@ (8008464 <__libc_init_array+0x38>)
 8008430:	4c0d      	ldr	r4, [pc, #52]	@ (8008468 <__libc_init_array+0x3c>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	2600      	movs	r6, #0
 8008438:	42a6      	cmp	r6, r4
 800843a:	d109      	bne.n	8008450 <__libc_init_array+0x24>
 800843c:	4d0b      	ldr	r5, [pc, #44]	@ (800846c <__libc_init_array+0x40>)
 800843e:	4c0c      	ldr	r4, [pc, #48]	@ (8008470 <__libc_init_array+0x44>)
 8008440:	f000 fc66 	bl	8008d10 <_init>
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	2600      	movs	r6, #0
 800844a:	42a6      	cmp	r6, r4
 800844c:	d105      	bne.n	800845a <__libc_init_array+0x2e>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	f855 3b04 	ldr.w	r3, [r5], #4
 8008454:	4798      	blx	r3
 8008456:	3601      	adds	r6, #1
 8008458:	e7ee      	b.n	8008438 <__libc_init_array+0xc>
 800845a:	f855 3b04 	ldr.w	r3, [r5], #4
 800845e:	4798      	blx	r3
 8008460:	3601      	adds	r6, #1
 8008462:	e7f2      	b.n	800844a <__libc_init_array+0x1e>
 8008464:	08008e94 	.word	0x08008e94
 8008468:	08008e94 	.word	0x08008e94
 800846c:	08008e94 	.word	0x08008e94
 8008470:	08008e98 	.word	0x08008e98

08008474 <__retarget_lock_acquire_recursive>:
 8008474:	4770      	bx	lr

08008476 <__retarget_lock_release_recursive>:
 8008476:	4770      	bx	lr

08008478 <_free_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4605      	mov	r5, r0
 800847c:	2900      	cmp	r1, #0
 800847e:	d041      	beq.n	8008504 <_free_r+0x8c>
 8008480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008484:	1f0c      	subs	r4, r1, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	bfb8      	it	lt
 800848a:	18e4      	addlt	r4, r4, r3
 800848c:	f000 f8e0 	bl	8008650 <__malloc_lock>
 8008490:	4a1d      	ldr	r2, [pc, #116]	@ (8008508 <_free_r+0x90>)
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	b933      	cbnz	r3, 80084a4 <_free_r+0x2c>
 8008496:	6063      	str	r3, [r4, #4]
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	4628      	mov	r0, r5
 800849c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a0:	f000 b8dc 	b.w	800865c <__malloc_unlock>
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d908      	bls.n	80084ba <_free_r+0x42>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	1821      	adds	r1, r4, r0
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf01      	itttt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1809      	addeq	r1, r1, r0
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	e7ed      	b.n	8008496 <_free_r+0x1e>
 80084ba:	461a      	mov	r2, r3
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b10b      	cbz	r3, 80084c4 <_free_r+0x4c>
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d9fa      	bls.n	80084ba <_free_r+0x42>
 80084c4:	6811      	ldr	r1, [r2, #0]
 80084c6:	1850      	adds	r0, r2, r1
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d10b      	bne.n	80084e4 <_free_r+0x6c>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	4401      	add	r1, r0
 80084d0:	1850      	adds	r0, r2, r1
 80084d2:	4283      	cmp	r3, r0
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	d1e0      	bne.n	800849a <_free_r+0x22>
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	6053      	str	r3, [r2, #4]
 80084de:	4408      	add	r0, r1
 80084e0:	6010      	str	r0, [r2, #0]
 80084e2:	e7da      	b.n	800849a <_free_r+0x22>
 80084e4:	d902      	bls.n	80084ec <_free_r+0x74>
 80084e6:	230c      	movs	r3, #12
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	e7d6      	b.n	800849a <_free_r+0x22>
 80084ec:	6820      	ldr	r0, [r4, #0]
 80084ee:	1821      	adds	r1, r4, r0
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf04      	itt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	bf04      	itt	eq
 80084fc:	1809      	addeq	r1, r1, r0
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	6054      	str	r4, [r2, #4]
 8008502:	e7ca      	b.n	800849a <_free_r+0x22>
 8008504:	bd38      	pop	{r3, r4, r5, pc}
 8008506:	bf00      	nop
 8008508:	200007d4 	.word	0x200007d4

0800850c <sbrk_aligned>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4e0f      	ldr	r6, [pc, #60]	@ (800854c <sbrk_aligned+0x40>)
 8008510:	460c      	mov	r4, r1
 8008512:	6831      	ldr	r1, [r6, #0]
 8008514:	4605      	mov	r5, r0
 8008516:	b911      	cbnz	r1, 800851e <sbrk_aligned+0x12>
 8008518:	f000 fba6 	bl	8008c68 <_sbrk_r>
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 fba1 	bl	8008c68 <_sbrk_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d103      	bne.n	8008532 <sbrk_aligned+0x26>
 800852a:	f04f 34ff 	mov.w	r4, #4294967295
 800852e:	4620      	mov	r0, r4
 8008530:	bd70      	pop	{r4, r5, r6, pc}
 8008532:	1cc4      	adds	r4, r0, #3
 8008534:	f024 0403 	bic.w	r4, r4, #3
 8008538:	42a0      	cmp	r0, r4
 800853a:	d0f8      	beq.n	800852e <sbrk_aligned+0x22>
 800853c:	1a21      	subs	r1, r4, r0
 800853e:	4628      	mov	r0, r5
 8008540:	f000 fb92 	bl	8008c68 <_sbrk_r>
 8008544:	3001      	adds	r0, #1
 8008546:	d1f2      	bne.n	800852e <sbrk_aligned+0x22>
 8008548:	e7ef      	b.n	800852a <sbrk_aligned+0x1e>
 800854a:	bf00      	nop
 800854c:	200007d0 	.word	0x200007d0

08008550 <_malloc_r>:
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	1ccd      	adds	r5, r1, #3
 8008556:	f025 0503 	bic.w	r5, r5, #3
 800855a:	3508      	adds	r5, #8
 800855c:	2d0c      	cmp	r5, #12
 800855e:	bf38      	it	cc
 8008560:	250c      	movcc	r5, #12
 8008562:	2d00      	cmp	r5, #0
 8008564:	4606      	mov	r6, r0
 8008566:	db01      	blt.n	800856c <_malloc_r+0x1c>
 8008568:	42a9      	cmp	r1, r5
 800856a:	d904      	bls.n	8008576 <_malloc_r+0x26>
 800856c:	230c      	movs	r3, #12
 800856e:	6033      	str	r3, [r6, #0]
 8008570:	2000      	movs	r0, #0
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800864c <_malloc_r+0xfc>
 800857a:	f000 f869 	bl	8008650 <__malloc_lock>
 800857e:	f8d8 3000 	ldr.w	r3, [r8]
 8008582:	461c      	mov	r4, r3
 8008584:	bb44      	cbnz	r4, 80085d8 <_malloc_r+0x88>
 8008586:	4629      	mov	r1, r5
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff ffbf 	bl	800850c <sbrk_aligned>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	4604      	mov	r4, r0
 8008592:	d158      	bne.n	8008646 <_malloc_r+0xf6>
 8008594:	f8d8 4000 	ldr.w	r4, [r8]
 8008598:	4627      	mov	r7, r4
 800859a:	2f00      	cmp	r7, #0
 800859c:	d143      	bne.n	8008626 <_malloc_r+0xd6>
 800859e:	2c00      	cmp	r4, #0
 80085a0:	d04b      	beq.n	800863a <_malloc_r+0xea>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4639      	mov	r1, r7
 80085a6:	4630      	mov	r0, r6
 80085a8:	eb04 0903 	add.w	r9, r4, r3
 80085ac:	f000 fb5c 	bl	8008c68 <_sbrk_r>
 80085b0:	4581      	cmp	r9, r0
 80085b2:	d142      	bne.n	800863a <_malloc_r+0xea>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	1a6d      	subs	r5, r5, r1
 80085b8:	4629      	mov	r1, r5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff ffa6 	bl	800850c <sbrk_aligned>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d03a      	beq.n	800863a <_malloc_r+0xea>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	442b      	add	r3, r5
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	f8d8 3000 	ldr.w	r3, [r8]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	bb62      	cbnz	r2, 800862c <_malloc_r+0xdc>
 80085d2:	f8c8 7000 	str.w	r7, [r8]
 80085d6:	e00f      	b.n	80085f8 <_malloc_r+0xa8>
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	1b52      	subs	r2, r2, r5
 80085dc:	d420      	bmi.n	8008620 <_malloc_r+0xd0>
 80085de:	2a0b      	cmp	r2, #11
 80085e0:	d917      	bls.n	8008612 <_malloc_r+0xc2>
 80085e2:	1961      	adds	r1, r4, r5
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	6025      	str	r5, [r4, #0]
 80085e8:	bf18      	it	ne
 80085ea:	6059      	strne	r1, [r3, #4]
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	bf08      	it	eq
 80085f0:	f8c8 1000 	streq.w	r1, [r8]
 80085f4:	5162      	str	r2, [r4, r5]
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	4630      	mov	r0, r6
 80085fa:	f000 f82f 	bl	800865c <__malloc_unlock>
 80085fe:	f104 000b 	add.w	r0, r4, #11
 8008602:	1d23      	adds	r3, r4, #4
 8008604:	f020 0007 	bic.w	r0, r0, #7
 8008608:	1ac2      	subs	r2, r0, r3
 800860a:	bf1c      	itt	ne
 800860c:	1a1b      	subne	r3, r3, r0
 800860e:	50a3      	strne	r3, [r4, r2]
 8008610:	e7af      	b.n	8008572 <_malloc_r+0x22>
 8008612:	6862      	ldr	r2, [r4, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	bf0c      	ite	eq
 8008618:	f8c8 2000 	streq.w	r2, [r8]
 800861c:	605a      	strne	r2, [r3, #4]
 800861e:	e7eb      	b.n	80085f8 <_malloc_r+0xa8>
 8008620:	4623      	mov	r3, r4
 8008622:	6864      	ldr	r4, [r4, #4]
 8008624:	e7ae      	b.n	8008584 <_malloc_r+0x34>
 8008626:	463c      	mov	r4, r7
 8008628:	687f      	ldr	r7, [r7, #4]
 800862a:	e7b6      	b.n	800859a <_malloc_r+0x4a>
 800862c:	461a      	mov	r2, r3
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	42a3      	cmp	r3, r4
 8008632:	d1fb      	bne.n	800862c <_malloc_r+0xdc>
 8008634:	2300      	movs	r3, #0
 8008636:	6053      	str	r3, [r2, #4]
 8008638:	e7de      	b.n	80085f8 <_malloc_r+0xa8>
 800863a:	230c      	movs	r3, #12
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f80c 	bl	800865c <__malloc_unlock>
 8008644:	e794      	b.n	8008570 <_malloc_r+0x20>
 8008646:	6005      	str	r5, [r0, #0]
 8008648:	e7d6      	b.n	80085f8 <_malloc_r+0xa8>
 800864a:	bf00      	nop
 800864c:	200007d4 	.word	0x200007d4

08008650 <__malloc_lock>:
 8008650:	4801      	ldr	r0, [pc, #4]	@ (8008658 <__malloc_lock+0x8>)
 8008652:	f7ff bf0f 	b.w	8008474 <__retarget_lock_acquire_recursive>
 8008656:	bf00      	nop
 8008658:	200007cc 	.word	0x200007cc

0800865c <__malloc_unlock>:
 800865c:	4801      	ldr	r0, [pc, #4]	@ (8008664 <__malloc_unlock+0x8>)
 800865e:	f7ff bf0a 	b.w	8008476 <__retarget_lock_release_recursive>
 8008662:	bf00      	nop
 8008664:	200007cc 	.word	0x200007cc

08008668 <__ssputs_r>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	688e      	ldr	r6, [r1, #8]
 800866e:	461f      	mov	r7, r3
 8008670:	42be      	cmp	r6, r7
 8008672:	680b      	ldr	r3, [r1, #0]
 8008674:	4682      	mov	sl, r0
 8008676:	460c      	mov	r4, r1
 8008678:	4690      	mov	r8, r2
 800867a:	d82d      	bhi.n	80086d8 <__ssputs_r+0x70>
 800867c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008680:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008684:	d026      	beq.n	80086d4 <__ssputs_r+0x6c>
 8008686:	6965      	ldr	r5, [r4, #20]
 8008688:	6909      	ldr	r1, [r1, #16]
 800868a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800868e:	eba3 0901 	sub.w	r9, r3, r1
 8008692:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008696:	1c7b      	adds	r3, r7, #1
 8008698:	444b      	add	r3, r9
 800869a:	106d      	asrs	r5, r5, #1
 800869c:	429d      	cmp	r5, r3
 800869e:	bf38      	it	cc
 80086a0:	461d      	movcc	r5, r3
 80086a2:	0553      	lsls	r3, r2, #21
 80086a4:	d527      	bpl.n	80086f6 <__ssputs_r+0x8e>
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7ff ff52 	bl	8008550 <_malloc_r>
 80086ac:	4606      	mov	r6, r0
 80086ae:	b360      	cbz	r0, 800870a <__ssputs_r+0xa2>
 80086b0:	6921      	ldr	r1, [r4, #16]
 80086b2:	464a      	mov	r2, r9
 80086b4:	f000 fae8 	bl	8008c88 <memcpy>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	6126      	str	r6, [r4, #16]
 80086c6:	6165      	str	r5, [r4, #20]
 80086c8:	444e      	add	r6, r9
 80086ca:	eba5 0509 	sub.w	r5, r5, r9
 80086ce:	6026      	str	r6, [r4, #0]
 80086d0:	60a5      	str	r5, [r4, #8]
 80086d2:	463e      	mov	r6, r7
 80086d4:	42be      	cmp	r6, r7
 80086d6:	d900      	bls.n	80086da <__ssputs_r+0x72>
 80086d8:	463e      	mov	r6, r7
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	4632      	mov	r2, r6
 80086de:	4641      	mov	r1, r8
 80086e0:	f000 faa8 	bl	8008c34 <memmove>
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	1b9b      	subs	r3, r3, r6
 80086e8:	60a3      	str	r3, [r4, #8]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	4433      	add	r3, r6
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	2000      	movs	r0, #0
 80086f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f6:	462a      	mov	r2, r5
 80086f8:	f000 fad4 	bl	8008ca4 <_realloc_r>
 80086fc:	4606      	mov	r6, r0
 80086fe:	2800      	cmp	r0, #0
 8008700:	d1e0      	bne.n	80086c4 <__ssputs_r+0x5c>
 8008702:	6921      	ldr	r1, [r4, #16]
 8008704:	4650      	mov	r0, sl
 8008706:	f7ff feb7 	bl	8008478 <_free_r>
 800870a:	230c      	movs	r3, #12
 800870c:	f8ca 3000 	str.w	r3, [sl]
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	e7e9      	b.n	80086f2 <__ssputs_r+0x8a>
	...

08008720 <_svfiprintf_r>:
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	4698      	mov	r8, r3
 8008726:	898b      	ldrh	r3, [r1, #12]
 8008728:	061b      	lsls	r3, r3, #24
 800872a:	b09d      	sub	sp, #116	@ 0x74
 800872c:	4607      	mov	r7, r0
 800872e:	460d      	mov	r5, r1
 8008730:	4614      	mov	r4, r2
 8008732:	d510      	bpl.n	8008756 <_svfiprintf_r+0x36>
 8008734:	690b      	ldr	r3, [r1, #16]
 8008736:	b973      	cbnz	r3, 8008756 <_svfiprintf_r+0x36>
 8008738:	2140      	movs	r1, #64	@ 0x40
 800873a:	f7ff ff09 	bl	8008550 <_malloc_r>
 800873e:	6028      	str	r0, [r5, #0]
 8008740:	6128      	str	r0, [r5, #16]
 8008742:	b930      	cbnz	r0, 8008752 <_svfiprintf_r+0x32>
 8008744:	230c      	movs	r3, #12
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	b01d      	add	sp, #116	@ 0x74
 800874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008752:	2340      	movs	r3, #64	@ 0x40
 8008754:	616b      	str	r3, [r5, #20]
 8008756:	2300      	movs	r3, #0
 8008758:	9309      	str	r3, [sp, #36]	@ 0x24
 800875a:	2320      	movs	r3, #32
 800875c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008760:	f8cd 800c 	str.w	r8, [sp, #12]
 8008764:	2330      	movs	r3, #48	@ 0x30
 8008766:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008904 <_svfiprintf_r+0x1e4>
 800876a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800876e:	f04f 0901 	mov.w	r9, #1
 8008772:	4623      	mov	r3, r4
 8008774:	469a      	mov	sl, r3
 8008776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877a:	b10a      	cbz	r2, 8008780 <_svfiprintf_r+0x60>
 800877c:	2a25      	cmp	r2, #37	@ 0x25
 800877e:	d1f9      	bne.n	8008774 <_svfiprintf_r+0x54>
 8008780:	ebba 0b04 	subs.w	fp, sl, r4
 8008784:	d00b      	beq.n	800879e <_svfiprintf_r+0x7e>
 8008786:	465b      	mov	r3, fp
 8008788:	4622      	mov	r2, r4
 800878a:	4629      	mov	r1, r5
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff ff6b 	bl	8008668 <__ssputs_r>
 8008792:	3001      	adds	r0, #1
 8008794:	f000 80a7 	beq.w	80088e6 <_svfiprintf_r+0x1c6>
 8008798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800879a:	445a      	add	r2, fp
 800879c:	9209      	str	r2, [sp, #36]	@ 0x24
 800879e:	f89a 3000 	ldrb.w	r3, [sl]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 809f 	beq.w	80088e6 <_svfiprintf_r+0x1c6>
 80087a8:	2300      	movs	r3, #0
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295
 80087ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b2:	f10a 0a01 	add.w	sl, sl, #1
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	9307      	str	r3, [sp, #28]
 80087ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087be:	931a      	str	r3, [sp, #104]	@ 0x68
 80087c0:	4654      	mov	r4, sl
 80087c2:	2205      	movs	r2, #5
 80087c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c8:	484e      	ldr	r0, [pc, #312]	@ (8008904 <_svfiprintf_r+0x1e4>)
 80087ca:	f7f7 fd09 	bl	80001e0 <memchr>
 80087ce:	9a04      	ldr	r2, [sp, #16]
 80087d0:	b9d8      	cbnz	r0, 800880a <_svfiprintf_r+0xea>
 80087d2:	06d0      	lsls	r0, r2, #27
 80087d4:	bf44      	itt	mi
 80087d6:	2320      	movmi	r3, #32
 80087d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087dc:	0711      	lsls	r1, r2, #28
 80087de:	bf44      	itt	mi
 80087e0:	232b      	movmi	r3, #43	@ 0x2b
 80087e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e6:	f89a 3000 	ldrb.w	r3, [sl]
 80087ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ec:	d015      	beq.n	800881a <_svfiprintf_r+0xfa>
 80087ee:	9a07      	ldr	r2, [sp, #28]
 80087f0:	4654      	mov	r4, sl
 80087f2:	2000      	movs	r0, #0
 80087f4:	f04f 0c0a 	mov.w	ip, #10
 80087f8:	4621      	mov	r1, r4
 80087fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fe:	3b30      	subs	r3, #48	@ 0x30
 8008800:	2b09      	cmp	r3, #9
 8008802:	d94b      	bls.n	800889c <_svfiprintf_r+0x17c>
 8008804:	b1b0      	cbz	r0, 8008834 <_svfiprintf_r+0x114>
 8008806:	9207      	str	r2, [sp, #28]
 8008808:	e014      	b.n	8008834 <_svfiprintf_r+0x114>
 800880a:	eba0 0308 	sub.w	r3, r0, r8
 800880e:	fa09 f303 	lsl.w	r3, r9, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	46a2      	mov	sl, r4
 8008818:	e7d2      	b.n	80087c0 <_svfiprintf_r+0xa0>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfbb      	ittet	lt
 8008826:	425b      	neglt	r3, r3
 8008828:	f042 0202 	orrlt.w	r2, r2, #2
 800882c:	9307      	strge	r3, [sp, #28]
 800882e:	9307      	strlt	r3, [sp, #28]
 8008830:	bfb8      	it	lt
 8008832:	9204      	strlt	r2, [sp, #16]
 8008834:	7823      	ldrb	r3, [r4, #0]
 8008836:	2b2e      	cmp	r3, #46	@ 0x2e
 8008838:	d10a      	bne.n	8008850 <_svfiprintf_r+0x130>
 800883a:	7863      	ldrb	r3, [r4, #1]
 800883c:	2b2a      	cmp	r3, #42	@ 0x2a
 800883e:	d132      	bne.n	80088a6 <_svfiprintf_r+0x186>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9203      	str	r2, [sp, #12]
 8008848:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800884c:	3402      	adds	r4, #2
 800884e:	9305      	str	r3, [sp, #20]
 8008850:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008914 <_svfiprintf_r+0x1f4>
 8008854:	7821      	ldrb	r1, [r4, #0]
 8008856:	2203      	movs	r2, #3
 8008858:	4650      	mov	r0, sl
 800885a:	f7f7 fcc1 	bl	80001e0 <memchr>
 800885e:	b138      	cbz	r0, 8008870 <_svfiprintf_r+0x150>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	eba0 000a 	sub.w	r0, r0, sl
 8008866:	2240      	movs	r2, #64	@ 0x40
 8008868:	4082      	lsls	r2, r0
 800886a:	4313      	orrs	r3, r2
 800886c:	3401      	adds	r4, #1
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008874:	4824      	ldr	r0, [pc, #144]	@ (8008908 <_svfiprintf_r+0x1e8>)
 8008876:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800887a:	2206      	movs	r2, #6
 800887c:	f7f7 fcb0 	bl	80001e0 <memchr>
 8008880:	2800      	cmp	r0, #0
 8008882:	d036      	beq.n	80088f2 <_svfiprintf_r+0x1d2>
 8008884:	4b21      	ldr	r3, [pc, #132]	@ (800890c <_svfiprintf_r+0x1ec>)
 8008886:	bb1b      	cbnz	r3, 80088d0 <_svfiprintf_r+0x1b0>
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	3307      	adds	r3, #7
 800888c:	f023 0307 	bic.w	r3, r3, #7
 8008890:	3308      	adds	r3, #8
 8008892:	9303      	str	r3, [sp, #12]
 8008894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008896:	4433      	add	r3, r6
 8008898:	9309      	str	r3, [sp, #36]	@ 0x24
 800889a:	e76a      	b.n	8008772 <_svfiprintf_r+0x52>
 800889c:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a0:	460c      	mov	r4, r1
 80088a2:	2001      	movs	r0, #1
 80088a4:	e7a8      	b.n	80087f8 <_svfiprintf_r+0xd8>
 80088a6:	2300      	movs	r3, #0
 80088a8:	3401      	adds	r4, #1
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	4619      	mov	r1, r3
 80088ae:	f04f 0c0a 	mov.w	ip, #10
 80088b2:	4620      	mov	r0, r4
 80088b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b8:	3a30      	subs	r2, #48	@ 0x30
 80088ba:	2a09      	cmp	r2, #9
 80088bc:	d903      	bls.n	80088c6 <_svfiprintf_r+0x1a6>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0c6      	beq.n	8008850 <_svfiprintf_r+0x130>
 80088c2:	9105      	str	r1, [sp, #20]
 80088c4:	e7c4      	b.n	8008850 <_svfiprintf_r+0x130>
 80088c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ca:	4604      	mov	r4, r0
 80088cc:	2301      	movs	r3, #1
 80088ce:	e7f0      	b.n	80088b2 <_svfiprintf_r+0x192>
 80088d0:	ab03      	add	r3, sp, #12
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008910 <_svfiprintf_r+0x1f0>)
 80088d8:	a904      	add	r1, sp, #16
 80088da:	4638      	mov	r0, r7
 80088dc:	f3af 8000 	nop.w
 80088e0:	1c42      	adds	r2, r0, #1
 80088e2:	4606      	mov	r6, r0
 80088e4:	d1d6      	bne.n	8008894 <_svfiprintf_r+0x174>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	065b      	lsls	r3, r3, #25
 80088ea:	f53f af2d 	bmi.w	8008748 <_svfiprintf_r+0x28>
 80088ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f0:	e72c      	b.n	800874c <_svfiprintf_r+0x2c>
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	462a      	mov	r2, r5
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <_svfiprintf_r+0x1f0>)
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	4638      	mov	r0, r7
 80088fe:	f000 f879 	bl	80089f4 <_printf_i>
 8008902:	e7ed      	b.n	80088e0 <_svfiprintf_r+0x1c0>
 8008904:	08008e58 	.word	0x08008e58
 8008908:	08008e62 	.word	0x08008e62
 800890c:	00000000 	.word	0x00000000
 8008910:	08008669 	.word	0x08008669
 8008914:	08008e5e 	.word	0x08008e5e

08008918 <_printf_common>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	4616      	mov	r6, r2
 800891e:	4698      	mov	r8, r3
 8008920:	688a      	ldr	r2, [r1, #8]
 8008922:	690b      	ldr	r3, [r1, #16]
 8008924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008928:	4293      	cmp	r3, r2
 800892a:	bfb8      	it	lt
 800892c:	4613      	movlt	r3, r2
 800892e:	6033      	str	r3, [r6, #0]
 8008930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008934:	4607      	mov	r7, r0
 8008936:	460c      	mov	r4, r1
 8008938:	b10a      	cbz	r2, 800893e <_printf_common+0x26>
 800893a:	3301      	adds	r3, #1
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	0699      	lsls	r1, r3, #26
 8008942:	bf42      	ittt	mi
 8008944:	6833      	ldrmi	r3, [r6, #0]
 8008946:	3302      	addmi	r3, #2
 8008948:	6033      	strmi	r3, [r6, #0]
 800894a:	6825      	ldr	r5, [r4, #0]
 800894c:	f015 0506 	ands.w	r5, r5, #6
 8008950:	d106      	bne.n	8008960 <_printf_common+0x48>
 8008952:	f104 0a19 	add.w	sl, r4, #25
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	6832      	ldr	r2, [r6, #0]
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	42ab      	cmp	r3, r5
 800895e:	dc26      	bgt.n	80089ae <_printf_common+0x96>
 8008960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	3b00      	subs	r3, #0
 8008968:	bf18      	it	ne
 800896a:	2301      	movne	r3, #1
 800896c:	0692      	lsls	r2, r2, #26
 800896e:	d42b      	bmi.n	80089c8 <_printf_common+0xb0>
 8008970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008974:	4641      	mov	r1, r8
 8008976:	4638      	mov	r0, r7
 8008978:	47c8      	blx	r9
 800897a:	3001      	adds	r0, #1
 800897c:	d01e      	beq.n	80089bc <_printf_common+0xa4>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	6922      	ldr	r2, [r4, #16]
 8008982:	f003 0306 	and.w	r3, r3, #6
 8008986:	2b04      	cmp	r3, #4
 8008988:	bf02      	ittt	eq
 800898a:	68e5      	ldreq	r5, [r4, #12]
 800898c:	6833      	ldreq	r3, [r6, #0]
 800898e:	1aed      	subeq	r5, r5, r3
 8008990:	68a3      	ldr	r3, [r4, #8]
 8008992:	bf0c      	ite	eq
 8008994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008998:	2500      	movne	r5, #0
 800899a:	4293      	cmp	r3, r2
 800899c:	bfc4      	itt	gt
 800899e:	1a9b      	subgt	r3, r3, r2
 80089a0:	18ed      	addgt	r5, r5, r3
 80089a2:	2600      	movs	r6, #0
 80089a4:	341a      	adds	r4, #26
 80089a6:	42b5      	cmp	r5, r6
 80089a8:	d11a      	bne.n	80089e0 <_printf_common+0xc8>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e008      	b.n	80089c0 <_printf_common+0xa8>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4652      	mov	r2, sl
 80089b2:	4641      	mov	r1, r8
 80089b4:	4638      	mov	r0, r7
 80089b6:	47c8      	blx	r9
 80089b8:	3001      	adds	r0, #1
 80089ba:	d103      	bne.n	80089c4 <_printf_common+0xac>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c4:	3501      	adds	r5, #1
 80089c6:	e7c6      	b.n	8008956 <_printf_common+0x3e>
 80089c8:	18e1      	adds	r1, r4, r3
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	2030      	movs	r0, #48	@ 0x30
 80089ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089d2:	4422      	add	r2, r4
 80089d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089dc:	3302      	adds	r3, #2
 80089de:	e7c7      	b.n	8008970 <_printf_common+0x58>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4622      	mov	r2, r4
 80089e4:	4641      	mov	r1, r8
 80089e6:	4638      	mov	r0, r7
 80089e8:	47c8      	blx	r9
 80089ea:	3001      	adds	r0, #1
 80089ec:	d0e6      	beq.n	80089bc <_printf_common+0xa4>
 80089ee:	3601      	adds	r6, #1
 80089f0:	e7d9      	b.n	80089a6 <_printf_common+0x8e>
	...

080089f4 <_printf_i>:
 80089f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	7e0f      	ldrb	r7, [r1, #24]
 80089fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089fc:	2f78      	cmp	r7, #120	@ 0x78
 80089fe:	4691      	mov	r9, r2
 8008a00:	4680      	mov	r8, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	469a      	mov	sl, r3
 8008a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a0a:	d807      	bhi.n	8008a1c <_printf_i+0x28>
 8008a0c:	2f62      	cmp	r7, #98	@ 0x62
 8008a0e:	d80a      	bhi.n	8008a26 <_printf_i+0x32>
 8008a10:	2f00      	cmp	r7, #0
 8008a12:	f000 80d2 	beq.w	8008bba <_printf_i+0x1c6>
 8008a16:	2f58      	cmp	r7, #88	@ 0x58
 8008a18:	f000 80b9 	beq.w	8008b8e <_printf_i+0x19a>
 8008a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a24:	e03a      	b.n	8008a9c <_printf_i+0xa8>
 8008a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a2a:	2b15      	cmp	r3, #21
 8008a2c:	d8f6      	bhi.n	8008a1c <_printf_i+0x28>
 8008a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a34 <_printf_i+0x40>)
 8008a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008a1d 	.word	0x08008a1d
 8008a40:	08008a1d 	.word	0x08008a1d
 8008a44:	08008a1d 	.word	0x08008a1d
 8008a48:	08008a1d 	.word	0x08008a1d
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008a1d 	.word	0x08008a1d
 8008a54:	08008a1d 	.word	0x08008a1d
 8008a58:	08008a1d 	.word	0x08008a1d
 8008a5c:	08008a1d 	.word	0x08008a1d
 8008a60:	08008ba1 	.word	0x08008ba1
 8008a64:	08008acb 	.word	0x08008acb
 8008a68:	08008b5b 	.word	0x08008b5b
 8008a6c:	08008a1d 	.word	0x08008a1d
 8008a70:	08008a1d 	.word	0x08008a1d
 8008a74:	08008bc3 	.word	0x08008bc3
 8008a78:	08008a1d 	.word	0x08008a1d
 8008a7c:	08008acb 	.word	0x08008acb
 8008a80:	08008a1d 	.word	0x08008a1d
 8008a84:	08008a1d 	.word	0x08008a1d
 8008a88:	08008b63 	.word	0x08008b63
 8008a8c:	6833      	ldr	r3, [r6, #0]
 8008a8e:	1d1a      	adds	r2, r3, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6032      	str	r2, [r6, #0]
 8008a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e09d      	b.n	8008bdc <_printf_i+0x1e8>
 8008aa0:	6833      	ldr	r3, [r6, #0]
 8008aa2:	6820      	ldr	r0, [r4, #0]
 8008aa4:	1d19      	adds	r1, r3, #4
 8008aa6:	6031      	str	r1, [r6, #0]
 8008aa8:	0606      	lsls	r6, r0, #24
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0xbc>
 8008aac:	681d      	ldr	r5, [r3, #0]
 8008aae:	e003      	b.n	8008ab8 <_printf_i+0xc4>
 8008ab0:	0645      	lsls	r5, r0, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0xb8>
 8008ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	da03      	bge.n	8008ac4 <_printf_i+0xd0>
 8008abc:	232d      	movs	r3, #45	@ 0x2d
 8008abe:	426d      	negs	r5, r5
 8008ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ac4:	4859      	ldr	r0, [pc, #356]	@ (8008c2c <_printf_i+0x238>)
 8008ac6:	230a      	movs	r3, #10
 8008ac8:	e011      	b.n	8008aee <_printf_i+0xfa>
 8008aca:	6821      	ldr	r1, [r4, #0]
 8008acc:	6833      	ldr	r3, [r6, #0]
 8008ace:	0608      	lsls	r0, r1, #24
 8008ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ad4:	d402      	bmi.n	8008adc <_printf_i+0xe8>
 8008ad6:	0649      	lsls	r1, r1, #25
 8008ad8:	bf48      	it	mi
 8008ada:	b2ad      	uxthmi	r5, r5
 8008adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ade:	4853      	ldr	r0, [pc, #332]	@ (8008c2c <_printf_i+0x238>)
 8008ae0:	6033      	str	r3, [r6, #0]
 8008ae2:	bf14      	ite	ne
 8008ae4:	230a      	movne	r3, #10
 8008ae6:	2308      	moveq	r3, #8
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aee:	6866      	ldr	r6, [r4, #4]
 8008af0:	60a6      	str	r6, [r4, #8]
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	bfa2      	ittt	ge
 8008af6:	6821      	ldrge	r1, [r4, #0]
 8008af8:	f021 0104 	bicge.w	r1, r1, #4
 8008afc:	6021      	strge	r1, [r4, #0]
 8008afe:	b90d      	cbnz	r5, 8008b04 <_printf_i+0x110>
 8008b00:	2e00      	cmp	r6, #0
 8008b02:	d04b      	beq.n	8008b9c <_printf_i+0x1a8>
 8008b04:	4616      	mov	r6, r2
 8008b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008b0e:	5dc7      	ldrb	r7, [r0, r7]
 8008b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b14:	462f      	mov	r7, r5
 8008b16:	42bb      	cmp	r3, r7
 8008b18:	460d      	mov	r5, r1
 8008b1a:	d9f4      	bls.n	8008b06 <_printf_i+0x112>
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d10b      	bne.n	8008b38 <_printf_i+0x144>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07df      	lsls	r7, r3, #31
 8008b24:	d508      	bpl.n	8008b38 <_printf_i+0x144>
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	6861      	ldr	r1, [r4, #4]
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	bfde      	ittt	le
 8008b2e:	2330      	movle	r3, #48	@ 0x30
 8008b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b38:	1b92      	subs	r2, r2, r6
 8008b3a:	6122      	str	r2, [r4, #16]
 8008b3c:	f8cd a000 	str.w	sl, [sp]
 8008b40:	464b      	mov	r3, r9
 8008b42:	aa03      	add	r2, sp, #12
 8008b44:	4621      	mov	r1, r4
 8008b46:	4640      	mov	r0, r8
 8008b48:	f7ff fee6 	bl	8008918 <_printf_common>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d14a      	bne.n	8008be6 <_printf_i+0x1f2>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	b004      	add	sp, #16
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	f043 0320 	orr.w	r3, r3, #32
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	4833      	ldr	r0, [pc, #204]	@ (8008c30 <_printf_i+0x23c>)
 8008b64:	2778      	movs	r7, #120	@ 0x78
 8008b66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	6831      	ldr	r1, [r6, #0]
 8008b6e:	061f      	lsls	r7, r3, #24
 8008b70:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b74:	d402      	bmi.n	8008b7c <_printf_i+0x188>
 8008b76:	065f      	lsls	r7, r3, #25
 8008b78:	bf48      	it	mi
 8008b7a:	b2ad      	uxthmi	r5, r5
 8008b7c:	6031      	str	r1, [r6, #0]
 8008b7e:	07d9      	lsls	r1, r3, #31
 8008b80:	bf44      	itt	mi
 8008b82:	f043 0320 	orrmi.w	r3, r3, #32
 8008b86:	6023      	strmi	r3, [r4, #0]
 8008b88:	b11d      	cbz	r5, 8008b92 <_printf_i+0x19e>
 8008b8a:	2310      	movs	r3, #16
 8008b8c:	e7ac      	b.n	8008ae8 <_printf_i+0xf4>
 8008b8e:	4827      	ldr	r0, [pc, #156]	@ (8008c2c <_printf_i+0x238>)
 8008b90:	e7e9      	b.n	8008b66 <_printf_i+0x172>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f023 0320 	bic.w	r3, r3, #32
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	e7f6      	b.n	8008b8a <_printf_i+0x196>
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	e7bd      	b.n	8008b1c <_printf_i+0x128>
 8008ba0:	6833      	ldr	r3, [r6, #0]
 8008ba2:	6825      	ldr	r5, [r4, #0]
 8008ba4:	6961      	ldr	r1, [r4, #20]
 8008ba6:	1d18      	adds	r0, r3, #4
 8008ba8:	6030      	str	r0, [r6, #0]
 8008baa:	062e      	lsls	r6, r5, #24
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	d501      	bpl.n	8008bb4 <_printf_i+0x1c0>
 8008bb0:	6019      	str	r1, [r3, #0]
 8008bb2:	e002      	b.n	8008bba <_printf_i+0x1c6>
 8008bb4:	0668      	lsls	r0, r5, #25
 8008bb6:	d5fb      	bpl.n	8008bb0 <_printf_i+0x1bc>
 8008bb8:	8019      	strh	r1, [r3, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6123      	str	r3, [r4, #16]
 8008bbe:	4616      	mov	r6, r2
 8008bc0:	e7bc      	b.n	8008b3c <_printf_i+0x148>
 8008bc2:	6833      	ldr	r3, [r6, #0]
 8008bc4:	1d1a      	adds	r2, r3, #4
 8008bc6:	6032      	str	r2, [r6, #0]
 8008bc8:	681e      	ldr	r6, [r3, #0]
 8008bca:	6862      	ldr	r2, [r4, #4]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f7f7 fb06 	bl	80001e0 <memchr>
 8008bd4:	b108      	cbz	r0, 8008bda <_printf_i+0x1e6>
 8008bd6:	1b80      	subs	r0, r0, r6
 8008bd8:	6060      	str	r0, [r4, #4]
 8008bda:	6863      	ldr	r3, [r4, #4]
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	2300      	movs	r3, #0
 8008be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008be4:	e7aa      	b.n	8008b3c <_printf_i+0x148>
 8008be6:	6923      	ldr	r3, [r4, #16]
 8008be8:	4632      	mov	r2, r6
 8008bea:	4649      	mov	r1, r9
 8008bec:	4640      	mov	r0, r8
 8008bee:	47d0      	blx	sl
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d0ad      	beq.n	8008b50 <_printf_i+0x15c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	079b      	lsls	r3, r3, #30
 8008bf8:	d413      	bmi.n	8008c22 <_printf_i+0x22e>
 8008bfa:	68e0      	ldr	r0, [r4, #12]
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	4298      	cmp	r0, r3
 8008c00:	bfb8      	it	lt
 8008c02:	4618      	movlt	r0, r3
 8008c04:	e7a6      	b.n	8008b54 <_printf_i+0x160>
 8008c06:	2301      	movs	r3, #1
 8008c08:	4632      	mov	r2, r6
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	47d0      	blx	sl
 8008c10:	3001      	adds	r0, #1
 8008c12:	d09d      	beq.n	8008b50 <_printf_i+0x15c>
 8008c14:	3501      	adds	r5, #1
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	9903      	ldr	r1, [sp, #12]
 8008c1a:	1a5b      	subs	r3, r3, r1
 8008c1c:	42ab      	cmp	r3, r5
 8008c1e:	dcf2      	bgt.n	8008c06 <_printf_i+0x212>
 8008c20:	e7eb      	b.n	8008bfa <_printf_i+0x206>
 8008c22:	2500      	movs	r5, #0
 8008c24:	f104 0619 	add.w	r6, r4, #25
 8008c28:	e7f5      	b.n	8008c16 <_printf_i+0x222>
 8008c2a:	bf00      	nop
 8008c2c:	08008e69 	.word	0x08008e69
 8008c30:	08008e7a 	.word	0x08008e7a

08008c34 <memmove>:
 8008c34:	4288      	cmp	r0, r1
 8008c36:	b510      	push	{r4, lr}
 8008c38:	eb01 0402 	add.w	r4, r1, r2
 8008c3c:	d902      	bls.n	8008c44 <memmove+0x10>
 8008c3e:	4284      	cmp	r4, r0
 8008c40:	4623      	mov	r3, r4
 8008c42:	d807      	bhi.n	8008c54 <memmove+0x20>
 8008c44:	1e43      	subs	r3, r0, #1
 8008c46:	42a1      	cmp	r1, r4
 8008c48:	d008      	beq.n	8008c5c <memmove+0x28>
 8008c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c52:	e7f8      	b.n	8008c46 <memmove+0x12>
 8008c54:	4402      	add	r2, r0
 8008c56:	4601      	mov	r1, r0
 8008c58:	428a      	cmp	r2, r1
 8008c5a:	d100      	bne.n	8008c5e <memmove+0x2a>
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c66:	e7f7      	b.n	8008c58 <memmove+0x24>

08008c68 <_sbrk_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	@ (8008c84 <_sbrk_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f9 fa02 	bl	800207c <_sbrk>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_sbrk_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_sbrk_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	200007c8 	.word	0x200007c8

08008c88 <memcpy>:
 8008c88:	440a      	add	r2, r1
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c90:	d100      	bne.n	8008c94 <memcpy+0xc>
 8008c92:	4770      	bx	lr
 8008c94:	b510      	push	{r4, lr}
 8008c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	d1f9      	bne.n	8008c96 <memcpy+0xe>
 8008ca2:	bd10      	pop	{r4, pc}

08008ca4 <_realloc_r>:
 8008ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	4680      	mov	r8, r0
 8008caa:	4615      	mov	r5, r2
 8008cac:	460c      	mov	r4, r1
 8008cae:	b921      	cbnz	r1, 8008cba <_realloc_r+0x16>
 8008cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	f7ff bc4b 	b.w	8008550 <_malloc_r>
 8008cba:	b92a      	cbnz	r2, 8008cc8 <_realloc_r+0x24>
 8008cbc:	f7ff fbdc 	bl	8008478 <_free_r>
 8008cc0:	2400      	movs	r4, #0
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	f000 f81a 	bl	8008d00 <_malloc_usable_size_r>
 8008ccc:	4285      	cmp	r5, r0
 8008cce:	4606      	mov	r6, r0
 8008cd0:	d802      	bhi.n	8008cd8 <_realloc_r+0x34>
 8008cd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008cd6:	d8f4      	bhi.n	8008cc2 <_realloc_r+0x1e>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4640      	mov	r0, r8
 8008cdc:	f7ff fc38 	bl	8008550 <_malloc_r>
 8008ce0:	4607      	mov	r7, r0
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0ec      	beq.n	8008cc0 <_realloc_r+0x1c>
 8008ce6:	42b5      	cmp	r5, r6
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4621      	mov	r1, r4
 8008cec:	bf28      	it	cs
 8008cee:	4632      	movcs	r2, r6
 8008cf0:	f7ff ffca 	bl	8008c88 <memcpy>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	f7ff fbbe 	bl	8008478 <_free_r>
 8008cfc:	463c      	mov	r4, r7
 8008cfe:	e7e0      	b.n	8008cc2 <_realloc_r+0x1e>

08008d00 <_malloc_usable_size_r>:
 8008d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d04:	1f18      	subs	r0, r3, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bfbc      	itt	lt
 8008d0a:	580b      	ldrlt	r3, [r1, r0]
 8008d0c:	18c0      	addlt	r0, r0, r3
 8008d0e:	4770      	bx	lr

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
