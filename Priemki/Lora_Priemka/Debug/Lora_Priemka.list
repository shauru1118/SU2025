
Lora_Priemka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000862c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008738  08008738  00009738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008794  08008794  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008794  08008794  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008794  08008794  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00009794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008798  08008798  00009798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800879c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  2000017c  08008918  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  08008918  0000a4c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e943  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2c  00000000  00000000  00018ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0001ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  0001c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019921  00000000  00000000  0001cff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010baf  00000000  00000000  0003691a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869b9  00000000  00000000  000474c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cde82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003124  00000000  00000000  000cdec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000d0fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008720 	.word	0x08008720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008720 	.word	0x08008720

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fc47 	bl	80009e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f893 	bl	8000280 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f923 	bl	80003a4 <MX_GPIO_Init>
	MX_SPI1_Init();
 800015e:	f000 f8eb 	bl	8000338 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000162:	f007 fe15 	bl	8007d90 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	while (!hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].is_used) {
 8000166:	e011      	b.n	800018c <main+0x40>
		LED_ERR_GPIO_Port->ODR |= LED_ERR_Pin;
 8000168:	4b40      	ldr	r3, [pc, #256]	@ (800026c <main+0x120>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	4a3f      	ldr	r2, [pc, #252]	@ (800026c <main+0x120>)
 800016e:	f043 0308 	orr.w	r3, r3, #8
 8000172:	60d3      	str	r3, [r2, #12]
		HAL_Delay(100);
 8000174:	2064      	movs	r0, #100	@ 0x64
 8000176:	f000 fc97 	bl	8000aa8 <HAL_Delay>
		LED_ERR_GPIO_Port->ODR &= ~LED_ERR_Pin;
 800017a:	4b3c      	ldr	r3, [pc, #240]	@ (800026c <main+0x120>)
 800017c:	68db      	ldr	r3, [r3, #12]
 800017e:	4a3b      	ldr	r2, [pc, #236]	@ (800026c <main+0x120>)
 8000180:	f023 0308 	bic.w	r3, r3, #8
 8000184:	60d3      	str	r3, [r2, #12]
		HAL_Delay(100);
 8000186:	2064      	movs	r0, #100	@ 0x64
 8000188:	f000 fc8e 	bl	8000aa8 <HAL_Delay>
	while (!hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].is_used) {
 800018c:	4b38      	ldr	r3, [pc, #224]	@ (8000270 <main+0x124>)
 800018e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000190:	2b00      	cmp	r3, #0
 8000192:	d0e9      	beq.n	8000168 <main+0x1c>
	}

	hCDC = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8000194:	4b36      	ldr	r3, [pc, #216]	@ (8000270 <main+0x124>)
 8000196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800019a:	4a36      	ldr	r2, [pc, #216]	@ (8000274 <main+0x128>)
 800019c:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 800019e:	2064      	movs	r0, #100	@ 0x64
 80001a0:	f000 fc82 	bl	8000aa8 <HAL_Delay>

	if (LORA_Init(&hspi1, SPI1_NSS_GPIO_Port, SPI1_NSS_Pin)) {
 80001a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80001a8:	4930      	ldr	r1, [pc, #192]	@ (800026c <main+0x120>)
 80001aa:	4833      	ldr	r0, [pc, #204]	@ (8000278 <main+0x12c>)
 80001ac:	f000 f94a 	bl	8000444 <LORA_Init>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d013      	beq.n	80001de <main+0x92>
		while (1) {
			LED_RX_GPIO_Port->ODR |= LED_RX_Pin;
 80001b6:	4b2d      	ldr	r3, [pc, #180]	@ (800026c <main+0x120>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	4a2c      	ldr	r2, [pc, #176]	@ (800026c <main+0x120>)
 80001bc:	f043 0302 	orr.w	r3, r3, #2
 80001c0:	60d3      	str	r3, [r2, #12]
			HAL_Delay(100);
 80001c2:	2064      	movs	r0, #100	@ 0x64
 80001c4:	f000 fc70 	bl	8000aa8 <HAL_Delay>
			LED_RX_GPIO_Port->ODR &= ~LED_RX_Pin;
 80001c8:	4b28      	ldr	r3, [pc, #160]	@ (800026c <main+0x120>)
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	4a27      	ldr	r2, [pc, #156]	@ (800026c <main+0x120>)
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	60d3      	str	r3, [r2, #12]
			HAL_Delay(100);
 80001d4:	2064      	movs	r0, #100	@ 0x64
 80001d6:	f000 fc67 	bl	8000aa8 <HAL_Delay>
			LED_RX_GPIO_Port->ODR |= LED_RX_Pin;
 80001da:	bf00      	nop
 80001dc:	e7eb      	b.n	80001b6 <main+0x6a>
		}
	} else {
		LED_RX_GPIO_Port->ODR |= LED_RX_Pin;
 80001de:	4b23      	ldr	r3, [pc, #140]	@ (800026c <main+0x120>)
 80001e0:	68db      	ldr	r3, [r3, #12]
 80001e2:	4a22      	ldr	r2, [pc, #136]	@ (800026c <main+0x120>)
 80001e4:	f043 0302 	orr.w	r3, r3, #2
 80001e8:	60d3      	str	r3, [r2, #12]
		HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ee:	f000 fc5b 	bl	8000aa8 <HAL_Delay>
		LED_RX_GPIO_Port->ODR &= ~LED_RX_Pin;
 80001f2:	4b1e      	ldr	r3, [pc, #120]	@ (800026c <main+0x120>)
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	4a1d      	ldr	r2, [pc, #116]	@ (800026c <main+0x120>)
 80001f8:	f023 0302 	bic.w	r3, r3, #2
 80001fc:	60d3      	str	r3, [r2, #12]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		uint8_t packetSize = LORA_ReceiveData(receiveData);
 80001fe:	481f      	ldr	r0, [pc, #124]	@ (800027c <main+0x130>)
 8000200:	f000 fa06 	bl	8000610 <LORA_ReceiveData>
 8000204:	4603      	mov	r3, r0
 8000206:	71fb      	strb	r3, [r7, #7]

		if (packetSize) {
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d009      	beq.n	8000222 <main+0xd6>
			CDC_Transmit_FS(receiveData, packetSize);
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	b29b      	uxth	r3, r3
 8000212:	4619      	mov	r1, r3
 8000214:	4819      	ldr	r0, [pc, #100]	@ (800027c <main+0x130>)
 8000216:	f007 fe79 	bl	8007f0c <CDC_Transmit_FS>
			HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 800021a:	2102      	movs	r1, #2
 800021c:	4813      	ldr	r0, [pc, #76]	@ (800026c <main+0x120>)
 800021e:	f000 ff11 	bl	8001044 <HAL_GPIO_TogglePin>
		}

		if (hCDC->RxLength) {
 8000222:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <main+0x128>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0e7      	beq.n	80001fe <main+0xb2>
			LED_TX_GPIO_Port->ODR |= LED_TX_Pin;
 800022e:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <main+0x120>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a0e      	ldr	r2, [pc, #56]	@ (800026c <main+0x120>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	60d3      	str	r3, [r2, #12]

			LORA_TransmitData(hCDC->RxBuffer, hCDC->RxLength);
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <main+0x128>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000242:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <main+0x128>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800024a:	b2db      	uxtb	r3, r3
 800024c:	4619      	mov	r1, r3
 800024e:	4610      	mov	r0, r2
 8000250:	f000 fa92 	bl	8000778 <LORA_TransmitData>
			hCDC->RxLength = 0;
 8000254:	4b07      	ldr	r3, [pc, #28]	@ (8000274 <main+0x128>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2200      	movs	r2, #0
 800025a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

			LED_TX_GPIO_Port->ODR &= ~LED_TX_Pin;
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <main+0x120>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	4a02      	ldr	r2, [pc, #8]	@ (800026c <main+0x120>)
 8000264:	f023 0304 	bic.w	r3, r3, #4
 8000268:	60d3      	str	r3, [r2, #12]
	while (1) {
 800026a:	e7c8      	b.n	80001fe <main+0xb2>
 800026c:	40010800 	.word	0x40010800
 8000270:	20000308 	.word	0x20000308
 8000274:	200002f0 	.word	0x200002f0
 8000278:	20000198 	.word	0x20000198
 800027c:	200001f0 	.word	0x200001f0

08000280 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	@ 0x50
 8000284:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000286:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800028a:	2228      	movs	r2, #40	@ 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f008 fa1a 	bl	80086c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fc2e 	bl	8002b38 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x66>
		Error_Handler();
 80002e2:	f000 f8a9 	bl	8000438 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fe9a 	bl	800303c <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x92>
		Error_Handler();
 800030e:	f000 f893 	bl	8000438 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000312:	2310      	movs	r3, #16
 8000314:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000316:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800031a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f002 ffe8 	bl	80032f4 <HAL_RCCEx_PeriphCLKConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xae>
		Error_Handler();
 800032a:	f000 f885 	bl	8000438 <Error_Handler>
	}
}
 800032e:	bf00      	nop
 8000330:	3750      	adds	r7, #80	@ 0x50
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800033c:	4b17      	ldr	r3, [pc, #92]	@ (800039c <MX_SPI1_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	@ (80003a0 <MX_SPI1_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b16      	ldr	r3, [pc, #88]	@ (800039c <MX_SPI1_Init+0x64>)
 8000344:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000348:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_SPI1_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <MX_SPI1_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_SPI1_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_SPI1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_SPI1_Init+0x64>)
 8000364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000368:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800036a:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_SPI1_Init+0x64>)
 800036c:	2208      	movs	r2, #8
 800036e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000370:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <MX_SPI1_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_SPI1_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	@ (800039c <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000382:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_SPI1_Init+0x64>)
 8000384:	220a      	movs	r2, #10
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000388:	4804      	ldr	r0, [pc, #16]	@ (800039c <MX_SPI1_Init+0x64>)
 800038a:	f003 f869 	bl	8003460 <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000394:	f000 f850 	bl	8000438 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000198 	.word	0x20000198
 80003a0:	40013000 	.word	0x40013000

080003a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <MX_GPIO_Init+0x8c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_GPIO_Init+0x8c>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000430 <MX_GPIO_Init+0x8c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0320 	and.w	r3, r3, #32
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b17      	ldr	r3, [pc, #92]	@ (8000430 <MX_GPIO_Init+0x8c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a16      	ldr	r2, [pc, #88]	@ (8000430 <MX_GPIO_Init+0x8c>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <MX_GPIO_Init+0x8c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80003e8:	2200      	movs	r2, #0
 80003ea:	f240 4107 	movw	r1, #1031	@ 0x407
 80003ee:	4811      	ldr	r0, [pc, #68]	@ (8000434 <MX_GPIO_Init+0x90>)
 80003f0:	f000 fe10 	bl	8001014 <HAL_GPIO_WritePin>
	LED_ON_Pin | LED_RX_Pin | LED_TX_Pin | SPI1_NSS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LED_ON_Pin LED_RX_Pin LED_TX_Pin SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = LED_ON_Pin | LED_RX_Pin | LED_TX_Pin | SPI1_NSS_Pin;
 80003f4:	f240 4307 	movw	r3, #1031	@ 0x407
 80003f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2302      	movs	r3, #2
 8000404:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4619      	mov	r1, r3
 800040c:	4809      	ldr	r0, [pc, #36]	@ (8000434 <MX_GPIO_Init+0x90>)
 800040e:	f000 fc7d 	bl	8000d0c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_ERR_Pin */
	GPIO_InitStruct.Pin = LED_ERR_Pin;
 8000412:	2308      	movs	r3, #8
 8000414:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000416:	2303      	movs	r3, #3
 8000418:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4619      	mov	r1, r3
 8000420:	4804      	ldr	r0, [pc, #16]	@ (8000434 <MX_GPIO_Init+0x90>)
 8000422:	f000 fc73 	bl	8000d0c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000426:	bf00      	nop
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	40010800 	.word	0x40010800

08000438 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <Error_Handler+0x8>

08000444 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	4613      	mov	r3, r2
 8000450:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 8000452:	4a32      	ldr	r2, [pc, #200]	@ (800051c <LORA_Init+0xd8>)
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 8000458:	4a31      	ldr	r2, [pc, #196]	@ (8000520 <LORA_Init+0xdc>)
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 800045e:	4a31      	ldr	r2, [pc, #196]	@ (8000524 <LORA_Init+0xe0>)
 8000460:	88fb      	ldrh	r3, [r7, #6]
 8000462:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 8000464:	2042      	movs	r0, #66	@ 0x42
 8000466:	f000 f861 	bl	800052c <_loraReadReg>
 800046a:	4603      	mov	r3, r0
 800046c:	2b12      	cmp	r3, #18
 800046e:	d001      	beq.n	8000474 <LORA_Init+0x30>
		return 1;
 8000470:	2301      	movs	r3, #1
 8000472:	e04e      	b.n	8000512 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8000474:	2100      	movs	r1, #0
 8000476:	2001      	movs	r0, #1
 8000478:	f000 f88e 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 800047c:	2188      	movs	r1, #136	@ 0x88
 800047e:	2001      	movs	r0, #1
 8000480:	f000 f88a 	bl	8000598 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8000484:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <LORA_Init+0xe4>)
 8000486:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	0c1b      	lsrs	r3, r3, #16
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4619      	mov	r1, r3
 8000490:	2006      	movs	r0, #6
 8000492:	f000 f881 	bl	8000598 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	0a1b      	lsrs	r3, r3, #8
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4619      	mov	r1, r3
 800049e:	2007      	movs	r0, #7
 80004a0:	f000 f87a 	bl	8000598 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	2008      	movs	r0, #8
 80004ac:	f000 f874 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 80004b0:	21ff      	movs	r1, #255	@ 0xff
 80004b2:	2009      	movs	r0, #9
 80004b4:	f000 f870 	bl	8000598 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 80004b8:	210b      	movs	r1, #11
 80004ba:	200b      	movs	r0, #11
 80004bc:	f000 f86c 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 80004c0:	2120      	movs	r1, #32
 80004c2:	200c      	movs	r0, #12
 80004c4:	f000 f868 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 80004c8:	21ff      	movs	r1, #255	@ 0xff
 80004ca:	200e      	movs	r0, #14
 80004cc:	f000 f864 	bl	8000598 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 80004d0:	2100      	movs	r1, #0
 80004d2:	200f      	movs	r0, #15
 80004d4:	f000 f860 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 80004d8:	2182      	movs	r1, #130	@ 0x82
 80004da:	201d      	movs	r0, #29
 80004dc:	f000 f85c 	bl	8000598 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 80004e0:	2170      	movs	r1, #112	@ 0x70
 80004e2:	201e      	movs	r0, #30
 80004e4:	f000 f858 	bl	8000598 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 80004e8:	2100      	movs	r1, #0
 80004ea:	2020      	movs	r0, #32
 80004ec:	f000 f854 	bl	8000598 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 80004f0:	2106      	movs	r1, #6
 80004f2:	2021      	movs	r0, #33	@ 0x21
 80004f4:	f000 f850 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 80004f8:	213c      	movs	r1, #60	@ 0x3c
 80004fa:	2022      	movs	r0, #34	@ 0x22
 80004fc:	f000 f84c 	bl	8000598 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8000500:	213c      	movs	r1, #60	@ 0x3c
 8000502:	2023      	movs	r0, #35	@ 0x23
 8000504:	f000 f848 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000508:	2105      	movs	r1, #5
 800050a:	2001      	movs	r0, #1
 800050c:	f000 f844 	bl	8000598 <_loraWriteReg>

	return 0;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200002f4 	.word	0x200002f4
 8000520:	200002f8 	.word	0x200002f8
 8000524:	200002fc 	.word	0x200002fc
 8000528:	006c4000 	.word	0x006c4000

0800052c <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000536:	4b15      	ldr	r3, [pc, #84]	@ (800058c <_loraReadReg+0x60>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	68da      	ldr	r2, [r3, #12]
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <_loraReadReg+0x64>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	43db      	mvns	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <_loraReadReg+0x60>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	400a      	ands	r2, r1
 800054a:	60da      	str	r2, [r3, #12]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <_loraReadReg+0x68>)
 800054e:	6818      	ldr	r0, [r3, #0]
 8000550:	1df9      	adds	r1, r7, #7
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	2201      	movs	r2, #1
 8000558:	f003 f806 	bl	8003568 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <_loraReadReg+0x68>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	1df9      	adds	r1, r7, #7
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	2201      	movs	r2, #1
 8000568:	f003 f942 	bl	80037f0 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <_loraReadReg+0x60>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68da      	ldr	r2, [r3, #12]
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <_loraReadReg+0x64>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	4b04      	ldr	r3, [pc, #16]	@ (800058c <_loraReadReg+0x60>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	430a      	orrs	r2, r1
 800057e:	60da      	str	r2, [r3, #12]
	return reg;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200002f8 	.word	0x200002f8
 8000590:	200002fc 	.word	0x200002fc
 8000594:	200002f4 	.word	0x200002f4

08000598 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <_loraWriteReg+0x6c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	68da      	ldr	r2, [r3, #12]
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_loraWriteReg+0x70>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <_loraWriteReg+0x6c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	60da      	str	r2, [r3, #12]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <_loraWriteReg+0x74>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	1df9      	adds	r1, r7, #7
 80005ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d2:	2201      	movs	r2, #1
 80005d4:	f002 ffc8 	bl	8003568 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <_loraWriteReg+0x74>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	1db9      	adds	r1, r7, #6
 80005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e2:	2201      	movs	r2, #1
 80005e4:	f002 ffc0 	bl	8003568 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <_loraWriteReg+0x6c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68da      	ldr	r2, [r3, #12]
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <_loraWriteReg+0x70>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4b03      	ldr	r3, [pc, #12]	@ (8000604 <_loraWriteReg+0x6c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002f8 	.word	0x200002f8
 8000608:	200002fc 	.word	0x200002fc
 800060c:	200002f4 	.word	0x200002f4

08000610 <LORA_ReceiveData>:

uint8_t LORA_ReceiveData(uint8_t *data) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	if (_loraReadReg(LORA_REG_FLAGS) & (LORA_FLAGS_RX_DONE)) {
 8000618:	2012      	movs	r0, #18
 800061a:	f7ff ff87 	bl	800052c <_loraReadReg>
 800061e:	4603      	mov	r3, r0
 8000620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000624:	2b00      	cmp	r3, #0
 8000626:	f000 809c 	beq.w	8000762 <LORA_ReceiveData+0x152>
		_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_RX_DONE);
 800062a:	2140      	movs	r1, #64	@ 0x40
 800062c:	2012      	movs	r0, #18
 800062e:	f7ff ffb3 	bl	8000598 <_loraWriteReg>

		uint8_t packetSize = _loraReadReg(LORA_REG_RX_NB_BYTES);
 8000632:	2013      	movs	r0, #19
 8000634:	f7ff ff7a 	bl	800052c <_loraReadReg>
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]
		uint8_t curAddr = _loraReadReg(LORA_REG_FIFO_RX_CUR);
 800063c:	2010      	movs	r0, #16
 800063e:	f7ff ff75 	bl	800052c <_loraReadReg>
 8000642:	4603      	mov	r3, r0
 8000644:	73bb      	strb	r3, [r7, #14]
		uint8_t regFifo = LORA_REG_FIFO;
 8000646:	2300      	movs	r3, #0
 8000648:	733b      	strb	r3, [r7, #12]

		_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, curAddr);
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	4619      	mov	r1, r3
 800064e:	200d      	movs	r0, #13
 8000650:	f7ff ffa2 	bl	8000598 <_loraWriteReg>

		uint8_t spaceLeft = 255 - curAddr;
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	43db      	mvns	r3, r3
 8000658:	737b      	strb	r3, [r7, #13]
		if (spaceLeft >= packetSize) {
 800065a:	7b7a      	ldrb	r2, [r7, #13]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	429a      	cmp	r2, r3
 8000660:	d327      	bcc.n	80006b2 <LORA_ReceiveData+0xa2>
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000662:	4b42      	ldr	r3, [pc, #264]	@ (800076c <LORA_ReceiveData+0x15c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68da      	ldr	r2, [r3, #12]
 8000668:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <LORA_ReceiveData+0x160>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	43db      	mvns	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	4b3e      	ldr	r3, [pc, #248]	@ (800076c <LORA_ReceiveData+0x15c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	400a      	ands	r2, r1
 8000676:	60da      	str	r2, [r3, #12]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000678:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <LORA_ReceiveData+0x164>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	f107 010c 	add.w	r1, r7, #12
 8000680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000684:	2201      	movs	r2, #1
 8000686:	f002 ff6f 	bl	8003568 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize, 1000);
 800068a:	4b3a      	ldr	r3, [pc, #232]	@ (8000774 <LORA_ReceiveData+0x164>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	b29a      	uxth	r2, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f003 f8aa 	bl	80037f0 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 800069c:	4b33      	ldr	r3, [pc, #204]	@ (800076c <LORA_ReceiveData+0x15c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	4b33      	ldr	r3, [pc, #204]	@ (8000770 <LORA_ReceiveData+0x160>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <LORA_ReceiveData+0x15c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	430a      	orrs	r2, r1
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	e055      	b.n	800075e <LORA_ReceiveData+0x14e>
		} else {
			_nssPort->ODR &= ~_nssPin; // nss 0
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <LORA_ReceiveData+0x15c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <LORA_ReceiveData+0x160>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <LORA_ReceiveData+0x15c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	60da      	str	r2, [r3, #12]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 80006c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <LORA_ReceiveData+0x164>)
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	f107 010c 	add.w	r1, r7, #12
 80006d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d4:	2201      	movs	r2, #1
 80006d6:	f002 ff47 	bl	8003568 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, spaceLeft, 1000);
 80006da:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <LORA_ReceiveData+0x164>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	7b7b      	ldrb	r3, [r7, #13]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f003 f882 	bl	80037f0 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <LORA_ReceiveData+0x15c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <LORA_ReceiveData+0x160>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <LORA_ReceiveData+0x15c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	430a      	orrs	r2, r1
 80006fe:	60da      	str	r2, [r3, #12]

			_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, 0);
 8000700:	2100      	movs	r1, #0
 8000702:	200d      	movs	r0, #13
 8000704:	f7ff ff48 	bl	8000598 <_loraWriteReg>

			_nssPort->ODR &= ~_nssPin; // nss 0
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <LORA_ReceiveData+0x15c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <LORA_ReceiveData+0x160>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <LORA_ReceiveData+0x15c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	60da      	str	r2, [r3, #12]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <LORA_ReceiveData+0x164>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072a:	2201      	movs	r2, #1
 800072c:	f002 ff1c 	bl	8003568 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize - spaceLeft, 1000);
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <LORA_ReceiveData+0x164>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	b29a      	uxth	r2, r3
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	b29b      	uxth	r3, r3
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	f003 f853 	bl	80037f0 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <LORA_ReceiveData+0x15c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <LORA_ReceiveData+0x160>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <LORA_ReceiveData+0x15c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]
		}
		return packetSize;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	e000      	b.n	8000764 <LORA_ReceiveData+0x154>
	}
	return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200002f8 	.word	0x200002f8
 8000770:	200002fc 	.word	0x200002fc
 8000774:	200002f4 	.word	0x200002f4

08000778 <LORA_TransmitData>:

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8000784:	21ff      	movs	r1, #255	@ 0xff
 8000786:	200d      	movs	r0, #13
 8000788:	f7ff ff06 	bl	8000598 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	4619      	mov	r1, r3
 8000790:	2022      	movs	r0, #34	@ 0x22
 8000792:	f7ff ff01 	bl	8000598 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8000796:	2380      	movs	r3, #128	@ 0x80
 8000798:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <LORA_TransmitData+0xa4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <LORA_TransmitData+0xa8>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <LORA_TransmitData+0xa4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	60da      	str	r2, [r3, #12]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <LORA_TransmitData+0xac>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f107 010f 	add.w	r1, r7, #15
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	2201      	movs	r2, #1
 80007be:	f002 fed3 	bl	8003568 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <LORA_TransmitData+0xac>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f002 feca 	bl	8003568 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <LORA_TransmitData+0xa4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <LORA_TransmitData+0xa8>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <LORA_TransmitData+0xa4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	430a      	orrs	r2, r1
 80007e6:	60da      	str	r2, [r3, #12]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 80007e8:	2103      	movs	r1, #3
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fed4 	bl	8000598 <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 80007f0:	bf00      	nop
 80007f2:	2012      	movs	r0, #18
 80007f4:	f7ff fe9a 	bl	800052c <_loraReadReg>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f7      	beq.n	80007f2 <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8000802:	2108      	movs	r1, #8
 8000804:	2012      	movs	r0, #18
 8000806:	f7ff fec7 	bl	8000598 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 800080a:	2105      	movs	r1, #5
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fec3 	bl	8000598 <_loraWriteReg>

}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002f8 	.word	0x200002f8
 8000820:	200002fc 	.word	0x200002fc
 8000824:	200002f4 	.word	0x200002f4

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	@ (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d12f      	bne.n	800090c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a19      	ldr	r2, [pc, #100]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 80008b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008dc:	23a0      	movs	r3, #160	@ 0xa0
 80008de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	480b      	ldr	r0, [pc, #44]	@ (800091c <HAL_SPI_MspInit+0x90>)
 80008f0:	f000 fa0c 	bl	8000d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008f4:	2340      	movs	r3, #64	@ 0x40
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <HAL_SPI_MspInit+0x90>)
 8000908:	f000 fa00 	bl	8000d0c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40013000 	.word	0x40013000
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <NMI_Handler+0x4>

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <MemManage_Handler+0x4>

08000938 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <UsageFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f87e 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800097c:	4802      	ldr	r0, [pc, #8]	@ (8000988 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800097e:	f000 fc96 	bl	80012ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000fcc 	.word	0x20000fcc

0800098c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff fff8 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099e:	490c      	ldr	r1, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b4:	4c09      	ldr	r4, [pc, #36]	@ (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f007 fe89 	bl	80086d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fbc1 	bl	800014c <main>
  bx lr
 80009ca:	4770      	bx	lr
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80009d4:	0800879c 	.word	0x0800879c
  ldr r2, =_sbss
 80009d8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80009dc:	200014c4 	.word	0x200014c4

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_Init+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_Init+0x28>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f947 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f000 f808 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff ff12 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x54>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f95f 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00e      	b.n	8000a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d80a      	bhi.n	8000a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f927 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_InitTick+0x5c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_IncTick+0x1c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a03      	ldr	r2, [pc, #12]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000300 	.word	0x20000300

08000a94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b02      	ldr	r3, [pc, #8]	@ (8000aa4 <HAL_GetTick+0x10>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000300 	.word	0x20000300

08000aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff fff0 	bl	8000a94 <HAL_GetTick>
 8000ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d005      	beq.n	8000ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_Delay+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ace:	bf00      	nop
 8000ad0:	f7ff ffe0 	bl	8000a94 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8f7      	bhi.n	8000ad0 <HAL_Delay+0x28>
  {
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	@ (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4906      	ldr	r1, [pc, #24]	@ (8000b88 <__NVIC_EnableIRQ+0x34>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff90 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff2d 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff42 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5f 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff35 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa2 	bl	8000c44 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b08b      	sub	sp, #44	@ 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e169      	b.n	8000ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d20:	2201      	movs	r2, #1
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8158 	bne.w	8000fee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a9a      	ldr	r2, [pc, #616]	@ (8000fac <HAL_GPIO_Init+0x2a0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d05e      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d48:	4a98      	ldr	r2, [pc, #608]	@ (8000fac <HAL_GPIO_Init+0x2a0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d875      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d4e:	4a98      	ldr	r2, [pc, #608]	@ (8000fb0 <HAL_GPIO_Init+0x2a4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d058      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d54:	4a96      	ldr	r2, [pc, #600]	@ (8000fb0 <HAL_GPIO_Init+0x2a4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d86f      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d5a:	4a96      	ldr	r2, [pc, #600]	@ (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d052      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d60:	4a94      	ldr	r2, [pc, #592]	@ (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d869      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d66:	4a94      	ldr	r2, [pc, #592]	@ (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d04c      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d6c:	4a92      	ldr	r2, [pc, #584]	@ (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d863      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d72:	4a92      	ldr	r2, [pc, #584]	@ (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d046      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d78:	4a90      	ldr	r2, [pc, #576]	@ (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d85d      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d82a      	bhi.n	8000dd8 <HAL_GPIO_Init+0xcc>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d859      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d86:	a201      	add	r2, pc, #4	@ (adr r2, 8000d8c <HAL_GPIO_Init+0x80>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000e07 	.word	0x08000e07
 8000d90:	08000de1 	.word	0x08000de1
 8000d94:	08000df3 	.word	0x08000df3
 8000d98:	08000e35 	.word	0x08000e35
 8000d9c:	08000e3b 	.word	0x08000e3b
 8000da0:	08000e3b 	.word	0x08000e3b
 8000da4:	08000e3b 	.word	0x08000e3b
 8000da8:	08000e3b 	.word	0x08000e3b
 8000dac:	08000e3b 	.word	0x08000e3b
 8000db0:	08000e3b 	.word	0x08000e3b
 8000db4:	08000e3b 	.word	0x08000e3b
 8000db8:	08000e3b 	.word	0x08000e3b
 8000dbc:	08000e3b 	.word	0x08000e3b
 8000dc0:	08000e3b 	.word	0x08000e3b
 8000dc4:	08000e3b 	.word	0x08000e3b
 8000dc8:	08000e3b 	.word	0x08000e3b
 8000dcc:	08000e3b 	.word	0x08000e3b
 8000dd0:	08000de9 	.word	0x08000de9
 8000dd4:	08000dfd 	.word	0x08000dfd
 8000dd8:	4a79      	ldr	r2, [pc, #484]	@ (8000fc0 <HAL_GPIO_Init+0x2b4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dde:	e02c      	b.n	8000e3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e029      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	3304      	adds	r3, #4
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	e024      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	3308      	adds	r3, #8
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e01f      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	330c      	adds	r3, #12
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e01a      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e013      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d105      	bne.n	8000e28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	611a      	str	r2, [r3, #16]
          break;
 8000e26:	e009      	b.n	8000e3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	615a      	str	r2, [r3, #20]
          break;
 8000e32:	e003      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          break;
 8000e3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2bff      	cmp	r3, #255	@ 0xff
 8000e40:	d801      	bhi.n	8000e46 <HAL_GPIO_Init+0x13a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	e001      	b.n	8000e4a <HAL_GPIO_Init+0x13e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2bff      	cmp	r3, #255	@ 0xff
 8000e50:	d802      	bhi.n	8000e58 <HAL_GPIO_Init+0x14c>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x152>
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	3b08      	subs	r3, #8
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	210f      	movs	r1, #15
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	6a39      	ldr	r1, [r7, #32]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80b1 	beq.w	8000fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea4:	4a48      	ldr	r2, [pc, #288]	@ (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a40      	ldr	r2, [pc, #256]	@ (8000fcc <HAL_GPIO_Init+0x2c0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d013      	beq.n	8000ef8 <HAL_GPIO_Init+0x1ec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1e4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f0a:	492f      	ldr	r1, [pc, #188]	@ (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	492c      	ldr	r1, [pc, #176]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	608b      	str	r3, [r1, #8]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f32:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4928      	ldr	r1, [pc, #160]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	4922      	ldr	r1, [pc, #136]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60cb      	str	r3, [r1, #12]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	491e      	ldr	r1, [pc, #120]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4918      	ldr	r1, [pc, #96]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4914      	ldr	r1, [pc, #80]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d021      	beq.n	8000fe0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	490e      	ldr	r1, [pc, #56]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
 8000fa8:	e021      	b.n	8000fee <HAL_GPIO_Init+0x2e2>
 8000faa:	bf00      	nop
 8000fac:	10320000 	.word	0x10320000
 8000fb0:	10310000 	.word	0x10310000
 8000fb4:	10220000 	.word	0x10220000
 8000fb8:	10210000 	.word	0x10210000
 8000fbc:	10120000 	.word	0x10120000
 8000fc0:	10110000 	.word	0x10110000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40011400 	.word	0x40011400
 8000fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_GPIO_Init+0x304>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4909      	ldr	r1, [pc, #36]	@ (8001010 <HAL_GPIO_Init+0x304>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f47f ae8e 	bne.w	8000d20 <HAL_GPIO_Init+0x14>
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	372c      	adds	r7, #44	@ 0x2c
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	611a      	str	r2, [r3, #16]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43d9      	mvns	r1, r3
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	400b      	ands	r3, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	611a      	str	r2, [r3, #16]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0e8      	b.n	800125a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d106      	bne.n	80010a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f007 f869 	bl	8008174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2203      	movs	r2, #3
 80010a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 ff8b 	bl	8003fd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3304      	adds	r3, #4
 80010c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c4:	f002 ff61 	bl	8003f8a <USB_CoreInit>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2202      	movs	r2, #2
 80010d2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0bf      	b.n	800125a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 ff8f 	bl	8004004 <USB_SetCurrentMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0b0      	b.n	800125a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e03e      	b.n	800117c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	3311      	adds	r3, #17
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3310      	adds	r3, #16
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3313      	adds	r3, #19
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	440b      	add	r3, r1
 8001148:	3320      	adds	r3, #32
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	3324      	adds	r3, #36	@ 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	791b      	ldrb	r3, [r3, #4]
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3bb      	bcc.n	80010fe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e044      	b.n	8001216 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	791b      	ldrb	r3, [r3, #4]
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3b5      	bcc.n	800118c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122a:	f002 fef7 	bl	800401c <USB_DevInit>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e00c      	b.n	800125a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f005 f977 	bl	8006546 <USB_DevDisconnect>

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_PCD_Start+0x16>
 8001274:	2302      	movs	r3, #2
 8001276:	e016      	b.n	80012a6 <HAL_PCD_Start+0x44>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fe8d 	bl	8003fa4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800128a:	2101      	movs	r1, #1
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f007 f9e4 	bl	800865a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f005 f94b 	bl	8006532 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b088      	sub	sp, #32
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 f94d 	bl	800655a <USB_ReadInterrupts>
 80012c0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fb1a 	bl	8001906 <PCD_EP_ISR_Handler>

    return;
 80012d2:	e119      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d013      	beq.n	8001306 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012f0:	b292      	uxth	r2, r2
 80012f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f006 ffb7 	bl	800826a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012fc:	2100      	movs	r1, #0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f905 	bl	800150e <HAL_PCD_SetAddress>

    return;
 8001304:	e100      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001328:	e0ee      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00c      	beq.n	800134e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800134c:	e0dc      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d027      	beq.n	80013a8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0204 	bic.w	r2, r2, #4
 800136a:	b292      	uxth	r2, r2
 800136c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0208 	bic.w	r2, r2, #8
 8001382:	b292      	uxth	r2, r2
 8001384:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f006 ffa7 	bl	80082dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80013a0:	b292      	uxth	r2, r2
 80013a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013a6:	e0af      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8083 	beq.w	80014ba <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	77fb      	strb	r3, [r7, #31]
 80013b8:	e010      	b.n	80013dc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	441a      	add	r2, r3
 80013c6:	7ffb      	ldrb	r3, [r7, #31]
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	b292      	uxth	r2, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	3320      	adds	r3, #32
 80013d0:	443b      	add	r3, r7
 80013d2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	3301      	adds	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b07      	cmp	r3, #7
 80013e0:	d9eb      	bls.n	80013ba <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	b292      	uxth	r2, r2
 80013f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	b292      	uxth	r2, r2
 800140e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001412:	bf00      	nop
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800141c:	b29b      	uxth	r3, r3
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f6      	beq.n	8001414 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	77fb      	strb	r3, [r7, #31]
 8001442:	e00f      	b.n	8001464 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	4611      	mov	r1, r2
 800144c:	7ffa      	ldrb	r2, [r7, #31]
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	440a      	add	r2, r1
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	3320      	adds	r3, #32
 8001456:	443b      	add	r3, r7
 8001458:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800145c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800145e:	7ffb      	ldrb	r3, [r7, #31]
 8001460:	3301      	adds	r3, #1
 8001462:	77fb      	strb	r3, [r7, #31]
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	2b07      	cmp	r3, #7
 8001468:	d9ec      	bls.n	8001444 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001472:	b29a      	uxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0208 	orr.w	r2, r2, #8
 800147c:	b292      	uxth	r2, r2
 800147e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	b292      	uxth	r2, r2
 80014ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f006 fef8 	bl	80082a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014b8:	e026      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00f      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014d6:	b292      	uxth	r2, r2
 80014d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f006 feb6 	bl	800824e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014e2:	e011      	b.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001500:	b292      	uxth	r2, r2
 8001502:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001506:	bf00      	nop
  }
}
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_PCD_SetAddress+0x1a>
 8001524:	2302      	movs	r3, #2
 8001526:	e012      	b.n	800154e <HAL_PCD_SetAddress+0x40>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	78fa      	ldrb	r2, [r7, #3]
 8001534:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f004 ffe4 	bl	800650c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	4608      	mov	r0, r1
 8001560:	4611      	mov	r1, r2
 8001562:	461a      	mov	r2, r3
 8001564:	4603      	mov	r3, r0
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	460b      	mov	r3, r1
 800156a:	803b      	strh	r3, [r7, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da0e      	bge.n	800159a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	f003 0207 	and.w	r2, r3, #7
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	3310      	adds	r3, #16
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	705a      	strb	r2, [r3, #1]
 8001598:	e00e      	b.n	80015b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 0207 	and.w	r2, r3, #7
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015c4:	883a      	ldrh	r2, [r7, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	78ba      	ldrb	r2, [r7, #2]
 80015ce:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015d0:	78bb      	ldrb	r3, [r7, #2]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d102      	bne.n	80015dc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_PCD_EP_Open+0x94>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e00e      	b.n	8001608 <HAL_PCD_EP_Open+0xb2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fd2d 	bl	8004058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001606:	7afb      	ldrb	r3, [r7, #11]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800161c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001620:	2b00      	cmp	r3, #0
 8001622:	da0e      	bge.n	8001642 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	3310      	adds	r3, #16
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	705a      	strb	r2, [r3, #1]
 8001640:	e00e      	b.n	8001660 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0207 	and.w	r2, r3, #7
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	b2da      	uxtb	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_PCD_EP_Close+0x6a>
 8001676:	2302      	movs	r3, #2
 8001678:	e00e      	b.n	8001698 <HAL_PCD_EP_Close+0x88>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f8a5 	bl	80047d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	460b      	mov	r3, r1
 80016ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016b0:	7afb      	ldrb	r3, [r7, #11]
 80016b2:	f003 0207 	and.w	r2, r3, #7
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2200      	movs	r2, #0
 80016de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6979      	ldr	r1, [r7, #20]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fa5c 	bl	8004bb0 <USB_EPStartXfer>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0207 	and.w	r2, r3, #7
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001724:	681b      	ldr	r3, [r3, #0]
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	460b      	mov	r3, r1
 800173e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	f003 0207 	and.w	r2, r3, #7
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	3310      	adds	r3, #16
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2201      	movs	r2, #1
 800177a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	b2da      	uxtb	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fa0e 	bl	8004bb0 <USB_EPStartXfer>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	7912      	ldrb	r2, [r2, #4]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e04c      	b.n	8001856 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da0e      	bge.n	80017e2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0207 	and.w	r2, r3, #7
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	3310      	adds	r3, #16
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	705a      	strb	r2, [r3, #1]
 80017e0:	e00c      	b.n	80017fc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2201      	movs	r2, #1
 8001800:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_PCD_EP_SetStall+0x7e>
 8001818:	2302      	movs	r3, #2
 800181a:	e01c      	b.n	8001856 <HAL_PCD_EP_SetStall+0xb8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	4618      	mov	r0, r3
 800182c:	f004 fd71 	bl	8006312 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f004 fe96 	bl	8006578 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	7912      	ldrb	r2, [r2, #4]
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e040      	b.n	80018fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800187c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da0e      	bge.n	80018a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	f003 0207 	and.w	r2, r3, #7
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	3310      	adds	r3, #16
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	705a      	strb	r2, [r3, #1]
 80018a0:	e00e      	b.n	80018c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 0207 	and.w	r2, r3, #7
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_PCD_EP_ClrStall+0x82>
 80018dc:	2302      	movs	r3, #2
 80018de:	e00e      	b.n	80018fe <HAL_PCD_EP_ClrStall+0xa0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 fd5f 	bl	80063b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b096      	sub	sp, #88	@ 0x58
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800190e:	e3bb      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001918:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800191c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800192a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8175 	bne.w	8001c1e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d14e      	bne.n	80019de <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800194c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001950:	81fb      	strh	r3, [r7, #14]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800195c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001960:	b29b      	uxth	r3, r3
 8001962:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3310      	adds	r3, #16
 8001968:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	3302      	adds	r3, #2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001994:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	441a      	add	r2, r3
 80019a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019a4:	2100      	movs	r1, #0
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f006 fc37 	bl	800821a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7b5b      	ldrb	r3, [r3, #13]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8368 	beq.w	8002088 <PCD_EP_ISR_Handler+0x782>
 80019b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 8363 	bne.w	8002088 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7b5b      	ldrb	r3, [r3, #13]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	735a      	strb	r2, [r3, #13]
 80019dc:	e354      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019e4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d034      	beq.n	8001a66 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3306      	adds	r3, #6
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a26:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a34:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a38:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	f004 fded 	bl	800661a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	823b      	strh	r3, [r7, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	8a3a      	ldrh	r2, [r7, #16]
 8001a56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f006 fbae 	bl	80081c0 <HAL_PCD_SetupStageCallback>
 8001a64:	e310      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a66:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f280 830c 	bge.w	8002088 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	83fb      	strh	r3, [r7, #30]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	8bfa      	ldrh	r2, [r7, #30]
 8001a86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3306      	adds	r3, #6
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d019      	beq.n	8001af6 <PCD_EP_ISR_Handler+0x1f0>
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d015      	beq.n	8001af6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	6959      	ldr	r1, [r3, #20]
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f004 fd9d 	bl	800661a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	441a      	add	r2, r3
 8001aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001aee:	2100      	movs	r1, #0
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f006 fb77 	bl	80081e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 82bd 	bne.w	8002088 <PCD_EP_ISR_Handler+0x782>
 8001b0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001b1a:	f000 82b5 	beq.w	8002088 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4413      	add	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b54:	d91d      	bls.n	8001b92 <PCD_EP_ISR_Handler+0x28c>
 8001b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <PCD_EP_ISR_Handler+0x26a>
 8001b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	e026      	b.n	8001be0 <PCD_EP_ISR_Handler+0x2da>
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10a      	bne.n	8001bb0 <PCD_EP_ISR_Handler+0x2aa>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	e017      	b.n	8001be0 <PCD_EP_ISR_Handler+0x2da>
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <PCD_EP_ISR_Handler+0x2c4>
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bf0:	827b      	strh	r3, [r7, #18]
 8001bf2:	8a7b      	ldrh	r3, [r7, #18]
 8001bf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bf8:	827b      	strh	r3, [r7, #18]
 8001bfa:	8a7b      	ldrh	r3, [r7, #18]
 8001bfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c00:	827b      	strh	r3, [r7, #18]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	8a7b      	ldrh	r3, [r7, #18]
 8001c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	8013      	strh	r3, [r2, #0]
 8001c1c:	e234      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c32:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f280 80fc 	bge.w	8001e34 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c52:	4013      	ands	r3, r2
 8001c54:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001c6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c72:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8a:	7b1b      	ldrb	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d125      	bne.n	8001cdc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3306      	adds	r3, #6
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001cbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8092 	beq.w	8001dea <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ccc:	6959      	ldr	r1, [r3, #20]
 8001cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd0:	88da      	ldrh	r2, [r3, #6]
 8001cd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cd6:	f004 fca0 	bl	800661a <USB_ReadPMA>
 8001cda:	e086      	b.n	8001dea <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cde:	78db      	ldrb	r3, [r3, #3]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d10a      	bne.n	8001cfa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ce4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f9d9 	bl	80020a4 <HAL_PCD_EP_DB_Receive>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001cf8:	e077      	b.n	8001dea <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d14:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001d2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d024      	beq.n	8001da2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d80:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d02e      	beq.n	8001dea <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d92:	6959      	ldr	r1, [r3, #20]
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	891a      	ldrh	r2, [r3, #8]
 8001d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d9c:	f004 fc3d 	bl	800661a <USB_ReadPMA>
 8001da0:	e023      	b.n	8001dea <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	3306      	adds	r3, #6
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001dce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ddc:	6959      	ldr	r1, [r3, #20]
 8001dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de0:	895a      	ldrh	r2, [r3, #10]
 8001de2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001de6:	f004 fc18 	bl	800661a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001df2:	441a      	add	r2, r3
 8001df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e00:	441a      	add	r2, r3
 8001e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e04:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <PCD_EP_ISR_Handler+0x514>
 8001e0e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d206      	bcs.n	8001e28 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f006 f9df 	bl	80081e4 <HAL_PCD_DataOutStageCallback>
 8001e26:	e005      	b.n	8001e34 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 febe 	bl	8004bb0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8123 	beq.w	8002088 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e42:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	3310      	adds	r3, #16
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	441a      	add	r2, r3
 8001e82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e94:	78db      	ldrb	r3, [r3, #3]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	f040 80a2 	bne.w	8001fe0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8093 	beq.w	8001fd2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d046      	beq.n	8001f46 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d126      	bne.n	8001f0e <PCD_EP_ISR_Handler+0x608>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	4413      	add	r3, r2
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	011a      	lsls	r2, r3, #4
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	e061      	b.n	8001fd2 <PCD_EP_ISR_Handler+0x6cc>
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d15d      	bne.n	8001fd2 <PCD_EP_ISR_Handler+0x6cc>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	011a      	lsls	r2, r3, #4
 8001f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f36:	4413      	add	r3, r2
 8001f38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	e045      	b.n	8001fd2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d126      	bne.n	8001fa2 <PCD_EP_ISR_Handler+0x69c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f68:	4413      	add	r3, r2
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	011a      	lsls	r2, r3, #4
 8001f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f74:	4413      	add	r3, r2
 8001f76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e017      	b.n	8001fd2 <PCD_EP_ISR_Handler+0x6cc>
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d113      	bne.n	8001fd2 <PCD_EP_ISR_Handler+0x6cc>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb8:	4413      	add	r3, r2
 8001fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	011a      	lsls	r2, r3, #4
 8001fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f006 f91e 	bl	800821a <HAL_PCD_DataInStageCallback>
 8001fde:	e053      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001fe0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d146      	bne.n	800207a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	3302      	adds	r3, #2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002014:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002020:	429a      	cmp	r2, r3
 8002022:	d907      	bls.n	8002034 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800202c:	1ad2      	subs	r2, r2, r3
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	619a      	str	r2, [r3, #24]
 8002032:	e002      	b.n	800203a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f006 f8e6 	bl	800821a <HAL_PCD_DataInStageCallback>
 800204e:	e01b      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002058:	441a      	add	r2, r3
 800205a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800205e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002066:	441a      	add	r2, r3
 8002068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fd9c 	bl	8004bb0 <USB_EPStartXfer>
 8002078:	e006      	b.n	8002088 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800207a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800207e:	461a      	mov	r2, r3
 8002080:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f91b 	bl	80022be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002090:	b29b      	uxth	r3, r3
 8002092:	b21b      	sxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f6ff ac3b 	blt.w	8001910 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3758      	adds	r7, #88	@ 0x58
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d07e      	beq.n	80021ba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	3302      	adds	r3, #2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	8b7b      	ldrh	r3, [r7, #26]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d306      	bcc.n	80020fe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	8b7b      	ldrh	r3, [r7, #26]
 80020f6:	1ad2      	subs	r2, r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	619a      	str	r2, [r3, #24]
 80020fc:	e002      	b.n	8002104 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d123      	bne.n	8002154 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002126:	833b      	strh	r3, [r7, #24]
 8002128:	8b3b      	ldrh	r3, [r7, #24]
 800212a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800212e:	833b      	strh	r3, [r7, #24]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	441a      	add	r2, r3
 800213e:	8b3b      	ldrh	r3, [r7, #24]
 8002140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002150:	b29b      	uxth	r3, r3
 8002152:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01f      	beq.n	800219e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002178:	82fb      	strh	r3, [r7, #22]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	441a      	add	r2, r3
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800218e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800219a:	b29b      	uxth	r3, r3
 800219c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800219e:	8b7b      	ldrh	r3, [r7, #26]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8087 	beq.w	80022b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6959      	ldr	r1, [r3, #20]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	891a      	ldrh	r2, [r3, #8]
 80021b2:	8b7b      	ldrh	r3, [r7, #26]
 80021b4:	f004 fa31 	bl	800661a <USB_ReadPMA>
 80021b8:	e07c      	b.n	80022b4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	3306      	adds	r3, #6
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	8b7b      	ldrh	r3, [r7, #26]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d306      	bcc.n	80021fc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	1ad2      	subs	r2, r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	619a      	str	r2, [r3, #24]
 80021fa:	e002      	b.n	8002202 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d123      	bne.n	8002252 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002224:	83fb      	strh	r3, [r7, #30]
 8002226:	8bfb      	ldrh	r3, [r7, #30]
 8002228:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800222c:	83fb      	strh	r3, [r7, #30]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	441a      	add	r2, r3
 800223c:	8bfb      	ldrh	r3, [r7, #30]
 800223e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800224a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224e:	b29b      	uxth	r3, r3
 8002250:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11f      	bne.n	800229c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002276:	83bb      	strh	r3, [r7, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	8bbb      	ldrh	r3, [r7, #28]
 8002288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800228c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002294:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002298:	b29b      	uxth	r3, r3
 800229a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800229c:	8b7b      	ldrh	r3, [r7, #26]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6959      	ldr	r1, [r3, #20]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	895a      	ldrh	r2, [r3, #10]
 80022ae:	8b7b      	ldrh	r3, [r7, #26]
 80022b0:	f004 f9b3 	bl	800661a <USB_ReadPMA>
    }
  }

  return count;
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b0a4      	sub	sp, #144	@ 0x90
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	4613      	mov	r3, r2
 80022ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 81dd 	beq.w	8002692 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	3302      	adds	r3, #2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002300:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800230c:	429a      	cmp	r2, r3
 800230e:	d907      	bls.n	8002320 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002318:	1ad2      	subs	r2, r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	619a      	str	r2, [r3, #24]
 800231e:	e002      	b.n	8002326 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80b9 	bne.w	80024a2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	785b      	ldrb	r3, [r3, #1]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d126      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	4413      	add	r3, r2
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	011a      	lsls	r2, r3, #4
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	4413      	add	r3, r2
 800235a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236a:	b29a      	uxth	r2, r3
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237e:	b29a      	uxth	r2, r3
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e01a      	b.n	80023bc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d116      	bne.n	80023bc <HAL_PCD_EP_DB_Transmit+0xfe>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	4413      	add	r3, r2
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	011a      	lsls	r2, r3, #4
 80023ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ae:	4413      	add	r3, r2
 80023b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	2200      	movs	r2, #0
 80023ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d126      	bne.n	8002418 <HAL_PCD_EP_DB_Transmit+0x15a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	011a      	lsls	r2, r3, #4
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002410:	b29a      	uxth	r2, r3
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	e017      	b.n	8002448 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	785b      	ldrb	r3, [r3, #1]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d113      	bne.n	8002448 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	4413      	add	r3, r2
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	011a      	lsls	r2, r3, #4
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	4413      	add	r3, r2
 800243c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2200      	movs	r2, #0
 8002446:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f005 fee3 	bl	800821a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 82fc 	beq.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247a:	82fb      	strh	r3, [r7, #22]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	8afb      	ldrh	r3, [r7, #22]
 800248c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002494:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800249c:	b29b      	uxth	r3, r3
 800249e:	8013      	strh	r3, [r2, #0]
 80024a0:	e2da      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d021      	beq.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	441a      	add	r2, r3
 80024d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	f040 82ae 	bne.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002504:	441a      	add	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002512:	441a      	add	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d30b      	bcc.n	800253c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002534:	1ad2      	subs	r2, r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	621a      	str	r2, [r3, #32]
 800253a:	e017      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d108      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002544:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002554:	e00a      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	785b      	ldrb	r3, [r3, #1]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d165      	bne.n	8002640 <HAL_PCD_EP_DB_Transmit+0x382>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002588:	4413      	add	r3, r2
 800258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	011a      	lsls	r2, r3, #4
 8002592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002594:	4413      	add	r3, r2
 8002596:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80025b2:	d91d      	bls.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x332>
 80025b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <HAL_PCD_EP_DB_Transmit+0x310>
 80025c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ca:	3b01      	subs	r3, #1
 80025cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	e044      	b.n	800267a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x350>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002606:	b29a      	uxth	r2, r3
 8002608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	e035      	b.n	800267a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800260e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002624:	3301      	adds	r3, #1
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29a      	uxth	r2, r3
 800262e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002630:	b29b      	uxth	r3, r3
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	b29b      	uxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	b29a      	uxth	r2, r3
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	e01c      	b.n	800267a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	785b      	ldrb	r3, [r3, #1]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d118      	bne.n	800267a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265c:	4413      	add	r3, r2
 800265e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	011a      	lsls	r2, r3, #4
 8002666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002668:	4413      	add	r3, r2
 800266a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800266e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002674:	b29a      	uxth	r2, r3
 8002676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002678:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6959      	ldr	r1, [r3, #20]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	891a      	ldrh	r2, [r3, #8]
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800268a:	b29b      	uxth	r3, r3
 800268c:	f003 ff7f 	bl	800658e <USB_WritePMA>
 8002690:	e1e2      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	3306      	adds	r3, #6
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d307      	bcc.n	80026da <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	619a      	str	r2, [r3, #24]
 80026d8:	e002      	b.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 80c0 	bne.w	800286a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d126      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x482>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002706:	4413      	add	r3, r2
 8002708:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	011a      	lsls	r2, r3, #4
 8002710:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002712:	4413      	add	r3, r2
 8002714:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800271a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002724:	b29a      	uxth	r2, r3
 8002726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002738:	b29a      	uxth	r2, r3
 800273a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e01a      	b.n	8002776 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d116      	bne.n	8002776 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	667b      	str	r3, [r7, #100]	@ 0x64
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800275c:	4413      	add	r3, r2
 800275e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	011a      	lsls	r2, r3, #4
 8002766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002768:	4413      	add	r3, r2
 800276a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800276e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002772:	2200      	movs	r2, #0
 8002774:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	677b      	str	r3, [r7, #116]	@ 0x74
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d12b      	bne.n	80027dc <HAL_PCD_EP_DB_Transmit+0x51e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002798:	4413      	add	r3, r2
 800279a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	011a      	lsls	r2, r3, #4
 80027a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a4:	4413      	add	r3, r2
 80027a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	e017      	b.n	800280c <HAL_PCD_EP_DB_Transmit+0x54e>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	785b      	ldrb	r3, [r3, #1]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d113      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x54e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f2:	4413      	add	r3, r2
 80027f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	011a      	lsls	r2, r3, #4
 80027fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027fe:	4413      	add	r3, r2
 8002800:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002804:	673b      	str	r3, [r7, #112]	@ 0x70
 8002806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002808:	2200      	movs	r2, #0
 800280a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f005 fd01 	bl	800821a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 811a 	bne.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	441a      	add	r2, r3
 8002850:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800285c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002864:	b29b      	uxth	r3, r3
 8002866:	8013      	strh	r3, [r2, #0]
 8002868:	e0f6      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d121      	bne.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800288a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 80ca 	bne.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028cc:	441a      	add	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028da:	441a      	add	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d30b      	bcc.n	8002904 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028fc:	1ad2      	subs	r2, r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	621a      	str	r2, [r3, #32]
 8002902:	e017      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800290c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800291c:	e00a      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	657b      	str	r3, [r7, #84]	@ 0x54
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d165      	bne.n	8002a0e <HAL_PCD_EP_DB_Transmit+0x750>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002956:	4413      	add	r3, r2
 8002958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	011a      	lsls	r2, r3, #4
 8002960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002962:	4413      	add	r3, r2
 8002964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800296a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	b29a      	uxth	r2, r3
 8002976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002980:	d91d      	bls.n	80029be <HAL_PCD_EP_DB_Transmit+0x700>
 8002982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800298a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_PCD_EP_DB_Transmit+0x6de>
 8002996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002998:	3b01      	subs	r3, #1
 800299a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800299c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e041      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x784>
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_PCD_EP_DB_Transmit+0x71e>
 80029c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	e032      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x784>
 80029dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x738>
 80029f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029f2:	3301      	adds	r3, #1
 80029f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	e019      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d115      	bne.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a24:	4413      	add	r3, r2
 8002a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	011a      	lsls	r2, r3, #4
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a30:	4413      	add	r3, r2
 8002a32:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a40:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6959      	ldr	r1, [r3, #20]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	895a      	ldrh	r2, [r3, #10]
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f003 fd9b 	bl	800658e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a72:	82bb      	strh	r3, [r7, #20]
 8002a74:	8abb      	ldrh	r3, [r7, #20]
 8002a76:	f083 0310 	eor.w	r3, r3, #16
 8002a7a:	82bb      	strh	r3, [r7, #20]
 8002a7c:	8abb      	ldrh	r3, [r7, #20]
 8002a7e:	f083 0320 	eor.w	r3, r3, #32
 8002a82:	82bb      	strh	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	8abb      	ldrh	r3, [r7, #20]
 8002a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3790      	adds	r7, #144	@ 0x90
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	897b      	ldrh	r3, [r7, #10]
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	3310      	adds	r3, #16
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e009      	b.n	8002afc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae8:	897a      	ldrh	r2, [r7, #10]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002afc:	893b      	ldrh	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	80da      	strh	r2, [r3, #6]
 8002b10:	e00b      	b.n	8002b2a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2201      	movs	r2, #1
 8002b16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e272      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e24c      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fd ff3e 	bl	8000a94 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fd ff3a 	bl	8000a94 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e200      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fd ff2a 	bl	8000a94 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fd ff26 	bl	8000a94 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1ec      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c0      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	@ (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fd fedf 	bl	8000a94 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fd fedb 	bl	8000a94 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a1      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	@ (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fd febe 	bl	8000a94 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fd feba 	bl	8000a94 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e180      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fd fe9e 	bl	8000a94 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fd fe9a 	bl	8000a94 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e160      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 fa9c 	bl	80032b8 <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fd fe84 	bl	8000a94 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fd fe80 	bl	8000a94 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e146      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b92      	ldr	r3, [pc, #584]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b8b      	ldr	r3, [pc, #556]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a87      	ldr	r2, [pc, #540]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b85      	ldr	r3, [pc, #532]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b82      	ldr	r3, [pc, #520]	@ (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b7f      	ldr	r3, [pc, #508]	@ (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7e      	ldr	r2, [pc, #504]	@ (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fd fe41 	bl	8000a94 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fd fe3d 	bl	8000a94 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	@ 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e103      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b75      	ldr	r3, [pc, #468]	@ (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a69      	ldr	r2, [pc, #420]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b67      	ldr	r3, [pc, #412]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a66      	ldr	r2, [pc, #408]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a60      	ldr	r2, [pc, #384]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b5e      	ldr	r3, [pc, #376]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a5d      	ldr	r2, [pc, #372]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a5a      	ldr	r2, [pc, #360]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b58      	ldr	r3, [pc, #352]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a57      	ldr	r2, [pc, #348]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fd fdf1 	bl	8000a94 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fded 	bl	8000a94 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0b1      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fd fddb 	bl	8000a94 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fd fdd7 	bl	8000a94 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e09b      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b33      	ldr	r3, [pc, #204]	@ (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fdab 	bl	8000a94 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fd fda7 	bl	8000a94 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e06d      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4921      	ldr	r1, [pc, #132]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	491b      	ldr	r1, [pc, #108]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fd fd7b 	bl	8000a94 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fd fd77 	bl	8000a94 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e03d      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e035      	b.n	800302e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fd fd64 	bl	8000a94 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fd fd60 	bl	8000a94 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e026      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e01e      	b.n	800302e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e019      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_OscConfig+0x500>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	429a      	cmp	r2, r3
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0d0      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b6a      	ldr	r3, [pc, #424]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b67      	ldr	r3, [pc, #412]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4965      	ldr	r1, [pc, #404]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d040      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e073      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b39      	ldr	r3, [pc, #228]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4936      	ldr	r1, [pc, #216]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fd fcb2 	bl	8000a94 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fd fcae 	bl	8000a94 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e053      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b27      	ldr	r3, [pc, #156]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d210      	bcs.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b24      	ldr	r3, [pc, #144]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4922      	ldr	r1, [pc, #136]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b6:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f821 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490a      	ldr	r1, [pc, #40]	@ (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <HAL_RCC_ClockConfig+0x1cc>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fc10 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40022000 	.word	0x40022000
 8003200:	40021000 	.word	0x40021000
 8003204:	08008770 	.word	0x08008770
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322a:	4b1e      	ldr	r3, [pc, #120]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x30>
 800323a:	2b08      	cmp	r3, #8
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x36>
 800323e:	e027      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003242:	613b      	str	r3, [r7, #16]
      break;
 8003244:	e027      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	0c9b      	lsrs	r3, r3, #18
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800325e:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	0c5b      	lsrs	r3, r3, #17
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	4a11      	ldr	r2, [pc, #68]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003272:	fb03 f202 	mul.w	r2, r3, r2
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e004      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a0c      	ldr	r2, [pc, #48]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	613b      	str	r3, [r7, #16]
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003292:	613b      	str	r3, [r7, #16]
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	693b      	ldr	r3, [r7, #16]
}
 8003298:	4618      	mov	r0, r3
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200
 80032ac:	08008780 	.word	0x08008780
 80032b0:	08008790 	.word	0x08008790
 80032b4:	003d0900 	.word	0x003d0900

080032b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <RCC_Delay+0x34>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <RCC_Delay+0x38>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0a5b      	lsrs	r3, r3, #9
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032d4:	bf00      	nop
  }
  while (Delay --);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e5a      	subs	r2, r3, #1
 80032da:	60fa      	str	r2, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f9      	bne.n	80032d4 <RCC_Delay+0x1c>
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	20000000 	.word	0x20000000
 80032f0:	10624dd3 	.word	0x10624dd3

080032f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d07d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003314:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	4b4c      	ldr	r3, [pc, #304]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4a4b      	ldr	r2, [pc, #300]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332a:	61d3      	str	r3, [r2, #28]
 800332c:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003338:	2301      	movs	r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b46      	ldr	r3, [pc, #280]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d118      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003348:	4b43      	ldr	r3, [pc, #268]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a42      	ldr	r2, [pc, #264]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003354:	f7fd fb9e 	bl	8000a94 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	e008      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fd fb9a 	bl	8000a94 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e06d      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b3a      	ldr	r3, [pc, #232]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800337a:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02e      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d027      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003398:	4b2e      	ldr	r3, [pc, #184]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a2:	4b2e      	ldr	r3, [pc, #184]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a8:	4b2c      	ldr	r3, [pc, #176]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ae:	4a29      	ldr	r2, [pc, #164]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fb69 	bl	8000a94 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fd fb65 	bl	8000a94 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e036      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ee      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4917      	ldr	r1, [pc, #92]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003400:	4b14      	ldr	r3, [pc, #80]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4a13      	ldr	r2, [pc, #76]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800340a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	490b      	ldr	r1, [pc, #44]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003436:	4b07      	ldr	r3, [pc, #28]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4904      	ldr	r1, [pc, #16]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
 800345c:	42420440 	.word	0x42420440

08003460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e076      	b.n	8003560 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003482:	d009      	beq.n	8003498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
 800348a:	e005      	b.n	8003498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd f9ea 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	0c1a      	lsrs	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f002 0204 	and.w	r2, r2, #4
 800353e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800354e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003578:	f7fd fa8c 	bl	8000a94 <HAL_GetTick>
 800357c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	e12a      	b.n	80037e8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_SPI_Transmit+0x36>
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e122      	b.n	80037e8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_Transmit+0x48>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e11b      	b.n	80037e8 <HAL_SPI_Transmit+0x280>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fe:	d10f      	bne.n	8003620 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800360e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800361e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d007      	beq.n	800363e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003646:	d152      	bne.n	80036ee <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_SPI_Transmit+0xee>
 8003650:	8b7b      	ldrh	r3, [r7, #26]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d145      	bne.n	80036e2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800367a:	e032      	b.n	80036e2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d112      	bne.n	80036b0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036ae:	e018      	b.n	80036e2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b0:	f7fd f9f0 	bl	8000a94 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d803      	bhi.n	80036c8 <HAL_SPI_Transmit+0x160>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_Transmit+0x166>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e082      	b.n	80037e8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1c7      	bne.n	800367c <HAL_SPI_Transmit+0x114>
 80036ec:	e053      	b.n	8003796 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_SPI_Transmit+0x194>
 80036f6:	8b7b      	ldrh	r3, [r7, #26]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d147      	bne.n	800378c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	7812      	ldrb	r2, [r2, #0]
 8003708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003722:	e033      	b.n	800378c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d113      	bne.n	800375a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003758:	e018      	b.n	800378c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800375a:	f7fd f99b 	bl	8000a94 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d803      	bhi.n	8003772 <HAL_SPI_Transmit+0x20a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d102      	bne.n	8003778 <HAL_SPI_Transmit+0x210>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e02d      	b.n	80037e8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1c6      	bne.n	8003724 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fbc4 	bl	8003f28 <SPI_EndRxTxTransaction>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e104      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003818:	d112      	bne.n	8003840 <HAL_SPI_Receive+0x50>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10e      	bne.n	8003840 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2204      	movs	r2, #4
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8f3 	bl	8003a22 <HAL_SPI_TransmitReceive>
 800383c:	4603      	mov	r3, r0
 800383e:	e0ec      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003840:	f7fd f928 	bl	8000a94 <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Receive+0x62>
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0e1      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_SPI_Receive+0x74>
 8003860:	2302      	movs	r3, #2
 8003862:	e0da      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2204      	movs	r2, #4
 8003870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b2:	d10f      	bne.n	80038d4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d007      	beq.n	80038f2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d170      	bne.n	80039dc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038fa:	e035      	b.n	8003968 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	d115      	bne.n	8003936 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f103 020c 	add.w	r2, r3, #12
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003934:	e018      	b.n	8003968 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003936:	f7fd f8ad 	bl	8000a94 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_Receive+0x15e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <HAL_SPI_Receive+0x164>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e058      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1c4      	bne.n	80038fc <HAL_SPI_Receive+0x10c>
 8003972:	e038      	b.n	80039e6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d113      	bne.n	80039aa <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	b292      	uxth	r2, r2
 800398e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	1c9a      	adds	r2, r3, #2
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039a8:	e018      	b.n	80039dc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039aa:	f7fd f873 	bl	8000a94 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d803      	bhi.n	80039c2 <HAL_SPI_Receive+0x1d2>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d102      	bne.n	80039c8 <HAL_SPI_Receive+0x1d8>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e01e      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1c6      	bne.n	8003974 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fa4a 	bl	8003e84 <SPI_EndRxTransaction>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b08a      	sub	sp, #40	@ 0x28
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a30:	2301      	movs	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a34:	f7fd f82e 	bl	8000a94 <HAL_GetTick>
 8003a38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d00c      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x4a>
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a58:	d106      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x46>
 8003a62:	7ffb      	ldrb	r3, [r7, #31]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d001      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e17f      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0x5c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0x5c>
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e174      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x6e>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e16d      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d003      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	887a      	ldrh	r2, [r7, #2]
 8003ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d007      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b08:	d17e      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0xf6>
 8003b12:	8afb      	ldrh	r3, [r7, #22]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d16c      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	1c9a      	adds	r2, r3, #2
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	e059      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x162>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_SPI_TransmitReceive+0x162>
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d113      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d119      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x1a4>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d014      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	1c9a      	adds	r2, r3, #2
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bc6:	f7fc ff65 	bl	8000a94 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d80d      	bhi.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d0>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d009      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0bc      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1a0      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x11c>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d19b      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x11c>
 8003c06:	e082      	b.n	8003d0e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x1f4>
 8003c10:	8afb      	ldrh	r3, [r7, #22]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d171      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3c:	e05d      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d11c      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x264>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d017      	beq.n	8003c86 <HAL_SPI_TransmitReceive+0x264>
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d114      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	7812      	ldrb	r2, [r2, #0]
 8003c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d119      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x2a6>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d014      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cc8:	f7fc fee4 	bl	8000a94 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d803      	bhi.n	8003ce0 <HAL_SPI_TransmitReceive+0x2be>
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x2c4>
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e038      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d19c      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x21c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d197      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f908 	bl	8003f28 <SPI_EndRxTxTransaction>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01d      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3728      	adds	r7, #40	@ 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d84:	f7fc fe86 	bl	8000a94 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	4413      	add	r3, r2
 8003d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d94:	f7fc fe7e 	bl	8000a94 <HAL_GetTick>
 8003d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d9a:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	0d1b      	lsrs	r3, r3, #20
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003daa:	e054      	b.n	8003e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d050      	beq.n	8003e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db4:	f7fc fe6e 	bl	8000a94 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d902      	bls.n	8003dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d13d      	bne.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de2:	d111      	bne.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dec:	d004      	beq.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df6:	d107      	bne.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e10:	d10f      	bne.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e017      	b.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d19b      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000

08003e84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e98:	d111      	bne.n	8003ebe <SPI_EndRxTransaction+0x3a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea2:	d004      	beq.n	8003eae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eac:	d107      	bne.n	8003ebe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec6:	d117      	bne.n	8003ef8 <SPI_EndRxTransaction+0x74>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed0:	d112      	bne.n	8003ef8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2101      	movs	r1, #1
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff ff49 	bl	8003d74 <SPI_WaitFlagStateUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e013      	b.n	8003f20 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2180      	movs	r1, #128	@ 0x80
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ff36 	bl	8003d74 <SPI_WaitFlagStateUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e000      	b.n	8003f20 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff ff18 	bl	8003d74 <SPI_WaitFlagStateUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e013      	b.n	8003f82 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2180      	movs	r1, #128	@ 0x80
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff ff05 	bl	8003d74 <SPI_WaitFlagStateUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	4638      	mov	r0, r7
 8003f94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fb4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003fb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fd8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003fdc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	4638      	mov	r0, r7
 8004026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
	...

08004058 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004058:	b480      	push	{r7}
 800405a:	b09d      	sub	sp, #116	@ 0x74
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	78db      	ldrb	r3, [r3, #3]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d81f      	bhi.n	80040ca <USB_ActivateEndpoint+0x72>
 800408a:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <USB_ActivateEndpoint+0x38>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040bd 	.word	0x080040bd
 8004098:	080040d3 	.word	0x080040d3
 800409c:	080040af 	.word	0x080040af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040ac:	e012      	b.n	80040d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040b2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80040b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040ba:	e00b      	b.n	80040d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040c8:	e004      	b.n	80040d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80040d0:	e000      	b.n	80040d4 <USB_ActivateEndpoint+0x7c>
      break;
 80040d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	441a      	add	r2, r3
 80040de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410c:	b29b      	uxth	r3, r3
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800412a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004136:	b29b      	uxth	r3, r3
 8004138:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	7b1b      	ldrb	r3, [r3, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 8178 	bne.w	8004434 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8084 	beq.w	8004256 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	011a      	lsls	r2, r3, #4
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	88db      	ldrh	r3, [r3, #6]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	b29b      	uxth	r3, r3
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	827b      	strh	r3, [r7, #18]
 8004190:	8a7b      	ldrh	r3, [r7, #18]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01b      	beq.n	80041d2 <USB_ActivateEndpoint+0x17a>
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b0:	823b      	strh	r3, [r7, #16]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	8a3b      	ldrh	r3, [r7, #16]
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	78db      	ldrb	r3, [r3, #3]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d020      	beq.n	800421c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041f0:	81bb      	strh	r3, [r7, #12]
 80041f2:	89bb      	ldrh	r3, [r7, #12]
 80041f4:	f083 0320 	eor.w	r3, r3, #32
 80041f8:	81bb      	strh	r3, [r7, #12]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	89bb      	ldrh	r3, [r7, #12]
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]
 800421a:	e2d5      	b.n	80047c8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004232:	81fb      	strh	r3, [r7, #14]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	89fb      	ldrh	r3, [r7, #14]
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800424c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
 8004254:	e2b8      	b.n	80047c8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	633b      	str	r3, [r7, #48]	@ 0x30
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004260:	b29b      	uxth	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	4413      	add	r3, r2
 8004268:	633b      	str	r3, [r7, #48]	@ 0x30
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	011a      	lsls	r2, r3, #4
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	4413      	add	r3, r2
 8004274:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	88db      	ldrh	r3, [r3, #6]
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	b29b      	uxth	r3, r3
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	4413      	add	r3, r2
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	011a      	lsls	r2, r3, #4
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	4413      	add	r3, r2
 80042a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80042c4:	d91d      	bls.n	8004302 <USB_ActivateEndpoint+0x2aa>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <USB_ActivateEndpoint+0x288>
 80042da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042dc:	3b01      	subs	r3, #1
 80042de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	e026      	b.n	8004350 <USB_ActivateEndpoint+0x2f8>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <USB_ActivateEndpoint+0x2c8>
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004318:	b29a      	uxth	r2, r3
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	e017      	b.n	8004350 <USB_ActivateEndpoint+0x2f8>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <USB_ActivateEndpoint+0x2e2>
 8004334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004336:	3301      	adds	r3, #1
 8004338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004342:	b29b      	uxth	r3, r3
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	b29b      	uxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b29a      	uxth	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800435e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <USB_ActivateEndpoint+0x348>
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800437a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437e:	843b      	strh	r3, [r7, #32]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	8c3b      	ldrh	r3, [r7, #32]
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004394:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d124      	bne.n	80043f2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043be:	83bb      	strh	r3, [r7, #28]
 80043c0:	8bbb      	ldrh	r3, [r7, #28]
 80043c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80043c6:	83bb      	strh	r3, [r7, #28]
 80043c8:	8bbb      	ldrh	r3, [r7, #28]
 80043ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043ce:	83bb      	strh	r3, [r7, #28]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	8bbb      	ldrh	r3, [r7, #28]
 80043dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	8013      	strh	r3, [r2, #0]
 80043f0:	e1ea      	b.n	80047c8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004408:	83fb      	strh	r3, [r7, #30]
 800440a:	8bfb      	ldrh	r3, [r7, #30]
 800440c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004410:	83fb      	strh	r3, [r7, #30]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	8bfb      	ldrh	r3, [r7, #30]
 800441e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800442a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]
 8004432:	e1c9      	b.n	80047c8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	78db      	ldrb	r3, [r3, #3]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d11e      	bne.n	800447a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004452:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800446c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004474:	b29b      	uxth	r3, r3
 8004476:	8013      	strh	r3, [r2, #0]
 8004478:	e01d      	b.n	80044b6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800448c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004490:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80044a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c6:	4413      	add	r3, r2
 80044c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	011a      	lsls	r2, r3, #4
 80044d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	891b      	ldrh	r3, [r3, #8]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fa:	4413      	add	r3, r2
 80044fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	011a      	lsls	r2, r3, #4
 8004504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004506:	4413      	add	r3, r2
 8004508:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800450c:	653b      	str	r3, [r7, #80]	@ 0x50
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	895b      	ldrh	r3, [r3, #10]
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	b29b      	uxth	r3, r3
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800451c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 8093 	bne.w	800464e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800453c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <USB_ActivateEndpoint+0x524>
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800458a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800458c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <USB_ActivateEndpoint+0x574>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80045e4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80045e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80045ea:	873b      	strh	r3, [r7, #56]	@ 0x38
 80045ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80045ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045f2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800462a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800463c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]
 800464c:	e0bc      	b.n	80047c8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800465e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01d      	beq.n	80046a6 <USB_ActivateEndpoint+0x64e>
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004680:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800469a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800469e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80046b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01d      	beq.n	80046fe <USB_ActivateEndpoint+0x6a6>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d024      	beq.n	8004750 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004720:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004724:	f083 0320 	eor.w	r3, r3, #32
 8004728:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800473a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004766:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80047b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80047c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3774      	adds	r7, #116	@ 0x74
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop

080047d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047d8:	b480      	push	{r7}
 80047da:	b08d      	sub	sp, #52	@ 0x34
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	7b1b      	ldrb	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 808e 	bne.w	8004908 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d044      	beq.n	800487e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	81bb      	strh	r3, [r7, #12]
 8004802:	89bb      	ldrh	r3, [r7, #12]
 8004804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <USB_DeactivateEndpoint+0x6c>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	817b      	strh	r3, [r7, #10]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800485a:	813b      	strh	r3, [r7, #8]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	893b      	ldrh	r3, [r7, #8]
 8004868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800486c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004878:	b29b      	uxth	r3, r3
 800487a:	8013      	strh	r3, [r2, #0]
 800487c:	e192      	b.n	8004ba4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	827b      	strh	r3, [r7, #18]
 800488c:	8a7b      	ldrh	r3, [r7, #18]
 800488e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <USB_DeactivateEndpoint+0xf6>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ac:	823b      	strh	r3, [r7, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8a3b      	ldrh	r3, [r7, #16]
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e4:	81fb      	strh	r3, [r7, #14]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
 8004906:	e14d      	b.n	8004ba4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 80a5 	bne.w	8004a5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	843b      	strh	r3, [r7, #32]
 8004920:	8c3b      	ldrh	r3, [r7, #32]
 8004922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01b      	beq.n	8004962 <USB_DeactivateEndpoint+0x18a>
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004940:	83fb      	strh	r3, [r7, #30]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8bfb      	ldrh	r3, [r7, #30]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800495a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	83bb      	strh	r3, [r7, #28]
 8004970:	8bbb      	ldrh	r3, [r7, #28]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <USB_DeactivateEndpoint+0x1da>
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800498c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004990:	837b      	strh	r3, [r7, #26]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	8b7b      	ldrh	r3, [r7, #26]
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c8:	833b      	strh	r3, [r7, #24]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	8b3b      	ldrh	r3, [r7, #24]
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a00:	82fb      	strh	r3, [r7, #22]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	8afb      	ldrh	r3, [r7, #22]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a38:	82bb      	strh	r3, [r7, #20]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	8abb      	ldrh	r3, [r7, #20]
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
 8004a5a:	e0a3      	b.n	8004ba4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004a6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01b      	beq.n	8004aac <USB_DeactivateEndpoint+0x2d4>
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004aba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <USB_DeactivateEndpoint+0x324>
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	441a      	add	r2, r3
 8004b8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3734      	adds	r7, #52	@ 0x34
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b0c2      	sub	sp, #264	@ 0x108
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bbe:	6018      	str	r0, [r3, #0]
 8004bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 86b7 	bne.w	800594a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d908      	bls.n	8004c0a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c08:	e007      	b.n	8004c1a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	7b1b      	ldrb	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d13a      	bne.n	8004ca0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6959      	ldr	r1, [r3, #20]
 8004c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	88da      	ldrh	r2, [r3, #6]
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c50:	6800      	ldr	r0, [r0, #0]
 8004c52:	f001 fc9c 	bl	800658e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	011a      	lsls	r2, r3, #4
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	f000 be1f 	b.w	80058de <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	78db      	ldrb	r3, [r3, #3]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	f040 8462 	bne.w	8005576 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6a1a      	ldr	r2, [r3, #32]
 8004cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	f240 83df 	bls.w	800548e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d20:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3c:	1ad2      	subs	r2, r2, r3
 8004d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 81c7 	beq.w	8005100 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d177      	bne.n	8004e7e <USB_EPStartXfer+0x2ce>
 8004d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	4413      	add	r3, r2
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	011a      	lsls	r2, r3, #4
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dde:	2b3e      	cmp	r3, #62	@ 0x3e
 8004de0:	d921      	bls.n	8004e26 <USB_EPStartXfer+0x276>
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <USB_EPStartXfer+0x252>
 8004df8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4313      	orrs	r3, r2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	801a      	strh	r2, [r3, #0]
 8004e24:	e050      	b.n	8004ec8 <USB_EPStartXfer+0x318>
 8004e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <USB_EPStartXfer+0x294>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e041      	b.n	8004ec8 <USB_EPStartXfer+0x318>
 8004e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <USB_EPStartXfer+0x2b4>
 8004e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	e024      	b.n	8004ec8 <USB_EPStartXfer+0x318>
 8004e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d11c      	bne.n	8004ec8 <USB_EPStartXfer+0x318>
 8004e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	4413      	add	r3, r2
 8004ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	011a      	lsls	r2, r3, #4
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	895b      	ldrh	r3, [r3, #10]
 8004ed4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6959      	ldr	r1, [r3, #20]
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004eee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ef2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ef6:	6800      	ldr	r0, [r0, #0]
 8004ef8:	f001 fb49 	bl	800658e <USB_WritePMA>
            ep->xfer_buff += len;
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	441a      	add	r2, r3
 8004f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d90f      	bls.n	8004f56 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a1a      	ldr	r2, [r3, #32]
 8004f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	621a      	str	r2, [r3, #32]
 8004f54:	e00e      	b.n	8004f74 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d177      	bne.n	8005074 <USB_EPStartXfer+0x4c4>
 8004f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	011a      	lsls	r2, r3, #4
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fd6:	d921      	bls.n	800501c <USB_EPStartXfer+0x46c>
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <USB_EPStartXfer+0x448>
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	b29b      	uxth	r3, r3
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	b29b      	uxth	r3, r3
 8005008:	4313      	orrs	r3, r2
 800500a:	b29b      	uxth	r3, r3
 800500c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005014:	b29a      	uxth	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	e056      	b.n	80050ca <USB_EPStartXfer+0x51a>
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <USB_EPStartXfer+0x48a>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005032:	b29a      	uxth	r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	e047      	b.n	80050ca <USB_EPStartXfer+0x51a>
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <USB_EPStartXfer+0x4aa>
 8005050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005054:	3301      	adds	r3, #1
 8005056:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29a      	uxth	r2, r3
 8005060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005064:	b29b      	uxth	r3, r3
 8005066:	029b      	lsls	r3, r3, #10
 8005068:	b29b      	uxth	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b29a      	uxth	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	e02a      	b.n	80050ca <USB_EPStartXfer+0x51a>
 8005074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d122      	bne.n	80050ca <USB_EPStartXfer+0x51a>
 8005084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	623b      	str	r3, [r7, #32]
 8005090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	4413      	add	r3, r2
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	4413      	add	r3, r2
 80050ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	891b      	ldrh	r3, [r3, #8]
 80050d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6959      	ldr	r1, [r3, #20]
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050f8:	6800      	ldr	r0, [r0, #0]
 80050fa:	f001 fa48 	bl	800658e <USB_WritePMA>
 80050fe:	e3ee      	b.n	80058de <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d177      	bne.n	8005200 <USB_EPStartXfer+0x650>
 8005110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005130:	4413      	add	r3, r2
 8005132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	011a      	lsls	r2, r3, #4
 8005142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005144:	4413      	add	r3, r2
 8005146:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800514a:	647b      	str	r3, [r7, #68]	@ 0x44
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005156:	b29a      	uxth	r2, r3
 8005158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005160:	2b3e      	cmp	r3, #62	@ 0x3e
 8005162:	d921      	bls.n	80051a8 <USB_EPStartXfer+0x5f8>
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <USB_EPStartXfer+0x5d4>
 800517a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800517e:	3b01      	subs	r3, #1
 8005180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29a      	uxth	r2, r3
 800518a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29b      	uxth	r3, r3
 8005194:	4313      	orrs	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	e056      	b.n	8005256 <USB_EPStartXfer+0x6a6>
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <USB_EPStartXfer+0x616>
 80051b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	e047      	b.n	8005256 <USB_EPStartXfer+0x6a6>
 80051c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <USB_EPStartXfer+0x636>
 80051dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051e0:	3301      	adds	r3, #1
 80051e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	e02a      	b.n	8005256 <USB_EPStartXfer+0x6a6>
 8005200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d122      	bne.n	8005256 <USB_EPStartXfer+0x6a6>
 8005210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	653b      	str	r3, [r7, #80]	@ 0x50
 800521c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800522a:	b29b      	uxth	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005230:	4413      	add	r3, r2
 8005232:	653b      	str	r3, [r7, #80]	@ 0x50
 8005234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011a      	lsls	r2, r3, #4
 8005242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005244:	4413      	add	r3, r2
 8005246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005250:	b29a      	uxth	r2, r3
 8005252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005254:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	891b      	ldrh	r3, [r3, #8]
 8005262:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6959      	ldr	r1, [r3, #20]
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	b29b      	uxth	r3, r3
 8005278:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800527c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005280:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005284:	6800      	ldr	r0, [r0, #0]
 8005286:	f001 f982 	bl	800658e <USB_WritePMA>
            ep->xfer_buff += len;
 800528a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	441a      	add	r2, r3
 800529c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d90f      	bls.n	80052e4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80052c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	621a      	str	r2, [r3, #32]
 80052e2:	e00e      	b.n	8005302 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80052e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80052f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	643b      	str	r3, [r7, #64]	@ 0x40
 800530e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d177      	bne.n	800540e <USB_EPStartXfer+0x85e>
 800531e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800532a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533e:	4413      	add	r3, r2
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	4413      	add	r3, r2
 8005354:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
 800535a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005364:	b29a      	uxth	r2, r3
 8005366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005370:	d921      	bls.n	80053b6 <USB_EPStartXfer+0x806>
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <USB_EPStartXfer+0x7e2>
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	3b01      	subs	r3, #1
 800538e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29a      	uxth	r2, r3
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	b29b      	uxth	r3, r3
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4313      	orrs	r3, r2
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e050      	b.n	8005458 <USB_EPStartXfer+0x8a8>
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <USB_EPStartXfer+0x824>
 80053be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e041      	b.n	8005458 <USB_EPStartXfer+0x8a8>
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <USB_EPStartXfer+0x844>
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ee:	3301      	adds	r3, #1
 80053f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29b      	uxth	r3, r3
 8005404:	4313      	orrs	r3, r2
 8005406:	b29a      	uxth	r2, r3
 8005408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e024      	b.n	8005458 <USB_EPStartXfer+0x8a8>
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d11c      	bne.n	8005458 <USB_EPStartXfer+0x8a8>
 800541e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800542c:	b29b      	uxth	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005432:	4413      	add	r3, r2
 8005434:	643b      	str	r3, [r7, #64]	@ 0x40
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	011a      	lsls	r2, r3, #4
 8005444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005446:	4413      	add	r3, r2
 8005448:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005452:	b29a      	uxth	r2, r3
 8005454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005456:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	895b      	ldrh	r3, [r3, #10]
 8005464:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6959      	ldr	r1, [r3, #20]
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005478:	b29b      	uxth	r3, r3
 800547a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800547e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005482:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005486:	6800      	ldr	r0, [r0, #0]
 8005488:	f001 f881 	bl	800658e <USB_WritePMA>
 800548c:	e227      	b.n	80058de <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800548e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800549e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80054c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800551a:	4413      	add	r3, r2
 800551c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	011a      	lsls	r2, r3, #4
 800552c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800552e:	4413      	add	r3, r2
 8005530:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553a:	b29a      	uxth	r2, r3
 800553c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800553e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	891b      	ldrh	r3, [r3, #8]
 800554c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6959      	ldr	r1, [r3, #20]
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	b29b      	uxth	r3, r3
 8005562:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005566:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800556a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800556e:	6800      	ldr	r0, [r0, #0]
 8005570:	f001 f80d 	bl	800658e <USB_WritePMA>
 8005574:	e1b3      	b.n	80058de <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80c6 	beq.w	8005748 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d177      	bne.n	80056c8 <USB_EPStartXfer+0xb18>
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055f8:	4413      	add	r3, r2
 80055fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	011a      	lsls	r2, r3, #4
 800560a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800560c:	4413      	add	r3, r2
 800560e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005612:	667b      	str	r3, [r7, #100]	@ 0x64
 8005614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	b29a      	uxth	r2, r3
 8005620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005628:	2b3e      	cmp	r3, #62	@ 0x3e
 800562a:	d921      	bls.n	8005670 <USB_EPStartXfer+0xac0>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <USB_EPStartXfer+0xa9c>
 8005642:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005646:	3b01      	subs	r3, #1
 8005648:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800564c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29b      	uxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e050      	b.n	8005712 <USB_EPStartXfer+0xb62>
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <USB_EPStartXfer+0xade>
 8005678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005686:	b29a      	uxth	r2, r3
 8005688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e041      	b.n	8005712 <USB_EPStartXfer+0xb62>
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <USB_EPStartXfer+0xafe>
 80056a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056a8:	3301      	adds	r3, #1
 80056aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4313      	orrs	r3, r2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e024      	b.n	8005712 <USB_EPStartXfer+0xb62>
 80056c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d11c      	bne.n	8005712 <USB_EPStartXfer+0xb62>
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056ec:	4413      	add	r3, r2
 80056ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005700:	4413      	add	r3, r2
 8005702:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	b29a      	uxth	r2, r3
 800570e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005710:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	895b      	ldrh	r3, [r3, #10]
 800571e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6959      	ldr	r1, [r3, #20]
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005732:	b29b      	uxth	r3, r3
 8005734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005738:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800573c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f000 ff24 	bl	800658e <USB_WritePMA>
 8005746:	e0ca      	b.n	80058de <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d177      	bne.n	8005848 <USB_EPStartXfer+0xc98>
 8005758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005778:	4413      	add	r3, r2
 800577a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800577c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800578c:	4413      	add	r3, r2
 800578e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005792:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057aa:	d921      	bls.n	80057f0 <USB_EPStartXfer+0xc40>
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USB_EPStartXfer+0xc1c>
 80057c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	029b      	lsls	r3, r3, #10
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e05c      	b.n	80058aa <USB_EPStartXfer+0xcfa>
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <USB_EPStartXfer+0xc5e>
 80057f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e04d      	b.n	80058aa <USB_EPStartXfer+0xcfa>
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <USB_EPStartXfer+0xc7e>
 8005824:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005828:	3301      	adds	r3, #1
 800582a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800582e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29b      	uxth	r3, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e030      	b.n	80058aa <USB_EPStartXfer+0xcfa>
 8005848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d128      	bne.n	80058aa <USB_EPStartXfer+0xcfa>
 8005858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800587c:	4413      	add	r3, r2
 800587e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	011a      	lsls	r2, r3, #4
 8005890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005894:	4413      	add	r3, r2
 8005896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800589a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	891b      	ldrh	r3, [r3, #8]
 80058b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6959      	ldr	r1, [r3, #20]
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058d8:	6800      	ldr	r0, [r0, #0]
 80058da:	f000 fe58 	bl	800658e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005904:	817b      	strh	r3, [r7, #10]
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	f083 0310 	eor.w	r3, r3, #16
 800590c:	817b      	strh	r3, [r7, #10]
 800590e:	897b      	ldrh	r3, [r7, #10]
 8005910:	f083 0320 	eor.w	r3, r3, #32
 8005914:	817b      	strh	r3, [r7, #10]
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	897b      	ldrh	r3, [r7, #10]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
 8005946:	f000 bcde 	b.w	8006306 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	7b1b      	ldrb	r3, [r3, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 80bb 	bne.w	8005ad2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800595c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	429a      	cmp	r2, r3
 8005976:	d917      	bls.n	80059a8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005998:	1ad2      	subs	r2, r2, r3
 800599a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	619a      	str	r2, [r3, #24]
 80059a6:	e00e      	b.n	80059c6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059ea:	4413      	add	r3, r2
 80059ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	011a      	lsls	r2, r3, #4
 80059fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a02:	4413      	add	r3, r2
 8005a04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a26:	d924      	bls.n	8005a72 <USB_EPStartXfer+0xec2>
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <USB_EPStartXfer+0xe98>
 8005a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	029b      	lsls	r3, r3, #10
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	f000 bc10 	b.w	8006292 <USB_EPStartXfer+0x16e2>
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10c      	bne.n	8005a94 <USB_EPStartXfer+0xee4>
 8005a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e3fe      	b.n	8006292 <USB_EPStartXfer+0x16e2>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <USB_EPStartXfer+0xf04>
 8005aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e3df      	b.n	8006292 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	78db      	ldrb	r3, [r3, #3]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	f040 8218 	bne.w	8005f14 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 809d 	bne.w	8005c30 <USB_EPStartXfer+0x1080>
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	011a      	lsls	r2, r3, #4
 8005b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b32:	4413      	add	r3, r2
 8005b34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b5e:	d92b      	bls.n	8005bb8 <USB_EPStartXfer+0x1008>
 8005b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <USB_EPStartXfer+0xfe0>
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e070      	b.n	8005c9a <USB_EPStartXfer+0x10ea>
 8005bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10c      	bne.n	8005be2 <USB_EPStartXfer+0x1032>
 8005bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e05b      	b.n	8005c9a <USB_EPStartXfer+0x10ea>
 8005be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <USB_EPStartXfer+0x1062>
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	029b      	lsls	r3, r3, #10
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e034      	b.n	8005c9a <USB_EPStartXfer+0x10ea>
 8005c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d12c      	bne.n	8005c9a <USB_EPStartXfer+0x10ea>
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c64:	4413      	add	r3, r2
 8005c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	011a      	lsls	r2, r3, #4
 8005c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 809d 	bne.w	8005df4 <USB_EPStartXfer+0x1244>
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cde:	4413      	add	r3, r2
 8005ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	011a      	lsls	r2, r3, #4
 8005cf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d22:	d92b      	bls.n	8005d7c <USB_EPStartXfer+0x11cc>
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <USB_EPStartXfer+0x11a4>
 8005d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e069      	b.n	8005e50 <USB_EPStartXfer+0x12a0>
 8005d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10c      	bne.n	8005da6 <USB_EPStartXfer+0x11f6>
 8005d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005da2:	801a      	strh	r2, [r3, #0]
 8005da4:	e054      	b.n	8005e50 <USB_EPStartXfer+0x12a0>
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <USB_EPStartXfer+0x1226>
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e02d      	b.n	8005e50 <USB_EPStartXfer+0x12a0>
 8005df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d125      	bne.n	8005e50 <USB_EPStartXfer+0x12a0>
 8005e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e4e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8218 	beq.w	8006292 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <USB_EPStartXfer+0x12ea>
 8005e8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10d      	bne.n	8005eb6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 81f5 	bne.w	8006292 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ea8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 81ee 	bne.w	8006292 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005edc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]
 8005f12:	e1be      	b.n	8006292 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f040 81b4 	bne.w	800628e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d917      	bls.n	8005f72 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	619a      	str	r2, [r3, #24]
 8005f70:	e00e      	b.n	8005f90 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 8085 	bne.w	80060ac <USB_EPStartXfer+0x14fc>
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fde:	4413      	add	r3, r2
 8005fe0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006000:	2b3e      	cmp	r3, #62	@ 0x3e
 8006002:	d923      	bls.n	800604c <USB_EPStartXfer+0x149c>
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <USB_EPStartXfer+0x1474>
 800601a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800601e:	3b01      	subs	r3, #1
 8006020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006030:	b29b      	uxth	r3, r3
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	b29b      	uxth	r3, r3
 8006036:	4313      	orrs	r3, r2
 8006038:	b29b      	uxth	r3, r3
 800603a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e060      	b.n	800610e <USB_EPStartXfer+0x155e>
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10c      	bne.n	800606e <USB_EPStartXfer+0x14be>
 8006054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006064:	b29a      	uxth	r2, r3
 8006066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	e04f      	b.n	800610e <USB_EPStartXfer+0x155e>
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <USB_EPStartXfer+0x14de>
 8006084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006088:	3301      	adds	r3, #1
 800608a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800608e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800609a:	b29b      	uxth	r3, r3
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	b29b      	uxth	r3, r3
 80060a0:	4313      	orrs	r3, r2
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e030      	b.n	800610e <USB_EPStartXfer+0x155e>
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d128      	bne.n	800610e <USB_EPStartXfer+0x155e>
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060e0:	4413      	add	r3, r2
 80060e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	011a      	lsls	r2, r3, #4
 80060f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	b29a      	uxth	r2, r3
 8006108:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f040 8085 	bne.w	8006238 <USB_EPStartXfer+0x1688>
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800613c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614a:	b29b      	uxth	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006152:	4413      	add	r3, r2
 8006154:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800616a:	4413      	add	r3, r2
 800616c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	2b3e      	cmp	r3, #62	@ 0x3e
 800618e:	d923      	bls.n	80061d8 <USB_EPStartXfer+0x1628>
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <USB_EPStartXfer+0x1600>
 80061a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061aa:	3b01      	subs	r3, #1
 80061ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	e05c      	b.n	8006292 <USB_EPStartXfer+0x16e2>
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10c      	bne.n	80061fa <USB_EPStartXfer+0x164a>
 80061e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e04b      	b.n	8006292 <USB_EPStartXfer+0x16e2>
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <USB_EPStartXfer+0x166a>
 8006210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006214:	3301      	adds	r3, #1
 8006216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800621a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	4313      	orrs	r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e02c      	b.n	8006292 <USB_EPStartXfer+0x16e2>
 8006238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d124      	bne.n	8006292 <USB_EPStartXfer+0x16e2>
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800625e:	4413      	add	r3, r2
 8006260:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	011a      	lsls	r2, r3, #4
 8006272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006276:	4413      	add	r3, r2
 8006278:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800627c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e001      	b.n	8006292 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e03a      	b.n	8006308 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d020      	beq.n	8006366 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800633a:	81bb      	strh	r3, [r7, #12]
 800633c:	89bb      	ldrh	r3, [r7, #12]
 800633e:	f083 0310 	eor.w	r3, r3, #16
 8006342:	81bb      	strh	r3, [r7, #12]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	89bb      	ldrh	r3, [r7, #12]
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]
 8006364:	e01f      	b.n	80063a6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637c:	81fb      	strh	r3, [r7, #14]
 800637e:	89fb      	ldrh	r3, [r7, #14]
 8006380:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006384:	81fb      	strh	r3, [r7, #14]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	89fb      	ldrh	r3, [r7, #14]
 8006392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800639e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr

080063b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b087      	sub	sp, #28
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	7b1b      	ldrb	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 809d 	bne.w	8006500 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04c      	beq.n	8006468 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	823b      	strh	r3, [r7, #16]
 80063dc:	8a3b      	ldrh	r3, [r7, #16]
 80063de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01b      	beq.n	800641e <USB_EPClearStall+0x6c>
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fc:	81fb      	strh	r3, [r7, #14]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	78db      	ldrb	r3, [r3, #3]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d06c      	beq.n	8006500 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800643c:	81bb      	strh	r3, [r7, #12]
 800643e:	89bb      	ldrh	r3, [r7, #12]
 8006440:	f083 0320 	eor.w	r3, r3, #32
 8006444:	81bb      	strh	r3, [r7, #12]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	441a      	add	r2, r3
 8006450:	89bb      	ldrh	r3, [r7, #12]
 8006452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800645e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]
 8006466:	e04b      	b.n	8006500 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	82fb      	strh	r3, [r7, #22]
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01b      	beq.n	80064b8 <USB_EPClearStall+0x106>
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	82bb      	strh	r3, [r7, #20]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	441a      	add	r2, r3
 80064a2:	8abb      	ldrh	r3, [r7, #20]
 80064a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	827b      	strh	r3, [r7, #18]
 80064d0:	8a7b      	ldrh	r3, [r7, #18]
 80064d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064d6:	827b      	strh	r3, [r7, #18]
 80064d8:	8a7b      	ldrh	r3, [r7, #18]
 80064da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064de:	827b      	strh	r3, [r7, #18]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	8a7b      	ldrh	r3, [r7, #18]
 80064ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2280      	movs	r2, #128	@ 0x80
 8006522:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006568:	b29b      	uxth	r3, r3
 800656a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr

0800658e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800658e:	b480      	push	{r7}
 8006590:	b08b      	sub	sp, #44	@ 0x2c
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	4611      	mov	r1, r2
 800659a:	461a      	mov	r2, r3
 800659c:	460b      	mov	r3, r1
 800659e:	80fb      	strh	r3, [r7, #6]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065a4:	88bb      	ldrh	r3, [r7, #4]
 80065a6:	3301      	adds	r3, #1
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	005a      	lsls	r2, r3, #1
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c6:	e01f      	b.n	8006608 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	3301      	adds	r3, #1
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	b21b      	sxth	r3, r3
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	b21a      	sxth	r2, r3
 80065da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065de:	4313      	orrs	r3, r2
 80065e0:	b21b      	sxth	r3, r3
 80065e2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	8a7a      	ldrh	r2, [r7, #18]
 80065e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	3302      	adds	r3, #2
 80065ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	3302      	adds	r3, #2
 80065f4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3301      	adds	r3, #1
 80065fa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	3301      	adds	r3, #1
 8006600:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	3b01      	subs	r3, #1
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1dc      	bne.n	80065c8 <USB_WritePMA+0x3a>
  }
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	372c      	adds	r7, #44	@ 0x2c
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800661a:	b480      	push	{r7}
 800661c:	b08b      	sub	sp, #44	@ 0x2c
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	4611      	mov	r1, r2
 8006626:	461a      	mov	r2, r3
 8006628:	460b      	mov	r3, r1
 800662a:	80fb      	strh	r3, [r7, #6]
 800662c:	4613      	mov	r3, r2
 800662e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006630:	88bb      	ldrh	r3, [r7, #4]
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	b29b      	uxth	r3, r3
 8006636:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	005a      	lsls	r2, r3, #1
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800664c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
 8006652:	e01b      	b.n	800668c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	3302      	adds	r3, #2
 8006660:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3301      	adds	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	b2da      	uxtb	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3301      	adds	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	3302      	adds	r3, #2
 8006684:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	3b01      	subs	r3, #1
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e0      	bne.n	8006654 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006692:	88bb      	ldrh	r3, [r7, #4]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	701a      	strb	r2, [r3, #0]
  }
}
 80066ae:	bf00      	nop
 80066b0:	372c      	adds	r7, #44	@ 0x2c
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	7c1b      	ldrb	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d115      	bne.n	80066fc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066d4:	2202      	movs	r2, #2
 80066d6:	2181      	movs	r1, #129	@ 0x81
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fe82 	bl	80083e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066e8:	2202      	movs	r2, #2
 80066ea:	2101      	movs	r1, #1
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fe78 	bl	80083e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80066fa:	e012      	b.n	8006722 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066fc:	2340      	movs	r3, #64	@ 0x40
 80066fe:	2202      	movs	r2, #2
 8006700:	2181      	movs	r1, #129	@ 0x81
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fe6d 	bl	80083e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800670e:	2340      	movs	r3, #64	@ 0x40
 8006710:	2202      	movs	r2, #2
 8006712:	2101      	movs	r1, #1
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fe64 	bl	80083e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006722:	2308      	movs	r3, #8
 8006724:	2203      	movs	r2, #3
 8006726:	2182      	movs	r1, #130	@ 0x82
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fe5a 	bl	80083e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006734:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006738:	f001 ff7a 	bl	8008630 <USBD_static_malloc>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	73fb      	strb	r3, [r7, #15]
 8006752:	e026      	b.n	80067a2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800675a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7c1b      	ldrb	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 ff19 	bl	80085c2 <USBD_LL_PrepareReceive>
 8006790:	e007      	b.n	80067a2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006798:	2340      	movs	r3, #64	@ 0x40
 800679a:	2101      	movs	r1, #1
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 ff10 	bl	80085c2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067bc:	2181      	movs	r1, #129	@ 0x81
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fe35 	bl	800842e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067ca:	2101      	movs	r1, #1
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fe2e 	bl	800842e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067da:	2182      	movs	r1, #130	@ 0x82
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 fe26 	bl	800842e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006802:	4618      	mov	r0, r3
 8006804:	f001 ff20 	bl	8008648 <USBD_static_free>
    pdev->pClassData = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800682a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006840:	2b00      	cmp	r3, #0
 8006842:	d039      	beq.n	80068b8 <USBD_CDC_Setup+0x9e>
 8006844:	2b20      	cmp	r3, #32
 8006846:	d17f      	bne.n	8006948 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	88db      	ldrh	r3, [r3, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d029      	beq.n	80068a4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	b25b      	sxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	da11      	bge.n	800687e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006866:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	88d2      	ldrh	r2, [r2, #6]
 800686c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	88db      	ldrh	r3, [r3, #6]
 8006874:	461a      	mov	r2, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fa06 	bl	8007c88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800687c:	e06b      	b.n	8006956 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	785a      	ldrb	r2, [r3, #1]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006894:	6939      	ldr	r1, [r7, #16]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88db      	ldrh	r3, [r3, #6]
 800689a:	461a      	mov	r2, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fa21 	bl	8007ce4 <USBD_CtlPrepareRx>
      break;
 80068a2:	e058      	b.n	8006956 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	7850      	ldrb	r0, [r2, #1]
 80068b0:	2200      	movs	r2, #0
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	4798      	blx	r3
      break;
 80068b6:	e04e      	b.n	8006956 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b0b      	cmp	r3, #11
 80068be:	d02e      	beq.n	800691e <USBD_CDC_Setup+0x104>
 80068c0:	2b0b      	cmp	r3, #11
 80068c2:	dc38      	bgt.n	8006936 <USBD_CDC_Setup+0x11c>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <USBD_CDC_Setup+0xb4>
 80068c8:	2b0a      	cmp	r3, #10
 80068ca:	d014      	beq.n	80068f6 <USBD_CDC_Setup+0xdc>
 80068cc:	e033      	b.n	8006936 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d107      	bne.n	80068e8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	2202      	movs	r2, #2
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f9d1 	bl	8007c88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068e6:	e02e      	b.n	8006946 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f962 	bl	8007bb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	75fb      	strb	r3, [r7, #23]
          break;
 80068f4:	e027      	b.n	8006946 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d107      	bne.n	8006910 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006900:	f107 030f 	add.w	r3, r7, #15
 8006904:	2201      	movs	r2, #1
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 f9bd 	bl	8007c88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800690e:	e01a      	b.n	8006946 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f94e 	bl	8007bb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006918:	2302      	movs	r3, #2
 800691a:	75fb      	strb	r3, [r7, #23]
          break;
 800691c:	e013      	b.n	8006946 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006924:	2b03      	cmp	r3, #3
 8006926:	d00d      	beq.n	8006944 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f942 	bl	8007bb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006930:	2302      	movs	r3, #2
 8006932:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006934:	e006      	b.n	8006944 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 f93b 	bl	8007bb4 <USBD_CtlError>
          ret = USBD_FAIL;
 800693e:	2302      	movs	r3, #2
 8006940:	75fb      	strb	r3, [r7, #23]
          break;
 8006942:	e000      	b.n	8006946 <USBD_CDC_Setup+0x12c>
          break;
 8006944:	bf00      	nop
      }
      break;
 8006946:	e006      	b.n	8006956 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f932 	bl	8007bb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006950:	2302      	movs	r3, #2
 8006952:	75fb      	strb	r3, [r7, #23]
      break;
 8006954:	bf00      	nop
  }

  return ret;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006972:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800697a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03a      	beq.n	80069fc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	331c      	adds	r3, #28
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d029      	beq.n	80069f0 <USBD_CDC_DataIn+0x90>
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	331c      	adds	r3, #28
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	78f9      	ldrb	r1, [r7, #3]
 80069b0:	68b8      	ldr	r0, [r7, #8]
 80069b2:	460b      	mov	r3, r1
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4403      	add	r3, r0
 80069bc:	3320      	adds	r3, #32
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d110      	bne.n	80069f0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	331c      	adds	r3, #28
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069e2:	78f9      	ldrb	r1, [r7, #3]
 80069e4:	2300      	movs	r3, #0
 80069e6:	2200      	movs	r2, #0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fdc7 	bl	800857c <USBD_LL_Transmit>
 80069ee:	e003      	b.n	80069f8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fdf2 	bl	8008608 <USBD_LL_GetRxDataSize>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00d      	beq.n	8006a52 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4798      	blx	r3

    return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e000      	b.n	8006a54 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a52:	2302      	movs	r3, #2
  }
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d014      	beq.n	8006aa0 <USBD_CDC_EP0_RxReady+0x44>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006a7c:	2bff      	cmp	r3, #255	@ 0xff
 8006a7e:	d00f      	beq.n	8006aa0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	22ff      	movs	r2, #255	@ 0xff
 8006a9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2243      	movs	r2, #67	@ 0x43
 8006ab8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006aba:	4b03      	ldr	r3, [pc, #12]	@ (8006ac8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000094 	.word	0x20000094

08006acc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2243      	movs	r2, #67	@ 0x43
 8006ad8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ada:	4b03      	ldr	r3, [pc, #12]	@ (8006ae8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000050 	.word	0x20000050

08006aec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2243      	movs	r2, #67	@ 0x43
 8006af8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006afa:	4b03      	ldr	r3, [pc, #12]	@ (8006b08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	200000d8 	.word	0x200000d8

08006b0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	220a      	movs	r2, #10
 8006b18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b1a:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	2000000c 	.word	0x2000000c

08006b2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b36:	2302      	movs	r3, #2
 8006b38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b9a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01c      	beq.n	8006c04 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d115      	bne.n	8006c00 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2181      	movs	r1, #129	@ 0x81
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fcc0 	bl	800857c <USBD_LL_Transmit>

      return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e002      	b.n	8006c06 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d017      	beq.n	8006c58 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7c1b      	ldrb	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fcc0 	bl	80085c2 <USBD_LL_PrepareReceive>
 8006c42:	e007      	b.n	8006c54 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c4a:	2340      	movs	r3, #64	@ 0x40
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fcb7 	bl	80085c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e000      	b.n	8006c5a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c58:	2302      	movs	r3, #2
  }
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c76:	2302      	movs	r3, #2
 8006c78:	e01a      	b.n	8006cb0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	79fa      	ldrb	r2, [r7, #7]
 8006ca6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f001 fb25 	bl	80082f8 <USBD_LL_Init>

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d006      	beq.n	8006cda <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e001      	b.n	8006cde <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fb5a 	bl	80083ac <USBD_LL_Start>

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d22:	2302      	movs	r3, #2
 8006d24:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00c      	beq.n	8006d4a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	78fa      	ldrb	r2, [r7, #3]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fed8 	bl	8007b42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006da0:	461a      	mov	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d016      	beq.n	8006de4 <USBD_LL_SetupStage+0x6a>
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d81c      	bhi.n	8006df4 <USBD_LL_SetupStage+0x7a>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <USBD_LL_SetupStage+0x4a>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d008      	beq.n	8006dd4 <USBD_LL_SetupStage+0x5a>
 8006dc2:	e017      	b.n	8006df4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f9cb 	bl	8007168 <USBD_StdDevReq>
      break;
 8006dd2:	e01a      	b.n	8006e0a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fa2d 	bl	800723c <USBD_StdItfReq>
      break;
 8006de2:	e012      	b.n	8006e0a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa6d 	bl	80072cc <USBD_StdEPReq>
      break;
 8006df2:	e00a      	b.n	8006e0a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006dfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fb32 	bl	800846c <USBD_LL_StallEP>
      break;
 8006e08:	bf00      	nop
  }

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d14b      	bne.n	8006ec0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e2e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d134      	bne.n	8006ea4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d919      	bls.n	8006e7a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d203      	bcs.n	8006e68 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	e002      	b.n	8006e6e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 ff54 	bl	8007d20 <USBD_CtlContinueRx>
 8006e78:	e038      	b.n	8006eec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d105      	bne.n	8006e9c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 ff51 	bl	8007d44 <USBD_CtlSendStatus>
 8006ea2:	e023      	b.n	8006eec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	d11e      	bne.n	8006eec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 fad7 	bl	800846c <USBD_LL_StallEP>
 8006ebe:	e015      	b.n	8006eec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00d      	beq.n	8006ee8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d108      	bne.n	8006ee8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	7afa      	ldrb	r2, [r7, #11]
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	4798      	blx	r3
 8006ee6:	e001      	b.n	8006eec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e000      	b.n	8006eee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	460b      	mov	r3, r1
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d17f      	bne.n	800700a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d15c      	bne.n	8006fd4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d915      	bls.n	8006f52 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 febe 	bl	8007cc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f001 fb39 	bl	80085c2 <USBD_LL_PrepareReceive>
 8006f50:	e04e      	b.n	8006ff0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	6912      	ldr	r2, [r2, #16]
 8006f5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f5e:	fb01 f202 	mul.w	r2, r1, r2
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11c      	bne.n	8006fa2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d316      	bcc.n	8006fa2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d20f      	bcs.n	8006fa2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f82:	2200      	movs	r2, #0
 8006f84:	2100      	movs	r1, #0
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fe9a 	bl	8007cc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f94:	2300      	movs	r3, #0
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f001 fb11 	bl	80085c2 <USBD_LL_PrepareReceive>
 8006fa0:	e026      	b.n	8006ff0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d105      	bne.n	8006fc4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fc4:	2180      	movs	r1, #128	@ 0x80
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f001 fa50 	bl	800846c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fecc 	bl	8007d6a <USBD_CtlReceiveStatus>
 8006fd2:	e00d      	b.n	8006ff0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d004      	beq.n	8006fe8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fe8:	2180      	movs	r1, #128	@ 0x80
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f001 fa3e 	bl	800846c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d11d      	bne.n	8007036 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fe81 	bl	8006d02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007008:	e015      	b.n	8007036 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800701c:	2b03      	cmp	r3, #3
 800701e:	d108      	bne.n	8007032 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	7afa      	ldrb	r2, [r7, #11]
 800702a:	4611      	mov	r1, r2
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	4798      	blx	r3
 8007030:	e001      	b.n	8007036 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	e000      	b.n	8007038 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007048:	2340      	movs	r3, #64	@ 0x40
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 f9c7 	bl	80083e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007064:	2340      	movs	r3, #64	@ 0x40
 8007066:	2200      	movs	r2, #0
 8007068:	2180      	movs	r1, #128	@ 0x80
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 f9b9 	bl	80083e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2240      	movs	r2, #64	@ 0x40
 800707a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6852      	ldr	r2, [r2, #4]
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	4611      	mov	r1, r2
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
  }

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr

080070e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007116:	2b04      	cmp	r3, #4
 8007118:	d105      	bne.n	8007126 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007140:	2b03      	cmp	r3, #3
 8007142:	d10b      	bne.n	800715c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800717e:	2b40      	cmp	r3, #64	@ 0x40
 8007180:	d005      	beq.n	800718e <USBD_StdDevReq+0x26>
 8007182:	2b40      	cmp	r3, #64	@ 0x40
 8007184:	d84f      	bhi.n	8007226 <USBD_StdDevReq+0xbe>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <USBD_StdDevReq+0x36>
 800718a:	2b20      	cmp	r3, #32
 800718c:	d14b      	bne.n	8007226 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
      break;
 800719c:	e048      	b.n	8007230 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b09      	cmp	r3, #9
 80071a4:	d839      	bhi.n	800721a <USBD_StdDevReq+0xb2>
 80071a6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <USBD_StdDevReq+0x44>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071fd 	.word	0x080071fd
 80071b0:	08007211 	.word	0x08007211
 80071b4:	0800721b 	.word	0x0800721b
 80071b8:	08007207 	.word	0x08007207
 80071bc:	0800721b 	.word	0x0800721b
 80071c0:	080071df 	.word	0x080071df
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	0800721b 	.word	0x0800721b
 80071cc:	080071f3 	.word	0x080071f3
 80071d0:	080071e9 	.word	0x080071e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9dc 	bl	8007594 <USBD_GetDescriptor>
          break;
 80071dc:	e022      	b.n	8007224 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb3f 	bl	8007864 <USBD_SetAddress>
          break;
 80071e6:	e01d      	b.n	8007224 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fb7e 	bl	80078ec <USBD_SetConfig>
          break;
 80071f0:	e018      	b.n	8007224 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc07 	bl	8007a08 <USBD_GetConfig>
          break;
 80071fa:	e013      	b.n	8007224 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc37 	bl	8007a72 <USBD_GetStatus>
          break;
 8007204:	e00e      	b.n	8007224 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc65 	bl	8007ad8 <USBD_SetFeature>
          break;
 800720e:	e009      	b.n	8007224 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fc74 	bl	8007b00 <USBD_ClrFeature>
          break;
 8007218:	e004      	b.n	8007224 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fcc9 	bl	8007bb4 <USBD_CtlError>
          break;
 8007222:	bf00      	nop
      }
      break;
 8007224:	e004      	b.n	8007230 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fcc3 	bl	8007bb4 <USBD_CtlError>
      break;
 800722e:	bf00      	nop
  }

  return ret;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d005      	beq.n	8007262 <USBD_StdItfReq+0x26>
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d82e      	bhi.n	80072b8 <USBD_StdItfReq+0x7c>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <USBD_StdItfReq+0x26>
 800725e:	2b20      	cmp	r3, #32
 8007260:	d12a      	bne.n	80072b8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007268:	3b01      	subs	r3, #1
 800726a:	2b02      	cmp	r3, #2
 800726c:	d81d      	bhi.n	80072aa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	889b      	ldrh	r3, [r3, #4]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	d813      	bhi.n	80072a0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	4798      	blx	r3
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d110      	bne.n	80072b4 <USBD_StdItfReq+0x78>
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fd53 	bl	8007d44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800729e:	e009      	b.n	80072b4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fc86 	bl	8007bb4 <USBD_CtlError>
          break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc81 	bl	8007bb4 <USBD_CtlError>
          break;
 80072b2:	e000      	b.n	80072b6 <USBD_StdItfReq+0x7a>
          break;
 80072b4:	bf00      	nop
      }
      break;
 80072b6:	e004      	b.n	80072c2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc7a 	bl	8007bb4 <USBD_CtlError>
      break;
 80072c0:	bf00      	nop
  }

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	889b      	ldrh	r3, [r3, #4]
 80072de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072e8:	2b40      	cmp	r3, #64	@ 0x40
 80072ea:	d007      	beq.n	80072fc <USBD_StdEPReq+0x30>
 80072ec:	2b40      	cmp	r3, #64	@ 0x40
 80072ee:	f200 8146 	bhi.w	800757e <USBD_StdEPReq+0x2b2>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <USBD_StdEPReq+0x40>
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	f040 8141 	bne.w	800757e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      break;
 800730a:	e13d      	b.n	8007588 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007314:	2b20      	cmp	r3, #32
 8007316:	d10a      	bne.n	800732e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]

        return ret;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	e12d      	b.n	800758a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d007      	beq.n	8007346 <USBD_StdEPReq+0x7a>
 8007336:	2b03      	cmp	r3, #3
 8007338:	f300 811b 	bgt.w	8007572 <USBD_StdEPReq+0x2a6>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d072      	beq.n	8007426 <USBD_StdEPReq+0x15a>
 8007340:	2b01      	cmp	r3, #1
 8007342:	d03a      	beq.n	80073ba <USBD_StdEPReq+0xee>
 8007344:	e115      	b.n	8007572 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800734c:	2b02      	cmp	r3, #2
 800734e:	d002      	beq.n	8007356 <USBD_StdEPReq+0x8a>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d015      	beq.n	8007380 <USBD_StdEPReq+0xb4>
 8007354:	e02b      	b.n	80073ae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <USBD_StdEPReq+0xaa>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b80      	cmp	r3, #128	@ 0x80
 8007360:	d009      	beq.n	8007376 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f880 	bl	800846c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800736c:	2180      	movs	r1, #128	@ 0x80
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f87c 	bl	800846c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007374:	e020      	b.n	80073b8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc1b 	bl	8007bb4 <USBD_CtlError>
              break;
 800737e:	e01b      	b.n	80073b8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	885b      	ldrh	r3, [r3, #2]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10e      	bne.n	80073a6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <USBD_StdEPReq+0xda>
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	2b80      	cmp	r3, #128	@ 0x80
 8007392:	d008      	beq.n	80073a6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	88db      	ldrh	r3, [r3, #6]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 f863 	bl	800846c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fccc 	bl	8007d44 <USBD_CtlSendStatus>

              break;
 80073ac:	e004      	b.n	80073b8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fbff 	bl	8007bb4 <USBD_CtlError>
              break;
 80073b6:	bf00      	nop
          }
          break;
 80073b8:	e0e0      	b.n	800757c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d002      	beq.n	80073ca <USBD_StdEPReq+0xfe>
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d015      	beq.n	80073f4 <USBD_StdEPReq+0x128>
 80073c8:	e026      	b.n	8007418 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <USBD_StdEPReq+0x11e>
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2b80      	cmp	r3, #128	@ 0x80
 80073d4:	d009      	beq.n	80073ea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f846 	bl	800846c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073e0:	2180      	movs	r1, #128	@ 0x80
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 f842 	bl	800846c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e8:	e01c      	b.n	8007424 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fbe1 	bl	8007bb4 <USBD_CtlError>
              break;
 80073f2:	e017      	b.n	8007424 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d112      	bne.n	8007422 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f84d 	bl	80084aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fc97 	bl	8007d44 <USBD_CtlSendStatus>
              }
              break;
 8007416:	e004      	b.n	8007422 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fbca 	bl	8007bb4 <USBD_CtlError>
              break;
 8007420:	e000      	b.n	8007424 <USBD_StdEPReq+0x158>
              break;
 8007422:	bf00      	nop
          }
          break;
 8007424:	e0aa      	b.n	800757c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800742c:	2b02      	cmp	r3, #2
 800742e:	d002      	beq.n	8007436 <USBD_StdEPReq+0x16a>
 8007430:	2b03      	cmp	r3, #3
 8007432:	d032      	beq.n	800749a <USBD_StdEPReq+0x1ce>
 8007434:	e097      	b.n	8007566 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <USBD_StdEPReq+0x180>
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b80      	cmp	r3, #128	@ 0x80
 8007440:	d004      	beq.n	800744c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fbb5 	bl	8007bb4 <USBD_CtlError>
                break;
 800744a:	e091      	b.n	8007570 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800744c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	da0b      	bge.n	800746c <USBD_StdEPReq+0x1a0>
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	3310      	adds	r3, #16
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	3304      	adds	r3, #4
 800746a:	e00b      	b.n	8007484 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	4413      	add	r3, r2
 8007482:	3304      	adds	r3, #4
 8007484:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2202      	movs	r2, #2
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fbf8 	bl	8007c88 <USBD_CtlSendData>
              break;
 8007498:	e06a      	b.n	8007570 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800749a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da11      	bge.n	80074c6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	f003 020f 	and.w	r2, r3, #15
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	3318      	adds	r3, #24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d117      	bne.n	80074ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb78 	bl	8007bb4 <USBD_CtlError>
                  break;
 80074c4:	e054      	b.n	8007570 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fb65 	bl	8007bb4 <USBD_CtlError>
                  break;
 80074ea:	e041      	b.n	8007570 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da0b      	bge.n	800750c <USBD_StdEPReq+0x240>
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	3310      	adds	r3, #16
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	3304      	adds	r3, #4
 800750a:	e00b      	b.n	8007524 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <USBD_StdEPReq+0x266>
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b80      	cmp	r3, #128	@ 0x80
 8007530:	d103      	bne.n	800753a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	e00e      	b.n	8007558 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 ffd2 	bl	80084e8 <USBD_LL_IsStallEP>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	e002      	b.n	8007558 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2202      	movs	r2, #2
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fb92 	bl	8007c88 <USBD_CtlSendData>
              break;
 8007564:	e004      	b.n	8007570 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb23 	bl	8007bb4 <USBD_CtlError>
              break;
 800756e:	bf00      	nop
          }
          break;
 8007570:	e004      	b.n	800757c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb1d 	bl	8007bb4 <USBD_CtlError>
          break;
 800757a:	bf00      	nop
      }
      break;
 800757c:	e004      	b.n	8007588 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb17 	bl	8007bb4 <USBD_CtlError>
      break;
 8007586:	bf00      	nop
  }

  return ret;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	2b06      	cmp	r3, #6
 80075b6:	f200 8128 	bhi.w	800780a <USBD_GetDescriptor+0x276>
 80075ba:	a201      	add	r2, pc, #4	@ (adr r2, 80075c0 <USBD_GetDescriptor+0x2c>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075f5 	.word	0x080075f5
 80075c8:	08007635 	.word	0x08007635
 80075cc:	0800780b 	.word	0x0800780b
 80075d0:	0800780b 	.word	0x0800780b
 80075d4:	080077ab 	.word	0x080077ab
 80075d8:	080077d7 	.word	0x080077d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
      break;
 80075f2:	e112      	b.n	800781a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7c1b      	ldrb	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10d      	bne.n	8007618 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f107 0208 	add.w	r2, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	2202      	movs	r2, #2
 8007614:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007616:	e100      	b.n	800781a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	f107 0208 	add.w	r2, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	2202      	movs	r2, #2
 8007630:	701a      	strb	r2, [r3, #0]
      break;
 8007632:	e0f2      	b.n	800781a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b05      	cmp	r3, #5
 800763c:	f200 80ac 	bhi.w	8007798 <USBD_GetDescriptor+0x204>
 8007640:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <USBD_GetDescriptor+0xb4>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007661 	.word	0x08007661
 800764c:	08007695 	.word	0x08007695
 8007650:	080076c9 	.word	0x080076c9
 8007654:	080076fd 	.word	0x080076fd
 8007658:	08007731 	.word	0x08007731
 800765c:	08007765 	.word	0x08007765
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	f107 0108 	add.w	r1, r7, #8
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007682:	e091      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa94 	bl	8007bb4 <USBD_CtlError>
            err++;
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	3301      	adds	r3, #1
 8007690:	72fb      	strb	r3, [r7, #11]
          break;
 8007692:	e089      	b.n	80077a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b6:	e077      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa7a 	bl	8007bb4 <USBD_CtlError>
            err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
          break;
 80076c6:	e06f      	b.n	80077a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ea:	e05d      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa60 	bl	8007bb4 <USBD_CtlError>
            err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
          break;
 80076fa:	e055      	b.n	80077a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771e:	e043      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa46 	bl	8007bb4 <USBD_CtlError>
            err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
          break;
 800772e:	e03b      	b.n	80077a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e029      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa2c 	bl	8007bb4 <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e021      	b.n	80077a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e00f      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa12 	bl	8007bb4 <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e007      	b.n	80077a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa0a 	bl	8007bb4 <USBD_CtlError>
          err++;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	3301      	adds	r3, #1
 80077a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077a6:	e038      	b.n	800781a <USBD_GetDescriptor+0x286>
 80077a8:	e037      	b.n	800781a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7c1b      	ldrb	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ba:	f107 0208 	add.w	r2, r7, #8
 80077be:	4610      	mov	r0, r2
 80077c0:	4798      	blx	r3
 80077c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077c4:	e029      	b.n	800781a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f9f3 	bl	8007bb4 <USBD_CtlError>
        err++;
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	3301      	adds	r3, #1
 80077d2:	72fb      	strb	r3, [r7, #11]
      break;
 80077d4:	e021      	b.n	800781a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7c1b      	ldrb	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10d      	bne.n	80077fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e6:	f107 0208 	add.w	r2, r7, #8
 80077ea:	4610      	mov	r0, r2
 80077ec:	4798      	blx	r3
 80077ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	2207      	movs	r2, #7
 80077f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f8:	e00f      	b.n	800781a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9d9 	bl	8007bb4 <USBD_CtlError>
        err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
      break;
 8007808:	e007      	b.n	800781a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f9d1 	bl	8007bb4 <USBD_CtlError>
      err++;
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	3301      	adds	r3, #1
 8007816:	72fb      	strb	r3, [r7, #11]
      break;
 8007818:	bf00      	nop
  }

  if (err != 0U)
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11c      	bne.n	800785a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007820:	893b      	ldrh	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d011      	beq.n	800784a <USBD_GetDescriptor+0x2b6>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	88db      	ldrh	r3, [r3, #6]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88da      	ldrh	r2, [r3, #6]
 8007832:	893b      	ldrh	r3, [r7, #8]
 8007834:	4293      	cmp	r3, r2
 8007836:	bf28      	it	cs
 8007838:	4613      	movcs	r3, r2
 800783a:	b29b      	uxth	r3, r3
 800783c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800783e:	893b      	ldrh	r3, [r7, #8]
 8007840:	461a      	mov	r2, r3
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa1f 	bl	8007c88 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88db      	ldrh	r3, [r3, #6]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa76 	bl	8007d44 <USBD_CtlSendStatus>
 8007858:	e000      	b.n	800785c <USBD_GetDescriptor+0x2c8>
    return;
 800785a:	bf00      	nop
    }
  }
}
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	889b      	ldrh	r3, [r3, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d130      	bne.n	80078d8 <USBD_SetAddress+0x74>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88db      	ldrh	r3, [r3, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d12c      	bne.n	80078d8 <USBD_SetAddress+0x74>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	2b7f      	cmp	r3, #127	@ 0x7f
 8007884:	d828      	bhi.n	80078d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007890:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007898:	2b03      	cmp	r3, #3
 800789a:	d104      	bne.n	80078a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f988 	bl	8007bb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a4:	e01d      	b.n	80078e2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7bfa      	ldrb	r2, [r7, #15]
 80078aa:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fe43 	bl	800853e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa43 	bl	8007d44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078cc:	e009      	b.n	80078e2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d6:	e004      	b.n	80078e2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f96a 	bl	8007bb4 <USBD_CtlError>
  }
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4b41      	ldr	r3, [pc, #260]	@ (8007a04 <USBD_SetConfig+0x118>)
 80078fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007900:	4b40      	ldr	r3, [pc, #256]	@ (8007a04 <USBD_SetConfig+0x118>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d904      	bls.n	8007912 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f952 	bl	8007bb4 <USBD_CtlError>
 8007910:	e075      	b.n	80079fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007918:	2b02      	cmp	r3, #2
 800791a:	d002      	beq.n	8007922 <USBD_SetConfig+0x36>
 800791c:	2b03      	cmp	r3, #3
 800791e:	d023      	beq.n	8007968 <USBD_SetConfig+0x7c>
 8007920:	e062      	b.n	80079e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007922:	4b38      	ldr	r3, [pc, #224]	@ (8007a04 <USBD_SetConfig+0x118>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01a      	beq.n	8007960 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800792a:	4b36      	ldr	r3, [pc, #216]	@ (8007a04 <USBD_SetConfig+0x118>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2203      	movs	r2, #3
 8007938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800793c:	4b31      	ldr	r3, [pc, #196]	@ (8007a04 <USBD_SetConfig+0x118>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff f9e7 	bl	8006d16 <USBD_SetClassConfig>
 8007948:	4603      	mov	r3, r0
 800794a:	2b02      	cmp	r3, #2
 800794c:	d104      	bne.n	8007958 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f92f 	bl	8007bb4 <USBD_CtlError>
            return;
 8007956:	e052      	b.n	80079fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9f3 	bl	8007d44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800795e:	e04e      	b.n	80079fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f9ef 	bl	8007d44 <USBD_CtlSendStatus>
        break;
 8007966:	e04a      	b.n	80079fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007968:	4b26      	ldr	r3, [pc, #152]	@ (8007a04 <USBD_SetConfig+0x118>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d112      	bne.n	8007996 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007978:	4b22      	ldr	r3, [pc, #136]	@ (8007a04 <USBD_SetConfig+0x118>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007982:	4b20      	ldr	r3, [pc, #128]	@ (8007a04 <USBD_SetConfig+0x118>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff f9e3 	bl	8006d54 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f9d8 	bl	8007d44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007994:	e033      	b.n	80079fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007996:	4b1b      	ldr	r3, [pc, #108]	@ (8007a04 <USBD_SetConfig+0x118>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d01d      	beq.n	80079e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff f9d1 	bl	8006d54 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079b2:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <USBD_SetConfig+0x118>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079bc:	4b11      	ldr	r3, [pc, #68]	@ (8007a04 <USBD_SetConfig+0x118>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff f9a7 	bl	8006d16 <USBD_SetClassConfig>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d104      	bne.n	80079d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f8ef 	bl	8007bb4 <USBD_CtlError>
            return;
 80079d6:	e012      	b.n	80079fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9b3 	bl	8007d44 <USBD_CtlSendStatus>
        break;
 80079de:	e00e      	b.n	80079fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f9af 	bl	8007d44 <USBD_CtlSendStatus>
        break;
 80079e6:	e00a      	b.n	80079fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f8e2 	bl	8007bb4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079f0:	4b04      	ldr	r3, [pc, #16]	@ (8007a04 <USBD_SetConfig+0x118>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff f9ac 	bl	8006d54 <USBD_ClrClassConfig>
        break;
 80079fc:	bf00      	nop
    }
  }
}
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000304 	.word	0x20000304

08007a08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	88db      	ldrh	r3, [r3, #6]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d004      	beq.n	8007a24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8c9 	bl	8007bb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a22:	e022      	b.n	8007a6a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	dc02      	bgt.n	8007a34 <USBD_GetConfig+0x2c>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dc03      	bgt.n	8007a3a <USBD_GetConfig+0x32>
 8007a32:	e015      	b.n	8007a60 <USBD_GetConfig+0x58>
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d00b      	beq.n	8007a50 <USBD_GetConfig+0x48>
 8007a38:	e012      	b.n	8007a60 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3308      	adds	r3, #8
 8007a44:	2201      	movs	r2, #1
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f91d 	bl	8007c88 <USBD_CtlSendData>
        break;
 8007a4e:	e00c      	b.n	8007a6a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	2201      	movs	r2, #1
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f915 	bl	8007c88 <USBD_CtlSendData>
        break;
 8007a5e:	e004      	b.n	8007a6a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f8a6 	bl	8007bb4 <USBD_CtlError>
        break;
 8007a68:	bf00      	nop
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a82:	3b01      	subs	r3, #1
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d81e      	bhi.n	8007ac6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d004      	beq.n	8007a9a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f88e 	bl	8007bb4 <USBD_CtlError>
        break;
 8007a98:	e01a      	b.n	8007ad0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f043 0202 	orr.w	r2, r3, #2
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	330c      	adds	r3, #12
 8007aba:	2202      	movs	r2, #2
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8e2 	bl	8007c88 <USBD_CtlSendData>
      break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f873 	bl	8007bb4 <USBD_CtlError>
      break;
 8007ace:	bf00      	nop
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d106      	bne.n	8007af8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f926 	bl	8007d44 <USBD_CtlSendStatus>
  }
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b10:	3b01      	subs	r3, #1
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d80b      	bhi.n	8007b2e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d10c      	bne.n	8007b38 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f90c 	bl	8007d44 <USBD_CtlSendStatus>
      }
      break;
 8007b2c:	e004      	b.n	8007b38 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f83f 	bl	8007bb4 <USBD_CtlError>
      break;
 8007b36:	e000      	b.n	8007b3a <USBD_ClrFeature+0x3a>
      break;
 8007b38:	bf00      	nop
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	785a      	ldrb	r2, [r3, #1]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3302      	adds	r3, #2
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	3303      	adds	r3, #3
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	4413      	add	r3, r2
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	3305      	adds	r3, #5
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4413      	add	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	3306      	adds	r3, #6
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	3307      	adds	r3, #7
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	80da      	strh	r2, [r3, #6]

}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bbe:	2180      	movs	r1, #128	@ 0x80
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fc53 	bl	800846c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fc4f 	bl	800846c <USBD_LL_StallEP>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d032      	beq.n	8007c52 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f834 	bl	8007c5a <USBD_GetLen>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	75fa      	strb	r2, [r7, #23]
 8007c06:	461a      	mov	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7812      	ldrb	r2, [r2, #0]
 8007c10:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	75fa      	strb	r2, [r7, #23]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	2203      	movs	r2, #3
 8007c20:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c22:	e012      	b.n	8007c4a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	60fa      	str	r2, [r7, #12]
 8007c2a:	7dfa      	ldrb	r2, [r7, #23]
 8007c2c:	1c51      	adds	r1, r2, #1
 8007c2e:	75f9      	strb	r1, [r7, #23]
 8007c30:	4611      	mov	r1, r2
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	440a      	add	r2, r1
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	75fa      	strb	r2, [r7, #23]
 8007c40:	461a      	mov	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4413      	add	r3, r2
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e8      	bne.n	8007c24 <USBD_GetString+0x4e>
    }
  }
}
 8007c52:	bf00      	nop
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c66:	e005      	b.n	8007c74 <USBD_GetLen+0x1a>
  {
    len++;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3301      	adds	r3, #1
 8007c72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f5      	bne.n	8007c68 <USBD_GetLen+0xe>
  }

  return len;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr

08007c88 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c9e:	88fa      	ldrh	r2, [r7, #6]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ca4:	88fa      	ldrh	r2, [r7, #6]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	2100      	movs	r1, #0
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fc63 	bl	800857c <USBD_LL_Transmit>

  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fc51 	bl	800857c <USBD_LL_Transmit>

  return USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d02:	88fa      	ldrh	r2, [r7, #6]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fc56 	bl	80085c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	2100      	movs	r1, #0
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fc44 	bl	80085c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d54:	2300      	movs	r3, #0
 8007d56:	2200      	movs	r2, #0
 8007d58:	2100      	movs	r1, #0
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fc0e 	bl	800857c <USBD_LL_Transmit>

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2205      	movs	r2, #5
 8007d76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fc1e 	bl	80085c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d94:	2200      	movs	r2, #0
 8007d96:	4912      	ldr	r1, [pc, #72]	@ (8007de0 <MX_USB_DEVICE_Init+0x50>)
 8007d98:	4812      	ldr	r0, [pc, #72]	@ (8007de4 <MX_USB_DEVICE_Init+0x54>)
 8007d9a:	f7fe ff62 	bl	8006c62 <USBD_Init>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007da4:	f7f8 fb48 	bl	8000438 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007da8:	490f      	ldr	r1, [pc, #60]	@ (8007de8 <MX_USB_DEVICE_Init+0x58>)
 8007daa:	480e      	ldr	r0, [pc, #56]	@ (8007de4 <MX_USB_DEVICE_Init+0x54>)
 8007dac:	f7fe ff84 	bl	8006cb8 <USBD_RegisterClass>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007db6:	f7f8 fb3f 	bl	8000438 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dba:	490c      	ldr	r1, [pc, #48]	@ (8007dec <MX_USB_DEVICE_Init+0x5c>)
 8007dbc:	4809      	ldr	r0, [pc, #36]	@ (8007de4 <MX_USB_DEVICE_Init+0x54>)
 8007dbe:	f7fe feb5 	bl	8006b2c <USBD_CDC_RegisterInterface>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007dc8:	f7f8 fb36 	bl	8000438 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007dcc:	4805      	ldr	r0, [pc, #20]	@ (8007de4 <MX_USB_DEVICE_Init+0x54>)
 8007dce:	f7fe ff8c 	bl	8006cea <USBD_Start>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dd8:	f7f8 fb2e 	bl	8000438 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ddc:	bf00      	nop
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2000012c 	.word	0x2000012c
 8007de4:	20000308 	.word	0x20000308
 8007de8:	20000018 	.word	0x20000018
 8007dec:	2000011c 	.word	0x2000011c

08007df0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007df4:	2200      	movs	r2, #0
 8007df6:	4905      	ldr	r1, [pc, #20]	@ (8007e0c <CDC_Init_FS+0x1c>)
 8007df8:	4805      	ldr	r0, [pc, #20]	@ (8007e10 <CDC_Init_FS+0x20>)
 8007dfa:	f7fe fead 	bl	8006b58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dfe:	4905      	ldr	r1, [pc, #20]	@ (8007e14 <CDC_Init_FS+0x24>)
 8007e00:	4803      	ldr	r0, [pc, #12]	@ (8007e10 <CDC_Init_FS+0x20>)
 8007e02:	f7fe fec2 	bl	8006b8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	200009cc 	.word	0x200009cc
 8007e10:	20000308 	.word	0x20000308
 8007e14:	200005cc 	.word	0x200005cc

08007e18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr
	...

08007e28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	6039      	str	r1, [r7, #0]
 8007e32:	71fb      	strb	r3, [r7, #7]
 8007e34:	4613      	mov	r3, r2
 8007e36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b23      	cmp	r3, #35	@ 0x23
 8007e3c:	d84a      	bhi.n	8007ed4 <CDC_Control_FS+0xac>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <CDC_Control_FS+0x1c>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007ed5 	.word	0x08007ed5
 8007e48:	08007ed5 	.word	0x08007ed5
 8007e4c:	08007ed5 	.word	0x08007ed5
 8007e50:	08007ed5 	.word	0x08007ed5
 8007e54:	08007ed5 	.word	0x08007ed5
 8007e58:	08007ed5 	.word	0x08007ed5
 8007e5c:	08007ed5 	.word	0x08007ed5
 8007e60:	08007ed5 	.word	0x08007ed5
 8007e64:	08007ed5 	.word	0x08007ed5
 8007e68:	08007ed5 	.word	0x08007ed5
 8007e6c:	08007ed5 	.word	0x08007ed5
 8007e70:	08007ed5 	.word	0x08007ed5
 8007e74:	08007ed5 	.word	0x08007ed5
 8007e78:	08007ed5 	.word	0x08007ed5
 8007e7c:	08007ed5 	.word	0x08007ed5
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007ed5 	.word	0x08007ed5
 8007e88:	08007ed5 	.word	0x08007ed5
 8007e8c:	08007ed5 	.word	0x08007ed5
 8007e90:	08007ed5 	.word	0x08007ed5
 8007e94:	08007ed5 	.word	0x08007ed5
 8007e98:	08007ed5 	.word	0x08007ed5
 8007e9c:	08007ed5 	.word	0x08007ed5
 8007ea0:	08007ed5 	.word	0x08007ed5
 8007ea4:	08007ed5 	.word	0x08007ed5
 8007ea8:	08007ed5 	.word	0x08007ed5
 8007eac:	08007ed5 	.word	0x08007ed5
 8007eb0:	08007ed5 	.word	0x08007ed5
 8007eb4:	08007ed5 	.word	0x08007ed5
 8007eb8:	08007ed5 	.word	0x08007ed5
 8007ebc:	08007ed5 	.word	0x08007ed5
 8007ec0:	08007ed5 	.word	0x08007ed5
 8007ec4:	08007ed5 	.word	0x08007ed5
 8007ec8:	08007ed5 	.word	0x08007ed5
 8007ecc:	08007ed5 	.word	0x08007ed5
 8007ed0:	08007ed5 	.word	0x08007ed5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ed4:	bf00      	nop
  }

  return (USBD_OK);
 8007ed6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop

08007ee4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4805      	ldr	r0, [pc, #20]	@ (8007f08 <CDC_Receive_FS+0x24>)
 8007ef2:	f7fe fe4a 	bl	8006b8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ef6:	4804      	ldr	r0, [pc, #16]	@ (8007f08 <CDC_Receive_FS+0x24>)
 8007ef8:	f7fe fe89 	bl	8006c0e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007efc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000308 	.word	0x20000308

08007f0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f54 <CDC_Transmit_FS+0x48>)
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e00b      	b.n	8007f4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f32:	887b      	ldrh	r3, [r7, #2]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4806      	ldr	r0, [pc, #24]	@ (8007f54 <CDC_Transmit_FS+0x48>)
 8007f3a:	f7fe fe0d 	bl	8006b58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f3e:	4805      	ldr	r0, [pc, #20]	@ (8007f54 <CDC_Transmit_FS+0x48>)
 8007f40:	f7fe fe36 	bl	8006bb0 <USBD_CDC_TransmitPacket>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000308 	.word	0x20000308

08007f58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2212      	movs	r2, #18
 8007f68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	@ (8007f78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000148 	.word	0x20000148

08007f7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f8e:	4b03      	ldr	r3, [pc, #12]	@ (8007f9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	2000015c 	.word	0x2000015c

08007fa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	6039      	str	r1, [r7, #0]
 8007faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d105      	bne.n	8007fbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4907      	ldr	r1, [pc, #28]	@ (8007fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fb6:	4808      	ldr	r0, [pc, #32]	@ (8007fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fb8:	f7ff fe0d 	bl	8007bd6 <USBD_GetString>
 8007fbc:	e004      	b.n	8007fc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4904      	ldr	r1, [pc, #16]	@ (8007fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fc2:	4805      	ldr	r0, [pc, #20]	@ (8007fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fc4:	f7ff fe07 	bl	8007bd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fc8:	4b02      	ldr	r3, [pc, #8]	@ (8007fd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000dcc 	.word	0x20000dcc
 8007fd8:	08008738 	.word	0x08008738

08007fdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	4904      	ldr	r1, [pc, #16]	@ (8007ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fec:	4804      	ldr	r0, [pc, #16]	@ (8008000 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fee:	f7ff fdf2 	bl	8007bd6 <USBD_GetString>
  return USBD_StrDesc;
 8007ff2:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20000dcc 	.word	0x20000dcc
 8008000:	08008740 	.word	0x08008740

08008004 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	221a      	movs	r2, #26
 8008014:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008016:	f000 f843 	bl	80080a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800801a:	4b02      	ldr	r3, [pc, #8]	@ (8008024 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000160 	.word	0x20000160

08008028 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4907      	ldr	r1, [pc, #28]	@ (800805c <USBD_FS_ConfigStrDescriptor+0x34>)
 800803e:	4808      	ldr	r0, [pc, #32]	@ (8008060 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008040:	f7ff fdc9 	bl	8007bd6 <USBD_GetString>
 8008044:	e004      	b.n	8008050 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	4904      	ldr	r1, [pc, #16]	@ (800805c <USBD_FS_ConfigStrDescriptor+0x34>)
 800804a:	4805      	ldr	r0, [pc, #20]	@ (8008060 <USBD_FS_ConfigStrDescriptor+0x38>)
 800804c:	f7ff fdc3 	bl	8007bd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008050:	4b02      	ldr	r3, [pc, #8]	@ (800805c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000dcc 	.word	0x20000dcc
 8008060:	08008754 	.word	0x08008754

08008064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	4907      	ldr	r1, [pc, #28]	@ (8008098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800807a:	4808      	ldr	r0, [pc, #32]	@ (800809c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800807c:	f7ff fdab 	bl	8007bd6 <USBD_GetString>
 8008080:	e004      	b.n	800808c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	4904      	ldr	r1, [pc, #16]	@ (8008098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008086:	4805      	ldr	r0, [pc, #20]	@ (800809c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008088:	f7ff fda5 	bl	8007bd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800808c:	4b02      	ldr	r3, [pc, #8]	@ (8008098 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000dcc 	.word	0x20000dcc
 800809c:	08008760 	.word	0x08008760

080080a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <Get_SerialNum+0x44>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080ac:	4b0e      	ldr	r3, [pc, #56]	@ (80080e8 <Get_SerialNum+0x48>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080b2:	4b0e      	ldr	r3, [pc, #56]	@ (80080ec <Get_SerialNum+0x4c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080c6:	2208      	movs	r2, #8
 80080c8:	4909      	ldr	r1, [pc, #36]	@ (80080f0 <Get_SerialNum+0x50>)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f814 	bl	80080f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080d0:	2204      	movs	r2, #4
 80080d2:	4908      	ldr	r1, [pc, #32]	@ (80080f4 <Get_SerialNum+0x54>)
 80080d4:	68b8      	ldr	r0, [r7, #8]
 80080d6:	f000 f80f 	bl	80080f8 <IntToUnicode>
  }
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	1ffff7e8 	.word	0x1ffff7e8
 80080e8:	1ffff7ec 	.word	0x1ffff7ec
 80080ec:	1ffff7f0 	.word	0x1ffff7f0
 80080f0:	20000162 	.word	0x20000162
 80080f4:	20000172 	.word	0x20000172

080080f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]
 800810e:	e027      	b.n	8008160 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	0f1b      	lsrs	r3, r3, #28
 8008114:	2b09      	cmp	r3, #9
 8008116:	d80b      	bhi.n	8008130 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	0f1b      	lsrs	r3, r3, #28
 800811c:	b2da      	uxtb	r2, r3
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	4619      	mov	r1, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	440b      	add	r3, r1
 8008128:	3230      	adds	r2, #48	@ 0x30
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e00a      	b.n	8008146 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	0f1b      	lsrs	r3, r3, #28
 8008134:	b2da      	uxtb	r2, r3
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	4619      	mov	r1, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	440b      	add	r3, r1
 8008140:	3237      	adds	r2, #55	@ 0x37
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	3301      	adds	r3, #1
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	3301      	adds	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	7dfa      	ldrb	r2, [r7, #23]
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	429a      	cmp	r2, r3
 8008166:	d3d3      	bcc.n	8008110 <IntToUnicode+0x18>
  }
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0d      	ldr	r2, [pc, #52]	@ (80081b8 <HAL_PCD_MspInit+0x44>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d113      	bne.n	80081ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008186:	4b0d      	ldr	r3, [pc, #52]	@ (80081bc <HAL_PCD_MspInit+0x48>)
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	4a0c      	ldr	r2, [pc, #48]	@ (80081bc <HAL_PCD_MspInit+0x48>)
 800818c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008190:	61d3      	str	r3, [r2, #28]
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <HAL_PCD_MspInit+0x48>)
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	2014      	movs	r0, #20
 80081a4:	f7f8 fd7b 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80081a8:	2014      	movs	r0, #20
 80081aa:	f7f8 fd94 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40005c00 	.word	0x40005c00
 80081bc:	40021000 	.word	0x40021000

080081c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7fe fdcf 	bl	8006d7a <USBD_LL_SetupStage>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	440b      	add	r3, r1
 8008204:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	4619      	mov	r1, r3
 800820e:	f7fe fe01 	bl	8006e14 <USBD_LL_DataOutStage>
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800822c:	78fa      	ldrb	r2, [r7, #3]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	440b      	add	r3, r1
 800823a:	3324      	adds	r3, #36	@ 0x24
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	4619      	mov	r1, r3
 8008242:	f7fe fe58 	bl	8006ef6 <USBD_LL_DataInStage>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe ff68 	bl	8007132 <USBD_LL_SOF>
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	799b      	ldrb	r3, [r3, #6]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d001      	beq.n	8008282 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800827e:	f7f8 f8db 	bl	8000438 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe ff18 	bl	80070c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fed1 	bl	8007040 <USBD_LL_Reset>
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe ff12 	bl	80070e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7a9b      	ldrb	r3, [r3, #10]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082c4:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <HAL_PCD_SuspendCallback+0x30>)
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	4a03      	ldr	r2, [pc, #12]	@ (80082d8 <HAL_PCD_SuspendCallback+0x30>)
 80082ca:	f043 0306 	orr.w	r3, r3, #6
 80082ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	e000ed00 	.word	0xe000ed00

080082dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe ff0c 	bl	8007108 <USBD_LL_Resume>
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008300:	4a28      	ldr	r2, [pc, #160]	@ (80083a4 <USBD_LL_Init+0xac>)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a26      	ldr	r2, [pc, #152]	@ (80083a4 <USBD_LL_Init+0xac>)
 800830c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008310:	4b24      	ldr	r3, [pc, #144]	@ (80083a4 <USBD_LL_Init+0xac>)
 8008312:	4a25      	ldr	r2, [pc, #148]	@ (80083a8 <USBD_LL_Init+0xb0>)
 8008314:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008316:	4b23      	ldr	r3, [pc, #140]	@ (80083a4 <USBD_LL_Init+0xac>)
 8008318:	2208      	movs	r2, #8
 800831a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800831c:	4b21      	ldr	r3, [pc, #132]	@ (80083a4 <USBD_LL_Init+0xac>)
 800831e:	2202      	movs	r2, #2
 8008320:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008322:	4b20      	ldr	r3, [pc, #128]	@ (80083a4 <USBD_LL_Init+0xac>)
 8008324:	2200      	movs	r2, #0
 8008326:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008328:	4b1e      	ldr	r3, [pc, #120]	@ (80083a4 <USBD_LL_Init+0xac>)
 800832a:	2200      	movs	r2, #0
 800832c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800832e:	4b1d      	ldr	r3, [pc, #116]	@ (80083a4 <USBD_LL_Init+0xac>)
 8008330:	2200      	movs	r2, #0
 8008332:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008334:	481b      	ldr	r0, [pc, #108]	@ (80083a4 <USBD_LL_Init+0xac>)
 8008336:	f7f8 fe9e 	bl	8001076 <HAL_PCD_Init>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008340:	f7f8 f87a 	bl	8000438 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800834a:	2318      	movs	r3, #24
 800834c:	2200      	movs	r2, #0
 800834e:	2100      	movs	r1, #0
 8008350:	f7fa fbaf 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800835a:	2358      	movs	r3, #88	@ 0x58
 800835c:	2200      	movs	r2, #0
 800835e:	2180      	movs	r1, #128	@ 0x80
 8008360:	f7fa fba7 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800836a:	23c0      	movs	r3, #192	@ 0xc0
 800836c:	2200      	movs	r2, #0
 800836e:	2181      	movs	r1, #129	@ 0x81
 8008370:	f7fa fb9f 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800837a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800837e:	2200      	movs	r2, #0
 8008380:	2101      	movs	r1, #1
 8008382:	f7fa fb96 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800838c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008390:	2200      	movs	r2, #0
 8008392:	2182      	movs	r1, #130	@ 0x82
 8008394:	f7fa fb8d 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000fcc 	.word	0x20000fcc
 80083a8:	40005c00 	.word	0x40005c00

080083ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f8 ff4d 	bl	8001262 <HAL_PCD_Start>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f94e 	bl	8008670 <USBD_Get_USB_Status>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	4608      	mov	r0, r1
 80083ec:	4611      	mov	r1, r2
 80083ee:	461a      	mov	r2, r3
 80083f0:	4603      	mov	r3, r0
 80083f2:	70fb      	strb	r3, [r7, #3]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70bb      	strb	r3, [r7, #2]
 80083f8:	4613      	mov	r3, r2
 80083fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800840a:	78bb      	ldrb	r3, [r7, #2]
 800840c:	883a      	ldrh	r2, [r7, #0]
 800840e:	78f9      	ldrb	r1, [r7, #3]
 8008410:	f7f9 f8a1 	bl	8001556 <HAL_PCD_EP_Open>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f928 	bl	8008670 <USBD_Get_USB_Status>
 8008420:	4603      	mov	r3, r0
 8008422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008424:	7bbb      	ldrb	r3, [r7, #14]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f7f9 f8df 	bl	8001610 <HAL_PCD_EP_Close>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 f909 	bl	8008670 <USBD_Get_USB_Status>
 800845e:	4603      	mov	r3, r0
 8008460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008462:	7bbb      	ldrb	r3, [r7, #14]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7f9 f987 	bl	800179e <HAL_PCD_EP_SetStall>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f8ea 	bl	8008670 <USBD_Get_USB_Status>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7f9 f9c8 	bl	800185e <HAL_PCD_EP_ClrStall>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f8cb 	bl	8008670 <USBD_Get_USB_Status>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084de:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da0b      	bge.n	800851c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	440b      	add	r3, r1
 8008516:	3312      	adds	r3, #18
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	e00b      	b.n	8008534 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	440b      	add	r3, r1
 800852e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008532:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f7f8 ffd6 	bl	800150e <HAL_PCD_SetAddress>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f881 	bl	8008670 <USBD_Get_USB_Status>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008572:	7bbb      	ldrb	r3, [r7, #14]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	607a      	str	r2, [r7, #4]
 8008586:	461a      	mov	r2, r3
 8008588:	460b      	mov	r3, r1
 800858a:	72fb      	strb	r3, [r7, #11]
 800858c:	4613      	mov	r3, r2
 800858e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800859e:	893b      	ldrh	r3, [r7, #8]
 80085a0:	7af9      	ldrb	r1, [r7, #11]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	f7f9 f8c4 	bl	8001730 <HAL_PCD_EP_Transmit>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f85e 	bl	8008670 <USBD_Get_USB_Status>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b086      	sub	sp, #24
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	461a      	mov	r2, r3
 80085ce:	460b      	mov	r3, r1
 80085d0:	72fb      	strb	r3, [r7, #11]
 80085d2:	4613      	mov	r3, r2
 80085d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085e4:	893b      	ldrh	r3, [r7, #8]
 80085e6:	7af9      	ldrb	r1, [r7, #11]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	f7f9 f859 	bl	80016a0 <HAL_PCD_EP_Receive>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f83b 	bl	8008670 <USBD_Get_USB_Status>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7f9 f86f 	bl	8001702 <HAL_PCD_EP_GetRxCount>
 8008624:	4603      	mov	r3, r0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008638:	4b02      	ldr	r3, [pc, #8]	@ (8008644 <USBD_static_malloc+0x14>)
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr
 8008644:	200012a4 	.word	0x200012a4

08008648 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]

}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr

0800865a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr

08008670 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d817      	bhi.n	80086b4 <USBD_Get_USB_Status+0x44>
 8008684:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <USBD_Get_USB_Status+0x1c>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086a3 	.word	0x080086a3
 8008694:	080086a9 	.word	0x080086a9
 8008698:	080086af 	.word	0x080086af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e00b      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086a2:	2302      	movs	r3, #2
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	e008      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e005      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ae:	2302      	movs	r3, #2
 80086b0:	73fb      	strb	r3, [r7, #15]
    break;
 80086b2:	e002      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086b4:	2302      	movs	r3, #2
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	bf00      	nop
  }
  return usb_status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop

080086c8 <memset>:
 80086c8:	4603      	mov	r3, r0
 80086ca:	4402      	add	r2, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <__libc_init_array>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	2600      	movs	r6, #0
 80086dc:	4d0c      	ldr	r5, [pc, #48]	@ (8008710 <__libc_init_array+0x38>)
 80086de:	4c0d      	ldr	r4, [pc, #52]	@ (8008714 <__libc_init_array+0x3c>)
 80086e0:	1b64      	subs	r4, r4, r5
 80086e2:	10a4      	asrs	r4, r4, #2
 80086e4:	42a6      	cmp	r6, r4
 80086e6:	d109      	bne.n	80086fc <__libc_init_array+0x24>
 80086e8:	f000 f81a 	bl	8008720 <_init>
 80086ec:	2600      	movs	r6, #0
 80086ee:	4d0a      	ldr	r5, [pc, #40]	@ (8008718 <__libc_init_array+0x40>)
 80086f0:	4c0a      	ldr	r4, [pc, #40]	@ (800871c <__libc_init_array+0x44>)
 80086f2:	1b64      	subs	r4, r4, r5
 80086f4:	10a4      	asrs	r4, r4, #2
 80086f6:	42a6      	cmp	r6, r4
 80086f8:	d105      	bne.n	8008706 <__libc_init_array+0x2e>
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008700:	4798      	blx	r3
 8008702:	3601      	adds	r6, #1
 8008704:	e7ee      	b.n	80086e4 <__libc_init_array+0xc>
 8008706:	f855 3b04 	ldr.w	r3, [r5], #4
 800870a:	4798      	blx	r3
 800870c:	3601      	adds	r6, #1
 800870e:	e7f2      	b.n	80086f6 <__libc_init_array+0x1e>
 8008710:	08008794 	.word	0x08008794
 8008714:	08008794 	.word	0x08008794
 8008718:	08008794 	.word	0x08008794
 800871c:	08008798 	.word	0x08008798

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
