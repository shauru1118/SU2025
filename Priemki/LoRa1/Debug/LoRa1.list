
LoRa1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d90  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f70  08007f70  000090fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f70  08007f70  00008f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f78  08007f78  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f7c  08007f7c  00008f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007f80  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  200000fc  0800807c  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  0800807c  0000a0e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103b3  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe5  00000000  00000000  000194df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0001c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a05  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183c9  00000000  00000000  0001dc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c2d  00000000  00000000  0003600e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088934  00000000  00000000  00047c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d056f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003624  00000000  00000000  000d05b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000d3bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007f0c 	.word	0x08007f0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007f0c 	.word	0x08007f0c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000506:	f000 fcc7 	bl	8000e98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800050a:	f000 f8b9 	bl	8000680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050e:	f000 f959 	bl	80007c4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000512:	f000 f921 	bl	8000758 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000516:	f006 ffb3 	bl	8007480 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_TogglePin(LED_ON_GPIO_Port, LED_ON_Pin);
 800051a:	2140      	movs	r1, #64	@ 0x40
 800051c:	4852      	ldr	r0, [pc, #328]	@ (8000668 <main+0x168>)
 800051e:	f001 f800 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 8000522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000526:	4850      	ldr	r0, [pc, #320]	@ (8000668 <main+0x168>)
 8000528:	f000 fffb 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	484e      	ldr	r0, [pc, #312]	@ (8000668 <main+0x168>)
 8000530:	f000 fff7 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 8000534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000538:	484b      	ldr	r0, [pc, #300]	@ (8000668 <main+0x168>)
 800053a:	f000 fff2 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 800053e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000542:	f000 fd1b 	bl	8000f7c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_ON_GPIO_Port, LED_ON_Pin);
 8000546:	2140      	movs	r1, #64	@ 0x40
 8000548:	4847      	ldr	r0, [pc, #284]	@ (8000668 <main+0x168>)
 800054a:	f000 ffea 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 800054e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000552:	4845      	ldr	r0, [pc, #276]	@ (8000668 <main+0x168>)
 8000554:	f000 ffe5 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	4843      	ldr	r0, [pc, #268]	@ (8000668 <main+0x168>)
 800055c:	f000 ffe1 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 8000560:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000564:	4840      	ldr	r0, [pc, #256]	@ (8000668 <main+0x168>)
 8000566:	f000 ffdc 	bl	8001522 <HAL_GPIO_TogglePin>

	while (!hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].is_used) {
 800056a:	e011      	b.n	8000590 <main+0x90>
		LED_ERR_GPIO_Port->ODR |= LED_ERR_Pin;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <main+0x168>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a3d      	ldr	r2, [pc, #244]	@ (8000668 <main+0x168>)
 8000572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000576:	6153      	str	r3, [r2, #20]
		HAL_Delay(100);
 8000578:	2064      	movs	r0, #100	@ 0x64
 800057a:	f000 fcff 	bl	8000f7c <HAL_Delay>
		LED_ERR_GPIO_Port->ODR &= ~LED_ERR_Pin;
 800057e:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <main+0x168>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a39      	ldr	r2, [pc, #228]	@ (8000668 <main+0x168>)
 8000584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000588:	6153      	str	r3, [r2, #20]
		HAL_Delay(100);
 800058a:	2064      	movs	r0, #100	@ 0x64
 800058c:	f000 fcf6 	bl	8000f7c <HAL_Delay>
	while (!hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].is_used) {
 8000590:	4b36      	ldr	r3, [pc, #216]	@ (800066c <main+0x16c>)
 8000592:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0e9      	beq.n	800056c <main+0x6c>
	}

	hCDC = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8000598:	4b34      	ldr	r3, [pc, #208]	@ (800066c <main+0x16c>)
 800059a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800059e:	4a34      	ldr	r2, [pc, #208]	@ (8000670 <main+0x170>)
 80005a0:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 80005a2:	2064      	movs	r0, #100	@ 0x64
 80005a4:	f000 fcea 	bl	8000f7c <HAL_Delay>

	if (LORA_Init(&hspi1, SPI1_NSS_GPIO_Port, SPI1_NSS_Pin)) {
 80005a8:	2210      	movs	r2, #16
 80005aa:	4932      	ldr	r1, [pc, #200]	@ (8000674 <main+0x174>)
 80005ac:	4832      	ldr	r0, [pc, #200]	@ (8000678 <main+0x178>)
 80005ae:	f000 f999 	bl	80008e4 <LORA_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d010      	beq.n	80005da <main+0xda>
		LED_ERR_GPIO_Port->ODR |= LED_ERR_Pin;
 80005b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <main+0x168>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000668 <main+0x168>)
 80005be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005c2:	6153      	str	r3, [r2, #20]
		HAL_Delay(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c8:	f000 fcd8 	bl	8000f7c <HAL_Delay>
		LED_ERR_GPIO_Port->ODR &= ~LED_ERR_Pin;
 80005cc:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <main+0x168>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a25      	ldr	r2, [pc, #148]	@ (8000668 <main+0x168>)
 80005d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80005d6:	6153      	str	r3, [r2, #20]
 80005d8:	e00f      	b.n	80005fa <main+0xfa>

	} else {
		LED_ON_GPIO_Port->ODR |= LED_ON_Pin;
 80005da:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <main+0x168>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <main+0x168>)
 80005e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005e4:	6153      	str	r3, [r2, #20]
		HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ea:	f000 fcc7 	bl	8000f7c <HAL_Delay>
		LED_ON_GPIO_Port->ODR &= ~LED_ON_Pin;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <main+0x168>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <main+0x168>)
 80005f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005f8:	6153      	str	r3, [r2, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t packetSize = LORA_ReceiveData(receiveData);
 80005fa:	4820      	ldr	r0, [pc, #128]	@ (800067c <main+0x17c>)
 80005fc:	f000 fa58 	bl	8000ab0 <LORA_ReceiveData>
 8000600:	4603      	mov	r3, r0
 8000602:	71fb      	strb	r3, [r7, #7]

		if (packetSize) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d009      	beq.n	800061e <main+0x11e>
			CDC_Transmit_FS(receiveData, packetSize);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	b29b      	uxth	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	481a      	ldr	r0, [pc, #104]	@ (800067c <main+0x17c>)
 8000612:	f006 fff3 	bl	80075fc <CDC_Transmit_FS>
			HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	4813      	ldr	r0, [pc, #76]	@ (8000668 <main+0x168>)
 800061a:	f000 ff82 	bl	8001522 <HAL_GPIO_TogglePin>
		}

		if (hCDC->RxLength) {
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <main+0x170>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0e7      	beq.n	80005fa <main+0xfa>
			LED_TX_GPIO_Port->ODR |= LED_TX_Pin;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <main+0x168>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <main+0x168>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6153      	str	r3, [r2, #20]

			LORA_TransmitData(hCDC->RxBuffer, hCDC->RxLength);
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <main+0x170>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <main+0x170>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	4610      	mov	r0, r2
 800064c:	f000 fae4 	bl	8000c18 <LORA_TransmitData>
			hCDC->RxLength = 0;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <main+0x170>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

			LED_TX_GPIO_Port->ODR &= ~LED_TX_Pin;
 800065a:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <main+0x168>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a02      	ldr	r2, [pc, #8]	@ (8000668 <main+0x168>)
 8000660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000664:	6153      	str	r3, [r2, #20]
	while (1) {
 8000666:	e7c8      	b.n	80005fa <main+0xfa>
 8000668:	40020400 	.word	0x40020400
 800066c:	20000288 	.word	0x20000288
 8000670:	20000270 	.word	0x20000270
 8000674:	40020000 	.word	0x40020000
 8000678:	20000118 	.word	0x20000118
 800067c:	20000170 	.word	0x20000170

08000680 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fc10 	bl	8007eb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <SystemClock_Config+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006cc:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <SystemClock_Config+0xd4>)
 80006ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 12;
 80006f4:	230c      	movs	r3, #12
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80006f8:	2348      	movs	r3, #72	@ 0x48
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000700:	2303      	movs	r3, #3
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f977 	bl	80029fc <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
		Error_Handler();
 8000714:	f000 f8e0 	bl	80008d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000728:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fbd9 	bl	8002eec <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc4>
		Error_Handler();
 8000740:	f000 f8ca 	bl	80008d8 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000744:	f002 fcb8 	bl	80030b8 <HAL_RCC_EnableCSS>
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	@ 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000768:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000788:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2218      	movs	r2, #24
 800078e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f002 fd7e 	bl	80032aa <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80007b4:	f000 f890 	bl	80008d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000118 	.word	0x20000118
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <MX_GPIO_Init+0x104>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a39      	ldr	r2, [pc, #228]	@ (80008c8 <MX_GPIO_Init+0x104>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_GPIO_Init+0x104>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_GPIO_Init+0x104>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a32      	ldr	r2, [pc, #200]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a2b      	ldr	r2, [pc, #172]	@ (80008c8 <MX_GPIO_Init+0x104>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a24      	ldr	r2, [pc, #144]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	2110      	movs	r1, #16
 800084e:	481f      	ldr	r0, [pc, #124]	@ (80008cc <MX_GPIO_Init+0x108>)
 8000850:	f000 fe4e 	bl	80014f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS2_GPIO_Port, SPI1_NSS2_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	481d      	ldr	r0, [pc, #116]	@ (80008d0 <MX_GPIO_Init+0x10c>)
 800085a:	f000 fe49 	bl	80014f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_ON_Pin | LED_RX_Pin | LED_TX_Pin | LED_ERR_Pin,
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000864:	481b      	ldr	r0, [pc, #108]	@ (80008d4 <MX_GPIO_Init+0x110>)
 8000866:	f000 fe43 	bl	80014f0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4812      	ldr	r0, [pc, #72]	@ (80008cc <MX_GPIO_Init+0x108>)
 8000882:	f000 fcb1 	bl	80011e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS2_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS2_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <MX_GPIO_Init+0x10c>)
 800089e:	f000 fca3 	bl	80011e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_ON_Pin LED_RX_Pin LED_TX_Pin LED_ERR_Pin */
	GPIO_InitStruct.Pin = LED_ON_Pin | LED_RX_Pin | LED_TX_Pin | LED_ERR_Pin;
 80008a2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80008a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_GPIO_Init+0x110>)
 80008bc:	f000 fc94 	bl	80011e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020400 	.word	0x40020400

080008d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 80008f2:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <LORA_Init+0xd8>)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 80008f8:	4a31      	ldr	r2, [pc, #196]	@ (80009c0 <LORA_Init+0xdc>)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 80008fe:	4a31      	ldr	r2, [pc, #196]	@ (80009c4 <LORA_Init+0xe0>)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 8000904:	2042      	movs	r0, #66	@ 0x42
 8000906:	f000 f861 	bl	80009cc <_loraReadReg>
 800090a:	4603      	mov	r3, r0
 800090c:	2b12      	cmp	r3, #18
 800090e:	d001      	beq.n	8000914 <LORA_Init+0x30>
		return 1;
 8000910:	2301      	movs	r3, #1
 8000912:	e04e      	b.n	80009b2 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8000914:	2100      	movs	r1, #0
 8000916:	2001      	movs	r0, #1
 8000918:	f000 f88e 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 800091c:	2188      	movs	r1, #136	@ 0x88
 800091e:	2001      	movs	r0, #1
 8000920:	f000 f88a 	bl	8000a38 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <LORA_Init+0xe4>)
 8000926:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	0c1b      	lsrs	r3, r3, #16
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	2006      	movs	r0, #6
 8000932:	f000 f881 	bl	8000a38 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	2007      	movs	r0, #7
 8000940:	f000 f87a 	bl	8000a38 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	2008      	movs	r0, #8
 800094c:	f000 f874 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8000950:	21ff      	movs	r1, #255	@ 0xff
 8000952:	2009      	movs	r0, #9
 8000954:	f000 f870 	bl	8000a38 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8000958:	210b      	movs	r1, #11
 800095a:	200b      	movs	r0, #11
 800095c:	f000 f86c 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8000960:	2120      	movs	r1, #32
 8000962:	200c      	movs	r0, #12
 8000964:	f000 f868 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8000968:	21ff      	movs	r1, #255	@ 0xff
 800096a:	200e      	movs	r0, #14
 800096c:	f000 f864 	bl	8000a38 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8000970:	2100      	movs	r1, #0
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f860 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8000978:	2182      	movs	r1, #130	@ 0x82
 800097a:	201d      	movs	r0, #29
 800097c:	f000 f85c 	bl	8000a38 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8000980:	2170      	movs	r1, #112	@ 0x70
 8000982:	201e      	movs	r0, #30
 8000984:	f000 f858 	bl	8000a38 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8000988:	2100      	movs	r1, #0
 800098a:	2020      	movs	r0, #32
 800098c:	f000 f854 	bl	8000a38 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8000990:	2106      	movs	r1, #6
 8000992:	2021      	movs	r0, #33	@ 0x21
 8000994:	f000 f850 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8000998:	213c      	movs	r1, #60	@ 0x3c
 800099a:	2022      	movs	r0, #34	@ 0x22
 800099c:	f000 f84c 	bl	8000a38 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 80009a0:	213c      	movs	r1, #60	@ 0x3c
 80009a2:	2023      	movs	r0, #35	@ 0x23
 80009a4:	f000 f848 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 80009a8:	2105      	movs	r1, #5
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 f844 	bl	8000a38 <_loraWriteReg>

	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000274 	.word	0x20000274
 80009c0:	20000278 	.word	0x20000278
 80009c4:	2000027c 	.word	0x2000027c
 80009c8:	006c4000 	.word	0x006c4000

080009cc <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <_loraReadReg+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <_loraReadReg+0x64>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	43db      	mvns	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <_loraReadReg+0x60>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	400a      	ands	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_loraReadReg+0x68>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	1df9      	adds	r1, r7, #7
 80009f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f6:	2201      	movs	r2, #1
 80009f8:	f002 fce0 	bl	80033bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 80009fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <_loraReadReg+0x68>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	1df9      	adds	r1, r7, #7
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	2201      	movs	r2, #1
 8000a08:	f002 fe1c 	bl	8003644 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <_loraReadReg+0x60>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <_loraReadReg+0x64>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <_loraReadReg+0x60>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
	return reg;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000278 	.word	0x20000278
 8000a30:	2000027c 	.word	0x2000027c
 8000a34:	20000274 	.word	0x20000274

08000a38 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <_loraWriteReg+0x6c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <_loraWriteReg+0x70>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <_loraWriteReg+0x6c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <_loraWriteReg+0x74>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	1df9      	adds	r1, r7, #7
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	2201      	movs	r2, #1
 8000a74:	f002 fca2 	bl	80033bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <_loraWriteReg+0x74>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	1db9      	adds	r1, r7, #6
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	2201      	movs	r2, #1
 8000a84:	f002 fc9a 	bl	80033bc <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <_loraWriteReg+0x6c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <_loraWriteReg+0x70>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <_loraWriteReg+0x6c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000278 	.word	0x20000278
 8000aa8:	2000027c 	.word	0x2000027c
 8000aac:	20000274 	.word	0x20000274

08000ab0 <LORA_ReceiveData>:

uint8_t LORA_ReceiveData(uint8_t *data) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	if (_loraReadReg(LORA_REG_FLAGS) & (LORA_FLAGS_RX_DONE)) {
 8000ab8:	2012      	movs	r0, #18
 8000aba:	f7ff ff87 	bl	80009cc <_loraReadReg>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f000 809c 	beq.w	8000c02 <LORA_ReceiveData+0x152>
		_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_RX_DONE);
 8000aca:	2140      	movs	r1, #64	@ 0x40
 8000acc:	2012      	movs	r0, #18
 8000ace:	f7ff ffb3 	bl	8000a38 <_loraWriteReg>

		uint8_t packetSize = _loraReadReg(LORA_REG_RX_NB_BYTES);
 8000ad2:	2013      	movs	r0, #19
 8000ad4:	f7ff ff7a 	bl	80009cc <_loraReadReg>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
		uint8_t curAddr = _loraReadReg(LORA_REG_FIFO_RX_CUR);
 8000adc:	2010      	movs	r0, #16
 8000ade:	f7ff ff75 	bl	80009cc <_loraReadReg>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73bb      	strb	r3, [r7, #14]
		uint8_t regFifo = LORA_REG_FIFO;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	733b      	strb	r3, [r7, #12]

		_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, curAddr);
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	4619      	mov	r1, r3
 8000aee:	200d      	movs	r0, #13
 8000af0:	f7ff ffa2 	bl	8000a38 <_loraWriteReg>

		uint8_t spaceLeft = 255 - curAddr;
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	737b      	strb	r3, [r7, #13]
		if (spaceLeft >= packetSize) {
 8000afa:	7b7a      	ldrb	r2, [r7, #13]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d327      	bcc.n	8000b52 <LORA_ReceiveData+0xa2>
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000b02:	4b42      	ldr	r3, [pc, #264]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695a      	ldr	r2, [r3, #20]
 8000b08:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <LORA_ReceiveData+0x160>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4b3e      	ldr	r3, [pc, #248]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	400a      	ands	r2, r1
 8000b16:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000b18:	4b3e      	ldr	r3, [pc, #248]	@ (8000c14 <LORA_ReceiveData+0x164>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	f107 010c 	add.w	r1, r7, #12
 8000b20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b24:	2201      	movs	r2, #1
 8000b26:	f002 fc49 	bl	80033bc <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize, 1000);
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c14 <LORA_ReceiveData+0x164>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f002 fd84 	bl	8003644 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000b3c:	4b33      	ldr	r3, [pc, #204]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	695a      	ldr	r2, [r3, #20]
 8000b42:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <LORA_ReceiveData+0x160>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	e055      	b.n	8000bfe <LORA_ReceiveData+0x14e>
		} else {
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000b52:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <LORA_ReceiveData+0x160>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	400a      	ands	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000b68:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <LORA_ReceiveData+0x164>)
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	f107 010c 	add.w	r1, r7, #12
 8000b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b74:	2201      	movs	r2, #1
 8000b76:	f002 fc21 	bl	80033bc <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, spaceLeft, 1000);
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <LORA_ReceiveData+0x164>)
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f002 fd5c 	bl	8003644 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <LORA_ReceiveData+0x160>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]

			_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200d      	movs	r0, #13
 8000ba4:	f7ff ff48 	bl	8000a38 <_loraWriteReg>

			_nssPort->ODR &= ~_nssPin; // nss 0
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <LORA_ReceiveData+0x160>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	400a      	ands	r2, r1
 8000bbc:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <LORA_ReceiveData+0x164>)
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	f107 010c 	add.w	r1, r7, #12
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f002 fbf6 	bl	80033bc <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize - spaceLeft, 1000);
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <LORA_ReceiveData+0x164>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	7b7b      	ldrb	r3, [r7, #13]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	f002 fd2d 	bl	8003644 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <LORA_ReceiveData+0x160>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <LORA_ReceiveData+0x15c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	615a      	str	r2, [r3, #20]
		}
		return packetSize;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	e000      	b.n	8000c04 <LORA_ReceiveData+0x154>
	}
	return 0;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000278 	.word	0x20000278
 8000c10:	2000027c 	.word	0x2000027c
 8000c14:	20000274 	.word	0x20000274

08000c18 <LORA_TransmitData>:

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8000c24:	21ff      	movs	r1, #255	@ 0xff
 8000c26:	200d      	movs	r0, #13
 8000c28:	f7ff ff06 	bl	8000a38 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2022      	movs	r0, #34	@ 0x22
 8000c32:	f7ff ff01 	bl	8000a38 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8000c36:	2380      	movs	r3, #128	@ 0x80
 8000c38:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <LORA_TransmitData+0xa4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <LORA_TransmitData+0xa8>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <LORA_TransmitData+0xa4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <LORA_TransmitData+0xac>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f107 010f 	add.w	r1, r7, #15
 8000c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f002 fbad 	bl	80033bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <LORA_TransmitData+0xac>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f002 fba4 	bl	80033bc <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <LORA_TransmitData+0xa4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <LORA_TransmitData+0xa8>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <LORA_TransmitData+0xa4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fed4 	bl	8000a38 <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 8000c90:	bf00      	nop
 8000c92:	2012      	movs	r0, #18
 8000c94:	f7ff fe9a 	bl	80009cc <_loraReadReg>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f7      	beq.n	8000c92 <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	2012      	movs	r0, #18
 8000ca6:	f7ff fec7 	bl	8000a38 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000caa:	2105      	movs	r1, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff fec3 	bl	8000a38 <_loraWriteReg>

}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000278 	.word	0x20000278
 8000cc0:	2000027c 	.word	0x2000027c
 8000cc4:	20000274 	.word	0x20000274

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <HAL_SPI_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d72:	2338      	movs	r3, #56	@ 0x38
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d82:	2305      	movs	r3, #5
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HAL_SPI_MspInit+0x8c>)
 8000d8e:	f000 fa2b 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40013000 	.word	0x40013000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000dac:	f002 fa62 	bl	8003274 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x8>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f89b 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <OTG_FS_IRQHandler+0x10>)
 8000e12:	f000 fce4 	bl	80017de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200009e4 	.word	0x200009e4

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e48:	f7ff ffea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f007 f827 	bl	8007ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb43 	bl	8000500 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e88:	08007f80 	.word	0x08007f80
  ldr r2, =_sbss
 8000e8c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e90:	200010e8 	.word	0x200010e8

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f94f 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fefc 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f967 	bl	80011ce <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f92f 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000280 	.word	0x20000280

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000280 	.word	0x20000280

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	@ (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	@ (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	@ (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e159      	b.n	80014b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8148 	bne.w	80014b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a2 	beq.w	80014b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b57      	ldr	r3, [pc, #348]	@ (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a56      	ldr	r2, [pc, #344]	@ (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b54      	ldr	r3, [pc, #336]	@ (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a52      	ldr	r2, [pc, #328]	@ (80014d4 <HAL_GPIO_Init+0x2ec>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a49      	ldr	r2, [pc, #292]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x202>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a48      	ldr	r2, [pc, #288]	@ (80014dc <HAL_GPIO_Init+0x2f4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x1fe>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a47      	ldr	r2, [pc, #284]	@ (80014e0 <HAL_GPIO_Init+0x2f8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a46      	ldr	r2, [pc, #280]	@ (80014e4 <HAL_GPIO_Init+0x2fc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x1f6>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a45      	ldr	r2, [pc, #276]	@ (80014e8 <HAL_GPIO_Init+0x300>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x1f2>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013da:	2307      	movs	r3, #7
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	@ (80014d4 <HAL_GPIO_Init+0x2ec>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <HAL_GPIO_Init+0x304>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a2f      	ldr	r2, [pc, #188]	@ (80014ec <HAL_GPIO_Init+0x304>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_GPIO_Init+0x304>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a24      	ldr	r2, [pc, #144]	@ (80014ec <HAL_GPIO_Init+0x304>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145e:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_GPIO_Init+0x304>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001482:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <HAL_GPIO_Init+0x304>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <HAL_GPIO_Init+0x304>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ac:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <HAL_GPIO_Init+0x304>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f aea2 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	041a      	lsls	r2, r3, #16
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43d9      	mvns	r1, r3
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	400b      	ands	r3, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af02      	add	r7, sp, #8
 800155c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e101      	b.n	800176c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 f982 	bl	800788c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001596:	d102      	bne.n	800159e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fd69 	bl	800407a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7c1a      	ldrb	r2, [r3, #16]
 80015b0:	f88d 2000 	strb.w	r2, [sp]
 80015b4:	3304      	adds	r3, #4
 80015b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b8:	f002 fc48 	bl	8003e4c <USB_CoreInit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0ce      	b.n	800176c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fd61 	bl	800409c <USB_SetCurrentMode>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0bf      	b.n	800176c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e04a      	b.n	8001688 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3315      	adds	r3, #21
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3314      	adds	r3, #20
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	b298      	uxth	r0, r3
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	332e      	adds	r3, #46	@ 0x2e
 800162e:	4602      	mov	r2, r0
 8001630:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3318      	adds	r3, #24
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	331c      	adds	r3, #28
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3320      	adds	r3, #32
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3324      	adds	r3, #36	@ 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	3301      	adds	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3af      	bcc.n	80015f2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	e044      	b.n	8001722 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	3301      	adds	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	429a      	cmp	r2, r3
 800172a:	d3b5      	bcc.n	8001698 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7c1a      	ldrb	r2, [r3, #16]
 8001734:	f88d 2000 	strb.w	r2, [sp]
 8001738:	3304      	adds	r3, #4
 800173a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800173c:	f002 fcfa 	bl	8004134 <USB_DevInit>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2202      	movs	r2, #2
 800174a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00c      	b.n	800176c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fd44 	bl	80051f2 <USB_DevDisconnect>

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_PCD_Start+0x1c>
 800178c:	2302      	movs	r3, #2
 800178e:	e022      	b.n	80017d6 <HAL_PCD_Start+0x62>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fc4b 	bl	8004058 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fcf2 	bl	80051b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017de:	b590      	push	{r4, r7, lr}
 80017e0:	b08d      	sub	sp, #52	@ 0x34
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fdb0 	bl	800535a <USB_GetMode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 848c 	bne.w	800211a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fd14 	bl	8005234 <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8482 	beq.w	8002118 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fd01 	bl	8005234 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b02      	cmp	r3, #2
 800183a:	d107      	bne.n	800184c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f002 0202 	and.w	r2, r2, #2
 800184a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fcef 	bl	8005234 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b10      	cmp	r3, #16
 800185e:	d161      	bne.n	8001924 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0210 	bic.w	r2, r2, #16
 800186e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 020f 	and.w	r2, r3, #15
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	3304      	adds	r3, #4
 800188e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001896:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800189a:	d124      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d035      	beq.n	8001914 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	6a38      	ldr	r0, [r7, #32]
 80018bc:	f003 fb26 	bl	8004f0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018cc:	441a      	add	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018de:	441a      	add	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	e016      	b.n	8001914 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80018ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80018f0:	d110      	bne.n	8001914 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018f8:	2208      	movs	r2, #8
 80018fa:	4619      	mov	r1, r3
 80018fc:	6a38      	ldr	r0, [r7, #32]
 80018fe:	f003 fb05 	bl	8004f0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800190e:	441a      	add	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0210 	orr.w	r2, r2, #16
 8001922:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fc83 	bl	8005234 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001934:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001938:	f040 80a7 	bne.w	8001a8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fc88 	bl	800525a <USB_ReadDevAllOutEpInterrupt>
 800194a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800194c:	e099      	b.n	8001a82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800194e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808e 	beq.w	8001a76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fcac 	bl	80052c2 <USB_ReadDevOutEPInterrupt>
 800196a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001982:	461a      	mov	r2, r3
 8001984:	2301      	movs	r3, #1
 8001986:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fea4 	bl	80026d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019a6:	461a      	mov	r2, r3
 80019a8:	2308      	movs	r3, #8
 80019aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 ff7a 	bl	80028a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ca:	461a      	mov	r2, r3
 80019cc:	2310      	movs	r3, #16
 80019ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d030      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e2:	2b80      	cmp	r3, #128	@ 0x80
 80019e4:	d109      	bne.n	80019fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f006 f837 	bl	8007a98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a36:	461a      	mov	r2, r3
 8001a38:	2302      	movs	r3, #2
 8001a3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a52:	461a      	mov	r2, r3
 8001a54:	2320      	movs	r3, #32
 8001a56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	3301      	adds	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f47f af62 	bne.w	800194e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fbd0 	bl	8005234 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a9e:	f040 80db 	bne.w	8001c58 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fbf1 	bl	800528e <USB_ReadDevAllInEpInterrupt>
 8001aac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001ab2:	e0cd      	b.n	8001c50 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80c2 	beq.w	8001c44 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fc17 	bl	80052fe <USB_ReadDevInEPInterrupt>
 8001ad0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d057      	beq.n	8001b8c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69f9      	ldr	r1, [r7, #28]
 8001af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001afc:	4013      	ands	r3, r2
 8001afe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2301      	movs	r3, #1
 8001b10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	799b      	ldrb	r3, [r3, #6]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d132      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3320      	adds	r3, #32
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4403      	add	r3, r0
 8001b3a:	331c      	adds	r3, #28
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4419      	add	r1, r3
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	3320      	adds	r3, #32
 8001b50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d113      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x3a2>
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3324      	adds	r3, #36	@ 0x24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	f003 fc1e 	bl	80053bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f005 ff01 	bl	800798e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2340      	movs	r3, #64	@ 0x40
 8001bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d023      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bec:	6a38      	ldr	r0, [r7, #32]
 8001bee:	f002 fc05 	bl	80043fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2200      	movs	r2, #0
 8001c12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f005 ff4e 	bl	8007abc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2302      	movs	r3, #2
 8001c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fcbd 	bl	80025be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	3301      	adds	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f af2e 	bne.w	8001ab4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fae9 	bl	8005234 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c6c:	d122      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d108      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c94:	2100      	movs	r1, #0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fea4 	bl	80029e4 <HAL_PCDEx_LPM_Callback>
 8001c9c:	e002      	b.n	8001ca4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f005 feec 	bl	8007a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fabb 	bl	8005234 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cc8:	d112      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f005 fea8 	bl	8007a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001cee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fa9d 	bl	8005234 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d04:	f040 80b7 	bne.w	8001e76 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2110      	movs	r1, #16
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 fb6a 	bl	80043fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2c:	e046      	b.n	8001dbc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d52:	0151      	lsls	r1, r2, #5
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	440a      	add	r2, r1
 8001d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001d5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d86:	0151      	lsls	r1, r2, #5
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	440a      	add	r2, r1
 8001d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001db0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001db4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db8:	3301      	adds	r3, #1
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d3b2      	bcc.n	8001d2e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dd6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001dda:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7bdb      	ldrb	r3, [r3, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d016      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001df4:	f043 030b 	orr.w	r3, r3, #11
 8001df8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e0a:	f043 030b 	orr.w	r3, r3, #11
 8001e0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e10:	e015      	b.n	8001e3e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e24:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e28:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e38:	f043 030b 	orr.w	r3, r3, #11
 8001e3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e4c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001e50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e60:	461a      	mov	r2, r3
 8001e62:	f003 faab 	bl	80053bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 f9da 	bl	8005234 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e8a:	d123      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fa70 	bl	8005376 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fb27 	bl	80044ee <USB_GetDevSpeed>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681c      	ldr	r4, [r3, #0]
 8001eac:	f001 f9d6 	bl	800325c <HAL_RCC_GetHCLKFreq>
 8001eb0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f002 f82b 	bl	8003f14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f005 fd8d 	bl	80079de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 f9ab 	bl	8005234 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d10a      	bne.n	8001efe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f005 fd6a 	bl	80079c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f002 0208 	and.w	r2, r2, #8
 8001efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 f996 	bl	8005234 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	2b80      	cmp	r3, #128	@ 0x80
 8001f10:	d123      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f1e:	2301      	movs	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	e014      	b.n	8001f4e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	4619      	mov	r1, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fb0a 	bl	800255c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	461a      	mov	r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d3e4      	bcc.n	8001f24 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 f968 	bl	8005234 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f6e:	d13c      	bne.n	8001fea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f70:	2301      	movs	r3, #1
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f74:	e02b      	b.n	8001fce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3318      	adds	r3, #24
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d115      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da12      	bge.n	8001fc8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3317      	adds	r3, #23
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 faca 	bl	800255c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	3301      	adds	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	791b      	ldrb	r3, [r3, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d3cd      	bcc.n	8001f76 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 f920 	bl	8005234 <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ffe:	d156      	bne.n	80020ae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	e045      	b.n	8002092 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12e      	bne.n	800208c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800202e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002030:	2b00      	cmp	r3, #0
 8002032:	da2b      	bge.n	800208c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002040:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002044:	429a      	cmp	r2, r3
 8002046:	d121      	bne.n	800208c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002088:	6053      	str	r3, [r2, #4]
            break;
 800208a:	e008      	b.n	800209e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	3301      	adds	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	4293      	cmp	r3, r2
 800209c:	d3b3      	bcc.n	8002006 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80020ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 f8be 	bl	8005234 <USB_ReadInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c2:	d10a      	bne.n	80020da <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f005 fd0b 	bl	8007ae0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80020d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f8a8 	bl	8005234 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d115      	bne.n	800211a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f005 fcfb 	bl	8007afc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e000      	b.n	800211a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002118:	bf00      	nop
    }
  }
}
 800211a:	3734      	adds	r7, #52	@ 0x34
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_SetAddress+0x1a>
 8002136:	2302      	movs	r3, #2
 8002138:	e012      	b.n	8002160 <HAL_PCD_SetAddress+0x40>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f003 f807 	bl	8005164 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	70fb      	strb	r3, [r7, #3]
 800217a:	460b      	mov	r3, r1
 800217c:	803b      	strh	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da0f      	bge.n	80021ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3310      	adds	r3, #16
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	705a      	strb	r2, [r3, #1]
 80021ac:	e00f      	b.n	80021ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80021da:	883b      	ldrh	r3, [r7, #0]
 80021dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	78ba      	ldrb	r2, [r7, #2]
 80021e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	785b      	ldrb	r3, [r3, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021fc:	78bb      	ldrb	r3, [r7, #2]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d102      	bne.n	8002208 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_PCD_EP_Open+0xae>
 8002212:	2302      	movs	r3, #2
 8002214:	e00e      	b.n	8002234 <HAL_PCD_EP_Open+0xcc>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	f002 f987 	bl	8004538 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002232:	7afb      	ldrb	r3, [r7, #11]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da0f      	bge.n	8002270 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3310      	adds	r3, #16
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	705a      	strb	r2, [r3, #1]
 800226e:	e00f      	b.n	8002290 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_EP_Close+0x6e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e00e      	b.n	80022c8 <HAL_PCD_EP_Close+0x8c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68f9      	ldr	r1, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 f9c5 	bl	8004648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	f003 020f 	and.w	r2, r3, #15
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2200      	movs	r2, #0
 8002310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	b2da      	uxtb	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	799b      	ldrb	r3, [r3, #6]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	799b      	ldrb	r3, [r3, #6]
 8002334:	461a      	mov	r2, r3
 8002336:	6979      	ldr	r1, [r7, #20]
 8002338:	f002 fa62 	bl	8004800 <USB_EPStartXfer>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002368:	681b      	ldr	r3, [r3, #0]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	460b      	mov	r3, r1
 8002384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002386:	7afb      	ldrb	r3, [r7, #11]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	3310      	adds	r3, #16
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2201      	movs	r2, #1
 80023b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	799b      	ldrb	r3, [r3, #6]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	799b      	ldrb	r3, [r3, #6]
 80023d8:	461a      	mov	r2, r3
 80023da:	6979      	ldr	r1, [r7, #20]
 80023dc:	f002 fa10 	bl	8004800 <USB_EPStartXfer>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7912      	ldrb	r2, [r2, #4]
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e04f      	b.n	80024a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da0f      	bge.n	8002430 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3310      	adds	r3, #16
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	705a      	strb	r2, [r3, #1]
 800242e:	e00d      	b.n	800244c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_PCD_EP_SetStall+0x82>
 8002468:	2302      	movs	r3, #2
 800246a:	e01d      	b.n	80024a8 <HAL_PCD_EP_SetStall+0xbe>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fd9e 	bl	8004fbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7999      	ldrb	r1, [r3, #6]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002498:	461a      	mov	r2, r3
 800249a:	f002 ff8f 	bl	80053bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	7912      	ldrb	r2, [r2, #4]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e042      	b.n	8002554 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da0f      	bge.n	80024f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 020f 	and.w	r2, r3, #15
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3310      	adds	r3, #16
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	705a      	strb	r2, [r3, #1]
 80024f4:	e00f      	b.n	8002516 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 020f 	and.w	r2, r3, #15
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	b2da      	uxtb	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_PCD_EP_ClrStall+0x86>
 8002532:	2302      	movs	r3, #2
 8002534:	e00e      	b.n	8002554 <HAL_PCD_EP_ClrStall+0xa4>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fda7 	bl	8005098 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256c:	2b00      	cmp	r3, #0
 800256e:	da0c      	bge.n	800258a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	3310      	adds	r3, #16
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e00c      	b.n	80025a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	3304      	adds	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fbc6 	bl	8004d3c <USB_EPStopXfer>
 80025b0:	4603      	mov	r3, r0
 80025b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025b4:	7afb      	ldrb	r3, [r7, #11]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08a      	sub	sp, #40	@ 0x28
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3310      	adds	r3, #16
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d901      	bls.n	80025f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	429a      	cmp	r2, r3
 800260a:	d902      	bls.n	8002612 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3303      	adds	r3, #3
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800261a:	e02a      	b.n	8002672 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	429a      	cmp	r2, r3
 8002630:	d902      	bls.n	8002638 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3303      	adds	r3, #3
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68d9      	ldr	r1, [r3, #12]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4603      	mov	r3, r0
 8002654:	6978      	ldr	r0, [r7, #20]
 8002656:	f002 fc1b 	bl	8004e90 <USB_WritePacket>

    ep->xfer_buff  += len;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	441a      	add	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	441a      	add	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	d809      	bhi.n	800269c <PCD_WriteEmptyTxFifo+0xde>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002690:	429a      	cmp	r2, r3
 8002692:	d203      	bcs.n	800269c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1bf      	bne.n	800261c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d811      	bhi.n	80026cc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	2201      	movs	r2, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	6939      	ldr	r1, [r7, #16]
 80026c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80026c8:	4013      	ands	r3, r2
 80026ca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	333c      	adds	r3, #60	@ 0x3c
 80026f0:	3304      	adds	r3, #4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	799b      	ldrb	r3, [r3, #6]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d17b      	bne.n	8002806 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4a61      	ldr	r2, [pc, #388]	@ (80028a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	f240 80b9 	bls.w	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80b3 	beq.w	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002740:	6093      	str	r3, [r2, #8]
 8002742:	e0a7      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275a:	461a      	mov	r2, r3
 800275c:	2320      	movs	r3, #32
 800275e:	6093      	str	r3, [r2, #8]
 8002760:	e098      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 8093 	bne.w	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4a4b      	ldr	r2, [pc, #300]	@ (80028a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d90f      	bls.n	8002796 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800278c:	461a      	mov	r2, r3
 800278e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002792:	6093      	str	r3, [r2, #8]
 8002794:	e07e      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	0159      	lsls	r1, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	1ad2      	subs	r2, r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027e0:	461a      	mov	r2, r3
 80027e2:	2101      	movs	r1, #1
 80027e4:	f002 fdea 	bl	80053bc <USB_EP0_OutStart>
 80027e8:	e006      	b.n	80027f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	441a      	add	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f005 f8aa 	bl	8007958 <HAL_PCD_DataOutStageCallback>
 8002804:	e046      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	4a26      	ldr	r2, [pc, #152]	@ (80028a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d124      	bne.n	8002858 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800282a:	6093      	str	r3, [r2, #8]
 800282c:	e032      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002844:	461a      	mov	r2, r3
 8002846:	2320      	movs	r3, #32
 8002848:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f005 f881 	bl	8007958 <HAL_PCD_DataOutStageCallback>
 8002856:	e01d      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d114      	bne.n	8002888 <PCD_EP_OutXfrComplete_int+0x1b0>
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002880:	461a      	mov	r2, r3
 8002882:	2100      	movs	r1, #0
 8002884:	f002 fd9a 	bl	80053bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f005 f862 	bl	8007958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	4f54300a 	.word	0x4f54300a
 80028a4:	4f54310a 	.word	0x4f54310a

080028a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	333c      	adds	r3, #60	@ 0x3c
 80028c0:	3304      	adds	r3, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a15      	ldr	r2, [pc, #84]	@ (8002930 <PCD_EP_OutSetupPacket_int+0x88>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d90e      	bls.n	80028fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f005 f819 	bl	8007934 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <PCD_EP_OutSetupPacket_int+0x88>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d90c      	bls.n	8002924 <PCD_EP_OutSetupPacket_int+0x7c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	799b      	ldrb	r3, [r3, #6]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d108      	bne.n	8002924 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800291c:	461a      	mov	r2, r3
 800291e:	2101      	movs	r1, #1
 8002920:	f002 fd4c 	bl	80053bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	4f54300a 	.word	0x4f54300a

08002934 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
 8002940:	4613      	mov	r3, r2
 8002942:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d107      	bne.n	8002962 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002952:	883b      	ldrh	r3, [r7, #0]
 8002954:	0419      	lsls	r1, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	430a      	orrs	r2, r1
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002960:	e028      	b.n	80029b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4413      	add	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e00d      	b.n	8002992 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	3340      	adds	r3, #64	@ 0x40
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	3301      	adds	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	3b01      	subs	r3, #1
 8002998:	429a      	cmp	r2, r3
 800299a:	d3ec      	bcc.n	8002976 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800299c:	883b      	ldrh	r3, [r7, #0]
 800299e:	0418      	lsls	r0, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	4302      	orrs	r2, r0
 80029ac:	3340      	adds	r3, #64	@ 0x40
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e267      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d075      	beq.n	8002b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a1a:	4b88      	ldr	r3, [pc, #544]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b85      	ldr	r3, [pc, #532]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d112      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a32:	4b82      	ldr	r3, [pc, #520]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	4b7e      	ldr	r3, [pc, #504]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d05b      	beq.n	8002b04 <HAL_RCC_OscConfig+0x108>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d157      	bne.n	8002b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e242      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a60:	d106      	bne.n	8002a70 <HAL_RCC_OscConfig+0x74>
 8002a62:	4b76      	ldr	r3, [pc, #472]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a75      	ldr	r2, [pc, #468]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xb0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x98>
 8002a7a:	4b70      	ldr	r3, [pc, #448]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6d      	ldr	r3, [pc, #436]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xb0>
 8002a94:	4b69      	ldr	r3, [pc, #420]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a68      	ldr	r2, [pc, #416]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b66      	ldr	r3, [pc, #408]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a65      	ldr	r2, [pc, #404]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fa56 	bl	8000f64 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fa52 	bl	8000f64 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e207      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5b      	ldr	r3, [pc, #364]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xc0>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fa42 	bl	8000f64 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fa3e 	bl	8000f64 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1f3      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b51      	ldr	r3, [pc, #324]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xe8>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b12:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b47      	ldr	r3, [pc, #284]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2a:	4b44      	ldr	r3, [pc, #272]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x152>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1c7      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4937      	ldr	r1, [pc, #220]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCC_OscConfig+0x244>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe f9f7 	bl	8000f64 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe f9f3 	bl	8000f64 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1a8      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4925      	ldr	r1, [pc, #148]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_RCC_OscConfig+0x244>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f9d6 	bl	8000f64 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe f9d2 	bl	8000f64 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e187      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d036      	beq.n	8002c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <HAL_RCC_OscConfig+0x248>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f9b6 	bl	8000f64 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe f9b2 	bl	8000f64 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e167      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x200>
 8002c1a:	e01b      	b.n	8002c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x248>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fe f99f 	bl	8000f64 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	e00e      	b.n	8002c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fe f99b 	bl	8000f64 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d907      	bls.n	8002c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e150      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	42470000 	.word	0x42470000
 8002c44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b88      	ldr	r3, [pc, #544]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ea      	bne.n	8002c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8097 	beq.w	8002d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b81      	ldr	r3, [pc, #516]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b7d      	ldr	r3, [pc, #500]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b7a      	ldr	r3, [pc, #488]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b77      	ldr	r3, [pc, #476]	@ (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b74      	ldr	r3, [pc, #464]	@ (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a73      	ldr	r2, [pc, #460]	@ (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe f95b 	bl	8000f64 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fe f957 	bl	8000f64 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e10c      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2ea>
 8002cd8:	4b64      	ldr	r3, [pc, #400]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a63      	ldr	r2, [pc, #396]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0x324>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x30c>
 8002cee:	4b5f      	ldr	r3, [pc, #380]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0x324>
 8002d08:	4b58      	ldr	r3, [pc, #352]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	4a57      	ldr	r2, [pc, #348]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d14:	4b55      	ldr	r3, [pc, #340]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a54      	ldr	r2, [pc, #336]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f023 0304 	bic.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f91c 	bl	8000f64 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f918 	bl	8000f64 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0cb      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	4b49      	ldr	r3, [pc, #292]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ee      	beq.n	8002d30 <HAL_RCC_OscConfig+0x334>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fe f906 	bl	8000f64 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe f902 	bl	8000f64 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0b5      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	4b3e      	ldr	r3, [pc, #248]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1ee      	bne.n	8002d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b39      	ldr	r3, [pc, #228]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	4a38      	ldr	r2, [pc, #224]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a1 	beq.w	8002edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d9a:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d05c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d141      	bne.n	8002e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <HAL_RCC_OscConfig+0x478>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f8d6 	bl	8000f64 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe f8d2 	bl	8000f64 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e087      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b27      	ldr	r3, [pc, #156]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	491b      	ldr	r1, [pc, #108]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x478>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f8ab 	bl	8000f64 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe f8a7 	bl	8000f64 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e05c      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x416>
 8002e30:	e054      	b.n	8002edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <HAL_RCC_OscConfig+0x478>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe f894 	bl	8000f64 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f890 	bl	8000f64 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e045      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x444>
 8002e5e:	e03d      	b.n	8002edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e038      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40007000 	.word	0x40007000
 8002e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x4ec>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d028      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d121      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800

08002eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0cc      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b68      	ldr	r3, [pc, #416]	@ (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d90c      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b63      	ldr	r3, [pc, #396]	@ (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0b8      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f40:	4b59      	ldr	r3, [pc, #356]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a58      	ldr	r2, [pc, #352]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f58:	4b53      	ldr	r3, [pc, #332]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b50      	ldr	r3, [pc, #320]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	494d      	ldr	r1, [pc, #308]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d044      	beq.n	800300c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b47      	ldr	r3, [pc, #284]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d119      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07f      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	4b3f      	ldr	r3, [pc, #252]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06f      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e067      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fca:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f023 0203 	bic.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4934      	ldr	r1, [pc, #208]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fdc:	f7fd ffc2 	bl	8000f64 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7fd ffbe 	bl	8000f64 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e04f      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 020c 	and.w	r2, r3, #12
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	429a      	cmp	r2, r3
 800300a:	d1eb      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800300c:	4b25      	ldr	r3, [pc, #148]	@ (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d20c      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e032      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003040:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4916      	ldr	r1, [pc, #88]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305e:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	490e      	ldr	r1, [pc, #56]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003072:	f000 f82d 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003076:	4602      	mov	r2, r0
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	490a      	ldr	r1, [pc, #40]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	5ccb      	ldrb	r3, [r1, r3]
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800308e:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ff22 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023c00 	.word	0x40023c00
 80030a8:	40023800 	.word	0x40023800
 80030ac:	08007f60 	.word	0x08007f60
 80030b0:	20000000 	.word	0x20000000
 80030b4:	20000004 	.word	0x20000004

080030b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_RCC_EnableCSS+0x14>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	4247004c 	.word	0x4247004c

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b090      	sub	sp, #64	@ 0x40
 80030d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e8:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d00d      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x40>
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	f200 80a1 	bhi.w	800323c <HAL_RCC_GetSysClockFreq+0x16c>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x34>
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d003      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x3a>
 8003102:	e09b      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b53      	ldr	r3, [pc, #332]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x184>)
 8003106:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003108:	e09b      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310a:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x188>)
 800310c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800310e:	e098      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003110:	4b4f      	ldr	r3, [pc, #316]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311a:	4b4d      	ldr	r3, [pc, #308]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d028      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b4a      	ldr	r3, [pc, #296]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	2200      	movs	r2, #0
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	627a      	str	r2, [r7, #36]	@ 0x24
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003138:	2100      	movs	r1, #0
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x188>)
 800313c:	fb03 f201 	mul.w	r2, r3, r1
 8003140:	2300      	movs	r3, #0
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	4413      	add	r3, r2
 8003148:	4a43      	ldr	r2, [pc, #268]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x188>)
 800314a:	fba0 1202 	umull	r1, r2, r0, r2
 800314e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003150:	460a      	mov	r2, r1
 8003152:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003156:	4413      	add	r3, r2
 8003158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	2200      	movs	r2, #0
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	61fa      	str	r2, [r7, #28]
 8003162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800316a:	f7fd f833 	bl	80001d4 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4613      	mov	r3, r2
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003176:	e053      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003178:	4b35      	ldr	r3, [pc, #212]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	2200      	movs	r2, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	617a      	str	r2, [r7, #20]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800318a:	f04f 0b00 	mov.w	fp, #0
 800318e:	4652      	mov	r2, sl
 8003190:	465b      	mov	r3, fp
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a0:	0150      	lsls	r0, r2, #5
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	ebb2 080a 	subs.w	r8, r2, sl
 80031aa:	eb63 090b 	sbc.w	r9, r3, fp
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031c2:	ebb2 0408 	subs.w	r4, r2, r8
 80031c6:	eb63 0509 	sbc.w	r5, r3, r9
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	00eb      	lsls	r3, r5, #3
 80031d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d8:	00e2      	lsls	r2, r4, #3
 80031da:	4614      	mov	r4, r2
 80031dc:	461d      	mov	r5, r3
 80031de:	eb14 030a 	adds.w	r3, r4, sl
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	eb45 030b 	adc.w	r3, r5, fp
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f6:	4629      	mov	r1, r5
 80031f8:	028b      	lsls	r3, r1, #10
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003200:	4621      	mov	r1, r4
 8003202:	028a      	lsls	r2, r1, #10
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320a:	2200      	movs	r2, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	60fa      	str	r2, [r7, #12]
 8003210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003214:	f7fc ffde 	bl	80001d4 <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4613      	mov	r3, r2
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	3301      	adds	r3, #1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003230:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x184>)
 800323e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003244:	4618      	mov	r0, r3
 8003246:	3740      	adds	r7, #64	@ 0x40
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	016e3600 	.word	0x016e3600

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_NMI_IRQHandler+0x20>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b80      	cmp	r3, #128	@ 0x80
 8003282:	d104      	bne.n	800328e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003284:	f000 f80a 	bl	800329c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003288:	4b03      	ldr	r3, [pc, #12]	@ (8003298 <HAL_RCC_NMI_IRQHandler+0x24>)
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	701a      	strb	r2, [r3, #0]
  }
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	4002380e 	.word	0x4002380e

0800329c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e07b      	b.n	80033b4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032cc:	d009      	beq.n	80032e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
 80032d4:	e005      	b.n	80032e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fd fd0b 	bl	8000d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003318:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003366:	ea42 0103 	orr.w	r1, r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	f003 0104 	and.w	r1, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	f003 0210 	and.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033cc:	f7fd fdca 	bl	8000f64 <HAL_GetTick>
 80033d0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	e12a      	b.n	800363c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_Transmit+0x36>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e122      	b.n	800363c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_SPI_Transmit+0x48>
 8003400:	2302      	movs	r3, #2
 8003402:	e11b      	b.n	800363c <HAL_SPI_Transmit+0x280>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2203      	movs	r2, #3
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003452:	d10f      	bne.n	8003474 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003462:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003472:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b40      	cmp	r3, #64	@ 0x40
 8003480:	d007      	beq.n	8003492 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349a:	d152      	bne.n	8003542 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_Transmit+0xee>
 80034a4:	8b7b      	ldrh	r3, [r7, #26]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d145      	bne.n	8003536 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	881a      	ldrh	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	1c9a      	adds	r2, r3, #2
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034ce:	e032      	b.n	8003536 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d112      	bne.n	8003504 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003502:	e018      	b.n	8003536 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003504:	f7fd fd2e 	bl	8000f64 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d803      	bhi.n	800351c <HAL_SPI_Transmit+0x160>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d102      	bne.n	8003522 <HAL_SPI_Transmit+0x166>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e082      	b.n	800363c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1c7      	bne.n	80034d0 <HAL_SPI_Transmit+0x114>
 8003540:	e053      	b.n	80035ea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_Transmit+0x194>
 800354a:	8b7b      	ldrh	r3, [r7, #26]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d147      	bne.n	80035e0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003576:	e033      	b.n	80035e0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d113      	bne.n	80035ae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035ac:	e018      	b.n	80035e0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fd fcd9 	bl	8000f64 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x20a>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x210>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e02d      	b.n	800363c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1c6      	bne.n	8003578 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fbd8 	bl	8003da4 <SPI_EndRxTxTransaction>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800363a:	2300      	movs	r3, #0
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	e104      	b.n	800386e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800366c:	d112      	bne.n	8003694 <HAL_SPI_Receive+0x50>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10e      	bne.n	8003694 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2204      	movs	r2, #4
 800367a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f8f3 	bl	8003876 <HAL_SPI_TransmitReceive>
 8003690:	4603      	mov	r3, r0
 8003692:	e0ec      	b.n	800386e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003694:	f7fd fc66 	bl	8000f64 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_Receive+0x62>
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0e1      	b.n	800386e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_SPI_Receive+0x74>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0da      	b.n	800386e <HAL_SPI_Receive+0x22a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2204      	movs	r2, #4
 80036c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003706:	d10f      	bne.n	8003728 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003716:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003726:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d007      	beq.n	8003746 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d170      	bne.n	8003830 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800374e:	e035      	b.n	80037bc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d115      	bne.n	800378a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f103 020c 	add.w	r2, r3, #12
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003788:	e018      	b.n	80037bc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800378a:	f7fd fbeb 	bl	8000f64 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d803      	bhi.n	80037a2 <HAL_SPI_Receive+0x15e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d102      	bne.n	80037a8 <HAL_SPI_Receive+0x164>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e058      	b.n	800386e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1c4      	bne.n	8003750 <HAL_SPI_Receive+0x10c>
 80037c6:	e038      	b.n	800383a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d113      	bne.n	80037fe <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e0:	b292      	uxth	r2, r2
 80037e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e8:	1c9a      	adds	r2, r3, #2
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037fc:	e018      	b.n	8003830 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fe:	f7fd fbb1 	bl	8000f64 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d803      	bhi.n	8003816 <HAL_SPI_Receive+0x1d2>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d102      	bne.n	800381c <HAL_SPI_Receive+0x1d8>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e01e      	b.n	800386e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1c6      	bne.n	80037c8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fa4a 	bl	8003cd8 <SPI_EndRxTransaction>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08a      	sub	sp, #40	@ 0x28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003888:	f7fd fb6c 	bl	8000f64 <HAL_GetTick>
 800388c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003894:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038a0:	7ffb      	ldrb	r3, [r7, #31]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d00c      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x4a>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ac:	d106      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x46>
 80038b6:	7ffb      	ldrb	r3, [r7, #31]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d001      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	e17f      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x5c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x5c>
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e174      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x6e>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e16d      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d003      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2205      	movs	r2, #5
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	887a      	ldrh	r2, [r7, #2]
 8003910:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	887a      	ldrh	r2, [r7, #2]
 8003916:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	887a      	ldrh	r2, [r7, #2]
 8003922:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d007      	beq.n	8003954 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395c:	d17e      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_TransmitReceive+0xf6>
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d16c      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003990:	e059      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d11b      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x162>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x162>
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d113      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d119      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x1a4>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d014      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	b292      	uxth	r2, r2
 80039fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a1a:	f7fd faa3 	bl	8000f64 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d80d      	bhi.n	8003a46 <HAL_SPI_TransmitReceive+0x1d0>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d009      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0bc      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1a0      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x11c>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d19b      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x11c>
 8003a5a:	e082      	b.n	8003b62 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x1f4>
 8003a64:	8afb      	ldrh	r3, [r7, #22]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d171      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a90:	e05d      	b.n	8003b4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11c      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x264>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <HAL_SPI_TransmitReceive+0x264>
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d114      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d119      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x2a6>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d014      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b1c:	f7fd fa22 	bl	8000f64 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d803      	bhi.n	8003b34 <HAL_SPI_TransmitReceive+0x2be>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x2c4>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e038      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d19c      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x21c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d197      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f91c 	bl	8003da4 <SPI_EndRxTxTransaction>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e01d      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3728      	adds	r7, #40	@ 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bd8:	f7fd f9c4 	bl	8000f64 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003be8:	f7fd f9bc 	bl	8000f64 <HAL_GetTick>
 8003bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bee:	4b39      	ldr	r3, [pc, #228]	@ (8003cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	015b      	lsls	r3, r3, #5
 8003bf4:	0d1b      	lsrs	r3, r3, #20
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfe:	e054      	b.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d050      	beq.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c08:	f7fd f9ac 	bl	8000f64 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d902      	bls.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d13d      	bne.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c36:	d111      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c40:	d004      	beq.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4a:	d107      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c64:	d10f      	bne.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e017      	b.n	8003cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d19b      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000000 	.word	0x20000000

08003cd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cec:	d111      	bne.n	8003d12 <SPI_EndRxTransaction+0x3a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cf6:	d004      	beq.n	8003d02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d00:	d107      	bne.n	8003d12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d1a:	d12a      	bne.n	8003d72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d24:	d012      	beq.n	8003d4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff ff49 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02d      	beq.n	8003d98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e026      	b.n	8003d9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	2101      	movs	r1, #1
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff ff36 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01a      	beq.n	8003d98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e013      	b.n	8003d9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff23 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e000      	b.n	8003d9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2201      	movs	r2, #1
 8003db8:	2102      	movs	r1, #2
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ff04 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e032      	b.n	8003e3c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <SPI_EndRxTxTransaction+0xa0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <SPI_EndRxTxTransaction+0xa4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	0d5b      	lsrs	r3, r3, #21
 8003de2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003df4:	d112      	bne.n	8003e1c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	@ 0x80
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fee1 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e00f      	b.n	8003e3c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b80      	cmp	r3, #128	@ 0x80
 8003e34:	d0f2      	beq.n	8003e1c <SPI_EndRxTxTransaction+0x78>
 8003e36:	e000      	b.n	8003e3a <SPI_EndRxTxTransaction+0x96>
        break;
 8003e38:	bf00      	nop
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000000 	.word	0x20000000
 8003e48:	165e9f81 	.word	0x165e9f81

08003e4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	f107 001c 	add.w	r0, r7, #28
 8003e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d123      	bne.n	8003eae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d105      	bne.n	8003ea2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f001 fae8 	bl	8005478 <USB_CoreReset>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e01b      	b.n	8003ee6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f001 fadc 	bl	8005478 <USB_CoreReset>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ec4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ed8:	e005      	b.n	8003ee6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ee6:	7fbb      	ldrb	r3, [r7, #30]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10b      	bne.n	8003f04 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f043 0206 	orr.w	r2, r3, #6
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f10:	b004      	add	sp, #16
 8003f12:	4770      	bx	lr

08003f14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d165      	bne.n	8003ff4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4a41      	ldr	r2, [pc, #260]	@ (8004030 <USB_SetTurnaroundTime+0x11c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d906      	bls.n	8003f3e <USB_SetTurnaroundTime+0x2a>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a40      	ldr	r2, [pc, #256]	@ (8004034 <USB_SetTurnaroundTime+0x120>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d202      	bcs.n	8003f3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f38:	230f      	movs	r3, #15
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e062      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4a3c      	ldr	r2, [pc, #240]	@ (8004034 <USB_SetTurnaroundTime+0x120>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d306      	bcc.n	8003f54 <USB_SetTurnaroundTime+0x40>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a3b      	ldr	r2, [pc, #236]	@ (8004038 <USB_SetTurnaroundTime+0x124>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d202      	bcs.n	8003f54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f4e:	230e      	movs	r3, #14
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e057      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4a38      	ldr	r2, [pc, #224]	@ (8004038 <USB_SetTurnaroundTime+0x124>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d306      	bcc.n	8003f6a <USB_SetTurnaroundTime+0x56>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a37      	ldr	r2, [pc, #220]	@ (800403c <USB_SetTurnaroundTime+0x128>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d202      	bcs.n	8003f6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f64:	230d      	movs	r3, #13
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e04c      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4a33      	ldr	r2, [pc, #204]	@ (800403c <USB_SetTurnaroundTime+0x128>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d306      	bcc.n	8003f80 <USB_SetTurnaroundTime+0x6c>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a32      	ldr	r2, [pc, #200]	@ (8004040 <USB_SetTurnaroundTime+0x12c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d802      	bhi.n	8003f80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e041      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4a2f      	ldr	r2, [pc, #188]	@ (8004040 <USB_SetTurnaroundTime+0x12c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d906      	bls.n	8003f96 <USB_SetTurnaroundTime+0x82>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8004044 <USB_SetTurnaroundTime+0x130>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d802      	bhi.n	8003f96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f90:	230b      	movs	r3, #11
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e036      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <USB_SetTurnaroundTime+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d906      	bls.n	8003fac <USB_SetTurnaroundTime+0x98>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <USB_SetTurnaroundTime+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d802      	bhi.n	8003fac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003fa6:	230a      	movs	r3, #10
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e02b      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4a26      	ldr	r2, [pc, #152]	@ (8004048 <USB_SetTurnaroundTime+0x134>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d906      	bls.n	8003fc2 <USB_SetTurnaroundTime+0xae>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a25      	ldr	r2, [pc, #148]	@ (800404c <USB_SetTurnaroundTime+0x138>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d202      	bcs.n	8003fc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fbc:	2309      	movs	r3, #9
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e020      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a21      	ldr	r2, [pc, #132]	@ (800404c <USB_SetTurnaroundTime+0x138>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d306      	bcc.n	8003fd8 <USB_SetTurnaroundTime+0xc4>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a20      	ldr	r2, [pc, #128]	@ (8004050 <USB_SetTurnaroundTime+0x13c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d802      	bhi.n	8003fd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e015      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a1d      	ldr	r2, [pc, #116]	@ (8004050 <USB_SetTurnaroundTime+0x13c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d906      	bls.n	8003fee <USB_SetTurnaroundTime+0xda>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8004054 <USB_SetTurnaroundTime+0x140>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d202      	bcs.n	8003fee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fe8:	2307      	movs	r3, #7
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e00a      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fee:	2306      	movs	r3, #6
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e007      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ffa:	2309      	movs	r3, #9
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e001      	b.n	8004004 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004000:	2309      	movs	r3, #9
 8004002:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	00d8acbf 	.word	0x00d8acbf
 8004034:	00e4e1c0 	.word	0x00e4e1c0
 8004038:	00f42400 	.word	0x00f42400
 800403c:	01067380 	.word	0x01067380
 8004040:	011a499f 	.word	0x011a499f
 8004044:	01312cff 	.word	0x01312cff
 8004048:	014ca43f 	.word	0x014ca43f
 800404c:	016e3600 	.word	0x016e3600
 8004050:	01a6ab1f 	.word	0x01a6ab1f
 8004054:	01e84800 	.word	0x01e84800

08004058 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d115      	bne.n	80040ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040ca:	200a      	movs	r0, #10
 80040cc:	f7fc ff56 	bl	8000f7c <HAL_Delay>
      ms += 10U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	330a      	adds	r3, #10
 80040d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f001 f93f 	bl	800535a <USB_GetMode>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d01e      	beq.n	8004120 <USB_SetCurrentMode+0x84>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80040e6:	d9f0      	bls.n	80040ca <USB_SetCurrentMode+0x2e>
 80040e8:	e01a      	b.n	8004120 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d115      	bne.n	800411c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040fc:	200a      	movs	r0, #10
 80040fe:	f7fc ff3d 	bl	8000f7c <HAL_Delay>
      ms += 10U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	330a      	adds	r3, #10
 8004106:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f001 f926 	bl	800535a <USB_GetMode>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <USB_SetCurrentMode+0x84>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2bc7      	cmp	r3, #199	@ 0xc7
 8004118:	d9f0      	bls.n	80040fc <USB_SetCurrentMode+0x60>
 800411a:	e001      	b.n	8004120 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e005      	b.n	800412c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2bc8      	cmp	r3, #200	@ 0xc8
 8004124:	d101      	bne.n	800412a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004134:	b084      	sub	sp, #16
 8004136:	b580      	push	{r7, lr}
 8004138:	b086      	sub	sp, #24
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	e009      	b.n	8004168 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3340      	adds	r3, #64	@ 0x40
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	2200      	movs	r2, #0
 8004160:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	3301      	adds	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b0e      	cmp	r3, #14
 800416c:	d9f2      	bls.n	8004154 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800416e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11c      	bne.n	80041b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80041ae:	e00b      	b.n	80041c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041ce:	461a      	mov	r2, r3
 80041d0:	2300      	movs	r3, #0
 80041d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10d      	bne.n	80041f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041e4:	2100      	movs	r1, #0
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f968 	bl	80044bc <USB_SetDevSpeed>
 80041ec:	e008      	b.n	8004200 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041ee:	2101      	movs	r1, #1
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f963 	bl	80044bc <USB_SetDevSpeed>
 80041f6:	e003      	b.n	8004200 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041f8:	2103      	movs	r1, #3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f95e 	bl	80044bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004200:	2110      	movs	r1, #16
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8fa 	bl	80043fc <USB_FlushTxFifo>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f924 	bl	8004460 <USB_FlushRxFifo>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004228:	461a      	mov	r2, r3
 800422a:	2300      	movs	r3, #0
 800422c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004240:	461a      	mov	r2, r3
 8004242:	2300      	movs	r3, #0
 8004244:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e043      	b.n	80042d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800425e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004262:	d118      	bne.n	8004296 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004276:	461a      	mov	r2, r3
 8004278:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e013      	b.n	80042a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800428c:	461a      	mov	r2, r3
 800428e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e008      	b.n	80042a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a2:	461a      	mov	r2, r3
 80042a4:	2300      	movs	r3, #0
 80042a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c6:	461a      	mov	r2, r3
 80042c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3301      	adds	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042d8:	461a      	mov	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4293      	cmp	r3, r2
 80042de:	d3b5      	bcc.n	800424c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	e043      	b.n	800436e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042fc:	d118      	bne.n	8004330 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e013      	b.n	8004342 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e008      	b.n	8004342 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004360:	461a      	mov	r2, r3
 8004362:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3301      	adds	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004372:	461a      	mov	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4293      	cmp	r3, r2
 8004378:	d3b5      	bcc.n	80042e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800438c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800439a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800439c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d105      	bne.n	80043b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <USB_DevInit+0x2c4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f043 0208 	orr.w	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d107      	bne.n	80043e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f4:	b004      	add	sp, #16
 80043f6:	4770      	bx	lr
 80043f8:	803c3800 	.word	0x803c3800

080043fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004416:	d901      	bls.n	800441c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e01b      	b.n	8004454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	daf2      	bge.n	800440a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	019b      	lsls	r3, r3, #6
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004440:	d901      	bls.n	8004446 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e006      	b.n	8004454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d0f0      	beq.n	8004434 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004478:	d901      	bls.n	800447e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e018      	b.n	80044b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	daf2      	bge.n	800446c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2210      	movs	r2, #16
 800448e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800449c:	d901      	bls.n	80044a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e006      	b.n	80044b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d0f0      	beq.n	8004490 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0306 	and.w	r3, r3, #6
 8004506:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
 8004512:	e00a      	b.n	800452a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d002      	beq.n	8004520 <USB_GetDevSpeed+0x32>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d102      	bne.n	8004526 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004520:	2302      	movs	r3, #2
 8004522:	75fb      	strb	r3, [r7, #23]
 8004524:	e001      	b.n	800452a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004526:	230f      	movs	r3, #15
 8004528:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d13a      	bne.n	80045ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	2101      	movs	r1, #1
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	b29b      	uxth	r3, r3
 800456c:	68f9      	ldr	r1, [r7, #12]
 800456e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004572:	4313      	orrs	r3, r2
 8004574:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d155      	bne.n	8004638 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	791b      	ldrb	r3, [r3, #4]
 80045a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	059b      	lsls	r3, r3, #22
 80045ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e036      	b.n	8004638 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11a      	bne.n	8004638 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800461e:	430b      	orrs	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	440a      	add	r2, r1
 800462a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004636:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d161      	bne.n	8004728 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467a:	d11f      	bne.n	80046bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800469a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	2101      	movs	r1, #1
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046dc:	4013      	ands	r3, r2
 80046de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	2101      	movs	r1, #1
 80046f2:	fa01 f303 	lsl.w	r3, r1, r3
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	68f9      	ldr	r1, [r7, #12]
 80046fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004700:	4013      	ands	r3, r2
 8004702:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	0159      	lsls	r1, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	440b      	add	r3, r1
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	4619      	mov	r1, r3
 8004720:	4b35      	ldr	r3, [pc, #212]	@ (80047f8 <USB_DeactivateEndpoint+0x1b0>)
 8004722:	4013      	ands	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
 8004726:	e060      	b.n	80047ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800473a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800473e:	d11f      	bne.n	8004780 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800475a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800475e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800477a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800477e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2101      	movs	r1, #1
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	43db      	mvns	r3, r3
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047a0:	4013      	ands	r3, r2
 80047a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	2101      	movs	r1, #1
 80047b6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	43db      	mvns	r3, r3
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047c4:	4013      	ands	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	0159      	lsls	r1, r3, #5
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	440b      	add	r3, r1
 80047de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e2:	4619      	mov	r1, r3
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <USB_DeactivateEndpoint+0x1b4>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	ec337800 	.word	0xec337800
 80047fc:	eff37800 	.word	0xeff37800

08004800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 817f 	bne.w	8004b20 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d132      	bne.n	8004890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004844:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004848:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800484c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004868:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800486c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	0151      	lsls	r1, r2, #5
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	440a      	add	r2, r1
 8004884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004888:	0cdb      	lsrs	r3, r3, #19
 800488a:	04db      	lsls	r3, r3, #19
 800488c:	6113      	str	r3, [r2, #16]
 800488e:	e097      	b.n	80049c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048aa:	0cdb      	lsrs	r3, r3, #19
 80048ac:	04db      	lsls	r3, r3, #19
 80048ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11a      	bne.n	8004910 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d903      	bls.n	80048ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004908:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800490c:	6113      	str	r3, [r2, #16]
 800490e:	e044      	b.n	800499a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4413      	add	r3, r2
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	04d9      	lsls	r1, r3, #19
 8004938:	4ba4      	ldr	r3, [pc, #656]	@ (8004bcc <USB_EPStartXfer+0x3cc>)
 800493a:	400b      	ands	r3, r1
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	0148      	lsls	r0, r1, #5
 8004940:	69f9      	ldr	r1, [r7, #28]
 8004942:	4401      	add	r1, r0
 8004944:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	791b      	ldrb	r3, [r3, #4]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d122      	bne.n	800499a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800496e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004972:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	075b      	lsls	r3, r3, #29
 8004986:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800498a:	69b9      	ldr	r1, [r7, #24]
 800498c:	0148      	lsls	r0, r1, #5
 800498e:	69f9      	ldr	r1, [r7, #28]
 8004990:	4401      	add	r1, r0
 8004992:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	0148      	lsls	r0, r1, #5
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	4401      	add	r1, r0
 80049b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d14b      	bne.n	8004a5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	791b      	ldrb	r3, [r3, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d128      	bne.n	8004a3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00f      	b.n	8004a3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e166      	b.n	8004d2c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d015      	beq.n	8004ab2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 814e 	beq.w	8004d2c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	69f9      	ldr	r1, [r7, #28]
 8004aa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aac:	4313      	orrs	r3, r2
 8004aae:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ab0:	e13c      	b.n	8004d2c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d110      	bne.n	8004ae4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004adc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00f      	b.n	8004b04 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	68d9      	ldr	r1, [r3, #12]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	b298      	uxth	r0, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4603      	mov	r3, r0
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f9b9 	bl	8004e90 <USB_WritePacket>
 8004b1e:	e105      	b.n	8004d2c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b3a:	0cdb      	lsrs	r3, r3, #19
 8004b3c:	04db      	lsls	r3, r3, #19
 8004b3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b62:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d132      	bne.n	8004bd0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	0148      	lsls	r0, r1, #5
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	4401      	add	r1, r0
 8004ba0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bc6:	6113      	str	r3, [r2, #16]
 8004bc8:	e062      	b.n	8004c90 <USB_EPStartXfer+0x490>
 8004bca:	bf00      	nop
 8004bcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d123      	bne.n	8004c20 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bee:	69b9      	ldr	r1, [r7, #24]
 8004bf0:	0148      	lsls	r0, r1, #5
 8004bf2:	69f9      	ldr	r1, [r7, #28]
 8004bf4:	4401      	add	r1, r0
 8004bf6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c1c:	6113      	str	r3, [r2, #16]
 8004c1e:	e037      	b.n	8004c90 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4413      	add	r3, r2
 8004c2a:	1e5a      	subs	r2, r3, #1
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	8afa      	ldrh	r2, [r7, #22]
 8004c3c:	fb03 f202 	mul.w	r2, r3, r2
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	04d9      	lsls	r1, r3, #19
 8004c56:	4b38      	ldr	r3, [pc, #224]	@ (8004d38 <USB_EPStartXfer+0x538>)
 8004c58:	400b      	ands	r3, r1
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	0148      	lsls	r0, r1, #5
 8004c5e:	69f9      	ldr	r1, [r7, #28]
 8004c60:	4401      	add	r1, r0
 8004c62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c66:	4313      	orrs	r3, r2
 8004c68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	0148      	lsls	r0, r1, #5
 8004c84:	69f9      	ldr	r1, [r7, #28]
 8004c86:	4401      	add	r1, r0
 8004c88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10d      	bne.n	8004cb2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cae:	460a      	mov	r2, r1
 8004cb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	791b      	ldrb	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d128      	bne.n	8004d0c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d110      	bne.n	8004cec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00f      	b.n	8004d0c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	1ff80000 	.word	0x1ff80000

08004d3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d14a      	bne.n	8004df0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d72:	f040 8086 	bne.w	8004e82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	7812      	ldrb	r2, [r2, #0]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d902      	bls.n	8004dd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004dd2:	e056      	b.n	8004e82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dec:	d0e7      	beq.n	8004dbe <USB_EPStopXfer+0x82>
 8004dee:	e048      	b.n	8004e82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e08:	d13b      	bne.n	8004e82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d902      	bls.n	8004e68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
          break;
 8004e66:	e00c      	b.n	8004e82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e80:	d0e7      	beq.n	8004e52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	@ 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	71fb      	strb	r3, [r7, #7]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004eae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d123      	bne.n	8004efe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004eb6:	88bb      	ldrh	r3, [r7, #4]
 8004eb8:	3303      	adds	r3, #3
 8004eba:	089b      	lsrs	r3, r3, #2
 8004ebc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e018      	b.n	8004ef6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	031a      	lsls	r2, r3, #12
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d3e2      	bcc.n	8004ec4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3724      	adds	r7, #36	@ 0x24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b08b      	sub	sp, #44	@ 0x2c
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	e014      	b.n	8004f62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	3301      	adds	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	3301      	adds	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	3301      	adds	r3, #1
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	6a3a      	ldr	r2, [r7, #32]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3e6      	bcc.n	8004f38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f6a:	8bfb      	ldrh	r3, [r7, #30]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01e      	beq.n	8004fae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	701a      	strb	r2, [r3, #0]
      i++;
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004fa2:	8bfb      	ldrh	r3, [r7, #30]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fa8:	8bfb      	ldrh	r3, [r7, #30]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ea      	bne.n	8004f84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	372c      	adds	r7, #44	@ 0x2c
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d12c      	bne.n	8005032 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db12      	blt.n	8005010 <USB_EPSetStall+0x54>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00f      	beq.n	8005010 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800500a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800500e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800502a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	e02b      	b.n	800508a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db12      	blt.n	800506a <USB_EPSetStall+0xae>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00f      	beq.n	800506a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005064:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005068:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005084:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005088:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d128      	bne.n	8005106 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	791b      	ldrb	r3, [r3, #4]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d003      	beq.n	80050e4 <USB_EPClearStall+0x4c>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	791b      	ldrb	r3, [r3, #4]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d138      	bne.n	8005156 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e027      	b.n	8005156 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005120:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005124:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	791b      	ldrb	r3, [r3, #4]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d003      	beq.n	8005136 <USB_EPClearStall+0x9e>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	791b      	ldrb	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d10f      	bne.n	8005156 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005154:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005182:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005186:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005198:	68f9      	ldr	r1, [r7, #12]
 800519a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051de:	f023 0302 	bic.w	r3, r3, #2
 80051e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800520c:	f023 0303 	bic.w	r3, r3, #3
 8005210:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005220:	f043 0302 	orr.w	r3, r3, #2
 8005224:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0c1b      	lsrs	r3, r3, #16
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	b29b      	uxth	r3, r3
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052f0:	68bb      	ldr	r3, [r7, #8]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052fe:	b480      	push	{r7}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	fa22 f303 	lsr.w	r3, r2, r3
 800532e:	01db      	lsls	r3, r3, #7
 8005330:	b2db      	uxtb	r3, r3
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4013      	ands	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800534c:	68bb      	ldr	r3, [r7, #8]
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0301 	and.w	r3, r3, #1
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005390:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005394:	f023 0307 	bic.w	r3, r3, #7
 8005398:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	460b      	mov	r3, r1
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	333c      	adds	r3, #60	@ 0x3c
 80053d2:	3304      	adds	r3, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4a26      	ldr	r2, [pc, #152]	@ (8005474 <USB_EP0_OutStart+0xb8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d90a      	bls.n	80053f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053f0:	d101      	bne.n	80053f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e037      	b.n	8005466 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005410:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005424:	f043 0318 	orr.w	r3, r3, #24
 8005428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005438:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800543c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800543e:	7afb      	ldrb	r3, [r7, #11]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10f      	bne.n	8005464 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800545e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	4f54300a 	.word	0x4f54300a

08005478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005490:	d901      	bls.n	8005496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e01b      	b.n	80054ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	daf2      	bge.n	8005484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f043 0201 	orr.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054ba:	d901      	bls.n	80054c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e006      	b.n	80054ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d0f0      	beq.n	80054ae <USB_CoreReset+0x36>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80054ec:	f002 fc9e 	bl	8007e2c <USBD_static_malloc>
 80054f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	32b0      	adds	r2, #176	@ 0xb0
 8005502:	2100      	movs	r1, #0
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005508:	2302      	movs	r3, #2
 800550a:	e0d4      	b.n	80056b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800550c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005510:	2100      	movs	r1, #0
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f002 fcce 	bl	8007eb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32b0      	adds	r2, #176	@ 0xb0
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	32b0      	adds	r2, #176	@ 0xb0
 8005532:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	7c1b      	ldrb	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d138      	bne.n	80055b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005544:	4b5e      	ldr	r3, [pc, #376]	@ (80056c0 <USBD_CDC_Init+0x1e4>)
 8005546:	7819      	ldrb	r1, [r3, #0]
 8005548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800554c:	2202      	movs	r2, #2
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f002 fb49 	bl	8007be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005554:	4b5a      	ldr	r3, [pc, #360]	@ (80056c0 <USBD_CDC_Init+0x1e4>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f003 020f 	and.w	r2, r3, #15
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3324      	adds	r3, #36	@ 0x24
 800556a:	2201      	movs	r2, #1
 800556c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800556e:	4b55      	ldr	r3, [pc, #340]	@ (80056c4 <USBD_CDC_Init+0x1e8>)
 8005570:	7819      	ldrb	r1, [r3, #0]
 8005572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005576:	2202      	movs	r2, #2
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f002 fb34 	bl	8007be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800557e:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <USBD_CDC_Init+0x1e8>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f003 020f 	and.w	r2, r3, #15
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005596:	2201      	movs	r2, #1
 8005598:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800559a:	4b4b      	ldr	r3, [pc, #300]	@ (80056c8 <USBD_CDC_Init+0x1ec>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f003 020f 	and.w	r2, r3, #15
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3326      	adds	r3, #38	@ 0x26
 80055b0:	2210      	movs	r2, #16
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e035      	b.n	8005622 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055b6:	4b42      	ldr	r3, [pc, #264]	@ (80056c0 <USBD_CDC_Init+0x1e4>)
 80055b8:	7819      	ldrb	r1, [r3, #0]
 80055ba:	2340      	movs	r3, #64	@ 0x40
 80055bc:	2202      	movs	r2, #2
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f002 fb11 	bl	8007be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055c4:	4b3e      	ldr	r3, [pc, #248]	@ (80056c0 <USBD_CDC_Init+0x1e4>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	3324      	adds	r3, #36	@ 0x24
 80055da:	2201      	movs	r2, #1
 80055dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055de:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <USBD_CDC_Init+0x1e8>)
 80055e0:	7819      	ldrb	r1, [r3, #0]
 80055e2:	2340      	movs	r3, #64	@ 0x40
 80055e4:	2202      	movs	r2, #2
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f002 fafd 	bl	8007be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055ec:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <USBD_CDC_Init+0x1e8>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005604:	2201      	movs	r2, #1
 8005606:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005608:	4b2f      	ldr	r3, [pc, #188]	@ (80056c8 <USBD_CDC_Init+0x1ec>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 020f 	and.w	r2, r3, #15
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	3326      	adds	r3, #38	@ 0x26
 800561e:	2210      	movs	r2, #16
 8005620:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005622:	4b29      	ldr	r3, [pc, #164]	@ (80056c8 <USBD_CDC_Init+0x1ec>)
 8005624:	7819      	ldrb	r1, [r3, #0]
 8005626:	2308      	movs	r3, #8
 8005628:	2203      	movs	r2, #3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f002 fadb 	bl	8007be6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005630:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <USBD_CDC_Init+0x1ec>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	440b      	add	r3, r1
 8005644:	3324      	adds	r3, #36	@ 0x24
 8005646:	2201      	movs	r2, #1
 8005648:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	33b0      	adds	r3, #176	@ 0xb0
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005680:	2302      	movs	r3, #2
 8005682:	e018      	b.n	80056b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7c1b      	ldrb	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800568c:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <USBD_CDC_Init+0x1e8>)
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f002 fb92 	bl	8007dc4 <USBD_LL_PrepareReceive>
 80056a0:	e008      	b.n	80056b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <USBD_CDC_Init+0x1e8>)
 80056a4:	7819      	ldrb	r1, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80056ac:	2340      	movs	r3, #64	@ 0x40
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f002 fb88 	bl	8007dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000093 	.word	0x20000093
 80056c4:	20000094 	.word	0x20000094
 80056c8:	20000095 	.word	0x20000095

080056cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056d8:	4b3a      	ldr	r3, [pc, #232]	@ (80057c4 <USBD_CDC_DeInit+0xf8>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f002 faa7 	bl	8007c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056e4:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <USBD_CDC_DeInit+0xf8>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	3324      	adds	r3, #36	@ 0x24
 80056fa:	2200      	movs	r2, #0
 80056fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056fe:	4b32      	ldr	r3, [pc, #200]	@ (80057c8 <USBD_CDC_DeInit+0xfc>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f002 fa94 	bl	8007c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800570a:	4b2f      	ldr	r3, [pc, #188]	@ (80057c8 <USBD_CDC_DeInit+0xfc>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f003 020f 	and.w	r2, r3, #15
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005722:	2200      	movs	r2, #0
 8005724:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005726:	4b29      	ldr	r3, [pc, #164]	@ (80057cc <USBD_CDC_DeInit+0x100>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f002 fa80 	bl	8007c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005732:	4b26      	ldr	r3, [pc, #152]	@ (80057cc <USBD_CDC_DeInit+0x100>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3324      	adds	r3, #36	@ 0x24
 8005748:	2200      	movs	r2, #0
 800574a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800574c:	4b1f      	ldr	r3, [pc, #124]	@ (80057cc <USBD_CDC_DeInit+0x100>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	f003 020f 	and.w	r2, r3, #15
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	3326      	adds	r3, #38	@ 0x26
 8005762:	2200      	movs	r2, #0
 8005764:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	32b0      	adds	r2, #176	@ 0xb0
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01f      	beq.n	80057b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	33b0      	adds	r3, #176	@ 0xb0
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	32b0      	adds	r2, #176	@ 0xb0
 8005796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579a:	4618      	mov	r0, r3
 800579c:	f002 fb54 	bl	8007e48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32b0      	adds	r2, #176	@ 0xb0
 80057aa:	2100      	movs	r1, #0
 80057ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000093 	.word	0x20000093
 80057c8:	20000094 	.word	0x20000094
 80057cc:	20000095 	.word	0x20000095

080057d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	32b0      	adds	r2, #176	@ 0xb0
 80057e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0bf      	b.n	8005980 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005808:	2b00      	cmp	r3, #0
 800580a:	d050      	beq.n	80058ae <USBD_CDC_Setup+0xde>
 800580c:	2b20      	cmp	r3, #32
 800580e:	f040 80af 	bne.w	8005970 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	88db      	ldrh	r3, [r3, #6]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d03a      	beq.n	8005890 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b25b      	sxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	da1b      	bge.n	800585c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	33b0      	adds	r3, #176	@ 0xb0
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800583a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	88d2      	ldrh	r2, [r2, #6]
 8005840:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	88db      	ldrh	r3, [r3, #6]
 8005846:	2b07      	cmp	r3, #7
 8005848:	bf28      	it	cs
 800584a:	2307      	movcs	r3, #7
 800584c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	89fa      	ldrh	r2, [r7, #14]
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fd93 	bl	8007380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800585a:	e090      	b.n	800597e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	785a      	ldrb	r2, [r3, #1]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	88db      	ldrh	r3, [r3, #6]
 800586a:	2b3f      	cmp	r3, #63	@ 0x3f
 800586c:	d803      	bhi.n	8005876 <USBD_CDC_Setup+0xa6>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	88db      	ldrh	r3, [r3, #6]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	e000      	b.n	8005878 <USBD_CDC_Setup+0xa8>
 8005876:	2240      	movs	r2, #64	@ 0x40
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800587e:	6939      	ldr	r1, [r7, #16]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005886:	461a      	mov	r2, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 fda5 	bl	80073d8 <USBD_CtlPrepareRx>
      break;
 800588e:	e076      	b.n	800597e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	33b0      	adds	r3, #176	@ 0xb0
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	7850      	ldrb	r0, [r2, #1]
 80058a6:	2200      	movs	r2, #0
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	4798      	blx	r3
      break;
 80058ac:	e067      	b.n	800597e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	2b0b      	cmp	r3, #11
 80058b4:	d851      	bhi.n	800595a <USBD_CDC_Setup+0x18a>
 80058b6:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <USBD_CDC_Setup+0xec>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	08005969 	.word	0x08005969
 80058c4:	0800595b 	.word	0x0800595b
 80058c8:	0800595b 	.word	0x0800595b
 80058cc:	0800595b 	.word	0x0800595b
 80058d0:	0800595b 	.word	0x0800595b
 80058d4:	0800595b 	.word	0x0800595b
 80058d8:	0800595b 	.word	0x0800595b
 80058dc:	0800595b 	.word	0x0800595b
 80058e0:	0800595b 	.word	0x0800595b
 80058e4:	08005917 	.word	0x08005917
 80058e8:	08005941 	.word	0x08005941
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d107      	bne.n	8005908 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058f8:	f107 030a 	add.w	r3, r7, #10
 80058fc:	2202      	movs	r2, #2
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fd3d 	bl	8007380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005906:	e032      	b.n	800596e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 fcbb 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 8005910:	2303      	movs	r3, #3
 8005912:	75fb      	strb	r3, [r7, #23]
          break;
 8005914:	e02b      	b.n	800596e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b03      	cmp	r3, #3
 8005920:	d107      	bne.n	8005932 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005922:	f107 030d 	add.w	r3, r7, #13
 8005926:	2201      	movs	r2, #1
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 fd28 	bl	8007380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005930:	e01d      	b.n	800596e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 fca6 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 800593a:	2303      	movs	r3, #3
 800593c:	75fb      	strb	r3, [r7, #23]
          break;
 800593e:	e016      	b.n	800596e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b03      	cmp	r3, #3
 800594a:	d00f      	beq.n	800596c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fc99 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 8005954:	2303      	movs	r3, #3
 8005956:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005958:	e008      	b.n	800596c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 fc92 	bl	8007286 <USBD_CtlError>
          ret = USBD_FAIL;
 8005962:	2303      	movs	r3, #3
 8005964:	75fb      	strb	r3, [r7, #23]
          break;
 8005966:	e002      	b.n	800596e <USBD_CDC_Setup+0x19e>
          break;
 8005968:	bf00      	nop
 800596a:	e008      	b.n	800597e <USBD_CDC_Setup+0x1ae>
          break;
 800596c:	bf00      	nop
      }
      break;
 800596e:	e006      	b.n	800597e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fc87 	bl	8007286 <USBD_CtlError>
      ret = USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	75fb      	strb	r3, [r7, #23]
      break;
 800597c:	bf00      	nop
  }

  return (uint8_t)ret;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800599a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	32b0      	adds	r2, #176	@ 0xb0
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e065      	b.n	8005a7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	32b0      	adds	r2, #176	@ 0xb0
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3318      	adds	r3, #24
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02f      	beq.n	8005a3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	f003 020f 	and.w	r2, r3, #15
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3318      	adds	r3, #24
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	f003 010f 	and.w	r1, r3, #15
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	460b      	mov	r3, r1
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4403      	add	r3, r0
 8005a04:	331c      	adds	r3, #28
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d112      	bne.n	8005a3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3318      	adds	r3, #24
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a2e:	78f9      	ldrb	r1, [r7, #3]
 8005a30:	2300      	movs	r3, #0
 8005a32:	2200      	movs	r2, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f002 f9a4 	bl	8007d82 <USBD_LL_Transmit>
 8005a3a:	e01f      	b.n	8005a7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	33b0      	adds	r3, #176	@ 0xb0
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	33b0      	adds	r3, #176	@ 0xb0
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	32b0      	adds	r2, #176	@ 0xb0
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	32b0      	adds	r2, #176	@ 0xb0
 8005aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e01a      	b.n	8005aee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f002 f9a2 	bl	8007e06 <USBD_LL_GetRxDataSize>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	33b0      	adds	r3, #176	@ 0xb0
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	32b0      	adds	r2, #176	@ 0xb0
 8005b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e024      	b.n	8005b62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	33b0      	adds	r3, #176	@ 0xb0
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d019      	beq.n	8005b60 <USBD_CDC_EP0_RxReady+0x6a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005b32:	2bff      	cmp	r3, #255	@ 0xff
 8005b34:	d014      	beq.n	8005b60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	33b0      	adds	r3, #176	@ 0xb0
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	22ff      	movs	r2, #255	@ 0xff
 8005b5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b74:	2182      	movs	r1, #130	@ 0x82
 8005b76:	4818      	ldr	r0, [pc, #96]	@ (8005bd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b78:	f000 fd4f 	bl	800661a <USBD_GetEpDesc>
 8005b7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4815      	ldr	r0, [pc, #84]	@ (8005bd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b82:	f000 fd4a 	bl	800661a <USBD_GetEpDesc>
 8005b86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b88:	2181      	movs	r1, #129	@ 0x81
 8005b8a:	4813      	ldr	r0, [pc, #76]	@ (8005bd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b8c:	f000 fd45 	bl	800661a <USBD_GetEpDesc>
 8005b90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2210      	movs	r2, #16
 8005b9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d006      	beq.n	8005bb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bac:	711a      	strb	r2, [r3, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc0:	711a      	strb	r2, [r3, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2243      	movs	r2, #67	@ 0x43
 8005bca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bcc:	4b02      	ldr	r3, [pc, #8]	@ (8005bd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000050 	.word	0x20000050

08005bdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005be4:	2182      	movs	r1, #130	@ 0x82
 8005be6:	4818      	ldr	r0, [pc, #96]	@ (8005c48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005be8:	f000 fd17 	bl	800661a <USBD_GetEpDesc>
 8005bec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4815      	ldr	r0, [pc, #84]	@ (8005c48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bf2:	f000 fd12 	bl	800661a <USBD_GetEpDesc>
 8005bf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bf8:	2181      	movs	r1, #129	@ 0x81
 8005bfa:	4813      	ldr	r0, [pc, #76]	@ (8005c48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bfc:	f000 fd0d 	bl	800661a <USBD_GetEpDesc>
 8005c00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2200      	movs	r2, #0
 8005c18:	711a      	strb	r2, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f042 0202 	orr.w	r2, r2, #2
 8005c20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	711a      	strb	r2, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f042 0202 	orr.w	r2, r2, #2
 8005c34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2243      	movs	r2, #67	@ 0x43
 8005c3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c3c:	4b02      	ldr	r3, [pc, #8]	@ (8005c48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000050 	.word	0x20000050

08005c4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c54:	2182      	movs	r1, #130	@ 0x82
 8005c56:	4818      	ldr	r0, [pc, #96]	@ (8005cb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c58:	f000 fcdf 	bl	800661a <USBD_GetEpDesc>
 8005c5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4815      	ldr	r0, [pc, #84]	@ (8005cb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c62:	f000 fcda 	bl	800661a <USBD_GetEpDesc>
 8005c66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c68:	2181      	movs	r1, #129	@ 0x81
 8005c6a:	4813      	ldr	r0, [pc, #76]	@ (8005cb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c6c:	f000 fcd5 	bl	800661a <USBD_GetEpDesc>
 8005c70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d006      	beq.n	8005c92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8c:	711a      	strb	r2, [r3, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d006      	beq.n	8005ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ca0:	711a      	strb	r2, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2243      	movs	r2, #67	@ 0x43
 8005caa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cac:	4b02      	ldr	r3, [pc, #8]	@ (8005cb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000050 	.word	0x20000050

08005cbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cca:	4b03      	ldr	r3, [pc, #12]	@ (8005cd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	2000000c 	.word	0x2000000c

08005cdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e009      	b.n	8005d04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	33b0      	adds	r3, #176	@ 0xb0
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	32b0      	adds	r2, #176	@ 0xb0
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e008      	b.n	8005d48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	32b0      	adds	r2, #176	@ 0xb0
 8005d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e004      	b.n	8005d82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	32b0      	adds	r2, #176	@ 0xb0
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e025      	b.n	8005e02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d11f      	bne.n	8005e00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005dc8:	4b10      	ldr	r3, [pc, #64]	@ (8005e0c <USBD_CDC_TransmitPacket+0x7c>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4403      	add	r3, r0
 8005de2:	3318      	adds	r3, #24
 8005de4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005de6:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <USBD_CDC_TransmitPacket+0x7c>)
 8005de8:	7819      	ldrb	r1, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 ffc3 	bl	8007d82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000093 	.word	0x20000093

08005e10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	32b0      	adds	r2, #176	@ 0xb0
 8005e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32b0      	adds	r2, #176	@ 0xb0
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e018      	b.n	8005e70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7c1b      	ldrb	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e46:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <USBD_CDC_ReceivePacket+0x68>)
 8005e48:	7819      	ldrb	r1, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 ffb5 	bl	8007dc4 <USBD_LL_PrepareReceive>
 8005e5a:	e008      	b.n	8005e6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <USBD_CDC_ReceivePacket+0x68>)
 8005e5e:	7819      	ldrb	r1, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e66:	2340      	movs	r3, #64	@ 0x40
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 ffab 	bl	8007dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000094 	.word	0x20000094

08005e7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e01f      	b.n	8005ed4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	79fa      	ldrb	r2, [r7, #7]
 8005ec6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f001 fe25 	bl	8007b18 <USBD_LL_Init>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e025      	b.n	8005f40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	32ae      	adds	r2, #174	@ 0xae
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32ae      	adds	r2, #174	@ 0xae
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	f107 020e 	add.w	r2, r7, #14
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
 8005f28:	4602      	mov	r2, r0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fe2d 	bl	8007bb0 <USBD_LL_Start>
 8005f56:	4603      	mov	r3, r0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f90c 	bl	8007212 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b02      	cmp	r3, #2
 800601c:	d01a      	beq.n	8006054 <USBD_LL_SetupStage+0x72>
 800601e:	2b02      	cmp	r3, #2
 8006020:	d822      	bhi.n	8006068 <USBD_LL_SetupStage+0x86>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <USBD_LL_SetupStage+0x4a>
 8006026:	2b01      	cmp	r3, #1
 8006028:	d00a      	beq.n	8006040 <USBD_LL_SetupStage+0x5e>
 800602a:	e01d      	b.n	8006068 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fb63 	bl	8006700 <USBD_StdDevReq>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
      break;
 800603e:	e020      	b.n	8006082 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbcb 	bl	80067e4 <USBD_StdItfReq>
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]
      break;
 8006052:	e016      	b.n	8006082 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc2d 	bl	80068bc <USBD_StdEPReq>
 8006062:	4603      	mov	r3, r0
 8006064:	73fb      	strb	r3, [r7, #15]
      break;
 8006066:	e00c      	b.n	8006082 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800606e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006072:	b2db      	uxtb	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 fdfa 	bl	8007c70 <USBD_LL_StallEP>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	bf00      	nop
  }

  return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	460b      	mov	r3, r1
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800609e:	7afb      	ldrb	r3, [r7, #11]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d16e      	bne.n	8006182 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80060aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	f040 8098 	bne.w	80061e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d913      	bls.n	80060ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	1ad2      	subs	r2, r2, r3
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4293      	cmp	r3, r2
 80060dc:	bf28      	it	cs
 80060de:	4613      	movcs	r3, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f001 f994 	bl	8007412 <USBD_CtlContinueRx>
 80060ea:	e07d      	b.n	80061e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d014      	beq.n	8006124 <USBD_LL_DataOutStage+0x98>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d81d      	bhi.n	800613a <USBD_LL_DataOutStage+0xae>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <USBD_LL_DataOutStage+0x7c>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d003      	beq.n	800610e <USBD_LL_DataOutStage+0x82>
 8006106:	e018      	b.n	800613a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	75bb      	strb	r3, [r7, #22]
            break;
 800610c:	e018      	b.n	8006140 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006114:	b2db      	uxtb	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa64 	bl	80065e6 <USBD_CoreFindIF>
 800611e:	4603      	mov	r3, r0
 8006120:	75bb      	strb	r3, [r7, #22]
            break;
 8006122:	e00d      	b.n	8006140 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800612a:	b2db      	uxtb	r3, r3
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fa66 	bl	8006600 <USBD_CoreFindEP>
 8006134:	4603      	mov	r3, r0
 8006136:	75bb      	strb	r3, [r7, #22]
            break;
 8006138:	e002      	b.n	8006140 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	75bb      	strb	r3, [r7, #22]
            break;
 800613e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006140:	7dbb      	ldrb	r3, [r7, #22]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d119      	bne.n	800617a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b03      	cmp	r3, #3
 8006150:	d113      	bne.n	800617a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006152:	7dba      	ldrb	r2, [r7, #22]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	32ae      	adds	r2, #174	@ 0xae
 8006158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006162:	7dba      	ldrb	r2, [r7, #22]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800616a:	7dba      	ldrb	r2, [r7, #22]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	32ae      	adds	r2, #174	@ 0xae
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f001 f95a 	bl	8007434 <USBD_CtlSendStatus>
 8006180:	e032      	b.n	80061e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006182:	7afb      	ldrb	r3, [r7, #11]
 8006184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006188:	b2db      	uxtb	r3, r3
 800618a:	4619      	mov	r1, r3
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fa37 	bl	8006600 <USBD_CoreFindEP>
 8006192:	4603      	mov	r3, r0
 8006194:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006196:	7dbb      	ldrb	r3, [r7, #22]
 8006198:	2bff      	cmp	r3, #255	@ 0xff
 800619a:	d025      	beq.n	80061e8 <USBD_LL_DataOutStage+0x15c>
 800619c:	7dbb      	ldrb	r3, [r7, #22]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d122      	bne.n	80061e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d117      	bne.n	80061de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061ae:	7dba      	ldrb	r2, [r7, #22]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	32ae      	adds	r2, #174	@ 0xae
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00f      	beq.n	80061de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061be:	7dba      	ldrb	r2, [r7, #22]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061c6:	7dba      	ldrb	r2, [r7, #22]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	32ae      	adds	r2, #174	@ 0xae
 80061cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	7afa      	ldrb	r2, [r7, #11]
 80061d4:	4611      	mov	r1, r2
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	4798      	blx	r3
 80061da:	4603      	mov	r3, r0
 80061dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	e000      	b.n	80061ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	460b      	mov	r3, r1
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d16f      	bne.n	80062e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3314      	adds	r3, #20
 800620a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006212:	2b02      	cmp	r3, #2
 8006214:	d15a      	bne.n	80062cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	429a      	cmp	r2, r3
 8006220:	d914      	bls.n	800624c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	461a      	mov	r2, r3
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f001 f8bc 	bl	80073b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623e:	2300      	movs	r3, #0
 8006240:	2200      	movs	r2, #0
 8006242:	2100      	movs	r1, #0
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f001 fdbd 	bl	8007dc4 <USBD_LL_PrepareReceive>
 800624a:	e03f      	b.n	80062cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	429a      	cmp	r2, r3
 8006256:	d11c      	bne.n	8006292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006260:	429a      	cmp	r2, r3
 8006262:	d316      	bcc.n	8006292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800626e:	429a      	cmp	r2, r3
 8006270:	d20f      	bcs.n	8006292 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 f89d 	bl	80073b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006284:	2300      	movs	r3, #0
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f001 fd9a 	bl	8007dc4 <USBD_LL_PrepareReceive>
 8006290:	e01c      	b.n	80062cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d10f      	bne.n	80062be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062be:	2180      	movs	r1, #128	@ 0x80
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f001 fcd5 	bl	8007c70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f001 f8c7 	bl	800745a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d03a      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fe42 	bl	8005f60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80062e4:	e032      	b.n	800634c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f985 	bl	8006600 <USBD_CoreFindEP>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	2bff      	cmp	r3, #255	@ 0xff
 80062fe:	d025      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d122      	bne.n	800634c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d11c      	bne.n	800634c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006312:	7dfa      	ldrb	r2, [r7, #23]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	32ae      	adds	r2, #174	@ 0xae
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d014      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006322:	7dfa      	ldrb	r2, [r7, #23]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800632a:	7dfa      	ldrb	r2, [r7, #23]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	32ae      	adds	r2, #174	@ 0xae
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	7afa      	ldrb	r2, [r7, #11]
 8006338:	4611      	mov	r1, r2
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006342:	7dbb      	ldrb	r3, [r7, #22]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006348:	7dbb      	ldrb	r3, [r7, #22]
 800634a:	e000      	b.n	800634e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d014      	beq.n	80063bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6852      	ldr	r2, [r2, #4]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	4611      	mov	r1, r2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063bc:	2340      	movs	r3, #64	@ 0x40
 80063be:	2200      	movs	r2, #0
 80063c0:	2100      	movs	r1, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fc0f 	bl	8007be6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063d8:	2340      	movs	r3, #64	@ 0x40
 80063da:	2200      	movs	r2, #0
 80063dc:	2180      	movs	r1, #128	@ 0x80
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fc01 	bl	8007be6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2240      	movs	r2, #64	@ 0x40
 80063ee:	621a      	str	r2, [r3, #32]

  return ret;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b04      	cmp	r3, #4
 800642c:	d006      	beq.n	800643c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006434:	b2da      	uxtb	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b04      	cmp	r3, #4
 8006464:	d106      	bne.n	8006474 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800646c:	b2da      	uxtb	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d110      	bne.n	80064b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	32ae      	adds	r2, #174	@ 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e01c      	b.n	800651e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d115      	bne.n	800651c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32ae      	adds	r2, #174	@ 0xae
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	32ae      	adds	r2, #174	@ 0xae
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	e01c      	b.n	8006582 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b03      	cmp	r3, #3
 8006552:	d115      	bne.n	8006580 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	32ae      	adds	r2, #174	@ 0xae
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	32ae      	adds	r2, #174	@ 0xae
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	4611      	mov	r1, r2
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6852      	ldr	r2, [r2, #4]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	4611      	mov	r1, r2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065d8:	2303      	movs	r3, #3
 80065da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800660c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	b29b      	uxth	r3, r3
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	4293      	cmp	r3, r2
 800663e:	d91f      	bls.n	8006680 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006646:	e013      	b.n	8006670 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006648:	f107 030a 	add.w	r3, r7, #10
 800664c:	4619      	mov	r1, r3
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f000 f81b 	bl	800668a <USBD_GetNextDesc>
 8006654:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b05      	cmp	r3, #5
 800665c:	d108      	bne.n	8006670 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	789b      	ldrb	r3, [r3, #2]
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	429a      	cmp	r2, r3
 800666a:	d008      	beq.n	800667e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	b29a      	uxth	r2, r3
 8006676:	897b      	ldrh	r3, [r7, #10]
 8006678:	429a      	cmp	r2, r3
 800667a:	d8e5      	bhi.n	8006648 <USBD_GetEpDesc+0x2e>
 800667c:	e000      	b.n	8006680 <USBD_GetEpDesc+0x66>
          break;
 800667e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006680:	693b      	ldr	r3, [r7, #16]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	3301      	adds	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	b21a      	sxth	r2, r3
 80066e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	b21b      	sxth	r3, r3
 80066f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066f2:	89fb      	ldrh	r3, [r7, #14]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d005      	beq.n	8006726 <USBD_StdDevReq+0x26>
 800671a:	2b40      	cmp	r3, #64	@ 0x40
 800671c:	d857      	bhi.n	80067ce <USBD_StdDevReq+0xce>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00f      	beq.n	8006742 <USBD_StdDevReq+0x42>
 8006722:	2b20      	cmp	r3, #32
 8006724:	d153      	bne.n	80067ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32ae      	adds	r2, #174	@ 0xae
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]
      break;
 8006740:	e04a      	b.n	80067d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b09      	cmp	r3, #9
 8006748:	d83b      	bhi.n	80067c2 <USBD_StdDevReq+0xc2>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <USBD_StdDevReq+0x50>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	080067a5 	.word	0x080067a5
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067c3 	.word	0x080067c3
 800675c:	080067af 	.word	0x080067af
 8006760:	080067c3 	.word	0x080067c3
 8006764:	08006783 	.word	0x08006783
 8006768:	08006779 	.word	0x08006779
 800676c:	080067c3 	.word	0x080067c3
 8006770:	0800679b 	.word	0x0800679b
 8006774:	0800678d 	.word	0x0800678d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa3c 	bl	8006bf8 <USBD_GetDescriptor>
          break;
 8006780:	e024      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fba1 	bl	8006ecc <USBD_SetAddress>
          break;
 800678a:	e01f      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fbe0 	bl	8006f54 <USBD_SetConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
          break;
 8006798:	e018      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc83 	bl	80070a8 <USBD_GetConfig>
          break;
 80067a2:	e013      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fcb4 	bl	8007114 <USBD_GetStatus>
          break;
 80067ac:	e00e      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fce3 	bl	800717c <USBD_SetFeature>
          break;
 80067b6:	e009      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fd07 	bl	80071ce <USBD_ClrFeature>
          break;
 80067c0:	e004      	b.n	80067cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fd5e 	bl	8007286 <USBD_CtlError>
          break;
 80067ca:	bf00      	nop
      }
      break;
 80067cc:	e004      	b.n	80067d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fd58 	bl	8007286 <USBD_CtlError>
      break;
 80067d6:	bf00      	nop
  }

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d005      	beq.n	800680a <USBD_StdItfReq+0x26>
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	d852      	bhi.n	80068a8 <USBD_StdItfReq+0xc4>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <USBD_StdItfReq+0x26>
 8006806:	2b20      	cmp	r3, #32
 8006808:	d14e      	bne.n	80068a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006810:	b2db      	uxtb	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	2b02      	cmp	r3, #2
 8006816:	d840      	bhi.n	800689a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	889b      	ldrh	r3, [r3, #4]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	d836      	bhi.n	8006890 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	889b      	ldrh	r3, [r3, #4]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fedb 	bl	80065e6 <USBD_CoreFindIF>
 8006830:	4603      	mov	r3, r0
 8006832:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2bff      	cmp	r3, #255	@ 0xff
 8006838:	d01d      	beq.n	8006876 <USBD_StdItfReq+0x92>
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11a      	bne.n	8006876 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006840:	7bba      	ldrb	r2, [r7, #14]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	32ae      	adds	r2, #174	@ 0xae
 8006846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006850:	7bba      	ldrb	r2, [r7, #14]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006858:	7bba      	ldrb	r2, [r7, #14]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	@ 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800686e:	e004      	b.n	800687a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006874:	e001      	b.n	800687a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	88db      	ldrh	r3, [r3, #6]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d110      	bne.n	80068a4 <USBD_StdItfReq+0xc0>
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fdd3 	bl	8007434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800688e:	e009      	b.n	80068a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fcf7 	bl	8007286 <USBD_CtlError>
          break;
 8006898:	e004      	b.n	80068a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fcf2 	bl	8007286 <USBD_CtlError>
          break;
 80068a2:	e000      	b.n	80068a6 <USBD_StdItfReq+0xc2>
          break;
 80068a4:	bf00      	nop
      }
      break;
 80068a6:	e004      	b.n	80068b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fceb 	bl	8007286 <USBD_CtlError>
      break;
 80068b0:	bf00      	nop
  }

  return ret;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	889b      	ldrh	r3, [r3, #4]
 80068ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068d8:	2b40      	cmp	r3, #64	@ 0x40
 80068da:	d007      	beq.n	80068ec <USBD_StdEPReq+0x30>
 80068dc:	2b40      	cmp	r3, #64	@ 0x40
 80068de:	f200 817f 	bhi.w	8006be0 <USBD_StdEPReq+0x324>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02a      	beq.n	800693c <USBD_StdEPReq+0x80>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	f040 817a 	bne.w	8006be0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fe85 	bl	8006600 <USBD_CoreFindEP>
 80068f6:	4603      	mov	r3, r0
 80068f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068fa:	7b7b      	ldrb	r3, [r7, #13]
 80068fc:	2bff      	cmp	r3, #255	@ 0xff
 80068fe:	f000 8174 	beq.w	8006bea <USBD_StdEPReq+0x32e>
 8006902:	7b7b      	ldrb	r3, [r7, #13]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 8170 	bne.w	8006bea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800690a:	7b7a      	ldrb	r2, [r7, #13]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006912:	7b7a      	ldrb	r2, [r7, #13]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	32ae      	adds	r2, #174	@ 0xae
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8163 	beq.w	8006bea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006924:	7b7a      	ldrb	r2, [r7, #13]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32ae      	adds	r2, #174	@ 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800693a:	e156      	b.n	8006bea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d008      	beq.n	8006956 <USBD_StdEPReq+0x9a>
 8006944:	2b03      	cmp	r3, #3
 8006946:	f300 8145 	bgt.w	8006bd4 <USBD_StdEPReq+0x318>
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 809b 	beq.w	8006a86 <USBD_StdEPReq+0x1ca>
 8006950:	2b01      	cmp	r3, #1
 8006952:	d03c      	beq.n	80069ce <USBD_StdEPReq+0x112>
 8006954:	e13e      	b.n	8006bd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d002      	beq.n	8006968 <USBD_StdEPReq+0xac>
 8006962:	2b03      	cmp	r3, #3
 8006964:	d016      	beq.n	8006994 <USBD_StdEPReq+0xd8>
 8006966:	e02c      	b.n	80069c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <USBD_StdEPReq+0xce>
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b80      	cmp	r3, #128	@ 0x80
 8006972:	d00a      	beq.n	800698a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 f979 	bl	8007c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800697e:	2180      	movs	r1, #128	@ 0x80
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 f975 	bl	8007c70 <USBD_LL_StallEP>
 8006986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006988:	e020      	b.n	80069cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc7a 	bl	8007286 <USBD_CtlError>
              break;
 8006992:	e01b      	b.n	80069cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	885b      	ldrh	r3, [r3, #2]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10e      	bne.n	80069ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <USBD_StdEPReq+0xfe>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b80      	cmp	r3, #128	@ 0x80
 80069a6:	d008      	beq.n	80069ba <USBD_StdEPReq+0xfe>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	88db      	ldrh	r3, [r3, #6]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f95b 	bl	8007c70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fd3a 	bl	8007434 <USBD_CtlSendStatus>

              break;
 80069c0:	e004      	b.n	80069cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fc5e 	bl	8007286 <USBD_CtlError>
              break;
 80069ca:	bf00      	nop
          }
          break;
 80069cc:	e107      	b.n	8006bde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d002      	beq.n	80069e0 <USBD_StdEPReq+0x124>
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d016      	beq.n	8006a0c <USBD_StdEPReq+0x150>
 80069de:	e04b      	b.n	8006a78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00d      	beq.n	8006a02 <USBD_StdEPReq+0x146>
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	2b80      	cmp	r3, #128	@ 0x80
 80069ea:	d00a      	beq.n	8006a02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f93d 	bl	8007c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069f6:	2180      	movs	r1, #128	@ 0x80
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 f939 	bl	8007c70 <USBD_LL_StallEP>
 80069fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a00:	e040      	b.n	8006a84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fc3e 	bl	8007286 <USBD_CtlError>
              break;
 8006a0a:	e03b      	b.n	8006a84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d136      	bne.n	8006a82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f943 	bl	8007cae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fd03 	bl	8007434 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fde4 	bl	8006600 <USBD_CoreFindEP>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a3c:	7b7b      	ldrb	r3, [r7, #13]
 8006a3e:	2bff      	cmp	r3, #255	@ 0xff
 8006a40:	d01f      	beq.n	8006a82 <USBD_StdEPReq+0x1c6>
 8006a42:	7b7b      	ldrb	r3, [r7, #13]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11c      	bne.n	8006a82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a48:	7b7a      	ldrb	r2, [r7, #13]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a50:	7b7a      	ldrb	r2, [r7, #13]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32ae      	adds	r2, #174	@ 0xae
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a60:	7b7a      	ldrb	r2, [r7, #13]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32ae      	adds	r2, #174	@ 0xae
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a76:	e004      	b.n	8006a82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fc03 	bl	8007286 <USBD_CtlError>
              break;
 8006a80:	e000      	b.n	8006a84 <USBD_StdEPReq+0x1c8>
              break;
 8006a82:	bf00      	nop
          }
          break;
 8006a84:	e0ab      	b.n	8006bde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d002      	beq.n	8006a98 <USBD_StdEPReq+0x1dc>
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d032      	beq.n	8006afc <USBD_StdEPReq+0x240>
 8006a96:	e097      	b.n	8006bc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <USBD_StdEPReq+0x1f2>
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b80      	cmp	r3, #128	@ 0x80
 8006aa2:	d004      	beq.n	8006aae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbed 	bl	8007286 <USBD_CtlError>
                break;
 8006aac:	e091      	b.n	8006bd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da0b      	bge.n	8006ace <USBD_StdEPReq+0x212>
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	3310      	adds	r3, #16
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	3304      	adds	r3, #4
 8006acc:	e00b      	b.n	8006ae6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2202      	movs	r2, #2
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fc43 	bl	8007380 <USBD_CtlSendData>
              break;
 8006afa:	e06a      	b.n	8006bd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da11      	bge.n	8006b28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	3324      	adds	r3, #36	@ 0x24
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d117      	bne.n	8006b4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbb0 	bl	8007286 <USBD_CtlError>
                  break;
 8006b26:	e054      	b.n	8006bd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	f003 020f 	and.w	r2, r3, #15
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb9d 	bl	8007286 <USBD_CtlError>
                  break;
 8006b4c:	e041      	b.n	8006bd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da0b      	bge.n	8006b6e <USBD_StdEPReq+0x2b2>
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	3310      	adds	r3, #16
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	e00b      	b.n	8006b86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	3304      	adds	r3, #4
 8006b86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <USBD_StdEPReq+0x2d8>
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b80      	cmp	r3, #128	@ 0x80
 8006b92:	d103      	bne.n	8006b9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e00e      	b.n	8006bba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f8a3 	bl	8007cec <USBD_LL_IsStallEP>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbdd 	bl	8007380 <USBD_CtlSendData>
              break;
 8006bc6:	e004      	b.n	8006bd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fb5b 	bl	8007286 <USBD_CtlError>
              break;
 8006bd0:	bf00      	nop
          }
          break;
 8006bd2:	e004      	b.n	8006bde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb55 	bl	8007286 <USBD_CtlError>
          break;
 8006bdc:	bf00      	nop
      }
      break;
 8006bde:	e005      	b.n	8006bec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fb4f 	bl	8007286 <USBD_CtlError>
      break;
 8006be8:	e000      	b.n	8006bec <USBD_StdEPReq+0x330>
      break;
 8006bea:	bf00      	nop
  }

  return ret;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	2b06      	cmp	r3, #6
 8006c1a:	f200 8128 	bhi.w	8006e6e <USBD_GetDescriptor+0x276>
 8006c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <USBD_GetDescriptor+0x2c>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c99 	.word	0x08006c99
 8006c30:	08006e6f 	.word	0x08006e6f
 8006c34:	08006e6f 	.word	0x08006e6f
 8006c38:	08006e0f 	.word	0x08006e0f
 8006c3c:	08006e3b 	.word	0x08006e3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	7c12      	ldrb	r2, [r2, #16]
 8006c4c:	f107 0108 	add.w	r1, r7, #8
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
 8006c54:	60f8      	str	r0, [r7, #12]
      break;
 8006c56:	e112      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7c1b      	ldrb	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10d      	bne.n	8006c7c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	f107 0208 	add.w	r2, r7, #8
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	2202      	movs	r2, #2
 8006c78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c7a:	e100      	b.n	8006e7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	f107 0208 	add.w	r2, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	2202      	movs	r2, #2
 8006c94:	701a      	strb	r2, [r3, #0]
      break;
 8006c96:	e0f2      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	885b      	ldrh	r3, [r3, #2]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	f200 80ac 	bhi.w	8006dfc <USBD_GetDescriptor+0x204>
 8006ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <USBD_GetDescriptor+0xb4>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cc5 	.word	0x08006cc5
 8006cb0:	08006cf9 	.word	0x08006cf9
 8006cb4:	08006d2d 	.word	0x08006d2d
 8006cb8:	08006d61 	.word	0x08006d61
 8006cbc:	08006d95 	.word	0x08006d95
 8006cc0:	08006dc9 	.word	0x08006dc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7c12      	ldrb	r2, [r2, #16]
 8006cdc:	f107 0108 	add.w	r1, r7, #8
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce6:	e091      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 facb 	bl	8007286 <USBD_CtlError>
            err++;
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf6:	e089      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c12      	ldrb	r2, [r2, #16]
 8006d10:	f107 0108 	add.w	r1, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1a:	e077      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fab1 	bl	8007286 <USBD_CtlError>
            err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2a:	e06f      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7c12      	ldrb	r2, [r2, #16]
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4e:	e05d      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa97 	bl	8007286 <USBD_CtlError>
            err++;
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5e:	e055      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d82:	e043      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa7d 	bl	8007286 <USBD_CtlError>
            err++;
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
          break;
 8006d92:	e03b      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	7c12      	ldrb	r2, [r2, #16]
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db6:	e029      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa63 	bl	8007286 <USBD_CtlError>
            err++;
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc6:	e021      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	7c12      	ldrb	r2, [r2, #16]
 8006de0:	f107 0108 	add.w	r1, r7, #8
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dea:	e00f      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa49 	bl	8007286 <USBD_CtlError>
            err++;
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	3301      	adds	r3, #1
 8006df8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfa:	e007      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa41 	bl	8007286 <USBD_CtlError>
          err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e037      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7c1b      	ldrb	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1e:	f107 0208 	add.w	r2, r7, #8
 8006e22:	4610      	mov	r0, r2
 8006e24:	4798      	blx	r3
 8006e26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e28:	e029      	b.n	8006e7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fa2a 	bl	8007286 <USBD_CtlError>
        err++;
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	3301      	adds	r3, #1
 8006e36:	72fb      	strb	r3, [r7, #11]
      break;
 8006e38:	e021      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7c1b      	ldrb	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10d      	bne.n	8006e5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4a:	f107 0208 	add.w	r2, r7, #8
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
 8006e52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	2207      	movs	r2, #7
 8006e5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e5c:	e00f      	b.n	8006e7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa10 	bl	8007286 <USBD_CtlError>
        err++;
 8006e66:	7afb      	ldrb	r3, [r7, #11]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e6c:	e007      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa08 	bl	8007286 <USBD_CtlError>
      err++;
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e7c:	bf00      	nop
  }

  if (err != 0U)
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11e      	bne.n	8006ec2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	88db      	ldrh	r3, [r3, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e8c:	893b      	ldrh	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	88da      	ldrh	r2, [r3, #6]
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	bf28      	it	cs
 8006e9c:	4613      	movcs	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ea2:	893b      	ldrh	r3, [r7, #8]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa69 	bl	8007380 <USBD_CtlSendData>
 8006eae:	e009      	b.n	8006ec4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9e7 	bl	8007286 <USBD_CtlError>
 8006eb8:	e004      	b.n	8006ec4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 faba 	bl	8007434 <USBD_CtlSendStatus>
 8006ec0:	e000      	b.n	8006ec4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ec2:	bf00      	nop
  }
}
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop

08006ecc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	889b      	ldrh	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d131      	bne.n	8006f42 <USBD_SetAddress+0x76>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d12d      	bne.n	8006f42 <USBD_SetAddress+0x76>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eec:	d829      	bhi.n	8006f42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d104      	bne.n	8006f10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9bc 	bl	8007286 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0e:	e01d      	b.n	8006f4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7bfa      	ldrb	r2, [r7, #15]
 8006f14:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 ff11 	bl	8007d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa86 	bl	8007434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	e009      	b.n	8006f4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f40:	e004      	b.n	8006f4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f99e 	bl	8007286 <USBD_CtlError>
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	4b4e      	ldr	r3, [pc, #312]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d905      	bls.n	8006f80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f985 	bl	8007286 <USBD_CtlError>
    return USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e08c      	b.n	800709a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d002      	beq.n	8006f92 <USBD_SetConfig+0x3e>
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d029      	beq.n	8006fe4 <USBD_SetConfig+0x90>
 8006f90:	e075      	b.n	800707e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f92:	4b44      	ldr	r3, [pc, #272]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d020      	beq.n	8006fdc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f9a:	4b42      	ldr	r3, [pc, #264]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe ffe3 	bl	8005f76 <USBD_SetClassConfig>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f962 	bl	8007286 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fca:	e065      	b.n	8007098 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fa31 	bl	8007434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fda:	e05d      	b.n	8007098 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa29 	bl	8007434 <USBD_CtlSendStatus>
      break;
 8006fe2:	e059      	b.n	8007098 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d112      	bne.n	8007012 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ffe:	4b29      	ldr	r3, [pc, #164]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fe ffd2 	bl	8005fae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa12 	bl	8007434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007010:	e042      	b.n	8007098 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007012:	4b24      	ldr	r3, [pc, #144]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d02a      	beq.n	8007076 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fe ffc0 	bl	8005fae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800702e:	4b1d      	ldr	r3, [pc, #116]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <USBD_SetConfig+0x150>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fe ff99 	bl	8005f76 <USBD_SetClassConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00f      	beq.n	800706e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f918 	bl	8007286 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fe ffa5 	bl	8005fae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800706c:	e014      	b.n	8007098 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9e0 	bl	8007434 <USBD_CtlSendStatus>
      break;
 8007074:	e010      	b.n	8007098 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9dc 	bl	8007434 <USBD_CtlSendStatus>
      break;
 800707c:	e00c      	b.n	8007098 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f900 	bl	8007286 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007086:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fe ff8e 	bl	8005fae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
      break;
 8007096:	bf00      	nop
  }

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000284 	.word	0x20000284

080070a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d004      	beq.n	80070c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8e2 	bl	8007286 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070c2:	e023      	b.n	800710c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	dc02      	bgt.n	80070d6 <USBD_GetConfig+0x2e>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dc03      	bgt.n	80070dc <USBD_GetConfig+0x34>
 80070d4:	e015      	b.n	8007102 <USBD_GetConfig+0x5a>
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d00b      	beq.n	80070f2 <USBD_GetConfig+0x4a>
 80070da:	e012      	b.n	8007102 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3308      	adds	r3, #8
 80070e6:	2201      	movs	r2, #1
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f948 	bl	8007380 <USBD_CtlSendData>
        break;
 80070f0:	e00c      	b.n	800710c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3304      	adds	r3, #4
 80070f6:	2201      	movs	r2, #1
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f940 	bl	8007380 <USBD_CtlSendData>
        break;
 8007100:	e004      	b.n	800710c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8be 	bl	8007286 <USBD_CtlError>
        break;
 800710a:	bf00      	nop
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	2b02      	cmp	r3, #2
 800712a:	d81e      	bhi.n	800716a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	88db      	ldrh	r3, [r3, #6]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d004      	beq.n	800713e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f8a5 	bl	8007286 <USBD_CtlError>
        break;
 800713c:	e01a      	b.n	8007174 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f043 0202 	orr.w	r2, r3, #2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	330c      	adds	r3, #12
 800715e:	2202      	movs	r2, #2
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f90c 	bl	8007380 <USBD_CtlSendData>
      break;
 8007168:	e004      	b.n	8007174 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f88a 	bl	8007286 <USBD_CtlError>
      break;
 8007172:	bf00      	nop
  }
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d107      	bne.n	800719e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f94c 	bl	8007434 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800719c:	e013      	b.n	80071c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d10b      	bne.n	80071be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	889b      	ldrh	r3, [r3, #4]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f93c 	bl	8007434 <USBD_CtlSendStatus>
}
 80071bc:	e003      	b.n	80071c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f860 	bl	8007286 <USBD_CtlError>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d80b      	bhi.n	80071fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d10c      	bne.n	8007208 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f91c 	bl	8007434 <USBD_CtlSendStatus>
      }
      break;
 80071fc:	e004      	b.n	8007208 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f840 	bl	8007286 <USBD_CtlError>
      break;
 8007206:	e000      	b.n	800720a <USBD_ClrFeature+0x3c>
      break;
 8007208:	bf00      	nop
  }
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	781a      	ldrb	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff fa40 	bl	80066c2 <SWAPBYTE>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fa33 	bl	80066c2 <SWAPBYTE>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fa26 	bl	80066c2 <SWAPBYTE>
 8007276:	4603      	mov	r3, r0
 8007278:	461a      	mov	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	80da      	strh	r2, [r3, #6]
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007290:	2180      	movs	r1, #128	@ 0x80
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fcec 	bl	8007c70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fce8 	bl	8007c70 <USBD_LL_StallEP>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d042      	beq.n	8007344 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f000 f842 	bl	800734c <USBD_GetLen>
 80072c8:	4603      	mov	r3, r0
 80072ca:	3301      	adds	r3, #1
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d2:	d808      	bhi.n	80072e6 <USBD_GetString+0x3e>
 80072d4:	6938      	ldr	r0, [r7, #16]
 80072d6:	f000 f839 	bl	800734c <USBD_GetLen>
 80072da:	4603      	mov	r3, r0
 80072dc:	3301      	adds	r3, #1
 80072de:	b29b      	uxth	r3, r3
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	e001      	b.n	80072ea <USBD_GetString+0x42>
 80072e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4413      	add	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	3301      	adds	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4413      	add	r3, r2
 8007306:	2203      	movs	r2, #3
 8007308:	701a      	strb	r2, [r3, #0]
  idx++;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	3301      	adds	r3, #1
 800730e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007310:	e013      	b.n	800733a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	4413      	add	r3, r2
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
    idx++;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
 8007326:	3301      	adds	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	4413      	add	r3, r2
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
    idx++;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	3301      	adds	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e7      	bne.n	8007312 <USBD_GetString+0x6a>
 8007342:	e000      	b.n	8007346 <USBD_GetString+0x9e>
    return;
 8007344:	bf00      	nop
  }
}
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800735c:	e005      	b.n	800736a <USBD_GetLen+0x1e>
  {
    len++;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	3301      	adds	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	3301      	adds	r3, #1
 8007368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f5      	bne.n	800735e <USBD_GetLen+0x12>
  }

  return len;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2202      	movs	r2, #2
 8007390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	2100      	movs	r1, #0
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fceb 	bl	8007d82 <USBD_LL_Transmit>

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	2100      	movs	r1, #0
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fcda 	bl	8007d82 <USBD_LL_Transmit>

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2203      	movs	r2, #3
 80073e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	2100      	movs	r1, #0
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fcde 	bl	8007dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	2100      	movs	r1, #0
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fccd 	bl	8007dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007444:	2300      	movs	r3, #0
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fc99 	bl	8007d82 <USBD_LL_Transmit>

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2205      	movs	r2, #5
 8007466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800746a:	2300      	movs	r3, #0
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fca7 	bl	8007dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007484:	2200      	movs	r2, #0
 8007486:	4912      	ldr	r1, [pc, #72]	@ (80074d0 <MX_USB_DEVICE_Init+0x50>)
 8007488:	4812      	ldr	r0, [pc, #72]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 800748a:	f7fe fcf7 	bl	8005e7c <USBD_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007494:	f7f9 fa20 	bl	80008d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007498:	490f      	ldr	r1, [pc, #60]	@ (80074d8 <MX_USB_DEVICE_Init+0x58>)
 800749a:	480e      	ldr	r0, [pc, #56]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 800749c:	f7fe fd1e 	bl	8005edc <USBD_RegisterClass>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074a6:	f7f9 fa17 	bl	80008d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074aa:	490c      	ldr	r1, [pc, #48]	@ (80074dc <MX_USB_DEVICE_Init+0x5c>)
 80074ac:	4809      	ldr	r0, [pc, #36]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 80074ae:	f7fe fc15 	bl	8005cdc <USBD_CDC_RegisterInterface>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074b8:	f7f9 fa0e 	bl	80008d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074bc:	4805      	ldr	r0, [pc, #20]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 80074be:	f7fe fd43 	bl	8005f48 <USBD_Start>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074c8:	f7f9 fa06 	bl	80008d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074cc:	bf00      	nop
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200000ac 	.word	0x200000ac
 80074d4:	20000288 	.word	0x20000288
 80074d8:	20000018 	.word	0x20000018
 80074dc:	20000098 	.word	0x20000098

080074e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074e4:	2200      	movs	r2, #0
 80074e6:	4905      	ldr	r1, [pc, #20]	@ (80074fc <CDC_Init_FS+0x1c>)
 80074e8:	4805      	ldr	r0, [pc, #20]	@ (8007500 <CDC_Init_FS+0x20>)
 80074ea:	f7fe fc11 	bl	8005d10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074ee:	4905      	ldr	r1, [pc, #20]	@ (8007504 <CDC_Init_FS+0x24>)
 80074f0:	4803      	ldr	r0, [pc, #12]	@ (8007500 <CDC_Init_FS+0x20>)
 80074f2:	f7fe fc2f 	bl	8005d54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200006a4 	.word	0x200006a4
 8007500:	20000288 	.word	0x20000288
 8007504:	20000564 	.word	0x20000564

08007508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800750c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800750e:	4618      	mov	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
 8007524:	4613      	mov	r3, r2
 8007526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b23      	cmp	r3, #35	@ 0x23
 800752c:	d84a      	bhi.n	80075c4 <CDC_Control_FS+0xac>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <CDC_Control_FS+0x1c>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	080075c5 	.word	0x080075c5
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075c5 	.word	0x080075c5
 8007540:	080075c5 	.word	0x080075c5
 8007544:	080075c5 	.word	0x080075c5
 8007548:	080075c5 	.word	0x080075c5
 800754c:	080075c5 	.word	0x080075c5
 8007550:	080075c5 	.word	0x080075c5
 8007554:	080075c5 	.word	0x080075c5
 8007558:	080075c5 	.word	0x080075c5
 800755c:	080075c5 	.word	0x080075c5
 8007560:	080075c5 	.word	0x080075c5
 8007564:	080075c5 	.word	0x080075c5
 8007568:	080075c5 	.word	0x080075c5
 800756c:	080075c5 	.word	0x080075c5
 8007570:	080075c5 	.word	0x080075c5
 8007574:	080075c5 	.word	0x080075c5
 8007578:	080075c5 	.word	0x080075c5
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075c5 	.word	0x080075c5
 8007584:	080075c5 	.word	0x080075c5
 8007588:	080075c5 	.word	0x080075c5
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075c5 	.word	0x080075c5
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075c5 	.word	0x080075c5
 80075a8:	080075c5 	.word	0x080075c5
 80075ac:	080075c5 	.word	0x080075c5
 80075b0:	080075c5 	.word	0x080075c5
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075c5 	.word	0x080075c5
 80075bc:	080075c5 	.word	0x080075c5
 80075c0:	080075c5 	.word	0x080075c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075c4:	bf00      	nop
  }

  return (USBD_OK);
 80075c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4805      	ldr	r0, [pc, #20]	@ (80075f8 <CDC_Receive_FS+0x24>)
 80075e2:	f7fe fbb7 	bl	8005d54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075e6:	4804      	ldr	r0, [pc, #16]	@ (80075f8 <CDC_Receive_FS+0x24>)
 80075e8:	f7fe fc12 	bl	8005e10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000288 	.word	0x20000288

080075fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800760c:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <CDC_Transmit_FS+0x48>)
 800760e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800761e:	2301      	movs	r3, #1
 8007620:	e00b      	b.n	800763a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007622:	887b      	ldrh	r3, [r7, #2]
 8007624:	461a      	mov	r2, r3
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4806      	ldr	r0, [pc, #24]	@ (8007644 <CDC_Transmit_FS+0x48>)
 800762a:	f7fe fb71 	bl	8005d10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800762e:	4805      	ldr	r0, [pc, #20]	@ (8007644 <CDC_Transmit_FS+0x48>)
 8007630:	f7fe fbae 	bl	8005d90 <USBD_CDC_TransmitPacket>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000288 	.word	0x20000288

08007648 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	4613      	mov	r3, r2
 8007654:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800765a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
	...

0800766c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	6039      	str	r1, [r7, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2212      	movs	r2, #18
 800767c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800767e:	4b03      	ldr	r3, [pc, #12]	@ (800768c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	200000c8 	.word	0x200000c8

08007690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2204      	movs	r2, #4
 80076a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076a2:	4b03      	ldr	r3, [pc, #12]	@ (80076b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	200000dc 	.word	0x200000dc

080076b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4907      	ldr	r1, [pc, #28]	@ (80076e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80076ca:	4808      	ldr	r0, [pc, #32]	@ (80076ec <USBD_FS_ProductStrDescriptor+0x38>)
 80076cc:	f7ff fdec 	bl	80072a8 <USBD_GetString>
 80076d0:	e004      	b.n	80076dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4904      	ldr	r1, [pc, #16]	@ (80076e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80076d6:	4805      	ldr	r0, [pc, #20]	@ (80076ec <USBD_FS_ProductStrDescriptor+0x38>)
 80076d8:	f7ff fde6 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076dc:	4b02      	ldr	r3, [pc, #8]	@ (80076e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	200007e4 	.word	0x200007e4
 80076ec:	08007f24 	.word	0x08007f24

080076f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	6039      	str	r1, [r7, #0]
 80076fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	4904      	ldr	r1, [pc, #16]	@ (8007710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007700:	4804      	ldr	r0, [pc, #16]	@ (8007714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007702:	f7ff fdd1 	bl	80072a8 <USBD_GetString>
  return USBD_StrDesc;
 8007706:	4b02      	ldr	r3, [pc, #8]	@ (8007710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	200007e4 	.word	0x200007e4
 8007714:	08007f30 	.word	0x08007f30

08007718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	221a      	movs	r2, #26
 8007728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800772a:	f000 f843 	bl	80077b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800772e:	4b02      	ldr	r3, [pc, #8]	@ (8007738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	200000e0 	.word	0x200000e0

0800773c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	6039      	str	r1, [r7, #0]
 8007746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d105      	bne.n	800775a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	4907      	ldr	r1, [pc, #28]	@ (8007770 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007752:	4808      	ldr	r0, [pc, #32]	@ (8007774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007754:	f7ff fda8 	bl	80072a8 <USBD_GetString>
 8007758:	e004      	b.n	8007764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	4904      	ldr	r1, [pc, #16]	@ (8007770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800775e:	4805      	ldr	r0, [pc, #20]	@ (8007774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007760:	f7ff fda2 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007764:	4b02      	ldr	r3, [pc, #8]	@ (8007770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200007e4 	.word	0x200007e4
 8007774:	08007f44 	.word	0x08007f44

08007778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	6039      	str	r1, [r7, #0]
 8007782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d105      	bne.n	8007796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4907      	ldr	r1, [pc, #28]	@ (80077ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800778e:	4808      	ldr	r0, [pc, #32]	@ (80077b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007790:	f7ff fd8a 	bl	80072a8 <USBD_GetString>
 8007794:	e004      	b.n	80077a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	4904      	ldr	r1, [pc, #16]	@ (80077ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800779a:	4805      	ldr	r0, [pc, #20]	@ (80077b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800779c:	f7ff fd84 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077a0:	4b02      	ldr	r3, [pc, #8]	@ (80077ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	200007e4 	.word	0x200007e4
 80077b0:	08007f50 	.word	0x08007f50

080077b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077ba:	4b0f      	ldr	r3, [pc, #60]	@ (80077f8 <Get_SerialNum+0x44>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <Get_SerialNum+0x48>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <Get_SerialNum+0x4c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077da:	2208      	movs	r2, #8
 80077dc:	4909      	ldr	r1, [pc, #36]	@ (8007804 <Get_SerialNum+0x50>)
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f814 	bl	800780c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077e4:	2204      	movs	r2, #4
 80077e6:	4908      	ldr	r1, [pc, #32]	@ (8007808 <Get_SerialNum+0x54>)
 80077e8:	68b8      	ldr	r0, [r7, #8]
 80077ea:	f000 f80f 	bl	800780c <IntToUnicode>
  }
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	1fff7a10 	.word	0x1fff7a10
 80077fc:	1fff7a14 	.word	0x1fff7a14
 8007800:	1fff7a18 	.word	0x1fff7a18
 8007804:	200000e2 	.word	0x200000e2
 8007808:	200000f2 	.word	0x200000f2

0800780c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800781e:	2300      	movs	r3, #0
 8007820:	75fb      	strb	r3, [r7, #23]
 8007822:	e027      	b.n	8007874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	0f1b      	lsrs	r3, r3, #28
 8007828:	2b09      	cmp	r3, #9
 800782a:	d80b      	bhi.n	8007844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	0f1b      	lsrs	r3, r3, #28
 8007830:	b2da      	uxtb	r2, r3
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4619      	mov	r1, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	440b      	add	r3, r1
 800783c:	3230      	adds	r2, #48	@ 0x30
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e00a      	b.n	800785a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	0f1b      	lsrs	r3, r3, #28
 8007848:	b2da      	uxtb	r2, r3
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	4619      	mov	r1, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	440b      	add	r3, r1
 8007854:	3237      	adds	r2, #55	@ 0x37
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	3301      	adds	r3, #1
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4413      	add	r3, r2
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	3301      	adds	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
 8007874:	7dfa      	ldrb	r2, [r7, #23]
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	429a      	cmp	r2, r3
 800787a:	d3d3      	bcc.n	8007824 <IntToUnicode+0x18>
  }
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	@ 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	609a      	str	r2, [r3, #8]
 80078a0:	60da      	str	r2, [r3, #12]
 80078a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078ac:	d13a      	bne.n	8007924 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	4b1e      	ldr	r3, [pc, #120]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b6:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80078be:	4b1b      	ldr	r3, [pc, #108]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 80078c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	613b      	str	r3, [r7, #16]
 80078c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80078ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d0:	2302      	movs	r3, #2
 80078d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d8:	2303      	movs	r3, #3
 80078da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078dc:	230a      	movs	r3, #10
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e0:	f107 0314 	add.w	r3, r7, #20
 80078e4:	4619      	mov	r1, r3
 80078e6:	4812      	ldr	r0, [pc, #72]	@ (8007930 <HAL_PCD_MspInit+0xa4>)
 80078e8:	f7f9 fc7e 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078ec:	4b0f      	ldr	r3, [pc, #60]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 80078ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f0:	4a0e      	ldr	r2, [pc, #56]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 80078fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007900:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 8007902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007906:	6453      	str	r3, [r2, #68]	@ 0x44
 8007908:	4b08      	ldr	r3, [pc, #32]	@ (800792c <HAL_PCD_MspInit+0xa0>)
 800790a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007914:	2200      	movs	r2, #0
 8007916:	2100      	movs	r1, #0
 8007918:	2043      	movs	r0, #67	@ 0x43
 800791a:	f7f9 fc2e 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800791e:	2043      	movs	r0, #67	@ 0x43
 8007920:	f7f9 fc47 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007924:	bf00      	nop
 8007926:	3728      	adds	r7, #40	@ 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40023800 	.word	0x40023800
 8007930:	40020000 	.word	0x40020000

08007934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7fe fb49 	bl	8005fe2 <USBD_LL_SetupStage>
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	4619      	mov	r1, r3
 8007982:	f7fe fb83 	bl	800608c <USBD_LL_DataOutStage>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	4613      	mov	r3, r2
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	440b      	add	r3, r1
 80079ae:	3320      	adds	r3, #32
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	4619      	mov	r1, r3
 80079b6:	f7fe fc1c 	bl	80061f2 <USBD_LL_DataInStage>
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe fd56 	bl	8006482 <USBD_LL_SOF>
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079e6:	2301      	movs	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	79db      	ldrb	r3, [r3, #7]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
 80079f6:	e008      	b.n	8007a0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	79db      	ldrb	r3, [r3, #7]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d102      	bne.n	8007a06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a00:	2301      	movs	r3, #1
 8007a02:	73fb      	strb	r3, [r7, #15]
 8007a04:	e001      	b.n	8007a0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a06:	f7f8 ff67 	bl	80008d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a10:	7bfa      	ldrb	r2, [r7, #15]
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe fcf0 	bl	80063fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fc98 	bl	8006356 <USBD_LL_Reset>
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fceb 	bl	800641a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7adb      	ldrb	r3, [r3, #11]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a64:	4b04      	ldr	r3, [pc, #16]	@ (8007a78 <HAL_PCD_SuspendCallback+0x48>)
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	4a03      	ldr	r2, [pc, #12]	@ (8007a78 <HAL_PCD_SuspendCallback+0x48>)
 8007a6a:	f043 0306 	orr.w	r3, r3, #6
 8007a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed00 	.word	0xe000ed00

08007a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fce1 	bl	8006452 <USBD_LL_Resume>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fd39 	bl	8006526 <USBD_LL_IsoOUTIncomplete>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fcf5 	bl	80064c2 <USBD_LL_IsoINIncomplete>
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fd4b 	bl	800658a <USBD_LL_DevConnected>
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fd48 	bl	80065a0 <USBD_LL_DevDisconnected>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d13c      	bne.n	8007ba2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b28:	4a20      	ldr	r2, [pc, #128]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1e      	ldr	r2, [pc, #120]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b34:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b38:	4b1c      	ldr	r3, [pc, #112]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007b3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b40:	4b1a      	ldr	r3, [pc, #104]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b42:	2204      	movs	r2, #4
 8007b44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b46:	4b19      	ldr	r3, [pc, #100]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b48:	2202      	movs	r2, #2
 8007b4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b4c:	4b17      	ldr	r3, [pc, #92]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b52:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b54:	2202      	movs	r2, #2
 8007b56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b58:	4b14      	ldr	r3, [pc, #80]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b5e:	4b13      	ldr	r3, [pc, #76]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b64:	4b11      	ldr	r3, [pc, #68]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b6a:	4b10      	ldr	r3, [pc, #64]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b70:	4b0e      	ldr	r3, [pc, #56]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b76:	480d      	ldr	r0, [pc, #52]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b78:	f7f9 fced 	bl	8001556 <HAL_PCD_Init>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b82:	f7f8 fea9 	bl	80008d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b86:	2180      	movs	r1, #128	@ 0x80
 8007b88:	4808      	ldr	r0, [pc, #32]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b8a:	f7fa ff1a 	bl	80029c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b8e:	2240      	movs	r2, #64	@ 0x40
 8007b90:	2100      	movs	r1, #0
 8007b92:	4806      	ldr	r0, [pc, #24]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b94:	f7fa fece 	bl	8002934 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b98:	2280      	movs	r2, #128	@ 0x80
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	4803      	ldr	r0, [pc, #12]	@ (8007bac <USBD_LL_Init+0x94>)
 8007b9e:	f7fa fec9 	bl	8002934 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200009e4 	.word	0x200009e4

08007bb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7f9 fdd4 	bl	8001774 <HAL_PCD_Start>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f942 	bl	8007e5c <USBD_Get_USB_Status>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	4608      	mov	r0, r1
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	70fb      	strb	r3, [r7, #3]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70bb      	strb	r3, [r7, #2]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c0e:	78bb      	ldrb	r3, [r7, #2]
 8007c10:	883a      	ldrh	r2, [r7, #0]
 8007c12:	78f9      	ldrb	r1, [r7, #3]
 8007c14:	f7fa faa8 	bl	8002168 <HAL_PCD_EP_Open>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f91c 	bl	8007e5c <USBD_Get_USB_Status>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fa faf3 	bl	800223c <HAL_PCD_EP_Close>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f8fd 	bl	8007e5c <USBD_Get_USB_Status>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fa fbab 	bl	80023ea <HAL_PCD_EP_SetStall>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f8de 	bl	8007e5c <USBD_Get_USB_Status>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fa fbef 	bl	80024b0 <HAL_PCD_EP_ClrStall>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f8bf 	bl	8007e5c <USBD_Get_USB_Status>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	da0b      	bge.n	8007d20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	3316      	adds	r3, #22
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	e00b      	b.n	8007d38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	440b      	add	r3, r1
 8007d32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007d36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fa f9dc 	bl	8002120 <HAL_PCD_SetAddress>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f874 	bl	8007e5c <USBD_Get_USB_Status>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007da0:	7af9      	ldrb	r1, [r7, #11]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f7fa fae6 	bl	8002376 <HAL_PCD_EP_Transmit>
 8007daa:	4603      	mov	r3, r0
 8007dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f853 	bl	8007e5c <USBD_Get_USB_Status>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007de2:	7af9      	ldrb	r1, [r7, #11]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	f7fa fa72 	bl	80022d0 <HAL_PCD_EP_Receive>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f832 	bl	8007e5c <USBD_Get_USB_Status>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fa fa92 	bl	8002346 <HAL_PCD_EP_GetRxCount>
 8007e22:	4603      	mov	r3, r0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e34:	4b03      	ldr	r3, [pc, #12]	@ (8007e44 <USBD_static_malloc+0x18>)
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000ec8 	.word	0x20000ec8

08007e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d817      	bhi.n	8007ea0 <USBD_Get_USB_Status+0x44>
 8007e70:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <USBD_Get_USB_Status+0x1c>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	08007e8f 	.word	0x08007e8f
 8007e80:	08007e95 	.word	0x08007e95
 8007e84:	08007e9b 	.word	0x08007e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8c:	e00b      	b.n	8007ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	73fb      	strb	r3, [r7, #15]
    break;
 8007e92:	e008      	b.n	8007ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
    break;
 8007e98:	e005      	b.n	8007ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e9e:	e002      	b.n	8007ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea4:	bf00      	nop
  }
  return usb_status;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <memset>:
 8007eb4:	4402      	add	r2, r0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d100      	bne.n	8007ebe <memset+0xa>
 8007ebc:	4770      	bx	lr
 8007ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ec2:	e7f9      	b.n	8007eb8 <memset+0x4>

08007ec4 <__libc_init_array>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8007efc <__libc_init_array+0x38>)
 8007ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8007f00 <__libc_init_array+0x3c>)
 8007eca:	1b64      	subs	r4, r4, r5
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	2600      	movs	r6, #0
 8007ed0:	42a6      	cmp	r6, r4
 8007ed2:	d109      	bne.n	8007ee8 <__libc_init_array+0x24>
 8007ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8007f04 <__libc_init_array+0x40>)
 8007ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8007f08 <__libc_init_array+0x44>)
 8007ed8:	f000 f818 	bl	8007f0c <_init>
 8007edc:	1b64      	subs	r4, r4, r5
 8007ede:	10a4      	asrs	r4, r4, #2
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	42a6      	cmp	r6, r4
 8007ee4:	d105      	bne.n	8007ef2 <__libc_init_array+0x2e>
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eec:	4798      	blx	r3
 8007eee:	3601      	adds	r6, #1
 8007ef0:	e7ee      	b.n	8007ed0 <__libc_init_array+0xc>
 8007ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef6:	4798      	blx	r3
 8007ef8:	3601      	adds	r6, #1
 8007efa:	e7f2      	b.n	8007ee2 <__libc_init_array+0x1e>
 8007efc:	08007f78 	.word	0x08007f78
 8007f00:	08007f78 	.word	0x08007f78
 8007f04:	08007f78 	.word	0x08007f78
 8007f08:	08007f7c 	.word	0x08007f7c

08007f0c <_init>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr

08007f18 <_fini>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr
