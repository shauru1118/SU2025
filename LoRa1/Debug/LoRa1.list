
LoRa1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef4  08007ef4  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef4  08007ef4  00008ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007efc  08007efc  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007efc  08007efc  00008efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f00  08007f00  00008f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007f04  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  200000fc  08008000  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  08008000  0000a0e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010438  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd1  00000000  00000000  00019564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  0001d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018366  00000000  00000000  0001dc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012494  00000000  00000000  00035fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088774  00000000  00000000  00048493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000d0c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d4220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007e90 	.word	0x08007e90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007e90 	.word	0x08007e90

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ca:	f000 fcb5 	bl	8000e38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ce:	f000 f8a7 	bl	8000620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d2:	f000 f947 	bl	8000764 <MX_GPIO_Init>
	MX_SPI1_Init();
 80004d6:	f000 f90f 	bl	80006f8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80004da:	f006 ff93 	bl	8007404 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_TogglePin(LED_ON_GPIO_Port, LED_ON_Pin);
 80004de:	2140      	movs	r1, #64	@ 0x40
 80004e0:	4849      	ldr	r0, [pc, #292]	@ (8000608 <main+0x144>)
 80004e2:	f000 ffee 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 80004e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ea:	4847      	ldr	r0, [pc, #284]	@ (8000608 <main+0x144>)
 80004ec:	f000 ffe9 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 80004f0:	2180      	movs	r1, #128	@ 0x80
 80004f2:	4845      	ldr	r0, [pc, #276]	@ (8000608 <main+0x144>)
 80004f4:	f000 ffe5 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 80004f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fc:	4842      	ldr	r0, [pc, #264]	@ (8000608 <main+0x144>)
 80004fe:	f000 ffe0 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 8000502:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000506:	f000 fd09 	bl	8000f1c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_ON_GPIO_Port, LED_ON_Pin);
 800050a:	2140      	movs	r1, #64	@ 0x40
 800050c:	483e      	ldr	r0, [pc, #248]	@ (8000608 <main+0x144>)
 800050e:	f000 ffd8 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 8000512:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000516:	483c      	ldr	r0, [pc, #240]	@ (8000608 <main+0x144>)
 8000518:	f000 ffd3 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 800051c:	2180      	movs	r1, #128	@ 0x80
 800051e:	483a      	ldr	r0, [pc, #232]	@ (8000608 <main+0x144>)
 8000520:	f000 ffcf 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 8000524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000528:	4837      	ldr	r0, [pc, #220]	@ (8000608 <main+0x144>)
 800052a:	f000 ffca 	bl	80014c2 <HAL_GPIO_TogglePin>

	while (!hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].is_used)
 800052e:	bf00      	nop
 8000530:	4b36      	ldr	r3, [pc, #216]	@ (800060c <main+0x148>)
 8000532:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0fb      	beq.n	8000530 <main+0x6c>
		;

	hCDC = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8000538:	4b34      	ldr	r3, [pc, #208]	@ (800060c <main+0x148>)
 800053a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800053e:	4a34      	ldr	r2, [pc, #208]	@ (8000610 <main+0x14c>)
 8000540:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	@ 0x64
 8000544:	f000 fcea 	bl	8000f1c <HAL_Delay>

	if (LORA_Init(&hspi1, SPI1_NSS_GPIO_Port, SPI1_NSS_Pin)) {
 8000548:	2210      	movs	r2, #16
 800054a:	4932      	ldr	r1, [pc, #200]	@ (8000614 <main+0x150>)
 800054c:	4832      	ldr	r0, [pc, #200]	@ (8000618 <main+0x154>)
 800054e:	f000 f999 	bl	8000884 <LORA_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d010      	beq.n	800057a <main+0xb6>
		LED_ERR_GPIO_Port->ODR |= LED_ERR_Pin;
 8000558:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <main+0x144>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a2a      	ldr	r2, [pc, #168]	@ (8000608 <main+0x144>)
 800055e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000562:	6153      	str	r3, [r2, #20]
		HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000568:	f000 fcd8 	bl	8000f1c <HAL_Delay>
		LED_ERR_GPIO_Port->ODR &= ~LED_ERR_Pin;
 800056c:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <main+0x144>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a25      	ldr	r2, [pc, #148]	@ (8000608 <main+0x144>)
 8000572:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000576:	6153      	str	r3, [r2, #20]
 8000578:	e00f      	b.n	800059a <main+0xd6>

	} else {
		LED_ON_GPIO_Port->ODR |= LED_ON_Pin;
 800057a:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <main+0x144>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a22      	ldr	r2, [pc, #136]	@ (8000608 <main+0x144>)
 8000580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000584:	6153      	str	r3, [r2, #20]
		HAL_Delay(500);
 8000586:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058a:	f000 fcc7 	bl	8000f1c <HAL_Delay>
		LED_ON_GPIO_Port->ODR &= ~LED_ON_Pin;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <main+0x144>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a1d      	ldr	r2, [pc, #116]	@ (8000608 <main+0x144>)
 8000594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000598:	6153      	str	r3, [r2, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t packetSize = LORA_ReceiveData(receiveData);
 800059a:	4820      	ldr	r0, [pc, #128]	@ (800061c <main+0x158>)
 800059c:	f000 fa58 	bl	8000a50 <LORA_ReceiveData>
 80005a0:	4603      	mov	r3, r0
 80005a2:	71fb      	strb	r3, [r7, #7]

		if (packetSize) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d009      	beq.n	80005be <main+0xfa>
			CDC_Transmit_FS(receiveData, packetSize);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	481a      	ldr	r0, [pc, #104]	@ (800061c <main+0x158>)
 80005b2:	f006 ffe5 	bl	8007580 <CDC_Transmit_FS>
			HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 80005b6:	2180      	movs	r1, #128	@ 0x80
 80005b8:	4813      	ldr	r0, [pc, #76]	@ (8000608 <main+0x144>)
 80005ba:	f000 ff82 	bl	80014c2 <HAL_GPIO_TogglePin>
		}

		if (hCDC->RxLength) {
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <main+0x14c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0e7      	beq.n	800059a <main+0xd6>
			LED_TX_GPIO_Port->ODR &= ~LED_TX_Pin;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0x144>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <main+0x144>)
 80005d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80005d4:	6153      	str	r3, [r2, #20]

			LORA_TransmitData(hCDC->RxBuffer, hCDC->RxLength);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <main+0x14c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <main+0x14c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	4610      	mov	r0, r2
 80005ec:	f000 fae4 	bl	8000bb8 <LORA_TransmitData>
			hCDC->RxLength = 0;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <main+0x14c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

			LED_TX_GPIO_Port->ODR |= LED_TX_Pin;
 80005fa:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <main+0x144>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a02      	ldr	r2, [pc, #8]	@ (8000608 <main+0x144>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000604:	6153      	str	r3, [r2, #20]
	while (1) {
 8000606:	e7c8      	b.n	800059a <main+0xd6>
 8000608:	40020400 	.word	0x40020400
 800060c:	20000288 	.word	0x20000288
 8000610:	20000270 	.word	0x20000270
 8000614:	40020000 	.word	0x40020000
 8000618:	20000118 	.word	0x20000118
 800061c:	20000170 	.word	0x20000170

08000620 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fc02 	bl	8007e38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a28      	ldr	r2, [pc, #160]	@ (80006f0 <SystemClock_Config+0xd0>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xd4>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 12;
 8000694:	230c      	movs	r3, #12
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000698:	2348      	movs	r3, #72	@ 0x48
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f975 	bl	8002998 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x98>
		Error_Handler();
 80006b4:	f000 f8e0 	bl	8000878 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fbd7 	bl	8002e88 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
		Error_Handler();
 80006e0:	f000 f8ca 	bl	8000878 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80006e4:	f002 fcb6 	bl	8003054 <HAL_RCC_EnableCSS>
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	@ 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_SPI1_Init+0x64>)
 80006fe:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <MX_SPI1_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000708:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_SPI1_Init+0x64>)
 8000724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000728:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_SPI1_Init+0x64>)
 800072c:	2218      	movs	r2, #24
 800072e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_SPI1_Init+0x64>)
 8000744:	220a      	movs	r2, #10
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_SPI1_Init+0x64>)
 800074a:	f002 fd7c 	bl	8003246 <HAL_SPI_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000754:	f000 f890 	bl	8000878 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000118 	.word	0x20000118
 8000760:	40013000 	.word	0x40013000

08000764 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b3a      	ldr	r3, [pc, #232]	@ (8000868 <MX_GPIO_Init+0x104>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a39      	ldr	r2, [pc, #228]	@ (8000868 <MX_GPIO_Init+0x104>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b37      	ldr	r3, [pc, #220]	@ (8000868 <MX_GPIO_Init+0x104>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a32      	ldr	r2, [pc, #200]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b30      	ldr	r3, [pc, #192]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a24      	ldr	r2, [pc, #144]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_GPIO_Init+0x104>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	481f      	ldr	r0, [pc, #124]	@ (800086c <MX_GPIO_Init+0x108>)
 80007f0:	f000 fe4e 	bl	8001490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS2_GPIO_Port, SPI1_NSS2_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	481d      	ldr	r0, [pc, #116]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007fa:	f000 fe49 	bl	8001490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_ON_Pin | LED_RX_Pin | LED_TX_Pin | LED_ERR_Pin,
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000804:	481b      	ldr	r0, [pc, #108]	@ (8000874 <MX_GPIO_Init+0x110>)
 8000806:	f000 fe43 	bl	8001490 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800080a:	2310      	movs	r3, #16
 800080c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4812      	ldr	r0, [pc, #72]	@ (800086c <MX_GPIO_Init+0x108>)
 8000822:	f000 fcb1 	bl	8001188 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS2_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS2_Pin;
 8000826:	2320      	movs	r3, #32
 8000828:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS2_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <MX_GPIO_Init+0x10c>)
 800083e:	f000 fca3 	bl	8001188 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_ON_Pin LED_RX_Pin LED_TX_Pin LED_ERR_Pin */
	GPIO_InitStruct.Pin = LED_ON_Pin | LED_RX_Pin | LED_TX_Pin | LED_ERR_Pin;
 8000842:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000846:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <MX_GPIO_Init+0x110>)
 800085c:	f000 fc94 	bl	8001188 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	@ 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800
 8000874:	40020400 	.word	0x40020400

08000878 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 8000892:	4a32      	ldr	r2, [pc, #200]	@ (800095c <LORA_Init+0xd8>)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 8000898:	4a31      	ldr	r2, [pc, #196]	@ (8000960 <LORA_Init+0xdc>)
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 800089e:	4a31      	ldr	r2, [pc, #196]	@ (8000964 <LORA_Init+0xe0>)
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 80008a4:	2042      	movs	r0, #66	@ 0x42
 80008a6:	f000 f861 	bl	800096c <_loraReadReg>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d001      	beq.n	80008b4 <LORA_Init+0x30>
		return 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e04e      	b.n	8000952 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 80008b4:	2100      	movs	r1, #0
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 f88e 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 80008bc:	2188      	movs	r1, #136	@ 0x88
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 f88a 	bl	80009d8 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <LORA_Init+0xe4>)
 80008c6:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4619      	mov	r1, r3
 80008d0:	2006      	movs	r0, #6
 80008d2:	f000 f881 	bl	80009d8 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 f87a 	bl	80009d8 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	2008      	movs	r0, #8
 80008ec:	f000 f874 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 80008f0:	21ff      	movs	r1, #255	@ 0xff
 80008f2:	2009      	movs	r0, #9
 80008f4:	f000 f870 	bl	80009d8 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 80008f8:	210b      	movs	r1, #11
 80008fa:	200b      	movs	r0, #11
 80008fc:	f000 f86c 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8000900:	2120      	movs	r1, #32
 8000902:	200c      	movs	r0, #12
 8000904:	f000 f868 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8000908:	21ff      	movs	r1, #255	@ 0xff
 800090a:	200e      	movs	r0, #14
 800090c:	f000 f864 	bl	80009d8 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8000910:	2100      	movs	r1, #0
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f860 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8000918:	2182      	movs	r1, #130	@ 0x82
 800091a:	201d      	movs	r0, #29
 800091c:	f000 f85c 	bl	80009d8 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8000920:	2170      	movs	r1, #112	@ 0x70
 8000922:	201e      	movs	r0, #30
 8000924:	f000 f858 	bl	80009d8 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8000928:	2100      	movs	r1, #0
 800092a:	2020      	movs	r0, #32
 800092c:	f000 f854 	bl	80009d8 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8000930:	2106      	movs	r1, #6
 8000932:	2021      	movs	r0, #33	@ 0x21
 8000934:	f000 f850 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8000938:	213c      	movs	r1, #60	@ 0x3c
 800093a:	2022      	movs	r0, #34	@ 0x22
 800093c:	f000 f84c 	bl	80009d8 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8000940:	213c      	movs	r1, #60	@ 0x3c
 8000942:	2023      	movs	r0, #35	@ 0x23
 8000944:	f000 f848 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000948:	2105      	movs	r1, #5
 800094a:	2001      	movs	r0, #1
 800094c:	f000 f844 	bl	80009d8 <_loraWriteReg>

	return 0;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000274 	.word	0x20000274
 8000960:	20000278 	.word	0x20000278
 8000964:	2000027c 	.word	0x2000027c
 8000968:	006c4000 	.word	0x006c4000

0800096c <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <_loraReadReg+0x60>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <_loraReadReg+0x64>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <_loraReadReg+0x60>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <_loraReadReg+0x68>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	1df9      	adds	r1, r7, #7
 8000992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000996:	2201      	movs	r2, #1
 8000998:	f002 fcde 	bl	8003358 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <_loraReadReg+0x68>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	1df9      	adds	r1, r7, #7
 80009a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a6:	2201      	movs	r2, #1
 80009a8:	f002 fe19 	bl	80035de <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <_loraReadReg+0x60>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <_loraReadReg+0x64>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <_loraReadReg+0x60>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	615a      	str	r2, [r3, #20]
	return reg;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000278 	.word	0x20000278
 80009d0:	2000027c 	.word	0x2000027c
 80009d4:	20000274 	.word	0x20000274

080009d8 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	460a      	mov	r2, r1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	4613      	mov	r3, r2
 80009e6:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <_loraWriteReg+0x6c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_loraWriteReg+0x70>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <_loraWriteReg+0x6c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	400a      	ands	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_loraWriteReg+0x74>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	1df9      	adds	r1, r7, #7
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	2201      	movs	r2, #1
 8000a14:	f002 fca0 	bl	8003358 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <_loraWriteReg+0x74>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	1db9      	adds	r1, r7, #6
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	2201      	movs	r2, #1
 8000a24:	f002 fc98 	bl	8003358 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <_loraWriteReg+0x6c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <_loraWriteReg+0x70>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <_loraWriteReg+0x6c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	615a      	str	r2, [r3, #20]
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027c 	.word	0x2000027c
 8000a4c:	20000274 	.word	0x20000274

08000a50 <LORA_ReceiveData>:

uint8_t LORA_ReceiveData(uint8_t *data) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	if (_loraReadReg(LORA_REG_FLAGS) & (LORA_FLAGS_RX_DONE)) {
 8000a58:	2012      	movs	r0, #18
 8000a5a:	f7ff ff87 	bl	800096c <_loraReadReg>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f000 809c 	beq.w	8000ba2 <LORA_ReceiveData+0x152>
		_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_RX_DONE);
 8000a6a:	2140      	movs	r1, #64	@ 0x40
 8000a6c:	2012      	movs	r0, #18
 8000a6e:	f7ff ffb3 	bl	80009d8 <_loraWriteReg>

		uint8_t packetSize = _loraReadReg(LORA_REG_RX_NB_BYTES);
 8000a72:	2013      	movs	r0, #19
 8000a74:	f7ff ff7a 	bl	800096c <_loraReadReg>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
		uint8_t curAddr = _loraReadReg(LORA_REG_FIFO_RX_CUR);
 8000a7c:	2010      	movs	r0, #16
 8000a7e:	f7ff ff75 	bl	800096c <_loraReadReg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73bb      	strb	r3, [r7, #14]
		uint8_t regFifo = LORA_REG_FIFO;
 8000a86:	2300      	movs	r3, #0
 8000a88:	733b      	strb	r3, [r7, #12]

		_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, curAddr);
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	200d      	movs	r0, #13
 8000a90:	f7ff ffa2 	bl	80009d8 <_loraWriteReg>

		uint8_t spaceLeft = 255 - curAddr;
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	737b      	strb	r3, [r7, #13]
		if (spaceLeft >= packetSize) {
 8000a9a:	7b7a      	ldrb	r2, [r7, #13]
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d327      	bcc.n	8000af2 <LORA_ReceiveData+0xa2>
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000aa2:	4b42      	ldr	r3, [pc, #264]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	4b41      	ldr	r3, [pc, #260]	@ (8000bb0 <LORA_ReceiveData+0x160>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb4 <LORA_ReceiveData+0x164>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	f107 010c 	add.w	r1, r7, #12
 8000ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f002 fc47 	bl	8003358 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize, 1000);
 8000aca:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <LORA_ReceiveData+0x164>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f002 fd81 	bl	80035de <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000adc:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <LORA_ReceiveData+0x160>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	e055      	b.n	8000b9e <LORA_ReceiveData+0x14e>
		} else {
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <LORA_ReceiveData+0x160>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	400a      	ands	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <LORA_ReceiveData+0x164>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 010c 	add.w	r1, r7, #12
 8000b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b14:	2201      	movs	r2, #1
 8000b16:	f002 fc1f 	bl	8003358 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, spaceLeft, 1000);
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <LORA_ReceiveData+0x164>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	7b7b      	ldrb	r3, [r7, #13]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f002 fd59 	bl	80035de <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <LORA_ReceiveData+0x160>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	615a      	str	r2, [r3, #20]

			_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	200d      	movs	r0, #13
 8000b44:	f7ff ff48 	bl	80009d8 <_loraWriteReg>

			_nssPort->ODR &= ~_nssPin; // nss 0
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <LORA_ReceiveData+0x160>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <LORA_ReceiveData+0x164>)
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	f107 010c 	add.w	r1, r7, #12
 8000b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f002 fbf4 	bl	8003358 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize - spaceLeft, 1000);
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <LORA_ReceiveData+0x164>)
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	f002 fd2a 	bl	80035de <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <LORA_ReceiveData+0x160>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <LORA_ReceiveData+0x15c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	615a      	str	r2, [r3, #20]
		}
		return packetSize;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	e000      	b.n	8000ba4 <LORA_ReceiveData+0x154>
	}
	return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000278 	.word	0x20000278
 8000bb0:	2000027c 	.word	0x2000027c
 8000bb4:	20000274 	.word	0x20000274

08000bb8 <LORA_TransmitData>:

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8000bc4:	21ff      	movs	r1, #255	@ 0xff
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff ff06 	bl	80009d8 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2022      	movs	r0, #34	@ 0x22
 8000bd2:	f7ff ff01 	bl	80009d8 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <LORA_TransmitData+0xa4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <LORA_TransmitData+0xa8>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	4619      	mov	r1, r3
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <LORA_TransmitData+0xa4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	400a      	ands	r2, r1
 8000bee:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <LORA_TransmitData+0xac>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	f107 010f 	add.w	r1, r7, #15
 8000bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f002 fbab 	bl	8003358 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <LORA_TransmitData+0xac>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f002 fba2 	bl	8003358 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <LORA_TransmitData+0xa4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <LORA_TransmitData+0xa8>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <LORA_TransmitData+0xa4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8000c28:	2103      	movs	r1, #3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff fed4 	bl	80009d8 <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 8000c30:	bf00      	nop
 8000c32:	2012      	movs	r0, #18
 8000c34:	f7ff fe9a 	bl	800096c <_loraReadReg>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f7      	beq.n	8000c32 <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8000c42:	2108      	movs	r1, #8
 8000c44:	2012      	movs	r0, #18
 8000c46:	f7ff fec7 	bl	80009d8 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fec3 	bl	80009d8 <_loraWriteReg>

}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000278 	.word	0x20000278
 8000c60:	2000027c 	.word	0x2000027c
 8000c64:	20000274 	.word	0x20000274

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <HAL_SPI_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12b      	bne.n	8000d32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2338      	movs	r3, #56	@ 0x38
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d22:	2305      	movs	r3, #5
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	f000 fa2b 	bl	8001188 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013000 	.word	0x40013000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000d4c:	f002 fa60 	bl	8003210 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x8>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f89b 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <OTG_FS_IRQHandler+0x10>)
 8000db2:	f000 fce4 	bl	800177e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200009e4 	.word	0x200009e4

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de8:	f7ff ffea 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f007 f819 	bl	8007e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb55 	bl	80004c4 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e28:	08007f04 	.word	0x08007f04
  ldr r2, =_sbss
 8000e2c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e30:	200010e8 	.word	0x200010e8

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f94f 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fefc 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f967 	bl	800116e <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f92f 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000280 	.word	0x20000280

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000280 	.word	0x20000280

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	@ (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	@ (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	@ (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff3e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff31 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	e159      	b.n	8001458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8148 	bne.w	8001452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d005      	beq.n	80011da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d130      	bne.n	800123c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 0201 	and.w	r2, r3, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d017      	beq.n	8001278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d123      	bne.n	80012cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0203 	and.w	r2, r3, #3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a2 	beq.w	8001452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <HAL_GPIO_Init+0x2e8>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a56      	ldr	r2, [pc, #344]	@ (8001470 <HAL_GPIO_Init+0x2e8>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b54      	ldr	r3, [pc, #336]	@ (8001470 <HAL_GPIO_Init+0x2e8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132a:	4a52      	ldr	r2, [pc, #328]	@ (8001474 <HAL_GPIO_Init+0x2ec>)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	@ (8001478 <HAL_GPIO_Init+0x2f0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x202>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a48      	ldr	r2, [pc, #288]	@ (800147c <HAL_GPIO_Init+0x2f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x1fe>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a47      	ldr	r2, [pc, #284]	@ (8001480 <HAL_GPIO_Init+0x2f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a46      	ldr	r2, [pc, #280]	@ (8001484 <HAL_GPIO_Init+0x2fc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x1f6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a45      	ldr	r2, [pc, #276]	@ (8001488 <HAL_GPIO_Init+0x300>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x1f2>
 8001376:	2304      	movs	r3, #4
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x204>
 800137a:	2307      	movs	r3, #7
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x204>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x204>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x204>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x204>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	@ (8001474 <HAL_GPIO_Init+0x2ec>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013aa:	4b38      	ldr	r3, [pc, #224]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ce:	4a2f      	ldr	r2, [pc, #188]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f8:	4a24      	ldr	r2, [pc, #144]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <HAL_GPIO_Init+0x304>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001422:	4a1a      	ldr	r2, [pc, #104]	@ (800148c <HAL_GPIO_Init+0x304>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_GPIO_Init+0x304>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_GPIO_Init+0x304>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f aea2 	bls.w	80011a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	041a      	lsls	r2, r3, #16
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43d9      	mvns	r1, r3
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	400b      	ands	r3, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e101      	b.n	800170c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f006 f974 	bl	8007810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001536:	d102      	bne.n	800153e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fd6d 	bl	8004022 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7c1a      	ldrb	r2, [r3, #16]
 8001550:	f88d 2000 	strb.w	r2, [sp]
 8001554:	3304      	adds	r3, #4
 8001556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001558:	f002 fc4c 	bl	8003df4 <USB_CoreInit>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0ce      	b.n	800170c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fd65 	bl	8004044 <USB_SetCurrentMode>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0bf      	b.n	800170c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e04a      	b.n	8001628 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3315      	adds	r3, #21
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3314      	adds	r3, #20
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	b298      	uxth	r0, r3
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	332e      	adds	r3, #46	@ 0x2e
 80015ce:	4602      	mov	r2, r0
 80015d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3318      	adds	r3, #24
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	331c      	adds	r3, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3320      	adds	r3, #32
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3324      	adds	r3, #36	@ 0x24
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	3301      	adds	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3af      	bcc.n	8001592 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e044      	b.n	80016c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	3301      	adds	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3b5      	bcc.n	8001638 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7c1a      	ldrb	r2, [r3, #16]
 80016d4:	f88d 2000 	strb.w	r2, [sp]
 80016d8:	3304      	adds	r3, #4
 80016da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016dc:	f002 fcfe 	bl	80040dc <USB_DevInit>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00c      	b.n	800170c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fd42 	bl	800518e <USB_DevDisconnect>

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_PCD_Start+0x1c>
 800172c:	2302      	movs	r3, #2
 800172e:	e022      	b.n	8001776 <HAL_PCD_Start+0x62>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001750:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fc4f 	bl	8004000 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fcf0 	bl	800514c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800177e:	b590      	push	{r4, r7, lr}
 8001780:	b08d      	sub	sp, #52	@ 0x34
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fdae 	bl	80052f6 <USB_GetMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 848c 	bne.w	80020ba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 fd12 	bl	80051d0 <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8482 	beq.w	80020b8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fcff 	bl	80051d0 <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d107      	bne.n	80017ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f002 0202 	and.w	r2, r2, #2
 80017ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fced 	bl	80051d0 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b10      	cmp	r3, #16
 80017fe:	d161      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0210 	bic.w	r2, r2, #16
 800180e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f003 020f 	and.w	r2, r3, #15
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	3304      	adds	r3, #4
 800182e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	0c5b      	lsrs	r3, r3, #17
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	2b02      	cmp	r3, #2
 800183a:	d124      	bne.n	8001886 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d035      	beq.n	80018b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	6a38      	ldr	r0, [r7, #32]
 800185c:	f003 fb24 	bl	8004ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186c:	441a      	add	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800187e:	441a      	add	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	e016      	b.n	80018b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	0c5b      	lsrs	r3, r3, #17
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	2b06      	cmp	r3, #6
 8001890:	d110      	bne.n	80018b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001898:	2208      	movs	r2, #8
 800189a:	4619      	mov	r1, r3
 800189c:	6a38      	ldr	r0, [r7, #32]
 800189e:	f003 fb03 	bl	8004ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ae:	441a      	add	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0210 	orr.w	r2, r2, #16
 80018c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fc81 	bl	80051d0 <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80018d8:	f040 80a7 	bne.w	8001a2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fc86 	bl	80051f6 <USB_ReadDevAllOutEpInterrupt>
 80018ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80018ec:	e099      	b.n	8001a22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 808e 	beq.w	8001a16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f003 fcaa 	bl	800525e <USB_ReadDevOutEPInterrupt>
 800190a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	2301      	movs	r3, #1
 8001926:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fea2 	bl	8002674 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001946:	461a      	mov	r2, r3
 8001948:	2308      	movs	r3, #8
 800194a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800194c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 ff78 	bl	8002844 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800196a:	461a      	mov	r2, r3
 800196c:	2310      	movs	r3, #16
 800196e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d030      	beq.n	80019dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	2b80      	cmp	r3, #128	@ 0x80
 8001984:	d109      	bne.n	800199a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001998:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	78db      	ldrb	r3, [r3, #3]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2200      	movs	r2, #0
 80019bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f006 f829 	bl	8007a1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d6:	461a      	mov	r2, r3
 80019d8:	2302      	movs	r3, #2
 80019da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019f2:	461a      	mov	r2, r3
 80019f4:	2320      	movs	r3, #32
 80019f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	3301      	adds	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f af62 	bne.w	80018ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fbce 	bl	80051d0 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a3e:	f040 80db 	bne.w	8001bf8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fbef 	bl	800522a <USB_ReadDevAllInEpInterrupt>
 8001a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001a52:	e0cd      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80c2 	beq.w	8001be4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fc15 	bl	800529a <USB_ReadDevInEPInterrupt>
 8001a70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d057      	beq.n	8001b2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	2201      	movs	r2, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69f9      	ldr	r1, [r7, #28]
 8001a98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aac:	461a      	mov	r2, r3
 8001aae:	2301      	movs	r3, #1
 8001ab0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	799b      	ldrb	r3, [r3, #6]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d132      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3320      	adds	r3, #32
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4403      	add	r3, r0
 8001ada:	331c      	adds	r3, #28
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4419      	add	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4403      	add	r3, r0
 8001aee:	3320      	adds	r3, #32
 8001af0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d113      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x3a2>
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3324      	adds	r3, #36	@ 0x24
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	f003 fc1c 	bl	8005358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f005 fef3 	bl	8007912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b42:	461a      	mov	r2, r3
 8001b44:	2308      	movs	r3, #8
 8001b46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2310      	movs	r3, #16
 8001b62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2340      	movs	r3, #64	@ 0x40
 8001b7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d023      	beq.n	8001bd2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b8c:	6a38      	ldr	r0, [r7, #32]
 8001b8e:	f002 fc09 	bl	80043a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	78db      	ldrb	r3, [r3, #3]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f005 ff40 	bl	8007a40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2302      	movs	r3, #2
 8001bd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001bdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fcbb 	bl	800255a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	3301      	adds	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f af2e 	bne.w	8001a54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fae7 	bl	80051d0 <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c0c:	d122      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d108      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fea2 	bl	8002980 <HAL_PCDEx_LPM_Callback>
 8001c3c:	e002      	b.n	8001c44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f005 fede 	bl	8007a00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fab9 	bl	80051d0 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c68:	d112      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f005 fe9a 	bl	80079b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001c8e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fa9b 	bl	80051d0 <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca4:	f040 80b7 	bne.w	8001e16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fb6e 	bl	80043a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ccc:	e046      	b.n	8001d5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ce0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001cfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d26:	0151      	lsls	r1, r2, #5
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d46:	0151      	lsls	r1, r2, #5
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	440a      	add	r2, r1
 8001d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	791b      	ldrb	r3, [r3, #4]
 8001d60:	461a      	mov	r2, r3
 8001d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d3b2      	bcc.n	8001cce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7bdb      	ldrb	r3, [r3, #15]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d016      	beq.n	8001db2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d94:	f043 030b 	orr.w	r3, r3, #11
 8001d98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001daa:	f043 030b 	orr.w	r3, r3, #11
 8001dae:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db0:	e015      	b.n	8001dde <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dc4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001dc8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dd8:	f043 030b 	orr.w	r3, r3, #11
 8001ddc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001df0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e00:	461a      	mov	r2, r3
 8001e02:	f003 faa9 	bl	8005358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 f9d8 	bl	80051d0 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e2a:	d123      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fa6e 	bl	8005312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fb2b 	bl	8004496 <USB_GetDevSpeed>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681c      	ldr	r4, [r3, #0]
 8001e4c:	f001 f9d4 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8001e50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e56:	461a      	mov	r2, r3
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f002 f82f 	bl	8003ebc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f005 fd7f 	bl	8007962 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 f9a9 	bl	80051d0 <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d10a      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f005 fd5c 	bl	8007946 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f002 0208 	and.w	r2, r2, #8
 8001e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 f994 	bl	80051d0 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eae:	2b80      	cmp	r3, #128	@ 0x80
 8001eb0:	d123      	bne.n	8001efa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec2:	e014      	b.n	8001eee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fb08 	bl	80024f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	3301      	adds	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d3e4      	bcc.n	8001ec4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f966 	bl	80051d0 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f0e:	d13c      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f10:	2301      	movs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f14:	e02b      	b.n	8001f6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	3318      	adds	r3, #24
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d115      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da12      	bge.n	8001f68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3317      	adds	r3, #23
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fac8 	bl	80024f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	791b      	ldrb	r3, [r3, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d3cd      	bcc.n	8001f16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f91e 	bl	80051d0 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f9e:	d156      	bne.n	800204e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa4:	e045      	b.n	8002032 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d12e      	bne.n	800202c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da2b      	bge.n	800202c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001fe0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d121      	bne.n	800202c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002024:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002028:	6053      	str	r3, [r2, #4]
            break;
 800202a:	e008      	b.n	800203e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	3301      	adds	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	791b      	ldrb	r3, [r3, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	4293      	cmp	r3, r2
 800203c:	d3b3      	bcc.n	8001fa6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800204c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 f8bc 	bl	80051d0 <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002062:	d10a      	bne.n	800207a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f005 fcfd 	bl	8007a64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 f8a6 	bl	80051d0 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d115      	bne.n	80020ba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f005 fced 	bl	8007a80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e000      	b.n	80020ba <HAL_PCD_IRQHandler+0x93c>
      return;
 80020b8:	bf00      	nop
    }
  }
}
 80020ba:	3734      	adds	r7, #52	@ 0x34
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}

080020c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_PCD_SetAddress+0x1a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e012      	b.n	8002100 <HAL_PCD_SetAddress+0x40>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 f805 	bl	8005100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	70fb      	strb	r3, [r7, #3]
 800211a:	460b      	mov	r3, r1
 800211c:	803b      	strh	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	da0f      	bge.n	800214e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 020f 	and.w	r2, r3, #15
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	3310      	adds	r3, #16
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	705a      	strb	r2, [r3, #1]
 800214c:	e00f      	b.n	800216e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800217a:	883a      	ldrh	r2, [r7, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	78ba      	ldrb	r2, [r7, #2]
 8002184:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002198:	78bb      	ldrb	r3, [r7, #2]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d102      	bne.n	80021a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_PCD_EP_Open+0xaa>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e00e      	b.n	80021d0 <HAL_PCD_EP_Open+0xc8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 f98d 	bl	80044e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80021ce:	7afb      	ldrb	r3, [r7, #11]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da0f      	bge.n	800220c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	f003 020f 	and.w	r2, r3, #15
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	3310      	adds	r3, #16
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	705a      	strb	r2, [r3, #1]
 800220a:	e00f      	b.n	800222c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	f003 020f 	and.w	r2, r3, #15
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_PCD_EP_Close+0x6e>
 8002242:	2302      	movs	r3, #2
 8002244:	e00e      	b.n	8002264 <HAL_PCD_EP_Close+0x8c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 f9cb 	bl	80045f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	460b      	mov	r3, r1
 800227a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ae:	7afb      	ldrb	r3, [r7, #11]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	799b      	ldrb	r3, [r3, #6]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	799b      	ldrb	r3, [r3, #6]
 80022d0:	461a      	mov	r2, r3
 80022d2:	6979      	ldr	r1, [r7, #20]
 80022d4:	f002 fa68 	bl	80047a8 <USB_EPStartXfer>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002304:	681b      	ldr	r3, [r3, #0]
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	460b      	mov	r3, r1
 8002320:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	f003 020f 	and.w	r2, r3, #15
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	3310      	adds	r3, #16
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4413      	add	r3, r2
 8002336:	3304      	adds	r3, #4
 8002338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2201      	movs	r2, #1
 8002350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	b2da      	uxtb	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	799b      	ldrb	r3, [r3, #6]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	799b      	ldrb	r3, [r3, #6]
 8002374:	461a      	mov	r2, r3
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	f002 fa16 	bl	80047a8 <USB_EPStartXfer>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	7912      	ldrb	r2, [r2, #4]
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04f      	b.n	8002444 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da0f      	bge.n	80023cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3310      	adds	r3, #16
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	3304      	adds	r3, #4
 80023c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
 80023ca:	e00d      	b.n	80023e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_PCD_EP_SetStall+0x82>
 8002404:	2302      	movs	r3, #2
 8002406:	e01d      	b.n	8002444 <HAL_PCD_EP_SetStall+0xbe>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fd9e 	bl	8004f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7999      	ldrb	r1, [r3, #6]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002434:	461a      	mov	r2, r3
 8002436:	f002 ff8f 	bl	8005358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	7912      	ldrb	r2, [r2, #4]
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e042      	b.n	80024f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800246a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	da0f      	bge.n	8002492 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	3310      	adds	r3, #16
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	3304      	adds	r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	705a      	strb	r2, [r3, #1]
 8002490:	e00f      	b.n	80024b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_PCD_EP_ClrStall+0x86>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e00e      	b.n	80024f0 <HAL_PCD_EP_ClrStall+0xa4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fda7 	bl	8005034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	da0c      	bge.n	8002526 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 020f 	and.w	r2, r3, #15
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	3310      	adds	r3, #16
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e00c      	b.n	8002540 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fbc6 	bl	8004cd8 <USB_EPStopXfer>
 800254c:	4603      	mov	r3, r0
 800254e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002550:	7afb      	ldrb	r3, [r7, #11]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b08a      	sub	sp, #40	@ 0x28
 800255e:	af02      	add	r7, sp, #8
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3310      	adds	r3, #16
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	429a      	cmp	r2, r3
 800258c:	d901      	bls.n	8002592 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d902      	bls.n	80025ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3303      	adds	r3, #3
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025b6:	e02a      	b.n	800260e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d902      	bls.n	80025d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3303      	adds	r3, #3
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4603      	mov	r3, r0
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f002 fc1b 	bl	8004e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	441a      	add	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	441a      	add	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	d809      	bhi.n	8002638 <PCD_WriteEmptyTxFifo+0xde>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800262c:	429a      	cmp	r2, r3
 800262e:	d203      	bcs.n	8002638 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1bf      	bne.n	80025b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	d811      	bhi.n	8002668 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	2201      	movs	r2, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	43db      	mvns	r3, r3
 800265e:	6939      	ldr	r1, [r7, #16]
 8002660:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002664:	4013      	ands	r3, r2
 8002666:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	333c      	adds	r3, #60	@ 0x3c
 800268c:	3304      	adds	r3, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	799b      	ldrb	r3, [r3, #6]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d17b      	bne.n	80027a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4a61      	ldr	r2, [pc, #388]	@ (800283c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	f240 80b9 	bls.w	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80b3 	beq.w	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026dc:	6093      	str	r3, [r2, #8]
 80026de:	e0a7      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	2320      	movs	r3, #32
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e098      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 8093 	bne.w	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	4a4b      	ldr	r2, [pc, #300]	@ (800283c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d90f      	bls.n	8002732 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002728:	461a      	mov	r2, r3
 800272a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800272e:	6093      	str	r3, [r2, #8]
 8002730:	e07e      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	3304      	adds	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	0159      	lsls	r1, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	440b      	add	r3, r1
 8002754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d114      	bne.n	8002794 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800277c:	461a      	mov	r2, r3
 800277e:	2101      	movs	r1, #1
 8002780:	f002 fdea 	bl	8005358 <USB_EP0_OutStart>
 8002784:	e006      	b.n	8002794 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	441a      	add	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f005 f89e 	bl	80078dc <HAL_PCD_DataOutStageCallback>
 80027a0:	e046      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4a26      	ldr	r2, [pc, #152]	@ (8002840 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d124      	bne.n	80027f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c0:	461a      	mov	r2, r3
 80027c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027c6:	6093      	str	r3, [r2, #8]
 80027c8:	e032      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	2320      	movs	r3, #32
 80027e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f005 f875 	bl	80078dc <HAL_PCD_DataOutStageCallback>
 80027f2:	e01d      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d114      	bne.n	8002824 <PCD_EP_OutXfrComplete_int+0x1b0>
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800281c:	461a      	mov	r2, r3
 800281e:	2100      	movs	r1, #0
 8002820:	f002 fd9a 	bl	8005358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f005 f856 	bl	80078dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	4f54300a 	.word	0x4f54300a
 8002840:	4f54310a 	.word	0x4f54310a

08002844 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	333c      	adds	r3, #60	@ 0x3c
 800285c:	3304      	adds	r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <PCD_EP_OutSetupPacket_int+0x88>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d90e      	bls.n	8002898 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002890:	461a      	mov	r2, r3
 8002892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002896:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f005 f80d 	bl	80078b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <PCD_EP_OutSetupPacket_int+0x88>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d90c      	bls.n	80028c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	799b      	ldrb	r3, [r3, #6]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d108      	bne.n	80028c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028b8:	461a      	mov	r2, r3
 80028ba:	2101      	movs	r1, #1
 80028bc:	f002 fd4c 	bl	8005358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	4f54300a 	.word	0x4f54300a

080028d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
 80028dc:	4613      	mov	r3, r2
 80028de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028ee:	883b      	ldrh	r3, [r7, #0]
 80028f0:	0419      	lsls	r1, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80028fc:	e028      	b.n	8002950 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4413      	add	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e00d      	b.n	800292e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	3340      	adds	r3, #64	@ 0x40
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4413      	add	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	3301      	adds	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	3b01      	subs	r3, #1
 8002934:	429a      	cmp	r2, r3
 8002936:	d3ec      	bcc.n	8002912 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002938:	883b      	ldrh	r3, [r7, #0]
 800293a:	0418      	lsls	r0, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	3b01      	subs	r3, #1
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	4302      	orrs	r2, r0
 8002948:	3340      	adds	r3, #64	@ 0x40
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e267      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d075      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b6:	4b88      	ldr	r3, [pc, #544]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d00c      	beq.n	80029dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b85      	ldr	r3, [pc, #532]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d112      	bne.n	80029f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4b82      	ldr	r3, [pc, #520]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05b      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x108>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d157      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e242      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x74>
 80029fe:	4b76      	ldr	r3, [pc, #472]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e01d      	b.n	8002a48 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b70      	ldr	r3, [pc, #448]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6c      	ldr	r2, [pc, #432]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0xb0>
 8002a30:	4b69      	ldr	r3, [pc, #420]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a68      	ldr	r2, [pc, #416]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4b66      	ldr	r3, [pc, #408]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a65      	ldr	r2, [pc, #404]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe fa58 	bl	8000f04 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe fa54 	bl	8000f04 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e207      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0xc0>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fa44 	bl	8000f04 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe fa40 	bl	8000f04 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1f3      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0xe8>
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d063      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aae:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d11c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b44      	ldr	r3, [pc, #272]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d116      	bne.n	8002b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	4b41      	ldr	r3, [pc, #260]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x152>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e1c7      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4937      	ldr	r1, [pc, #220]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	e03a      	b.n	8002b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b08:	4b34      	ldr	r3, [pc, #208]	@ (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe f9f9 	bl	8000f04 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b16:	f7fe f9f5 	bl	8000f04 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e1a8      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4925      	ldr	r1, [pc, #148]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4a:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe f9d8 	bl	8000f04 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe f9d4 	bl	8000f04 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e187      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d036      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCC_OscConfig+0x248>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe f9b8 	bl	8000f04 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe f9b4 	bl	8000f04 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e167      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x200>
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_OscConfig+0x248>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe f9a1 	bl	8000f04 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	e00e      	b.n	8002be4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7fe f99d 	bl	8000f04 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d907      	bls.n	8002be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e150      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	42470000 	.word	0x42470000
 8002be0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ea      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8097 	beq.w	8002d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b81      	ldr	r3, [pc, #516]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b7d      	ldr	r3, [pc, #500]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a7c      	ldr	r2, [pc, #496]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b77      	ldr	r3, [pc, #476]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b74      	ldr	r3, [pc, #464]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a73      	ldr	r2, [pc, #460]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe f95d 	bl	8000f04 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fe f959 	bl	8000f04 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e10c      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b6a      	ldr	r3, [pc, #424]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2ea>
 8002c74:	4b64      	ldr	r3, [pc, #400]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a63      	ldr	r2, [pc, #396]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c80:	e01c      	b.n	8002cbc <HAL_RCC_OscConfig+0x324>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x30c>
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c96:	4b5c      	ldr	r3, [pc, #368]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0x324>
 8002ca4:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb0:	4b55      	ldr	r3, [pc, #340]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a54      	ldr	r2, [pc, #336]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe f91e 	bl	8000f04 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe f91a 	bl	8000f04 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0cb      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce2:	4b49      	ldr	r3, [pc, #292]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ee      	beq.n	8002ccc <HAL_RCC_OscConfig+0x334>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f908 	bl	8000f04 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe f904 	bl	8000f04 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0b5      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ee      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	4a38      	ldr	r2, [pc, #224]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a1 	beq.w	8002e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d36:	4b34      	ldr	r3, [pc, #208]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d05c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d141      	bne.n	8002dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b31      	ldr	r3, [pc, #196]	@ (8002e10 <HAL_RCC_OscConfig+0x478>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe f8d8 	bl	8000f04 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe f8d4 	bl	8000f04 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e087      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x478>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe f8ad 	bl	8000f04 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe f8a9 	bl	8000f04 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e05c      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x416>
 8002dcc:	e054      	b.n	8002e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_RCC_OscConfig+0x478>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f896 	bl	8000f04 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe f892 	bl	8000f04 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e045      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x444>
 8002dfa:	e03d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e038      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x4ec>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d028      	beq.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d121      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d11a      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d111      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0cc      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b68      	ldr	r3, [pc, #416]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d90c      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b65      	ldr	r3, [pc, #404]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d044      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d119      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b3f      	ldr	r3, [pc, #252]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	4b3b      	ldr	r3, [pc, #236]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e067      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4934      	ldr	r1, [pc, #208]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7fd ffc4 	bl	8000f04 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fd ffc0 	bl	8000f04 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e04f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d20c      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f82d 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	490a      	ldr	r1, [pc, #40]	@ (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd ff24 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00
 8003044:	40023800 	.word	0x40023800
 8003048:	08007ee4 	.word	0x08007ee4
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_RCC_EnableCSS+0x14>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	4247004c 	.word	0x4247004c

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003070:	b090      	sub	sp, #64	@ 0x40
 8003072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	@ 0x34
 8003078:	2300      	movs	r3, #0
 800307a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800307c:	2300      	movs	r3, #0
 800307e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003084:	4b59      	ldr	r3, [pc, #356]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d00d      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x40>
 8003090:	2b08      	cmp	r3, #8
 8003092:	f200 80a1 	bhi.w	80031d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x34>
 800309a:	2b04      	cmp	r3, #4
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800309e:	e09b      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80030a2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80030a4:	e09b      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a6:	4b53      	ldr	r3, [pc, #332]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030aa:	e098      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ac:	4b4f      	ldr	r3, [pc, #316]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x180>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030b6:	4b4d      	ldr	r3, [pc, #308]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x180>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d028      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c2:	4b4a      	ldr	r3, [pc, #296]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x180>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	2200      	movs	r2, #0
 80030ca:	623b      	str	r3, [r7, #32]
 80030cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030d4:	2100      	movs	r1, #0
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030d8:	fb03 f201 	mul.w	r2, r3, r1
 80030dc:	2300      	movs	r3, #0
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	4a43      	ldr	r2, [pc, #268]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030e6:	fba0 1202 	umull	r1, r2, r0, r2
 80030ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ec:	460a      	mov	r2, r1
 80030ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f2:	4413      	add	r3, r2
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f8:	2200      	movs	r2, #0
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	61fa      	str	r2, [r7, #28]
 80030fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003106:	f7fd f865 	bl	80001d4 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4613      	mov	r3, r2
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003112:	e053      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003114:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	2200      	movs	r2, #0
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	617a      	str	r2, [r7, #20]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003126:	f04f 0b00 	mov.w	fp, #0
 800312a:	4652      	mov	r2, sl
 800312c:	465b      	mov	r3, fp
 800312e:	f04f 0000 	mov.w	r0, #0
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	0159      	lsls	r1, r3, #5
 8003138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313c:	0150      	lsls	r0, r2, #5
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	ebb2 080a 	subs.w	r8, r2, sl
 8003146:	eb63 090b 	sbc.w	r9, r3, fp
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003156:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800315a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800315e:	ebb2 0408 	subs.w	r4, r2, r8
 8003162:	eb63 0509 	sbc.w	r5, r3, r9
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	00eb      	lsls	r3, r5, #3
 8003170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003174:	00e2      	lsls	r2, r4, #3
 8003176:	4614      	mov	r4, r2
 8003178:	461d      	mov	r5, r3
 800317a:	eb14 030a 	adds.w	r3, r4, sl
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	eb45 030b 	adc.w	r3, r5, fp
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003192:	4629      	mov	r1, r5
 8003194:	028b      	lsls	r3, r1, #10
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800319c:	4621      	mov	r1, r4
 800319e:	028a      	lsls	r2, r1, #10
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	2200      	movs	r2, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	60fa      	str	r2, [r7, #12]
 80031ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b0:	f7fd f810 	bl	80001d4 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80031cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031d6:	e002      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80031da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3740      	adds	r7, #64	@ 0x40
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	016e3600 	.word	0x016e3600

080031f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCC_GetHCLKFreq+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321c:	2b80      	cmp	r3, #128	@ 0x80
 800321e:	d104      	bne.n	800322a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003220:	f000 f80a 	bl	8003238 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003224:	4b03      	ldr	r3, [pc, #12]	@ (8003234 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	701a      	strb	r2, [r3, #0]
  }
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	4002380e 	.word	0x4002380e

08003238 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e07b      	b.n	8003350 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d108      	bne.n	8003272 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003268:	d009      	beq.n	800327e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	61da      	str	r2, [r3, #28]
 8003270:	e005      	b.n	800327e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd fd0d 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	ea42 0103 	orr.w	r1, r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	f003 0104 	and.w	r1, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	f003 0210 	and.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_SPI_Transmit+0x22>
 8003376:	2302      	movs	r3, #2
 8003378:	e12d      	b.n	80035d6 <HAL_SPI_Transmit+0x27e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003382:	f7fd fdbf 	bl	8000f04 <HAL_GetTick>
 8003386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800339c:	e116      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Transmit+0x52>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ae:	e10d      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2203      	movs	r2, #3
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f6:	d10f      	bne.n	8003418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003422:	2b40      	cmp	r3, #64	@ 0x40
 8003424:	d007      	beq.n	8003436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800343e:	d14f      	bne.n	80034e0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_SPI_Transmit+0xf6>
 8003448:	8afb      	ldrh	r3, [r7, #22]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d142      	bne.n	80034d4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003472:	e02f      	b.n	80034d4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d112      	bne.n	80034a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034a6:	e015      	b.n	80034d4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7fd fd2c 	bl	8000f04 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d803      	bhi.n	80034c0 <HAL_SPI_Transmit+0x168>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x16e>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80034d2:	e07b      	b.n	80035cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ca      	bne.n	8003474 <HAL_SPI_Transmit+0x11c>
 80034de:	e050      	b.n	8003582 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_SPI_Transmit+0x196>
 80034e8:	8afb      	ldrh	r3, [r7, #22]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d144      	bne.n	8003578 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003514:	e030      	b.n	8003578 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d113      	bne.n	800354c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	86da      	strh	r2, [r3, #54]	@ 0x36
 800354a:	e015      	b.n	8003578 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354c:	f7fd fcda 	bl	8000f04 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d803      	bhi.n	8003564 <HAL_SPI_Transmit+0x20c>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d102      	bne.n	800356a <HAL_SPI_Transmit+0x212>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003576:	e029      	b.n	80035cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1c9      	bne.n	8003516 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fbe0 	bl	8003d4c <SPI_EndRxTxTransaction>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e003      	b.n	80035cc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d002      	beq.n	8003604 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003602:	e0fb      	b.n	80037fc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360c:	d112      	bne.n	8003634 <HAL_SPI_Receive+0x56>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10e      	bne.n	8003634 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2204      	movs	r2, #4
 800361a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f8ef 	bl	800380e <HAL_SPI_TransmitReceive>
 8003630:	4603      	mov	r3, r0
 8003632:	e0e8      	b.n	8003806 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Receive+0x64>
 800363e:	2302      	movs	r3, #2
 8003640:	e0e1      	b.n	8003806 <HAL_SPI_Receive+0x228>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800364a:	f7fd fc5b 	bl	8000f04 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Receive+0x7e>
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003660:	e0cc      	b.n	80037fc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2204      	movs	r2, #4
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a8:	d10f      	bne.n	80036ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d007      	beq.n	80036e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d16a      	bne.n	80037c6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036f0:	e032      	b.n	8003758 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d115      	bne.n	800372c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f103 020c 	add.w	r2, r3, #12
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800372a:	e015      	b.n	8003758 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372c:	f7fd fbea 	bl	8000f04 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d803      	bhi.n	8003744 <HAL_SPI_Receive+0x166>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d102      	bne.n	800374a <HAL_SPI_Receive+0x16c>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003756:	e051      	b.n	80037fc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1c7      	bne.n	80036f2 <HAL_SPI_Receive+0x114>
 8003762:	e035      	b.n	80037d0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d113      	bne.n	800379a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	b292      	uxth	r2, r2
 800377e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003784:	1c9a      	adds	r2, r3, #2
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003798:	e015      	b.n	80037c6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800379a:	f7fd fbb3 	bl	8000f04 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d803      	bhi.n	80037b2 <HAL_SPI_Receive+0x1d4>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d102      	bne.n	80037b8 <HAL_SPI_Receive+0x1da>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80037c4:	e01a      	b.n	80037fc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1c9      	bne.n	8003764 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fa53 	bl	8003c80 <SPI_EndRxTransaction>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
 80037f2:	e003      	b.n	80037fc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b08c      	sub	sp, #48	@ 0x30
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800381c:	2301      	movs	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x26>
 8003830:	2302      	movs	r3, #2
 8003832:	e198      	b.n	8003b66 <HAL_SPI_TransmitReceive+0x358>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800383c:	f7fd fb62 	bl	8000f04 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003848:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003856:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800385a:	2b01      	cmp	r3, #1
 800385c:	d00f      	beq.n	800387e <HAL_SPI_TransmitReceive+0x70>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003864:	d107      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x68>
 800386e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003872:	2b04      	cmp	r3, #4
 8003874:	d003      	beq.n	800387e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800387c:	e16d      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_SPI_TransmitReceive+0x82>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_TransmitReceive+0x82>
 800388a:	887b      	ldrh	r3, [r7, #2]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003896:	e160      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d003      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2205      	movs	r2, #5
 80038a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d007      	beq.n	8003900 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003908:	d17c      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x10a>
 8003912:	8b7b      	ldrh	r3, [r7, #26]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d16a      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	881a      	ldrh	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	1c9a      	adds	r2, r3, #2
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	e057      	b.n	80039ee <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	d11b      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x176>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x176>
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d113      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d119      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x1b8>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d014      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	b292      	uxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	1c9a      	adds	r2, r3, #2
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039c2:	2301      	movs	r3, #1
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039c6:	f7fd fa9d 	bl	8000f04 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d80b      	bhi.n	80039ee <HAL_SPI_TransmitReceive+0x1e0>
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d007      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80039ec:	e0b5      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1a2      	bne.n	800393e <HAL_SPI_TransmitReceive+0x130>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d19d      	bne.n	800393e <HAL_SPI_TransmitReceive+0x130>
 8003a02:	e080      	b.n	8003b06 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0x204>
 8003a0c:	8b7b      	ldrh	r3, [r7, #26]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d16f      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a38:	e05b      	b.n	8003af2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d11c      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x274>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x274>
 8003a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d114      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d119      	bne.n	8003ac4 <HAL_SPI_TransmitReceive+0x2b6>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d014      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ac4:	f7fd fa1e 	bl	8000f04 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d803      	bhi.n	8003adc <HAL_SPI_TransmitReceive+0x2ce>
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x2d4>
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003af0:	e033      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d19e      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x22c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d199      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f91e 	bl	8003d4c <SPI_EndRxTxTransaction>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003b22:	e01a      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b50:	e003      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003b62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3730      	adds	r7, #48	@ 0x30
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b80:	f7fd f9c0 	bl	8000f04 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b90:	f7fd f9b8 	bl	8000f04 <HAL_GetTick>
 8003b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b96:	4b39      	ldr	r3, [pc, #228]	@ (8003c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	0d1b      	lsrs	r3, r3, #20
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	e054      	b.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d050      	beq.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb0:	f7fd f9a8 	bl	8000f04 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d902      	bls.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13d      	bne.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bde:	d111      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be8:	d004      	beq.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d107      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0c:	d10f      	bne.n	8003c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e017      	b.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d19b      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c94:	d111      	bne.n	8003cba <SPI_EndRxTransaction+0x3a>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9e:	d004      	beq.n	8003caa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca8:	d107      	bne.n	8003cba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cc2:	d12a      	bne.n	8003d1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ccc:	d012      	beq.n	8003cf4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	@ 0x80
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff ff49 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02d      	beq.n	8003d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e026      	b.n	8003d42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff ff36 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01a      	beq.n	8003d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e013      	b.n	8003d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2101      	movs	r1, #1
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ff23 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	2102      	movs	r1, #2
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff ff04 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e032      	b.n	8003de4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <SPI_EndRxTxTransaction+0xa0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <SPI_EndRxTxTransaction+0xa4>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	0d5b      	lsrs	r3, r3, #21
 8003d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d9c:	d112      	bne.n	8003dc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	@ 0x80
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff fee1 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d016      	beq.n	8003de2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e00f      	b.n	8003de4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d0f2      	beq.n	8003dc4 <SPI_EndRxTxTransaction+0x78>
 8003dde:	e000      	b.n	8003de2 <SPI_EndRxTxTransaction+0x96>
        break;
 8003de0:	bf00      	nop
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000000 	.word	0x20000000
 8003df0:	165e9f81 	.word	0x165e9f81

08003df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df4:	b084      	sub	sp, #16
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	f107 001c 	add.w	r0, r7, #28
 8003e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d123      	bne.n	8003e56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f001 fae2 	bl	8005414 <USB_CoreReset>
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	e01b      	b.n	8003e8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f001 fad6 	bl	8005414 <USB_CoreReset>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e80:	e005      	b.n	8003e8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e8e:	7fbb      	ldrb	r3, [r7, #30]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10b      	bne.n	8003eac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f043 0206 	orr.w	r2, r3, #6
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eb8:	b004      	add	sp, #16
 8003eba:	4770      	bx	lr

08003ebc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d165      	bne.n	8003f9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a41      	ldr	r2, [pc, #260]	@ (8003fd8 <USB_SetTurnaroundTime+0x11c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d906      	bls.n	8003ee6 <USB_SetTurnaroundTime+0x2a>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a40      	ldr	r2, [pc, #256]	@ (8003fdc <USB_SetTurnaroundTime+0x120>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d202      	bcs.n	8003ee6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e062      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fdc <USB_SetTurnaroundTime+0x120>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d306      	bcc.n	8003efc <USB_SetTurnaroundTime+0x40>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe0 <USB_SetTurnaroundTime+0x124>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d202      	bcs.n	8003efc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ef6:	230e      	movs	r3, #14
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e057      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a38      	ldr	r2, [pc, #224]	@ (8003fe0 <USB_SetTurnaroundTime+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d306      	bcc.n	8003f12 <USB_SetTurnaroundTime+0x56>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a37      	ldr	r2, [pc, #220]	@ (8003fe4 <USB_SetTurnaroundTime+0x128>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d202      	bcs.n	8003f12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f0c:	230d      	movs	r3, #13
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e04c      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4a33      	ldr	r2, [pc, #204]	@ (8003fe4 <USB_SetTurnaroundTime+0x128>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d306      	bcc.n	8003f28 <USB_SetTurnaroundTime+0x6c>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4a32      	ldr	r2, [pc, #200]	@ (8003fe8 <USB_SetTurnaroundTime+0x12c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d802      	bhi.n	8003f28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f22:	230c      	movs	r3, #12
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	e041      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe8 <USB_SetTurnaroundTime+0x12c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d906      	bls.n	8003f3e <USB_SetTurnaroundTime+0x82>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a2e      	ldr	r2, [pc, #184]	@ (8003fec <USB_SetTurnaroundTime+0x130>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d802      	bhi.n	8003f3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f38:	230b      	movs	r3, #11
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e036      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4a2a      	ldr	r2, [pc, #168]	@ (8003fec <USB_SetTurnaroundTime+0x130>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d906      	bls.n	8003f54 <USB_SetTurnaroundTime+0x98>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a29      	ldr	r2, [pc, #164]	@ (8003ff0 <USB_SetTurnaroundTime+0x134>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d802      	bhi.n	8003f54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f4e:	230a      	movs	r3, #10
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e02b      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <USB_SetTurnaroundTime+0x134>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d906      	bls.n	8003f6a <USB_SetTurnaroundTime+0xae>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a25      	ldr	r2, [pc, #148]	@ (8003ff4 <USB_SetTurnaroundTime+0x138>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d202      	bcs.n	8003f6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f64:	2309      	movs	r3, #9
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e020      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <USB_SetTurnaroundTime+0x138>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d306      	bcc.n	8003f80 <USB_SetTurnaroundTime+0xc4>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a20      	ldr	r2, [pc, #128]	@ (8003ff8 <USB_SetTurnaroundTime+0x13c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d802      	bhi.n	8003f80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e015      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <USB_SetTurnaroundTime+0x13c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d906      	bls.n	8003f96 <USB_SetTurnaroundTime+0xda>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <USB_SetTurnaroundTime+0x140>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d202      	bcs.n	8003f96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f90:	2307      	movs	r3, #7
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e00a      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f96:	2306      	movs	r3, #6
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e007      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fa2:	2309      	movs	r3, #9
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e001      	b.n	8003fac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fa8:	2309      	movs	r3, #9
 8003faa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	029b      	lsls	r3, r3, #10
 8003fc0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	00d8acbf 	.word	0x00d8acbf
 8003fdc:	00e4e1c0 	.word	0x00e4e1c0
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	01067380 	.word	0x01067380
 8003fe8:	011a499f 	.word	0x011a499f
 8003fec:	01312cff 	.word	0x01312cff
 8003ff0:	014ca43f 	.word	0x014ca43f
 8003ff4:	016e3600 	.word	0x016e3600
 8003ff8:	01a6ab1f 	.word	0x01a6ab1f
 8003ffc:	01e84800 	.word	0x01e84800

08004000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d115      	bne.n	8004092 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004072:	200a      	movs	r0, #10
 8004074:	f7fc ff52 	bl	8000f1c <HAL_Delay>
      ms += 10U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	330a      	adds	r3, #10
 800407c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f001 f939 	bl	80052f6 <USB_GetMode>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d01e      	beq.n	80040c8 <USB_SetCurrentMode+0x84>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2bc7      	cmp	r3, #199	@ 0xc7
 800408e:	d9f0      	bls.n	8004072 <USB_SetCurrentMode+0x2e>
 8004090:	e01a      	b.n	80040c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d115      	bne.n	80040c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040a4:	200a      	movs	r0, #10
 80040a6:	f7fc ff39 	bl	8000f1c <HAL_Delay>
      ms += 10U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	330a      	adds	r3, #10
 80040ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f001 f920 	bl	80052f6 <USB_GetMode>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <USB_SetCurrentMode+0x84>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2bc7      	cmp	r3, #199	@ 0xc7
 80040c0:	d9f0      	bls.n	80040a4 <USB_SetCurrentMode+0x60>
 80040c2:	e001      	b.n	80040c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e005      	b.n	80040d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80040cc:	d101      	bne.n	80040d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040dc:	b084      	sub	sp, #16
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80040ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e009      	b.n	8004110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3340      	adds	r3, #64	@ 0x40
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b0e      	cmp	r3, #14
 8004114:	d9f2      	bls.n	80040fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004116:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800411a:	2b00      	cmp	r3, #0
 800411c:	d11c      	bne.n	8004158 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38
 8004156:	e00b      	b.n	8004170 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004176:	461a      	mov	r2, r3
 8004178:	2300      	movs	r3, #0
 800417a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800417c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10d      	bne.n	80041a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800418c:	2100      	movs	r1, #0
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f968 	bl	8004464 <USB_SetDevSpeed>
 8004194:	e008      	b.n	80041a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004196:	2101      	movs	r1, #1
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f963 	bl	8004464 <USB_SetDevSpeed>
 800419e:	e003      	b.n	80041a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041a0:	2103      	movs	r1, #3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f95e 	bl	8004464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041a8:	2110      	movs	r1, #16
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8fa 	bl	80043a4 <USB_FlushTxFifo>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f924 	bl	8004408 <USB_FlushRxFifo>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d0:	461a      	mov	r2, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041dc:	461a      	mov	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e043      	b.n	800427c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004206:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800420a:	d118      	bne.n	800423e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e013      	b.n	8004250 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e008      	b.n	8004250 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425c:	461a      	mov	r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426e:	461a      	mov	r2, r3
 8004270:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3301      	adds	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004280:	461a      	mov	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4293      	cmp	r3, r2
 8004286:	d3b5      	bcc.n	80041f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	e043      	b.n	8004316 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042a4:	d118      	bne.n	80042d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e013      	b.n	80042ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e008      	b.n	80042ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800430e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3301      	adds	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800431a:	461a      	mov	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4293      	cmp	r3, r2
 8004320:	d3b5      	bcc.n	800428e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004334:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004342:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004344:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <USB_DevInit+0x2c4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004364:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f043 0208 	orr.w	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004378:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004388:	f043 0304 	orr.w	r3, r3, #4
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800439c:	b004      	add	sp, #16
 800439e:	4770      	bx	lr
 80043a0:	803c3800 	.word	0x803c3800

080043a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043be:	d901      	bls.n	80043c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e01b      	b.n	80043fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	daf2      	bge.n	80043b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	019b      	lsls	r3, r3, #6
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3301      	adds	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043e8:	d901      	bls.n	80043ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e006      	b.n	80043fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d0f0      	beq.n	80043dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004420:	d901      	bls.n	8004426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e018      	b.n	8004458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	daf2      	bge.n	8004414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2210      	movs	r2, #16
 8004436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004444:	d901      	bls.n	800444a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e006      	b.n	8004458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d0f0      	beq.n	8004438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0306 	and.w	r3, r3, #6
 80044ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
 80044ba:	e00a      	b.n	80044d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d002      	beq.n	80044c8 <USB_GetDevSpeed+0x32>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b06      	cmp	r3, #6
 80044c6:	d102      	bne.n	80044ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044c8:	2302      	movs	r3, #2
 80044ca:	75fb      	strb	r3, [r7, #23]
 80044cc:	e001      	b.n	80044d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044ce:	230f      	movs	r3, #15
 80044d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d13a      	bne.n	8004572 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	b29b      	uxth	r3, r3
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800451a:	4313      	orrs	r3, r2
 800451c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d155      	bne.n	80045e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	791b      	ldrb	r3, [r3, #4]
 800454e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004550:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	059b      	lsls	r3, r3, #22
 8004556:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004558:	4313      	orrs	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	e036      	b.n	80045e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	2101      	movs	r1, #1
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004590:	4313      	orrs	r3, r2
 8004592:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11a      	bne.n	80045e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	791b      	ldrb	r3, [r3, #4]
 80045c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045c6:	430b      	orrs	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d161      	bne.n	80046d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800461e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004622:	d11f      	bne.n	8004664 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004642:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800465e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	b29b      	uxth	r3, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004684:	4013      	ands	r3, r2
 8004686:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046a8:	4013      	ands	r3, r2
 80046aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	0159      	lsls	r1, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	440b      	add	r3, r1
 80046c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c6:	4619      	mov	r1, r3
 80046c8:	4b35      	ldr	r3, [pc, #212]	@ (80047a0 <USB_DeactivateEndpoint+0x1b0>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
 80046ce:	e060      	b.n	8004792 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046e6:	d11f      	bne.n	8004728 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004706:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	43db      	mvns	r3, r3
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004748:	4013      	ands	r3, r2
 800474a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	43db      	mvns	r3, r3
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800476c:	4013      	ands	r3, r2
 800476e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	0159      	lsls	r1, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	440b      	add	r3, r1
 8004786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478a:	4619      	mov	r1, r3
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <USB_DeactivateEndpoint+0x1b4>)
 800478e:	4013      	ands	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	ec337800 	.word	0xec337800
 80047a4:	eff37800 	.word	0xeff37800

080047a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 817a 	bne.w	8004abe <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d132      	bne.n	8004838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004830:	0cdb      	lsrs	r3, r3, #19
 8004832:	04db      	lsls	r3, r3, #19
 8004834:	6113      	str	r3, [r2, #16]
 8004836:	e092      	b.n	800495e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004852:	0cdb      	lsrs	r3, r3, #19
 8004854:	04db      	lsls	r3, r3, #19
 8004856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004872:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004876:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800487a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11a      	bne.n	80048b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d903      	bls.n	8004896 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048b4:	6113      	str	r3, [r2, #16]
 80048b6:	e01b      	b.n	80048f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6919      	ldr	r1, [r3, #16]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	440b      	add	r3, r1
 80048d0:	1e59      	subs	r1, r3, #1
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048dc:	4ba2      	ldr	r3, [pc, #648]	@ (8004b68 <USB_EPStartXfer+0x3c0>)
 80048de:	400b      	ands	r3, r1
 80048e0:	69b9      	ldr	r1, [r7, #24]
 80048e2:	0148      	lsls	r0, r1, #5
 80048e4:	69f9      	ldr	r1, [r7, #28]
 80048e6:	4401      	add	r1, r0
 80048e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80048ec:	4313      	orrs	r3, r2
 80048ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	0148      	lsls	r0, r1, #5
 800490a:	69f9      	ldr	r1, [r7, #28]
 800490c:	4401      	add	r1, r0
 800490e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004912:	4313      	orrs	r3, r2
 8004914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	791b      	ldrb	r3, [r3, #4]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d11f      	bne.n	800495e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004938:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800493c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800495c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d14b      	bne.n	80049fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d009      	beq.n	8004980 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	791b      	ldrb	r3, [r3, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d128      	bne.n	80049da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d110      	bne.n	80049ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e00f      	b.n	80049da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e165      	b.n	8004cc8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	791b      	ldrb	r3, [r3, #4]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d015      	beq.n	8004a50 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 814d 	beq.w	8004cc8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	69f9      	ldr	r1, [r7, #28]
 8004a46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	634b      	str	r3, [r1, #52]	@ 0x34
 8004a4e:	e13b      	b.n	8004cc8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d110      	bne.n	8004a82 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e00f      	b.n	8004aa2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	68d9      	ldr	r1, [r3, #12]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	b298      	uxth	r0, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f9b8 	bl	8004e2c <USB_WritePacket>
 8004abc:	e104      	b.n	8004cc8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad8:	0cdb      	lsrs	r3, r3, #19
 8004ada:	04db      	lsls	r3, r3, #19
 8004adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004afc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b00:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d131      	bne.n	8004b6c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b36:	69b9      	ldr	r1, [r7, #24]
 8004b38:	0148      	lsls	r0, r1, #5
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	4401      	add	r1, r0
 8004b3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b42:	4313      	orrs	r3, r2
 8004b44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b64:	6113      	str	r3, [r2, #16]
 8004b66:	e061      	b.n	8004c2c <USB_EPStartXfer+0x484>
 8004b68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d123      	bne.n	8004bbc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	0148      	lsls	r0, r1, #5
 8004b8e:	69f9      	ldr	r1, [r7, #28]
 8004b90:	4401      	add	r1, r0
 8004b92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b96:	4313      	orrs	r3, r2
 8004b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bb8:	6113      	str	r3, [r2, #16]
 8004bba:	e037      	b.n	8004c2c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	fb03 f202 	mul.w	r2, r3, r2
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	8afb      	ldrh	r3, [r7, #22]
 8004bf0:	04d9      	lsls	r1, r3, #19
 8004bf2:	4b38      	ldr	r3, [pc, #224]	@ (8004cd4 <USB_EPStartXfer+0x52c>)
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	69b9      	ldr	r1, [r7, #24]
 8004bf8:	0148      	lsls	r0, r1, #5
 8004bfa:	69f9      	ldr	r1, [r7, #28]
 8004bfc:	4401      	add	r1, r0
 8004bfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c02:	4313      	orrs	r3, r2
 8004c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	0148      	lsls	r0, r1, #5
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	4401      	add	r1, r0
 8004c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	791b      	ldrb	r3, [r3, #4]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d128      	bne.n	8004ca8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d110      	bne.n	8004c88 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e00f      	b.n	8004ca8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	1ff80000 	.word	0x1ff80000

08004cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d14a      	bne.n	8004d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d0e:	f040 8086 	bne.w	8004e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	7812      	ldrb	r2, [r2, #0]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d902      	bls.n	8004d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d6e:	e056      	b.n	8004e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d88:	d0e7      	beq.n	8004d5a <USB_EPStopXfer+0x82>
 8004d8a:	e048      	b.n	8004e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004da4:	d13b      	bne.n	8004e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d902      	bls.n	8004e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
          break;
 8004e02:	e00c      	b.n	8004e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e1c:	d0e7      	beq.n	8004dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	@ 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	71fb      	strb	r3, [r7, #7]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d123      	bne.n	8004e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e52:	88bb      	ldrh	r3, [r7, #4]
 8004e54:	3303      	adds	r3, #3
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	e018      	b.n	8004e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	031a      	lsls	r2, r3, #12
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	3301      	adds	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d3e2      	bcc.n	8004e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3724      	adds	r7, #36	@ 0x24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b08b      	sub	sp, #44	@ 0x2c
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	089b      	lsrs	r3, r3, #2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	623b      	str	r3, [r7, #32]
 8004ed2:	e014      	b.n	8004efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	3301      	adds	r3, #1
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	3301      	adds	r3, #1
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	3301      	adds	r3, #1
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	6a3a      	ldr	r2, [r7, #32]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3e6      	bcc.n	8004ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f06:	8bfb      	ldrh	r3, [r7, #30]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01e      	beq.n	8004f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f16:	461a      	mov	r2, r3
 8004f18:	f107 0310 	add.w	r3, r7, #16
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	701a      	strb	r2, [r3, #0]
      i++;
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	3301      	adds	r3, #1
 8004f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f3e:	8bfb      	ldrh	r3, [r7, #30]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f44:	8bfb      	ldrh	r3, [r7, #30]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1ea      	bne.n	8004f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	372c      	adds	r7, #44	@ 0x2c
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d12c      	bne.n	8004fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	db12      	blt.n	8004fac <USB_EPSetStall+0x54>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00f      	beq.n	8004fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e02b      	b.n	8005026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	db12      	blt.n	8005006 <USB_EPSetStall+0xae>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00f      	beq.n	8005006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d128      	bne.n	80050a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800506a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800506e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	791b      	ldrb	r3, [r3, #4]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d003      	beq.n	8005080 <USB_EPClearStall+0x4c>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d138      	bne.n	80050f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e027      	b.n	80050f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	791b      	ldrb	r3, [r3, #4]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d003      	beq.n	80050d2 <USB_EPClearStall+0x9e>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	791b      	ldrb	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d10f      	bne.n	80050f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800511e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005134:	68f9      	ldr	r1, [r7, #12]
 8005136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800517a:	f023 0302 	bic.w	r3, r3, #2
 800517e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051a8:	f023 0303 	bic.w	r3, r3, #3
 80051ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051bc:	f043 0302 	orr.w	r3, r3, #2
 80051c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051e8:	68fb      	ldr	r3, [r7, #12]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	0c1b      	lsrs	r3, r3, #16
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	b29b      	uxth	r3, r3
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800528c:	68bb      	ldr	r3, [r7, #8]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	01db      	lsls	r3, r3, #7
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4013      	ands	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052e8:	68bb      	ldr	r3, [r7, #8]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0301 	and.w	r3, r3, #1
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800532c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005330:	f023 0307 	bic.w	r3, r3, #7
 8005334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	460b      	mov	r3, r1
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	333c      	adds	r3, #60	@ 0x3c
 800536e:	3304      	adds	r3, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4a26      	ldr	r2, [pc, #152]	@ (8005410 <USB_EP0_OutStart+0xb8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d90a      	bls.n	8005392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538c:	d101      	bne.n	8005392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e037      	b.n	8005402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005398:	461a      	mov	r2, r3
 800539a:	2300      	movs	r3, #0
 800539c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c0:	f043 0318 	orr.w	r3, r3, #24
 80053c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80053d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10f      	bne.n	8005400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80053fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	4f54300a 	.word	0x4f54300a

08005414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800542c:	d901      	bls.n	8005432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e01b      	b.n	800546a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	daf2      	bge.n	8005420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f043 0201 	orr.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005456:	d901      	bls.n	800545c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e006      	b.n	800546a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d0f0      	beq.n	800544a <USB_CoreReset+0x36>

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005484:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005488:	f002 fc92 	bl	8007db0 <USBD_static_malloc>
 800548c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	32b0      	adds	r2, #176	@ 0xb0
 800549e:	2100      	movs	r1, #0
 80054a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054a4:	2302      	movs	r3, #2
 80054a6:	e0d4      	b.n	8005652 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80054ac:	2100      	movs	r1, #0
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f002 fcc2 	bl	8007e38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	32b0      	adds	r2, #176	@ 0xb0
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	32b0      	adds	r2, #176	@ 0xb0
 80054ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7c1b      	ldrb	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d138      	bne.n	8005552 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054e0:	4b5e      	ldr	r3, [pc, #376]	@ (800565c <USBD_CDC_Init+0x1e4>)
 80054e2:	7819      	ldrb	r1, [r3, #0]
 80054e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e8:	2202      	movs	r2, #2
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f002 fb3d 	bl	8007b6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054f0:	4b5a      	ldr	r3, [pc, #360]	@ (800565c <USBD_CDC_Init+0x1e4>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3324      	adds	r3, #36	@ 0x24
 8005506:	2201      	movs	r2, #1
 8005508:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800550a:	4b55      	ldr	r3, [pc, #340]	@ (8005660 <USBD_CDC_Init+0x1e8>)
 800550c:	7819      	ldrb	r1, [r3, #0]
 800550e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005512:	2202      	movs	r2, #2
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f002 fb28 	bl	8007b6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800551a:	4b51      	ldr	r3, [pc, #324]	@ (8005660 <USBD_CDC_Init+0x1e8>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	f003 020f 	and.w	r2, r3, #15
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005532:	2201      	movs	r2, #1
 8005534:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005536:	4b4b      	ldr	r3, [pc, #300]	@ (8005664 <USBD_CDC_Init+0x1ec>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	3326      	adds	r3, #38	@ 0x26
 800554c:	2210      	movs	r2, #16
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e035      	b.n	80055be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005552:	4b42      	ldr	r3, [pc, #264]	@ (800565c <USBD_CDC_Init+0x1e4>)
 8005554:	7819      	ldrb	r1, [r3, #0]
 8005556:	2340      	movs	r3, #64	@ 0x40
 8005558:	2202      	movs	r2, #2
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f002 fb05 	bl	8007b6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005560:	4b3e      	ldr	r3, [pc, #248]	@ (800565c <USBD_CDC_Init+0x1e4>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3324      	adds	r3, #36	@ 0x24
 8005576:	2201      	movs	r2, #1
 8005578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800557a:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <USBD_CDC_Init+0x1e8>)
 800557c:	7819      	ldrb	r1, [r3, #0]
 800557e:	2340      	movs	r3, #64	@ 0x40
 8005580:	2202      	movs	r2, #2
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f002 faf1 	bl	8007b6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005588:	4b35      	ldr	r3, [pc, #212]	@ (8005660 <USBD_CDC_Init+0x1e8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80055a0:	2201      	movs	r2, #1
 80055a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005664 <USBD_CDC_Init+0x1ec>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3326      	adds	r3, #38	@ 0x26
 80055ba:	2210      	movs	r2, #16
 80055bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055be:	4b29      	ldr	r3, [pc, #164]	@ (8005664 <USBD_CDC_Init+0x1ec>)
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	2308      	movs	r3, #8
 80055c4:	2203      	movs	r2, #3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f002 facf 	bl	8007b6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055cc:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <USBD_CDC_Init+0x1ec>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3324      	adds	r3, #36	@ 0x24
 80055e2:	2201      	movs	r2, #1
 80055e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	33b0      	adds	r3, #176	@ 0xb0
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800561c:	2302      	movs	r3, #2
 800561e:	e018      	b.n	8005652 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	7c1b      	ldrb	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005628:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <USBD_CDC_Init+0x1e8>)
 800562a:	7819      	ldrb	r1, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f002 fb86 	bl	8007d48 <USBD_LL_PrepareReceive>
 800563c:	e008      	b.n	8005650 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800563e:	4b08      	ldr	r3, [pc, #32]	@ (8005660 <USBD_CDC_Init+0x1e8>)
 8005640:	7819      	ldrb	r1, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005648:	2340      	movs	r3, #64	@ 0x40
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f002 fb7c 	bl	8007d48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000093 	.word	0x20000093
 8005660:	20000094 	.word	0x20000094
 8005664:	20000095 	.word	0x20000095

08005668 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005674:	4b3a      	ldr	r3, [pc, #232]	@ (8005760 <USBD_CDC_DeInit+0xf8>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f002 fa9b 	bl	8007bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005680:	4b37      	ldr	r3, [pc, #220]	@ (8005760 <USBD_CDC_DeInit+0xf8>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 020f 	and.w	r2, r3, #15
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3324      	adds	r3, #36	@ 0x24
 8005696:	2200      	movs	r2, #0
 8005698:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800569a:	4b32      	ldr	r3, [pc, #200]	@ (8005764 <USBD_CDC_DeInit+0xfc>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f002 fa88 	bl	8007bb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005764 <USBD_CDC_DeInit+0xfc>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056be:	2200      	movs	r2, #0
 80056c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056c2:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <USBD_CDC_DeInit+0x100>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f002 fa74 	bl	8007bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056ce:	4b26      	ldr	r3, [pc, #152]	@ (8005768 <USBD_CDC_DeInit+0x100>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f003 020f 	and.w	r2, r3, #15
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3324      	adds	r3, #36	@ 0x24
 80056e4:	2200      	movs	r2, #0
 80056e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80056e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005768 <USBD_CDC_DeInit+0x100>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3326      	adds	r3, #38	@ 0x26
 80056fe:	2200      	movs	r2, #0
 8005700:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	32b0      	adds	r2, #176	@ 0xb0
 800570c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01f      	beq.n	8005754 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	33b0      	adds	r3, #176	@ 0xb0
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	32b0      	adds	r2, #176	@ 0xb0
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	4618      	mov	r0, r3
 8005738:	f002 fb48 	bl	8007dcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	32b0      	adds	r2, #176	@ 0xb0
 8005746:	2100      	movs	r1, #0
 8005748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000093 	.word	0x20000093
 8005764:	20000094 	.word	0x20000094
 8005768:	20000095 	.word	0x20000095

0800576c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	32b0      	adds	r2, #176	@ 0xb0
 8005780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005784:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005798:	2303      	movs	r3, #3
 800579a:	e0bf      	b.n	800591c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d050      	beq.n	800584a <USBD_CDC_Setup+0xde>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	f040 80af 	bne.w	800590c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	88db      	ldrh	r3, [r3, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d03a      	beq.n	800582c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da1b      	bge.n	80057f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	33b0      	adds	r3, #176	@ 0xb0
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80057d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	88d2      	ldrh	r2, [r2, #6]
 80057dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	88db      	ldrh	r3, [r3, #6]
 80057e2:	2b07      	cmp	r3, #7
 80057e4:	bf28      	it	cs
 80057e6:	2307      	movcs	r3, #7
 80057e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	89fa      	ldrh	r2, [r7, #14]
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fd87 	bl	8007304 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80057f6:	e090      	b.n	800591a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	785a      	ldrb	r2, [r3, #1]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	88db      	ldrh	r3, [r3, #6]
 8005806:	2b3f      	cmp	r3, #63	@ 0x3f
 8005808:	d803      	bhi.n	8005812 <USBD_CDC_Setup+0xa6>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	88db      	ldrh	r3, [r3, #6]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	e000      	b.n	8005814 <USBD_CDC_Setup+0xa8>
 8005812:	2240      	movs	r2, #64	@ 0x40
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005822:	461a      	mov	r2, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 fd99 	bl	800735c <USBD_CtlPrepareRx>
      break;
 800582a:	e076      	b.n	800591a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	33b0      	adds	r3, #176	@ 0xb0
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	7850      	ldrb	r0, [r2, #1]
 8005842:	2200      	movs	r2, #0
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	4798      	blx	r3
      break;
 8005848:	e067      	b.n	800591a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b0b      	cmp	r3, #11
 8005850:	d851      	bhi.n	80058f6 <USBD_CDC_Setup+0x18a>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <USBD_CDC_Setup+0xec>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005889 	.word	0x08005889
 800585c:	08005905 	.word	0x08005905
 8005860:	080058f7 	.word	0x080058f7
 8005864:	080058f7 	.word	0x080058f7
 8005868:	080058f7 	.word	0x080058f7
 800586c:	080058f7 	.word	0x080058f7
 8005870:	080058f7 	.word	0x080058f7
 8005874:	080058f7 	.word	0x080058f7
 8005878:	080058f7 	.word	0x080058f7
 800587c:	080058f7 	.word	0x080058f7
 8005880:	080058b3 	.word	0x080058b3
 8005884:	080058dd 	.word	0x080058dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b03      	cmp	r3, #3
 8005892:	d107      	bne.n	80058a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005894:	f107 030a 	add.w	r3, r7, #10
 8005898:	2202      	movs	r2, #2
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fd31 	bl	8007304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a2:	e032      	b.n	800590a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fcbb 	bl	8007222 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ac:	2303      	movs	r3, #3
 80058ae:	75fb      	strb	r3, [r7, #23]
          break;
 80058b0:	e02b      	b.n	800590a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058be:	f107 030d 	add.w	r3, r7, #13
 80058c2:	2201      	movs	r2, #1
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fd1c 	bl	8007304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058cc:	e01d      	b.n	800590a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 fca6 	bl	8007222 <USBD_CtlError>
            ret = USBD_FAIL;
 80058d6:	2303      	movs	r3, #3
 80058d8:	75fb      	strb	r3, [r7, #23]
          break;
 80058da:	e016      	b.n	800590a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d00f      	beq.n	8005908 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fc99 	bl	8007222 <USBD_CtlError>
            ret = USBD_FAIL;
 80058f0:	2303      	movs	r3, #3
 80058f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058f4:	e008      	b.n	8005908 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fc92 	bl	8007222 <USBD_CtlError>
          ret = USBD_FAIL;
 80058fe:	2303      	movs	r3, #3
 8005900:	75fb      	strb	r3, [r7, #23]
          break;
 8005902:	e002      	b.n	800590a <USBD_CDC_Setup+0x19e>
          break;
 8005904:	bf00      	nop
 8005906:	e008      	b.n	800591a <USBD_CDC_Setup+0x1ae>
          break;
 8005908:	bf00      	nop
      }
      break;
 800590a:	e006      	b.n	800591a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fc87 	bl	8007222 <USBD_CtlError>
      ret = USBD_FAIL;
 8005914:	2303      	movs	r3, #3
 8005916:	75fb      	strb	r3, [r7, #23]
      break;
 8005918:	bf00      	nop
  }

  return (uint8_t)ret;
 800591a:	7dfb      	ldrb	r3, [r7, #23]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005936:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32b0      	adds	r2, #176	@ 0xb0
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800594a:	2303      	movs	r3, #3
 800594c:	e065      	b.n	8005a1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	32b0      	adds	r2, #176	@ 0xb0
 8005958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800595e:	78fb      	ldrb	r3, [r7, #3]
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3318      	adds	r3, #24
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02f      	beq.n	80059d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 020f 	and.w	r2, r3, #15
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	3318      	adds	r3, #24
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	f003 010f 	and.w	r1, r3, #15
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	460b      	mov	r3, r1
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	440b      	add	r3, r1
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4403      	add	r3, r0
 80059a0:	331c      	adds	r3, #28
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d112      	bne.n	80059d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3318      	adds	r3, #24
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059ca:	78f9      	ldrb	r1, [r7, #3]
 80059cc:	2300      	movs	r3, #0
 80059ce:	2200      	movs	r2, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f002 f998 	bl	8007d06 <USBD_LL_Transmit>
 80059d6:	e01f      	b.n	8005a18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	33b0      	adds	r3, #176	@ 0xb0
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d010      	beq.n	8005a18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	33b0      	adds	r3, #176	@ 0xb0
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	32b0      	adds	r2, #176	@ 0xb0
 8005a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	32b0      	adds	r2, #176	@ 0xb0
 8005a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e01a      	b.n	8005a8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f002 f996 	bl	8007d8a <USBD_LL_GetRxDataSize>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	33b0      	adds	r3, #176	@ 0xb0
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005a84:	4611      	mov	r1, r2
 8005a86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	32b0      	adds	r2, #176	@ 0xb0
 8005aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e024      	b.n	8005afe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	33b0      	adds	r3, #176	@ 0xb0
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d019      	beq.n	8005afc <USBD_CDC_EP0_RxReady+0x6a>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005ace:	2bff      	cmp	r3, #255	@ 0xff
 8005ad0:	d014      	beq.n	8005afc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	33b0      	adds	r3, #176	@ 0xb0
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005aea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005af2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	22ff      	movs	r2, #255	@ 0xff
 8005af8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b10:	2182      	movs	r1, #130	@ 0x82
 8005b12:	4818      	ldr	r0, [pc, #96]	@ (8005b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b14:	f000 fd4f 	bl	80065b6 <USBD_GetEpDesc>
 8005b18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4815      	ldr	r0, [pc, #84]	@ (8005b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b1e:	f000 fd4a 	bl	80065b6 <USBD_GetEpDesc>
 8005b22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b24:	2181      	movs	r1, #129	@ 0x81
 8005b26:	4813      	ldr	r0, [pc, #76]	@ (8005b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b28:	f000 fd45 	bl	80065b6 <USBD_GetEpDesc>
 8005b2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2210      	movs	r2, #16
 8005b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b48:	711a      	strb	r2, [r3, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b5c:	711a      	strb	r2, [r3, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2243      	movs	r2, #67	@ 0x43
 8005b66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b68:	4b02      	ldr	r3, [pc, #8]	@ (8005b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000050 	.word	0x20000050

08005b78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b80:	2182      	movs	r1, #130	@ 0x82
 8005b82:	4818      	ldr	r0, [pc, #96]	@ (8005be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b84:	f000 fd17 	bl	80065b6 <USBD_GetEpDesc>
 8005b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4815      	ldr	r0, [pc, #84]	@ (8005be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b8e:	f000 fd12 	bl	80065b6 <USBD_GetEpDesc>
 8005b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b94:	2181      	movs	r1, #129	@ 0x81
 8005b96:	4813      	ldr	r0, [pc, #76]	@ (8005be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b98:	f000 fd0d 	bl	80065b6 <USBD_GetEpDesc>
 8005b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	711a      	strb	r2, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f042 0202 	orr.w	r2, r2, #2
 8005bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	711a      	strb	r2, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f042 0202 	orr.w	r2, r2, #2
 8005bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2243      	movs	r2, #67	@ 0x43
 8005bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	@ (8005be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000050 	.word	0x20000050

08005be8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bf0:	2182      	movs	r1, #130	@ 0x82
 8005bf2:	4818      	ldr	r0, [pc, #96]	@ (8005c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bf4:	f000 fcdf 	bl	80065b6 <USBD_GetEpDesc>
 8005bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4815      	ldr	r0, [pc, #84]	@ (8005c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bfe:	f000 fcda 	bl	80065b6 <USBD_GetEpDesc>
 8005c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c04:	2181      	movs	r1, #129	@ 0x81
 8005c06:	4813      	ldr	r0, [pc, #76]	@ (8005c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c08:	f000 fcd5 	bl	80065b6 <USBD_GetEpDesc>
 8005c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2210      	movs	r2, #16
 8005c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c28:	711a      	strb	r2, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c3c:	711a      	strb	r2, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2243      	movs	r2, #67	@ 0x43
 8005c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c48:	4b02      	ldr	r3, [pc, #8]	@ (8005c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000050 	.word	0x20000050

08005c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	220a      	movs	r2, #10
 8005c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c66:	4b03      	ldr	r3, [pc, #12]	@ (8005c74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	2000000c 	.word	0x2000000c

08005c78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e009      	b.n	8005ca0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	33b0      	adds	r3, #176	@ 0xb0
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	32b0      	adds	r2, #176	@ 0xb0
 8005cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e008      	b.n	8005ce4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	32b0      	adds	r2, #176	@ 0xb0
 8005d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e004      	b.n	8005d1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32b0      	adds	r2, #176	@ 0xb0
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d44:	2301      	movs	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e025      	b.n	8005d9e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11f      	bne.n	8005d9c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d64:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <USBD_CDC_TransmitPacket+0x7c>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f003 020f 	and.w	r2, r3, #15
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4403      	add	r3, r0
 8005d7e:	3318      	adds	r3, #24
 8005d80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d82:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <USBD_CDC_TransmitPacket+0x7c>)
 8005d84:	7819      	ldrb	r1, [r3, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 ffb7 	bl	8007d06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000093 	.word	0x20000093

08005dac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	32b0      	adds	r2, #176	@ 0xb0
 8005dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	32b0      	adds	r2, #176	@ 0xb0
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e018      	b.n	8005e0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7c1b      	ldrb	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005de2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <USBD_CDC_ReceivePacket+0x68>)
 8005de4:	7819      	ldrb	r1, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 ffa9 	bl	8007d48 <USBD_LL_PrepareReceive>
 8005df6:	e008      	b.n	8005e0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005df8:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <USBD_CDC_ReceivePacket+0x68>)
 8005dfa:	7819      	ldrb	r1, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e02:	2340      	movs	r3, #64	@ 0x40
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 ff9f 	bl	8007d48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000094 	.word	0x20000094

08005e18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	4613      	mov	r3, r2
 8005e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e01f      	b.n	8005e70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	79fa      	ldrb	r2, [r7, #7]
 8005e62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f001 fe19 	bl	8007a9c <USBD_LL_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e025      	b.n	8005edc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	32ae      	adds	r2, #174	@ 0xae
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00f      	beq.n	8005ecc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32ae      	adds	r2, #174	@ 0xae
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	f107 020e 	add.w	r2, r7, #14
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fe21 	bl	8007b34 <USBD_LL_Start>
 8005ef2:	4603      	mov	r3, r0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	4611      	mov	r1, r2
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	4611      	mov	r1, r2
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f90c 	bl	80071ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d01a      	beq.n	8005ff0 <USBD_LL_SetupStage+0x72>
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d822      	bhi.n	8006004 <USBD_LL_SetupStage+0x86>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <USBD_LL_SetupStage+0x4a>
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d00a      	beq.n	8005fdc <USBD_LL_SetupStage+0x5e>
 8005fc6:	e01d      	b.n	8006004 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fb63 	bl	800669c <USBD_StdDevReq>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fda:	e020      	b.n	800601e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fbcb 	bl	8006780 <USBD_StdItfReq>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]
      break;
 8005fee:	e016      	b.n	800601e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc2d 	bl	8006858 <USBD_StdEPReq>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73fb      	strb	r3, [r7, #15]
      break;
 8006002:	e00c      	b.n	800601e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800600a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800600e:	b2db      	uxtb	r3, r3
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 fdee 	bl	8007bf4 <USBD_LL_StallEP>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
      break;
 800601c:	bf00      	nop
  }

  return ret;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	460b      	mov	r3, r1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800603a:	7afb      	ldrb	r3, [r7, #11]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d16e      	bne.n	800611e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006046:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800604e:	2b03      	cmp	r3, #3
 8006050:	f040 8098 	bne.w	8006184 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	429a      	cmp	r2, r3
 800605e:	d913      	bls.n	8006088 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	4293      	cmp	r3, r2
 8006078:	bf28      	it	cs
 800607a:	4613      	movcs	r3, r2
 800607c:	461a      	mov	r2, r3
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f001 f988 	bl	8007396 <USBD_CtlContinueRx>
 8006086:	e07d      	b.n	8006184 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2b02      	cmp	r3, #2
 8006094:	d014      	beq.n	80060c0 <USBD_LL_DataOutStage+0x98>
 8006096:	2b02      	cmp	r3, #2
 8006098:	d81d      	bhi.n	80060d6 <USBD_LL_DataOutStage+0xae>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <USBD_LL_DataOutStage+0x7c>
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d003      	beq.n	80060aa <USBD_LL_DataOutStage+0x82>
 80060a2:	e018      	b.n	80060d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75bb      	strb	r3, [r7, #22]
            break;
 80060a8:	e018      	b.n	80060dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fa64 	bl	8006582 <USBD_CoreFindIF>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75bb      	strb	r3, [r7, #22]
            break;
 80060be:	e00d      	b.n	80060dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	4619      	mov	r1, r3
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fa66 	bl	800659c <USBD_CoreFindEP>
 80060d0:	4603      	mov	r3, r0
 80060d2:	75bb      	strb	r3, [r7, #22]
            break;
 80060d4:	e002      	b.n	80060dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75bb      	strb	r3, [r7, #22]
            break;
 80060da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060dc:	7dbb      	ldrb	r3, [r7, #22]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d119      	bne.n	8006116 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d113      	bne.n	8006116 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060ee:	7dba      	ldrb	r2, [r7, #22]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	32ae      	adds	r2, #174	@ 0xae
 80060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060fe:	7dba      	ldrb	r2, [r7, #22]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006106:	7dba      	ldrb	r2, [r7, #22]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	32ae      	adds	r2, #174	@ 0xae
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f001 f94e 	bl	80073b8 <USBD_CtlSendStatus>
 800611c:	e032      	b.n	8006184 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	4619      	mov	r1, r3
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fa37 	bl	800659c <USBD_CoreFindEP>
 800612e:	4603      	mov	r3, r0
 8006130:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006132:	7dbb      	ldrb	r3, [r7, #22]
 8006134:	2bff      	cmp	r3, #255	@ 0xff
 8006136:	d025      	beq.n	8006184 <USBD_LL_DataOutStage+0x15c>
 8006138:	7dbb      	ldrb	r3, [r7, #22]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d122      	bne.n	8006184 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b03      	cmp	r3, #3
 8006148:	d117      	bne.n	800617a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800614a:	7dba      	ldrb	r2, [r7, #22]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	32ae      	adds	r2, #174	@ 0xae
 8006150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00f      	beq.n	800617a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800615a:	7dba      	ldrb	r2, [r7, #22]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006162:	7dba      	ldrb	r2, [r7, #22]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	32ae      	adds	r2, #174	@ 0xae
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	7afa      	ldrb	r2, [r7, #11]
 8006170:	4611      	mov	r1, r2
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	e000      	b.n	8006186 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	460b      	mov	r3, r1
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800619c:	7afb      	ldrb	r3, [r7, #11]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d16f      	bne.n	8006282 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3314      	adds	r3, #20
 80061a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d15a      	bne.n	8006268 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d914      	bls.n	80061e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	1ad2      	subs	r2, r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f001 f8b0 	bl	800733a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f001 fdb1 	bl	8007d48 <USBD_LL_PrepareReceive>
 80061e6:	e03f      	b.n	8006268 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d11c      	bne.n	800622e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d316      	bcc.n	800622e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800620a:	429a      	cmp	r2, r3
 800620c:	d20f      	bcs.n	800622e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800620e:	2200      	movs	r2, #0
 8006210:	2100      	movs	r1, #0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f001 f891 	bl	800733a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006220:	2300      	movs	r3, #0
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f001 fd8e 	bl	8007d48 <USBD_LL_PrepareReceive>
 800622c:	e01c      	b.n	8006268 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d10f      	bne.n	800625a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800625a:	2180      	movs	r1, #128	@ 0x80
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 fcc9 	bl	8007bf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f001 f8bb 	bl	80073de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d03a      	beq.n	80062e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fe42 	bl	8005efc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006280:	e032      	b.n	80062e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006282:	7afb      	ldrb	r3, [r7, #11]
 8006284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006288:	b2db      	uxtb	r3, r3
 800628a:	4619      	mov	r1, r3
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f985 	bl	800659c <USBD_CoreFindEP>
 8006292:	4603      	mov	r3, r0
 8006294:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	2bff      	cmp	r3, #255	@ 0xff
 800629a:	d025      	beq.n	80062e8 <USBD_LL_DataInStage+0x15a>
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d122      	bne.n	80062e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d11c      	bne.n	80062e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062ae:	7dfa      	ldrb	r2, [r7, #23]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	32ae      	adds	r2, #174	@ 0xae
 80062b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d014      	beq.n	80062e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062be:	7dfa      	ldrb	r2, [r7, #23]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062c6:	7dfa      	ldrb	r2, [r7, #23]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	32ae      	adds	r2, #174	@ 0xae
 80062cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	7afa      	ldrb	r2, [r7, #11]
 80062d4:	4611      	mov	r1, r2
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	4798      	blx	r3
 80062da:	4603      	mov	r3, r0
 80062dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062de:	7dbb      	ldrb	r3, [r7, #22]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062e4:	7dbb      	ldrb	r3, [r7, #22]
 80062e6:	e000      	b.n	80062ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d014      	beq.n	8006358 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6852      	ldr	r2, [r2, #4]
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	4611      	mov	r1, r2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006358:	2340      	movs	r3, #64	@ 0x40
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fc03 	bl	8007b6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2240      	movs	r2, #64	@ 0x40
 8006370:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006374:	2340      	movs	r3, #64	@ 0x40
 8006376:	2200      	movs	r2, #0
 8006378:	2180      	movs	r1, #128	@ 0x80
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fbf5 	bl	8007b6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2240      	movs	r2, #64	@ 0x40
 800638a:	621a      	str	r2, [r3, #32]

  return ret;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d006      	beq.n	80063d8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2204      	movs	r2, #4
 80063dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d106      	bne.n	8006410 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006408:	b2da      	uxtb	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d110      	bne.n	8006454 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	32ae      	adds	r2, #174	@ 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	e01c      	b.n	80064ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d115      	bne.n	80064b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32ae      	adds	r2, #174	@ 0xae
 8006496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	32ae      	adds	r2, #174	@ 0xae
 80064aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	4611      	mov	r1, r2
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	32ae      	adds	r2, #174	@ 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e01c      	b.n	800651e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d115      	bne.n	800651c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32ae      	adds	r2, #174	@ 0xae
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6852      	ldr	r2, [r2, #4]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	4611      	mov	r1, r2
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800658e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	885b      	ldrh	r3, [r3, #2]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	4293      	cmp	r3, r2
 80065da:	d91f      	bls.n	800661c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065e2:	e013      	b.n	800660c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065e4:	f107 030a 	add.w	r3, r7, #10
 80065e8:	4619      	mov	r1, r3
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	f000 f81b 	bl	8006626 <USBD_GetNextDesc>
 80065f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b05      	cmp	r3, #5
 80065f8:	d108      	bne.n	800660c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	789b      	ldrb	r3, [r3, #2]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	429a      	cmp	r2, r3
 8006606:	d008      	beq.n	800661a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	885b      	ldrh	r3, [r3, #2]
 8006610:	b29a      	uxth	r2, r3
 8006612:	897b      	ldrh	r3, [r7, #10]
 8006614:	429a      	cmp	r2, r3
 8006616:	d8e5      	bhi.n	80065e4 <USBD_GetEpDesc+0x2e>
 8006618:	e000      	b.n	800661c <USBD_GetEpDesc+0x66>
          break;
 800661a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800661c:	693b      	ldr	r3, [r7, #16]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	4413      	add	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006650:	68fb      	ldr	r3, [r7, #12]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3301      	adds	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800667c:	8a3b      	ldrh	r3, [r7, #16]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	b21a      	sxth	r2, r3
 8006682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006686:	4313      	orrs	r3, r2
 8006688:	b21b      	sxth	r3, r3
 800668a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800668c:	89fb      	ldrh	r3, [r7, #14]
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066b2:	2b40      	cmp	r3, #64	@ 0x40
 80066b4:	d005      	beq.n	80066c2 <USBD_StdDevReq+0x26>
 80066b6:	2b40      	cmp	r3, #64	@ 0x40
 80066b8:	d857      	bhi.n	800676a <USBD_StdDevReq+0xce>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00f      	beq.n	80066de <USBD_StdDevReq+0x42>
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d153      	bne.n	800676a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	32ae      	adds	r2, #174	@ 0xae
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
      break;
 80066dc:	e04a      	b.n	8006774 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b09      	cmp	r3, #9
 80066e4:	d83b      	bhi.n	800675e <USBD_StdDevReq+0xc2>
 80066e6:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <USBD_StdDevReq+0x50>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006741 	.word	0x08006741
 80066f0:	08006755 	.word	0x08006755
 80066f4:	0800675f 	.word	0x0800675f
 80066f8:	0800674b 	.word	0x0800674b
 80066fc:	0800675f 	.word	0x0800675f
 8006700:	0800671f 	.word	0x0800671f
 8006704:	08006715 	.word	0x08006715
 8006708:	0800675f 	.word	0x0800675f
 800670c:	08006737 	.word	0x08006737
 8006710:	08006729 	.word	0x08006729
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa3c 	bl	8006b94 <USBD_GetDescriptor>
          break;
 800671c:	e024      	b.n	8006768 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fba1 	bl	8006e68 <USBD_SetAddress>
          break;
 8006726:	e01f      	b.n	8006768 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fbe0 	bl	8006ef0 <USBD_SetConfig>
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]
          break;
 8006734:	e018      	b.n	8006768 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fc83 	bl	8007044 <USBD_GetConfig>
          break;
 800673e:	e013      	b.n	8006768 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fcb4 	bl	80070b0 <USBD_GetStatus>
          break;
 8006748:	e00e      	b.n	8006768 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fce3 	bl	8007118 <USBD_SetFeature>
          break;
 8006752:	e009      	b.n	8006768 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fd07 	bl	800716a <USBD_ClrFeature>
          break;
 800675c:	e004      	b.n	8006768 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fd5e 	bl	8007222 <USBD_CtlError>
          break;
 8006766:	bf00      	nop
      }
      break;
 8006768:	e004      	b.n	8006774 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fd58 	bl	8007222 <USBD_CtlError>
      break;
 8006772:	bf00      	nop
  }

  return ret;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop

08006780 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006796:	2b40      	cmp	r3, #64	@ 0x40
 8006798:	d005      	beq.n	80067a6 <USBD_StdItfReq+0x26>
 800679a:	2b40      	cmp	r3, #64	@ 0x40
 800679c:	d852      	bhi.n	8006844 <USBD_StdItfReq+0xc4>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <USBD_StdItfReq+0x26>
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d14e      	bne.n	8006844 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d840      	bhi.n	8006836 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	889b      	ldrh	r3, [r3, #4]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d836      	bhi.n	800682c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	889b      	ldrh	r3, [r3, #4]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fedb 	bl	8006582 <USBD_CoreFindIF>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2bff      	cmp	r3, #255	@ 0xff
 80067d4:	d01d      	beq.n	8006812 <USBD_StdItfReq+0x92>
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11a      	bne.n	8006812 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067dc:	7bba      	ldrb	r2, [r7, #14]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32ae      	adds	r2, #174	@ 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067ec:	7bba      	ldrb	r2, [r7, #14]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067f4:	7bba      	ldrb	r2, [r7, #14]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	@ 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800680a:	e004      	b.n	8006816 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006810:	e001      	b.n	8006816 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d110      	bne.n	8006840 <USBD_StdItfReq+0xc0>
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10d      	bne.n	8006840 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fdc7 	bl	80073b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800682a:	e009      	b.n	8006840 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fcf7 	bl	8007222 <USBD_CtlError>
          break;
 8006834:	e004      	b.n	8006840 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fcf2 	bl	8007222 <USBD_CtlError>
          break;
 800683e:	e000      	b.n	8006842 <USBD_StdItfReq+0xc2>
          break;
 8006840:	bf00      	nop
      }
      break;
 8006842:	e004      	b.n	800684e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fceb 	bl	8007222 <USBD_CtlError>
      break;
 800684c:	bf00      	nop
  }

  return ret;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	889b      	ldrh	r3, [r3, #4]
 800686a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	d007      	beq.n	8006888 <USBD_StdEPReq+0x30>
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	f200 817f 	bhi.w	8006b7c <USBD_StdEPReq+0x324>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d02a      	beq.n	80068d8 <USBD_StdEPReq+0x80>
 8006882:	2b20      	cmp	r3, #32
 8006884:	f040 817a 	bne.w	8006b7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fe85 	bl	800659c <USBD_CoreFindEP>
 8006892:	4603      	mov	r3, r0
 8006894:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006896:	7b7b      	ldrb	r3, [r7, #13]
 8006898:	2bff      	cmp	r3, #255	@ 0xff
 800689a:	f000 8174 	beq.w	8006b86 <USBD_StdEPReq+0x32e>
 800689e:	7b7b      	ldrb	r3, [r7, #13]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8170 	bne.w	8006b86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068a6:	7b7a      	ldrb	r2, [r7, #13]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068ae:	7b7a      	ldrb	r2, [r7, #13]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32ae      	adds	r2, #174	@ 0xae
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8163 	beq.w	8006b86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068c0:	7b7a      	ldrb	r2, [r7, #13]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32ae      	adds	r2, #174	@ 0xae
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068d6:	e156      	b.n	8006b86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d008      	beq.n	80068f2 <USBD_StdEPReq+0x9a>
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	f300 8145 	bgt.w	8006b70 <USBD_StdEPReq+0x318>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 809b 	beq.w	8006a22 <USBD_StdEPReq+0x1ca>
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d03c      	beq.n	800696a <USBD_StdEPReq+0x112>
 80068f0:	e13e      	b.n	8006b70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d002      	beq.n	8006904 <USBD_StdEPReq+0xac>
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d016      	beq.n	8006930 <USBD_StdEPReq+0xd8>
 8006902:	e02c      	b.n	800695e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <USBD_StdEPReq+0xce>
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b80      	cmp	r3, #128	@ 0x80
 800690e:	d00a      	beq.n	8006926 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 f96d 	bl	8007bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800691a:	2180      	movs	r1, #128	@ 0x80
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f969 	bl	8007bf4 <USBD_LL_StallEP>
 8006922:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006924:	e020      	b.n	8006968 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fc7a 	bl	8007222 <USBD_CtlError>
              break;
 800692e:	e01b      	b.n	8006968 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10e      	bne.n	8006956 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <USBD_StdEPReq+0xfe>
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b80      	cmp	r3, #128	@ 0x80
 8006942:	d008      	beq.n	8006956 <USBD_StdEPReq+0xfe>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	88db      	ldrh	r3, [r3, #6]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f94f 	bl	8007bf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fd2e 	bl	80073b8 <USBD_CtlSendStatus>

              break;
 800695c:	e004      	b.n	8006968 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fc5e 	bl	8007222 <USBD_CtlError>
              break;
 8006966:	bf00      	nop
          }
          break;
 8006968:	e107      	b.n	8006b7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d002      	beq.n	800697c <USBD_StdEPReq+0x124>
 8006976:	2b03      	cmp	r3, #3
 8006978:	d016      	beq.n	80069a8 <USBD_StdEPReq+0x150>
 800697a:	e04b      	b.n	8006a14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <USBD_StdEPReq+0x146>
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b80      	cmp	r3, #128	@ 0x80
 8006986:	d00a      	beq.n	800699e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 f931 	bl	8007bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006992:	2180      	movs	r1, #128	@ 0x80
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 f92d 	bl	8007bf4 <USBD_LL_StallEP>
 800699a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800699c:	e040      	b.n	8006a20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc3e 	bl	8007222 <USBD_CtlError>
              break;
 80069a6:	e03b      	b.n	8006a20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	885b      	ldrh	r3, [r3, #2]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d136      	bne.n	8006a1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f937 	bl	8007c32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fcf7 	bl	80073b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fde4 	bl	800659c <USBD_CoreFindEP>
 80069d4:	4603      	mov	r3, r0
 80069d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069d8:	7b7b      	ldrb	r3, [r7, #13]
 80069da:	2bff      	cmp	r3, #255	@ 0xff
 80069dc:	d01f      	beq.n	8006a1e <USBD_StdEPReq+0x1c6>
 80069de:	7b7b      	ldrb	r3, [r7, #13]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11c      	bne.n	8006a1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069e4:	7b7a      	ldrb	r2, [r7, #13]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069ec:	7b7a      	ldrb	r2, [r7, #13]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32ae      	adds	r2, #174	@ 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069fc:	7b7a      	ldrb	r2, [r7, #13]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	32ae      	adds	r2, #174	@ 0xae
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a12:	e004      	b.n	8006a1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fc03 	bl	8007222 <USBD_CtlError>
              break;
 8006a1c:	e000      	b.n	8006a20 <USBD_StdEPReq+0x1c8>
              break;
 8006a1e:	bf00      	nop
          }
          break;
 8006a20:	e0ab      	b.n	8006b7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d002      	beq.n	8006a34 <USBD_StdEPReq+0x1dc>
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d032      	beq.n	8006a98 <USBD_StdEPReq+0x240>
 8006a32:	e097      	b.n	8006b64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <USBD_StdEPReq+0x1f2>
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b80      	cmp	r3, #128	@ 0x80
 8006a3e:	d004      	beq.n	8006a4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fbed 	bl	8007222 <USBD_CtlError>
                break;
 8006a48:	e091      	b.n	8006b6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da0b      	bge.n	8006a6a <USBD_StdEPReq+0x212>
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	3310      	adds	r3, #16
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	3304      	adds	r3, #4
 8006a68:	e00b      	b.n	8006a82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4413      	add	r3, r2
 8006a80:	3304      	adds	r3, #4
 8006a82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fc37 	bl	8007304 <USBD_CtlSendData>
              break;
 8006a96:	e06a      	b.n	8006b6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	da11      	bge.n	8006ac4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	f003 020f 	and.w	r2, r3, #15
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3324      	adds	r3, #36	@ 0x24
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d117      	bne.n	8006aea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fbb0 	bl	8007222 <USBD_CtlError>
                  break;
 8006ac2:	e054      	b.n	8006b6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	f003 020f 	and.w	r2, r3, #15
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb9d 	bl	8007222 <USBD_CtlError>
                  break;
 8006ae8:	e041      	b.n	8006b6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da0b      	bge.n	8006b0a <USBD_StdEPReq+0x2b2>
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	3310      	adds	r3, #16
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	3304      	adds	r3, #4
 8006b08:	e00b      	b.n	8006b22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	3304      	adds	r3, #4
 8006b22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <USBD_StdEPReq+0x2d8>
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b80      	cmp	r3, #128	@ 0x80
 8006b2e:	d103      	bne.n	8006b38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e00e      	b.n	8006b56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 f897 	bl	8007c70 <USBD_LL_IsStallEP>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e002      	b.n	8006b56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbd1 	bl	8007304 <USBD_CtlSendData>
              break;
 8006b62:	e004      	b.n	8006b6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fb5b 	bl	8007222 <USBD_CtlError>
              break;
 8006b6c:	bf00      	nop
          }
          break;
 8006b6e:	e004      	b.n	8006b7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fb55 	bl	8007222 <USBD_CtlError>
          break;
 8006b78:	bf00      	nop
      }
      break;
 8006b7a:	e005      	b.n	8006b88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fb4f 	bl	8007222 <USBD_CtlError>
      break;
 8006b84:	e000      	b.n	8006b88 <USBD_StdEPReq+0x330>
      break;
 8006b86:	bf00      	nop
  }

  return ret;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	885b      	ldrh	r3, [r3, #2]
 8006bae:	0a1b      	lsrs	r3, r3, #8
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	f200 8128 	bhi.w	8006e0a <USBD_GetDescriptor+0x276>
 8006bba:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc0 <USBD_GetDescriptor+0x2c>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bdd 	.word	0x08006bdd
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006c35 	.word	0x08006c35
 8006bcc:	08006e0b 	.word	0x08006e0b
 8006bd0:	08006e0b 	.word	0x08006e0b
 8006bd4:	08006dab 	.word	0x08006dab
 8006bd8:	08006dd7 	.word	0x08006dd7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
      break;
 8006bf2:	e112      	b.n	8006e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7c1b      	ldrb	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10d      	bne.n	8006c18 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	f107 0208 	add.w	r2, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	2202      	movs	r2, #2
 8006c14:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c16:	e100      	b.n	8006e1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	f107 0208 	add.w	r2, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	2202      	movs	r2, #2
 8006c30:	701a      	strb	r2, [r3, #0]
      break;
 8006c32:	e0f2      	b.n	8006e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	885b      	ldrh	r3, [r3, #2]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	f200 80ac 	bhi.w	8006d98 <USBD_GetDescriptor+0x204>
 8006c40:	a201      	add	r2, pc, #4	@ (adr r2, 8006c48 <USBD_GetDescriptor+0xb4>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c61 	.word	0x08006c61
 8006c4c:	08006c95 	.word	0x08006c95
 8006c50:	08006cc9 	.word	0x08006cc9
 8006c54:	08006cfd 	.word	0x08006cfd
 8006c58:	08006d31 	.word	0x08006d31
 8006c5c:	08006d65 	.word	0x08006d65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	7c12      	ldrb	r2, [r2, #16]
 8006c78:	f107 0108 	add.w	r1, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c82:	e091      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 facb 	bl	8007222 <USBD_CtlError>
            err++;
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	72fb      	strb	r3, [r7, #11]
          break;
 8006c92:	e089      	b.n	8006da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	7c12      	ldrb	r2, [r2, #16]
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
 8006cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb6:	e077      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fab1 	bl	8007222 <USBD_CtlError>
            err++;
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cc6:	e06f      	b.n	8006da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7c12      	ldrb	r2, [r2, #16]
 8006ce0:	f107 0108 	add.w	r1, r7, #8
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cea:	e05d      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa97 	bl	8007222 <USBD_CtlError>
            err++;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cfa:	e055      	b.n	8006da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	7c12      	ldrb	r2, [r2, #16]
 8006d14:	f107 0108 	add.w	r1, r7, #8
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
 8006d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1e:	e043      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa7d 	bl	8007222 <USBD_CtlError>
            err++;
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2e:	e03b      	b.n	8006da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d52:	e029      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa63 	bl	8007222 <USBD_CtlError>
            err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
          break;
 8006d62:	e021      	b.n	8006da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e00f      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa49 	bl	8007222 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e007      	b.n	8006da8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa41 	bl	8007222 <USBD_CtlError>
          err++;
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	3301      	adds	r3, #1
 8006da4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006da6:	bf00      	nop
      }
      break;
 8006da8:	e037      	b.n	8006e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7c1b      	ldrb	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dba:	f107 0208 	add.w	r2, r7, #8
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4798      	blx	r3
 8006dc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dc4:	e029      	b.n	8006e1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa2a 	bl	8007222 <USBD_CtlError>
        err++;
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8006dd4:	e021      	b.n	8006e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7c1b      	ldrb	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10d      	bne.n	8006dfa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de6:	f107 0208 	add.w	r2, r7, #8
 8006dea:	4610      	mov	r0, r2
 8006dec:	4798      	blx	r3
 8006dee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	2207      	movs	r2, #7
 8006df6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006df8:	e00f      	b.n	8006e1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa10 	bl	8007222 <USBD_CtlError>
        err++;
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	3301      	adds	r3, #1
 8006e06:	72fb      	strb	r3, [r7, #11]
      break;
 8006e08:	e007      	b.n	8006e1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa08 	bl	8007222 <USBD_CtlError>
      err++;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	3301      	adds	r3, #1
 8006e16:	72fb      	strb	r3, [r7, #11]
      break;
 8006e18:	bf00      	nop
  }

  if (err != 0U)
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11e      	bne.n	8006e5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	88db      	ldrh	r3, [r3, #6]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d016      	beq.n	8006e56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e28:	893b      	ldrh	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88da      	ldrh	r2, [r3, #6]
 8006e32:	893b      	ldrh	r3, [r7, #8]
 8006e34:	4293      	cmp	r3, r2
 8006e36:	bf28      	it	cs
 8006e38:	4613      	movcs	r3, r2
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e3e:	893b      	ldrh	r3, [r7, #8]
 8006e40:	461a      	mov	r2, r3
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fa5d 	bl	8007304 <USBD_CtlSendData>
 8006e4a:	e009      	b.n	8006e60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f9e7 	bl	8007222 <USBD_CtlError>
 8006e54:	e004      	b.n	8006e60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 faae 	bl	80073b8 <USBD_CtlSendStatus>
 8006e5c:	e000      	b.n	8006e60 <USBD_GetDescriptor+0x2cc>
    return;
 8006e5e:	bf00      	nop
  }
}
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop

08006e68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	889b      	ldrh	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d131      	bne.n	8006ede <USBD_SetAddress+0x76>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	88db      	ldrh	r3, [r3, #6]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d12d      	bne.n	8006ede <USBD_SetAddress+0x76>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	885b      	ldrh	r3, [r3, #2]
 8006e86:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e88:	d829      	bhi.n	8006ede <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	885b      	ldrh	r3, [r3, #2]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d104      	bne.n	8006eac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f9bc 	bl	8007222 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eaa:	e01d      	b.n	8006ee8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7bfa      	ldrb	r2, [r7, #15]
 8006eb0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 ff05 	bl	8007cc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa7a 	bl	80073b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed2:	e009      	b.n	8006ee8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006edc:	e004      	b.n	8006ee8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f99e 	bl	8007222 <USBD_CtlError>
  }
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	4b4e      	ldr	r3, [pc, #312]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f08:	4b4d      	ldr	r3, [pc, #308]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d905      	bls.n	8006f1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f985 	bl	8007222 <USBD_CtlError>
    return USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e08c      	b.n	8007036 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d002      	beq.n	8006f2e <USBD_SetConfig+0x3e>
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d029      	beq.n	8006f80 <USBD_SetConfig+0x90>
 8006f2c:	e075      	b.n	800701a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f2e:	4b44      	ldr	r3, [pc, #272]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d020      	beq.n	8006f78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f36:	4b42      	ldr	r3, [pc, #264]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f40:	4b3f      	ldr	r3, [pc, #252]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe ffe3 	bl	8005f12 <USBD_SetClassConfig>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f962 	bl	8007222 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2202      	movs	r2, #2
 8006f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f66:	e065      	b.n	8007034 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa25 	bl	80073b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2203      	movs	r2, #3
 8006f72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f76:	e05d      	b.n	8007034 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa1d 	bl	80073b8 <USBD_CtlSendStatus>
      break;
 8006f7e:	e059      	b.n	8007034 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f80:	4b2f      	ldr	r3, [pc, #188]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d112      	bne.n	8006fae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f90:	4b2b      	ldr	r3, [pc, #172]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f9a:	4b29      	ldr	r3, [pc, #164]	@ (8007040 <USBD_SetConfig+0x150>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fe ffd2 	bl	8005f4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa06 	bl	80073b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fac:	e042      	b.n	8007034 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006fae:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <USBD_SetConfig+0x150>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d02a      	beq.n	8007012 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fe ffc0 	bl	8005f4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fca:	4b1d      	ldr	r3, [pc, #116]	@ (8007040 <USBD_SetConfig+0x150>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007040 <USBD_SetConfig+0x150>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fe ff99 	bl	8005f12 <USBD_SetClassConfig>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00f      	beq.n	800700a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f918 	bl	8007222 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fe ffa5 	bl	8005f4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007008:	e014      	b.n	8007034 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f9d4 	bl	80073b8 <USBD_CtlSendStatus>
      break;
 8007010:	e010      	b.n	8007034 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f9d0 	bl	80073b8 <USBD_CtlSendStatus>
      break;
 8007018:	e00c      	b.n	8007034 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f900 	bl	8007222 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007022:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <USBD_SetConfig+0x150>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fe ff8e 	bl	8005f4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800702e:	2303      	movs	r3, #3
 8007030:	73fb      	strb	r3, [r7, #15]
      break;
 8007032:	bf00      	nop
  }

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000284 	.word	0x20000284

08007044 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d004      	beq.n	8007060 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8e2 	bl	8007222 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800705e:	e023      	b.n	80070a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	dc02      	bgt.n	8007072 <USBD_GetConfig+0x2e>
 800706c:	2b00      	cmp	r3, #0
 800706e:	dc03      	bgt.n	8007078 <USBD_GetConfig+0x34>
 8007070:	e015      	b.n	800709e <USBD_GetConfig+0x5a>
 8007072:	2b03      	cmp	r3, #3
 8007074:	d00b      	beq.n	800708e <USBD_GetConfig+0x4a>
 8007076:	e012      	b.n	800709e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3308      	adds	r3, #8
 8007082:	2201      	movs	r2, #1
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f93c 	bl	8007304 <USBD_CtlSendData>
        break;
 800708c:	e00c      	b.n	80070a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3304      	adds	r3, #4
 8007092:	2201      	movs	r2, #1
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f934 	bl	8007304 <USBD_CtlSendData>
        break;
 800709c:	e004      	b.n	80070a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f8be 	bl	8007222 <USBD_CtlError>
        break;
 80070a6:	bf00      	nop
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d81e      	bhi.n	8007106 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	88db      	ldrh	r3, [r3, #6]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d004      	beq.n	80070da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8a5 	bl	8007222 <USBD_CtlError>
        break;
 80070d8:	e01a      	b.n	8007110 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f043 0202 	orr.w	r2, r3, #2
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	330c      	adds	r3, #12
 80070fa:	2202      	movs	r2, #2
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f900 	bl	8007304 <USBD_CtlSendData>
      break;
 8007104:	e004      	b.n	8007110 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f88a 	bl	8007222 <USBD_CtlError>
      break;
 800710e:	bf00      	nop
  }
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	885b      	ldrh	r3, [r3, #2]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d107      	bne.n	800713a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f940 	bl	80073b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007138:	e013      	b.n	8007162 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d10b      	bne.n	800715a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	889b      	ldrh	r3, [r3, #4]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f930 	bl	80073b8 <USBD_CtlSendStatus>
}
 8007158:	e003      	b.n	8007162 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f860 	bl	8007222 <USBD_CtlError>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717a:	b2db      	uxtb	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	2b02      	cmp	r3, #2
 8007180:	d80b      	bhi.n	800719a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	885b      	ldrh	r3, [r3, #2]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10c      	bne.n	80071a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f910 	bl	80073b8 <USBD_CtlSendStatus>
      }
      break;
 8007198:	e004      	b.n	80071a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f840 	bl	8007222 <USBD_CtlError>
      break;
 80071a2:	e000      	b.n	80071a6 <USBD_ClrFeature+0x3c>
      break;
 80071a4:	bf00      	nop
  }
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3301      	adds	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fa40 	bl	800665e <SWAPBYTE>
 80071de:	4603      	mov	r3, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fa33 	bl	800665e <SWAPBYTE>
 80071f8:	4603      	mov	r3, r0
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff fa26 	bl	800665e <SWAPBYTE>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	80da      	strh	r2, [r3, #6]
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800722c:	2180      	movs	r1, #128	@ 0x80
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fce0 	bl	8007bf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007234:	2100      	movs	r1, #0
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fcdc 	bl	8007bf4 <USBD_LL_StallEP>
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d036      	beq.n	80072c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800725e:	6938      	ldr	r0, [r7, #16]
 8007260:	f000 f836 	bl	80072d0 <USBD_GetLen>
 8007264:	4603      	mov	r3, r0
 8007266:	3301      	adds	r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4413      	add	r3, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	701a      	strb	r2, [r3, #0]
  idx++;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	3301      	adds	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4413      	add	r3, r2
 800728a:	2203      	movs	r2, #3
 800728c:	701a      	strb	r2, [r3, #0]
  idx++;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	3301      	adds	r3, #1
 8007292:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007294:	e013      	b.n	80072be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4413      	add	r3, r2
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3301      	adds	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
    idx++;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	3301      	adds	r3, #1
 80072ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	4413      	add	r3, r2
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	3301      	adds	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e7      	bne.n	8007296 <USBD_GetString+0x52>
 80072c6:	e000      	b.n	80072ca <USBD_GetString+0x86>
    return;
 80072c8:	bf00      	nop
  }
}
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072e0:	e005      	b.n	80072ee <USBD_GetLen+0x1e>
  {
    len++;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	3301      	adds	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f5      	bne.n	80072e2 <USBD_GetLen+0x12>
  }

  return len;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2202      	movs	r2, #2
 8007314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fceb 	bl	8007d06 <USBD_LL_Transmit>

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	2100      	movs	r1, #0
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fcda 	bl	8007d06 <USBD_LL_Transmit>

  return USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2203      	movs	r2, #3
 800736c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	2100      	movs	r1, #0
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fcde 	bl	8007d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fccd 	bl	8007d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2204      	movs	r2, #4
 80073c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073c8:	2300      	movs	r3, #0
 80073ca:	2200      	movs	r2, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fc99 	bl	8007d06 <USBD_LL_Transmit>

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2205      	movs	r2, #5
 80073ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ee:	2300      	movs	r3, #0
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fca7 	bl	8007d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007408:	2200      	movs	r2, #0
 800740a:	4912      	ldr	r1, [pc, #72]	@ (8007454 <MX_USB_DEVICE_Init+0x50>)
 800740c:	4812      	ldr	r0, [pc, #72]	@ (8007458 <MX_USB_DEVICE_Init+0x54>)
 800740e:	f7fe fd03 	bl	8005e18 <USBD_Init>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007418:	f7f9 fa2e 	bl	8000878 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800741c:	490f      	ldr	r1, [pc, #60]	@ (800745c <MX_USB_DEVICE_Init+0x58>)
 800741e:	480e      	ldr	r0, [pc, #56]	@ (8007458 <MX_USB_DEVICE_Init+0x54>)
 8007420:	f7fe fd2a 	bl	8005e78 <USBD_RegisterClass>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800742a:	f7f9 fa25 	bl	8000878 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800742e:	490c      	ldr	r1, [pc, #48]	@ (8007460 <MX_USB_DEVICE_Init+0x5c>)
 8007430:	4809      	ldr	r0, [pc, #36]	@ (8007458 <MX_USB_DEVICE_Init+0x54>)
 8007432:	f7fe fc21 	bl	8005c78 <USBD_CDC_RegisterInterface>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800743c:	f7f9 fa1c 	bl	8000878 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007440:	4805      	ldr	r0, [pc, #20]	@ (8007458 <MX_USB_DEVICE_Init+0x54>)
 8007442:	f7fe fd4f 	bl	8005ee4 <USBD_Start>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800744c:	f7f9 fa14 	bl	8000878 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007450:	bf00      	nop
 8007452:	bd80      	pop	{r7, pc}
 8007454:	200000ac 	.word	0x200000ac
 8007458:	20000288 	.word	0x20000288
 800745c:	20000018 	.word	0x20000018
 8007460:	20000098 	.word	0x20000098

08007464 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007468:	2200      	movs	r2, #0
 800746a:	4905      	ldr	r1, [pc, #20]	@ (8007480 <CDC_Init_FS+0x1c>)
 800746c:	4805      	ldr	r0, [pc, #20]	@ (8007484 <CDC_Init_FS+0x20>)
 800746e:	f7fe fc1d 	bl	8005cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007472:	4905      	ldr	r1, [pc, #20]	@ (8007488 <CDC_Init_FS+0x24>)
 8007474:	4803      	ldr	r0, [pc, #12]	@ (8007484 <CDC_Init_FS+0x20>)
 8007476:	f7fe fc3b 	bl	8005cf0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800747a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800747c:	4618      	mov	r0, r3
 800747e:	bd80      	pop	{r7, pc}
 8007480:	200006a4 	.word	0x200006a4
 8007484:	20000288 	.word	0x20000288
 8007488:	20000564 	.word	0x20000564

0800748c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007490:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007492:	4618      	mov	r0, r3
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
 80074a8:	4613      	mov	r3, r2
 80074aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b23      	cmp	r3, #35	@ 0x23
 80074b0:	d84a      	bhi.n	8007548 <CDC_Control_FS+0xac>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <CDC_Control_FS+0x1c>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	08007549 	.word	0x08007549
 80074bc:	08007549 	.word	0x08007549
 80074c0:	08007549 	.word	0x08007549
 80074c4:	08007549 	.word	0x08007549
 80074c8:	08007549 	.word	0x08007549
 80074cc:	08007549 	.word	0x08007549
 80074d0:	08007549 	.word	0x08007549
 80074d4:	08007549 	.word	0x08007549
 80074d8:	08007549 	.word	0x08007549
 80074dc:	08007549 	.word	0x08007549
 80074e0:	08007549 	.word	0x08007549
 80074e4:	08007549 	.word	0x08007549
 80074e8:	08007549 	.word	0x08007549
 80074ec:	08007549 	.word	0x08007549
 80074f0:	08007549 	.word	0x08007549
 80074f4:	08007549 	.word	0x08007549
 80074f8:	08007549 	.word	0x08007549
 80074fc:	08007549 	.word	0x08007549
 8007500:	08007549 	.word	0x08007549
 8007504:	08007549 	.word	0x08007549
 8007508:	08007549 	.word	0x08007549
 800750c:	08007549 	.word	0x08007549
 8007510:	08007549 	.word	0x08007549
 8007514:	08007549 	.word	0x08007549
 8007518:	08007549 	.word	0x08007549
 800751c:	08007549 	.word	0x08007549
 8007520:	08007549 	.word	0x08007549
 8007524:	08007549 	.word	0x08007549
 8007528:	08007549 	.word	0x08007549
 800752c:	08007549 	.word	0x08007549
 8007530:	08007549 	.word	0x08007549
 8007534:	08007549 	.word	0x08007549
 8007538:	08007549 	.word	0x08007549
 800753c:	08007549 	.word	0x08007549
 8007540:	08007549 	.word	0x08007549
 8007544:	08007549 	.word	0x08007549
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007548:	bf00      	nop
  }

  return (USBD_OK);
 800754a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4805      	ldr	r0, [pc, #20]	@ (800757c <CDC_Receive_FS+0x24>)
 8007566:	f7fe fbc3 	bl	8005cf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800756a:	4804      	ldr	r0, [pc, #16]	@ (800757c <CDC_Receive_FS+0x24>)
 800756c:	f7fe fc1e 	bl	8005dac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007570:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000288 	.word	0x20000288

08007580 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007590:	4b0d      	ldr	r3, [pc, #52]	@ (80075c8 <CDC_Transmit_FS+0x48>)
 8007592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007596:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e00b      	b.n	80075be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075a6:	887b      	ldrh	r3, [r7, #2]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4806      	ldr	r0, [pc, #24]	@ (80075c8 <CDC_Transmit_FS+0x48>)
 80075ae:	f7fe fb7d 	bl	8005cac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075b2:	4805      	ldr	r0, [pc, #20]	@ (80075c8 <CDC_Transmit_FS+0x48>)
 80075b4:	f7fe fbba 	bl	8005d2c <USBD_CDC_TransmitPacket>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000288 	.word	0x20000288

080075cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2212      	movs	r2, #18
 8007600:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007602:	4b03      	ldr	r3, [pc, #12]	@ (8007610 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	200000c8 	.word	0x200000c8

08007614 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2204      	movs	r2, #4
 8007624:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	@ (8007634 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	200000dc 	.word	0x200000dc

08007638 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4907      	ldr	r1, [pc, #28]	@ (800766c <USBD_FS_ProductStrDescriptor+0x34>)
 800764e:	4808      	ldr	r0, [pc, #32]	@ (8007670 <USBD_FS_ProductStrDescriptor+0x38>)
 8007650:	f7ff fdf8 	bl	8007244 <USBD_GetString>
 8007654:	e004      	b.n	8007660 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4904      	ldr	r1, [pc, #16]	@ (800766c <USBD_FS_ProductStrDescriptor+0x34>)
 800765a:	4805      	ldr	r0, [pc, #20]	@ (8007670 <USBD_FS_ProductStrDescriptor+0x38>)
 800765c:	f7ff fdf2 	bl	8007244 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007660:	4b02      	ldr	r3, [pc, #8]	@ (800766c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200007e4 	.word	0x200007e4
 8007670:	08007ea8 	.word	0x08007ea8

08007674 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	4904      	ldr	r1, [pc, #16]	@ (8007694 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007684:	4804      	ldr	r0, [pc, #16]	@ (8007698 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007686:	f7ff fddd 	bl	8007244 <USBD_GetString>
  return USBD_StrDesc;
 800768a:	4b02      	ldr	r3, [pc, #8]	@ (8007694 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	200007e4 	.word	0x200007e4
 8007698:	08007eb4 	.word	0x08007eb4

0800769c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	221a      	movs	r2, #26
 80076ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076ae:	f000 f843 	bl	8007738 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076b2:	4b02      	ldr	r3, [pc, #8]	@ (80076bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	200000e0 	.word	0x200000e0

080076c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4907      	ldr	r1, [pc, #28]	@ (80076f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076d6:	4808      	ldr	r0, [pc, #32]	@ (80076f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076d8:	f7ff fdb4 	bl	8007244 <USBD_GetString>
 80076dc:	e004      	b.n	80076e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4904      	ldr	r1, [pc, #16]	@ (80076f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076e2:	4805      	ldr	r0, [pc, #20]	@ (80076f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076e4:	f7ff fdae 	bl	8007244 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076e8:	4b02      	ldr	r3, [pc, #8]	@ (80076f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	200007e4 	.word	0x200007e4
 80076f8:	08007ec8 	.word	0x08007ec8

080076fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	6039      	str	r1, [r7, #0]
 8007706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	4907      	ldr	r1, [pc, #28]	@ (8007730 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007712:	4808      	ldr	r0, [pc, #32]	@ (8007734 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007714:	f7ff fd96 	bl	8007244 <USBD_GetString>
 8007718:	e004      	b.n	8007724 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	4904      	ldr	r1, [pc, #16]	@ (8007730 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800771e:	4805      	ldr	r0, [pc, #20]	@ (8007734 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007720:	f7ff fd90 	bl	8007244 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007724:	4b02      	ldr	r3, [pc, #8]	@ (8007730 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200007e4 	.word	0x200007e4
 8007734:	08007ed4 	.word	0x08007ed4

08007738 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800773e:	4b0f      	ldr	r3, [pc, #60]	@ (800777c <Get_SerialNum+0x44>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007744:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <Get_SerialNum+0x48>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800774a:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <Get_SerialNum+0x4c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800775e:	2208      	movs	r2, #8
 8007760:	4909      	ldr	r1, [pc, #36]	@ (8007788 <Get_SerialNum+0x50>)
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f814 	bl	8007790 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007768:	2204      	movs	r2, #4
 800776a:	4908      	ldr	r1, [pc, #32]	@ (800778c <Get_SerialNum+0x54>)
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f000 f80f 	bl	8007790 <IntToUnicode>
  }
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	1fff7a10 	.word	0x1fff7a10
 8007780:	1fff7a14 	.word	0x1fff7a14
 8007784:	1fff7a18 	.word	0x1fff7a18
 8007788:	200000e2 	.word	0x200000e2
 800778c:	200000f2 	.word	0x200000f2

08007790 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]
 80077a6:	e027      	b.n	80077f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	0f1b      	lsrs	r3, r3, #28
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	d80b      	bhi.n	80077c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	0f1b      	lsrs	r3, r3, #28
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	4619      	mov	r1, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	440b      	add	r3, r1
 80077c0:	3230      	adds	r2, #48	@ 0x30
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	e00a      	b.n	80077de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	0f1b      	lsrs	r3, r3, #28
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	4619      	mov	r1, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	440b      	add	r3, r1
 80077d8:	3237      	adds	r2, #55	@ 0x37
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	3301      	adds	r3, #1
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	3301      	adds	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]
 80077f8:	7dfa      	ldrb	r2, [r7, #23]
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d3d3      	bcc.n	80077a8 <IntToUnicode+0x18>
  }
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	@ 0x28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	609a      	str	r2, [r3, #8]
 8007824:	60da      	str	r2, [r3, #12]
 8007826:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007830:	d13a      	bne.n	80078a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	4b1e      	ldr	r3, [pc, #120]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	4a1d      	ldr	r2, [pc, #116]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 800783c:	f043 0301 	orr.w	r3, r3, #1
 8007840:	6313      	str	r3, [r2, #48]	@ 0x30
 8007842:	4b1b      	ldr	r3, [pc, #108]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 8007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800784e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007854:	2302      	movs	r3, #2
 8007856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007858:	2300      	movs	r3, #0
 800785a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800785c:	2303      	movs	r3, #3
 800785e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007860:	230a      	movs	r3, #10
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	4619      	mov	r1, r3
 800786a:	4812      	ldr	r0, [pc, #72]	@ (80078b4 <HAL_PCD_MspInit+0xa4>)
 800786c:	f7f9 fc8c 	bl	8001188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007870:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 8007872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007874:	4a0e      	ldr	r2, [pc, #56]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 8007876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787a:	6353      	str	r3, [r2, #52]	@ 0x34
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	4b0b      	ldr	r3, [pc, #44]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 8007882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007884:	4a0a      	ldr	r2, [pc, #40]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 8007886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800788a:	6453      	str	r3, [r2, #68]	@ 0x44
 800788c:	4b08      	ldr	r3, [pc, #32]	@ (80078b0 <HAL_PCD_MspInit+0xa0>)
 800788e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007898:	2200      	movs	r2, #0
 800789a:	2100      	movs	r1, #0
 800789c:	2043      	movs	r0, #67	@ 0x43
 800789e:	f7f9 fc3c 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078a2:	2043      	movs	r0, #67	@ 0x43
 80078a4:	f7f9 fc55 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078a8:	bf00      	nop
 80078aa:	3728      	adds	r7, #40	@ 0x28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40023800 	.word	0x40023800
 80078b4:	40020000 	.word	0x40020000

080078b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7fe fb55 	bl	8005f7e <USBD_LL_SetupStage>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80078ee:	78fa      	ldrb	r2, [r7, #3]
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	4619      	mov	r1, r3
 8007906:	f7fe fb8f 	bl	8006028 <USBD_LL_DataOutStage>
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	3320      	adds	r3, #32
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	4619      	mov	r1, r3
 800793a:	f7fe fc28 	bl	800618e <USBD_LL_DataInStage>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fd62 	bl	800641e <USBD_LL_SOF>
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800796a:	2301      	movs	r3, #1
 800796c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	79db      	ldrb	r3, [r3, #7]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
 800797a:	e008      	b.n	800798e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	79db      	ldrb	r3, [r3, #7]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d102      	bne.n	800798a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
 8007988:	e001      	b.n	800798e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800798a:	f7f8 ff75 	bl	8000878 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007994:	7bfa      	ldrb	r2, [r7, #15]
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fcfc 	bl	8006396 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fca4 	bl	80062f2 <USBD_LL_Reset>
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fcf7 	bl	80063b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7adb      	ldrb	r3, [r3, #11]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079e8:	4b04      	ldr	r3, [pc, #16]	@ (80079fc <HAL_PCD_SuspendCallback+0x48>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	4a03      	ldr	r2, [pc, #12]	@ (80079fc <HAL_PCD_SuspendCallback+0x48>)
 80079ee:	f043 0306 	orr.w	r3, r3, #6
 80079f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	e000ed00 	.word	0xe000ed00

08007a00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fced 	bl	80063ee <USBD_LL_Resume>
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fd45 	bl	80064c2 <USBD_LL_IsoOUTIncomplete>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a52:	78fa      	ldrb	r2, [r7, #3]
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fd01 	bl	800645e <USBD_LL_IsoINIncomplete>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe fd57 	bl	8006526 <USBD_LL_DevConnected>
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fd54 	bl	800653c <USBD_LL_DevDisconnected>
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d13c      	bne.n	8007b26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007aac:	4a20      	ldr	r2, [pc, #128]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007ab8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007abc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007abe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ac2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aca:	4b19      	ldr	r3, [pc, #100]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007acc:	2202      	movs	r2, #2
 8007ace:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ad0:	4b17      	ldr	r3, [pc, #92]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ad6:	4b16      	ldr	r3, [pc, #88]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007ad8:	2202      	movs	r2, #2
 8007ada:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007adc:	4b14      	ldr	r3, [pc, #80]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ae2:	4b13      	ldr	r3, [pc, #76]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ae8:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007aee:	4b10      	ldr	r3, [pc, #64]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007af4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007afa:	480d      	ldr	r0, [pc, #52]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007afc:	f7f9 fcfb 	bl	80014f6 <HAL_PCD_Init>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b06:	f7f8 feb7 	bl	8000878 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b0a:	2180      	movs	r1, #128	@ 0x80
 8007b0c:	4808      	ldr	r0, [pc, #32]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007b0e:	f7fa ff26 	bl	800295e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b12:	2240      	movs	r2, #64	@ 0x40
 8007b14:	2100      	movs	r1, #0
 8007b16:	4806      	ldr	r0, [pc, #24]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007b18:	f7fa feda 	bl	80028d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b1c:	2280      	movs	r2, #128	@ 0x80
 8007b1e:	2101      	movs	r1, #1
 8007b20:	4803      	ldr	r0, [pc, #12]	@ (8007b30 <USBD_LL_Init+0x94>)
 8007b22:	f7fa fed5 	bl	80028d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200009e4 	.word	0x200009e4

08007b34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7f9 fde2 	bl	8001714 <HAL_PCD_Start>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f942 	bl	8007de0 <USBD_Get_USB_Status>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	461a      	mov	r2, r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	70fb      	strb	r3, [r7, #3]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70bb      	strb	r3, [r7, #2]
 8007b80:	4613      	mov	r3, r2
 8007b82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b92:	78bb      	ldrb	r3, [r7, #2]
 8007b94:	883a      	ldrh	r2, [r7, #0]
 8007b96:	78f9      	ldrb	r1, [r7, #3]
 8007b98:	f7fa fab6 	bl	8002108 <HAL_PCD_EP_Open>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f91c 	bl	8007de0 <USBD_Get_USB_Status>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fa faff 	bl	80021d8 <HAL_PCD_EP_Close>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f8fd 	bl	8007de0 <USBD_Get_USB_Status>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c0e:	78fa      	ldrb	r2, [r7, #3]
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fa fbb7 	bl	8002386 <HAL_PCD_EP_SetStall>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f8de 	bl	8007de0 <USBD_Get_USB_Status>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fa fbfb 	bl	800244c <HAL_PCD_EP_ClrStall>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f8bf 	bl	8007de0 <USBD_Get_USB_Status>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da0b      	bge.n	8007ca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3316      	adds	r3, #22
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	e00b      	b.n	8007cbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007caa:	68f9      	ldr	r1, [r7, #12]
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007cba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa f9ea 	bl	80020c0 <HAL_PCD_SetAddress>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f874 	bl	8007de0 <USBD_Get_USB_Status>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b086      	sub	sp, #24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	460b      	mov	r3, r1
 8007d14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d24:	7af9      	ldrb	r1, [r7, #11]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	f7fa faf2 	bl	8002312 <HAL_PCD_EP_Transmit>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 f853 	bl	8007de0 <USBD_Get_USB_Status>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	460b      	mov	r3, r1
 8007d56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d66:	7af9      	ldrb	r1, [r7, #11]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	f7fa fa7e 	bl	800226c <HAL_PCD_EP_Receive>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f832 	bl	8007de0 <USBD_Get_USB_Status>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d80:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	4611      	mov	r1, r2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fa fa9e 	bl	80022e2 <HAL_PCD_EP_GetRxCount>
 8007da6:	4603      	mov	r3, r0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007db8:	4b03      	ldr	r3, [pc, #12]	@ (8007dc8 <USBD_static_malloc+0x18>)
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000ec8 	.word	0x20000ec8

08007dcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]

}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d817      	bhi.n	8007e24 <USBD_Get_USB_Status+0x44>
 8007df4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <USBD_Get_USB_Status+0x1c>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e13 	.word	0x08007e13
 8007e04:	08007e19 	.word	0x08007e19
 8007e08:	08007e1f 	.word	0x08007e1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e10:	e00b      	b.n	8007e2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
    break;
 8007e16:	e008      	b.n	8007e2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1c:	e005      	b.n	8007e2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	73fb      	strb	r3, [r7, #15]
    break;
 8007e22:	e002      	b.n	8007e2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e24:	2303      	movs	r3, #3
 8007e26:	73fb      	strb	r3, [r7, #15]
    break;
 8007e28:	bf00      	nop
  }
  return usb_status;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <memset>:
 8007e38:	4402      	add	r2, r0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d100      	bne.n	8007e42 <memset+0xa>
 8007e40:	4770      	bx	lr
 8007e42:	f803 1b01 	strb.w	r1, [r3], #1
 8007e46:	e7f9      	b.n	8007e3c <memset+0x4>

08007e48 <__libc_init_array>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e80 <__libc_init_array+0x38>)
 8007e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e84 <__libc_init_array+0x3c>)
 8007e4e:	1b64      	subs	r4, r4, r5
 8007e50:	10a4      	asrs	r4, r4, #2
 8007e52:	2600      	movs	r6, #0
 8007e54:	42a6      	cmp	r6, r4
 8007e56:	d109      	bne.n	8007e6c <__libc_init_array+0x24>
 8007e58:	4d0b      	ldr	r5, [pc, #44]	@ (8007e88 <__libc_init_array+0x40>)
 8007e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e8c <__libc_init_array+0x44>)
 8007e5c:	f000 f818 	bl	8007e90 <_init>
 8007e60:	1b64      	subs	r4, r4, r5
 8007e62:	10a4      	asrs	r4, r4, #2
 8007e64:	2600      	movs	r6, #0
 8007e66:	42a6      	cmp	r6, r4
 8007e68:	d105      	bne.n	8007e76 <__libc_init_array+0x2e>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e70:	4798      	blx	r3
 8007e72:	3601      	adds	r6, #1
 8007e74:	e7ee      	b.n	8007e54 <__libc_init_array+0xc>
 8007e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7a:	4798      	blx	r3
 8007e7c:	3601      	adds	r6, #1
 8007e7e:	e7f2      	b.n	8007e66 <__libc_init_array+0x1e>
 8007e80:	08007efc 	.word	0x08007efc
 8007e84:	08007efc 	.word	0x08007efc
 8007e88:	08007efc 	.word	0x08007efc
 8007e8c:	08007f00 	.word	0x08007f00

08007e90 <_init>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr

08007e9c <_fini>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr
