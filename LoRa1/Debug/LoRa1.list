
LoRa1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007df4  08007df4  00008df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e40  08007e40  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007e40  08007e40  00008e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e48  08007e48  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e4c  08007e4c  00008e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007e50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  200000fc  08007f4c  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  08007f4c  0000a0e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010421  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd1  00000000  00000000  0001954d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  0001d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018336  00000000  00000000  0001dc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012478  00000000  00000000  00035fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008871c  00000000  00000000  0004842f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0b4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000d0b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d4164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007ddc 	.word	0x08007ddc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007ddc 	.word	0x08007ddc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ca:	f000 fc75 	bl	8000db8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ce:	f000 f867 	bl	80005a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d2:	f000 f907 	bl	80006e4 <MX_GPIO_Init>
	MX_SPI1_Init();
 80004d6:	f000 f8cf 	bl	8000678 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80004da:	f006 ff39 	bl	8007350 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */


	while (!hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].is_used)
 80004de:	bf00      	nop
 80004e0:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <main+0xc4>)
 80004e2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0fb      	beq.n	80004e0 <main+0x1c>
		;

	hCDC = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 80004e8:	4b27      	ldr	r3, [pc, #156]	@ (8000588 <main+0xc4>)
 80004ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80004ee:	4a27      	ldr	r2, [pc, #156]	@ (800058c <main+0xc8>)
 80004f0:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	@ 0x64
 80004f4:	f000 fcd2 	bl	8000e9c <HAL_Delay>

	if (LORA_Init(&hspi1, SPI1_NSS_GPIO_Port, SPI1_NSS_Pin)) {
 80004f8:	2210      	movs	r2, #16
 80004fa:	4925      	ldr	r1, [pc, #148]	@ (8000590 <main+0xcc>)
 80004fc:	4825      	ldr	r0, [pc, #148]	@ (8000594 <main+0xd0>)
 80004fe:	f000 f981 	bl	8000804 <LORA_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <main+0x52>
		LED_ERR_GPIO_Port->ODR |= LED_ERR_Pin;
 8000508:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <main+0xd4>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a22      	ldr	r2, [pc, #136]	@ (8000598 <main+0xd4>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000512:	6153      	str	r3, [r2, #20]
 8000514:	e005      	b.n	8000522 <main+0x5e>
	} else {
		LED_ON_GPIO_Port->ODR |= LED_ON_Pin;
 8000516:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <main+0xd4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a1f      	ldr	r2, [pc, #124]	@ (8000598 <main+0xd4>)
 800051c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000520:	6153      	str	r3, [r2, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t packetSize = LORA_ReceiveData(receiveData);
 8000522:	481e      	ldr	r0, [pc, #120]	@ (800059c <main+0xd8>)
 8000524:	f000 fa54 	bl	80009d0 <LORA_ReceiveData>
 8000528:	4603      	mov	r3, r0
 800052a:	71fb      	strb	r3, [r7, #7]

		if (packetSize) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d005      	beq.n	800053e <main+0x7a>
			CDC_Transmit_FS(receiveData, packetSize);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	b29b      	uxth	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	4818      	ldr	r0, [pc, #96]	@ (800059c <main+0xd8>)
 800053a:	f006 ffc7 	bl	80074cc <CDC_Transmit_FS>
		}

		if (hCDC->RxLength) {
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <main+0xc8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0eb      	beq.n	8000522 <main+0x5e>
			LED_ON_GPIO_Port->ODR &= ~LED_ON_Pin;
 800054a:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <main+0xd4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <main+0xd4>)
 8000550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000554:	6153      	str	r3, [r2, #20]

			LORA_TransmitData(hCDC->RxBuffer, hCDC->RxLength);
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <main+0xc8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <main+0xc8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	4610      	mov	r0, r2
 800056c:	f000 fae4 	bl	8000b38 <LORA_TransmitData>
			hCDC->RxLength = 0;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <main+0xc8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

			LED_ON_GPIO_Port->ODR |= LED_ON_Pin;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <main+0xd4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a06      	ldr	r2, [pc, #24]	@ (8000598 <main+0xd4>)
 8000580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000584:	6153      	str	r3, [r2, #20]
	while (1) {
 8000586:	e7cc      	b.n	8000522 <main+0x5e>
 8000588:	20000288 	.word	0x20000288
 800058c:	20000270 	.word	0x20000270
 8000590:	40020000 	.word	0x40020000
 8000594:	20000118 	.word	0x20000118
 8000598:	40020400 	.word	0x40020400
 800059c:	20000170 	.word	0x20000170

080005a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	@ 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f007 fbe8 	bl	8007d84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd4>)
 80005ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 12;
 8000614:	230c      	movs	r3, #12
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000618:	2348      	movs	r3, #72	@ 0x48
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f002 f95b 	bl	80028e4 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x98>
		Error_Handler();
 8000634:	f000 f8e0 	bl	80007f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2102      	movs	r1, #2
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fbbd 	bl	8002dd4 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc4>
		Error_Handler();
 8000660:	f000 f8ca 	bl	80007f8 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000664:	f002 fc9c 	bl	8002fa0 <HAL_RCC_EnableCSS>
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_SPI1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <MX_SPI1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_SPI1_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000688:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006ac:	2218      	movs	r2, #24
 80006ae:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_SPI1_Init+0x64>)
 80006ca:	f002 fd62 	bl	8003192 <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80006d4:	f000 f890 	bl	80007f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000118 	.word	0x20000118
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b37      	ldr	r3, [pc, #220]	@ (80007e8 <MX_GPIO_Init+0x104>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <MX_GPIO_Init+0x104>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a32      	ldr	r2, [pc, #200]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a2b      	ldr	r2, [pc, #172]	@ (80007e8 <MX_GPIO_Init+0x104>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_GPIO_Init+0x104>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2110      	movs	r1, #16
 800076e:	481f      	ldr	r0, [pc, #124]	@ (80007ec <MX_GPIO_Init+0x108>)
 8000770:	f000 fe4e 	bl	8001410 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS2_GPIO_Port, SPI1_NSS2_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	481d      	ldr	r0, [pc, #116]	@ (80007f0 <MX_GPIO_Init+0x10c>)
 800077a:	f000 fe49 	bl	8001410 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_ON_Pin | LED_ERR_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000784:	481b      	ldr	r0, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0x110>)
 8000786:	f000 fe43 	bl	8001410 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800078a:	2310      	movs	r3, #16
 800078c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2302      	movs	r3, #2
 8000798:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4812      	ldr	r0, [pc, #72]	@ (80007ec <MX_GPIO_Init+0x108>)
 80007a2:	f000 fcb1 	bl	8001108 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS2_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <MX_GPIO_Init+0x10c>)
 80007be:	f000 fca3 	bl	8001108 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_ON_Pin LED_ERR_Pin */
	GPIO_InitStruct.Pin = LED_ON_Pin | LED_ERR_Pin;
 80007c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80007c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <MX_GPIO_Init+0x110>)
 80007dc:	f000 fc94 	bl	8001108 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020400 	.word	0x40020400

080007f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	4613      	mov	r3, r2
 8000810:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 8000812:	4a32      	ldr	r2, [pc, #200]	@ (80008dc <LORA_Init+0xd8>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 8000818:	4a31      	ldr	r2, [pc, #196]	@ (80008e0 <LORA_Init+0xdc>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 800081e:	4a31      	ldr	r2, [pc, #196]	@ (80008e4 <LORA_Init+0xe0>)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 8000824:	2042      	movs	r0, #66	@ 0x42
 8000826:	f000 f861 	bl	80008ec <_loraReadReg>
 800082a:	4603      	mov	r3, r0
 800082c:	2b12      	cmp	r3, #18
 800082e:	d001      	beq.n	8000834 <LORA_Init+0x30>
		return 1;
 8000830:	2301      	movs	r3, #1
 8000832:	e04e      	b.n	80008d2 <LORA_Init+0xce>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f88e 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 800083c:	2188      	movs	r1, #136	@ 0x88
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f88a 	bl	8000958 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (LORA_SET_FREQ << 19) / 32;
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <LORA_Init+0xe4>)
 8000846:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	2006      	movs	r0, #6
 8000852:	f000 f881 	bl	8000958 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	2007      	movs	r0, #7
 8000860:	f000 f87a 	bl	8000958 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4619      	mov	r1, r3
 800086a:	2008      	movs	r0, #8
 800086c:	f000 f874 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8000870:	21ff      	movs	r1, #255	@ 0xff
 8000872:	2009      	movs	r0, #9
 8000874:	f000 f870 	bl	8000958 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8000878:	210b      	movs	r1, #11
 800087a:	200b      	movs	r0, #11
 800087c:	f000 f86c 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8000880:	2120      	movs	r1, #32
 8000882:	200c      	movs	r0, #12
 8000884:	f000 f868 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8000888:	21ff      	movs	r1, #255	@ 0xff
 800088a:	200e      	movs	r0, #14
 800088c:	f000 f864 	bl	8000958 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8000890:	2100      	movs	r1, #0
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f860 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8000898:	2182      	movs	r1, #130	@ 0x82
 800089a:	201d      	movs	r0, #29
 800089c:	f000 f85c 	bl	8000958 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 80008a0:	2170      	movs	r1, #112	@ 0x70
 80008a2:	201e      	movs	r0, #30
 80008a4:	f000 f858 	bl	8000958 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2020      	movs	r0, #32
 80008ac:	f000 f854 	bl	8000958 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 80008b0:	2106      	movs	r1, #6
 80008b2:	2021      	movs	r0, #33	@ 0x21
 80008b4:	f000 f850 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 80008b8:	213c      	movs	r1, #60	@ 0x3c
 80008ba:	2022      	movs	r0, #34	@ 0x22
 80008bc:	f000 f84c 	bl	8000958 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 80008c0:	213c      	movs	r1, #60	@ 0x3c
 80008c2:	2023      	movs	r0, #35	@ 0x23
 80008c4:	f000 f848 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 80008c8:	2105      	movs	r1, #5
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 f844 	bl	8000958 <_loraWriteReg>

	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000274 	.word	0x20000274
 80008e0:	20000278 	.word	0x20000278
 80008e4:	2000027c 	.word	0x2000027c
 80008e8:	006c4000 	.word	0x006c4000

080008ec <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <_loraReadReg+0x60>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <_loraReadReg+0x64>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <_loraReadReg+0x60>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <_loraReadReg+0x68>)
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	1df9      	adds	r1, r7, #7
 8000912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000916:	2201      	movs	r2, #1
 8000918:	f002 fcc4 	bl	80032a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <_loraReadReg+0x68>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	1df9      	adds	r1, r7, #7
 8000922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000926:	2201      	movs	r2, #1
 8000928:	f002 fdff 	bl	800352a <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <_loraReadReg+0x60>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <_loraReadReg+0x64>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <_loraReadReg+0x60>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	430a      	orrs	r2, r1
 800093e:	615a      	str	r2, [r3, #20]
	return reg;
 8000940:	79fb      	ldrb	r3, [r7, #7]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000278 	.word	0x20000278
 8000950:	2000027c 	.word	0x2000027c
 8000954:	20000274 	.word	0x20000274

08000958 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <_loraWriteReg+0x6c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	695a      	ldr	r2, [r3, #20]
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <_loraWriteReg+0x70>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	43db      	mvns	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <_loraWriteReg+0x6c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	400a      	ands	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <_loraWriteReg+0x74>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	1df9      	adds	r1, r7, #7
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	2201      	movs	r2, #1
 8000994:	f002 fc86 	bl	80032a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <_loraWriteReg+0x74>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	1db9      	adds	r1, r7, #6
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	2201      	movs	r2, #1
 80009a4:	f002 fc7e 	bl	80032a4 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <_loraWriteReg+0x6c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	695a      	ldr	r2, [r3, #20]
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <_loraWriteReg+0x70>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <_loraWriteReg+0x6c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	430a      	orrs	r2, r1
 80009ba:	615a      	str	r2, [r3, #20]
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000278 	.word	0x20000278
 80009c8:	2000027c 	.word	0x2000027c
 80009cc:	20000274 	.word	0x20000274

080009d0 <LORA_ReceiveData>:

uint8_t LORA_ReceiveData(uint8_t *data) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	if (_loraReadReg(LORA_REG_FLAGS) & (LORA_FLAGS_RX_DONE)) {
 80009d8:	2012      	movs	r0, #18
 80009da:	f7ff ff87 	bl	80008ec <_loraReadReg>
 80009de:	4603      	mov	r3, r0
 80009e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 809c 	beq.w	8000b22 <LORA_ReceiveData+0x152>
		_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_RX_DONE);
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	2012      	movs	r0, #18
 80009ee:	f7ff ffb3 	bl	8000958 <_loraWriteReg>

		uint8_t packetSize = _loraReadReg(LORA_REG_RX_NB_BYTES);
 80009f2:	2013      	movs	r0, #19
 80009f4:	f7ff ff7a 	bl	80008ec <_loraReadReg>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]
		uint8_t curAddr = _loraReadReg(LORA_REG_FIFO_RX_CUR);
 80009fc:	2010      	movs	r0, #16
 80009fe:	f7ff ff75 	bl	80008ec <_loraReadReg>
 8000a02:	4603      	mov	r3, r0
 8000a04:	73bb      	strb	r3, [r7, #14]
		uint8_t regFifo = LORA_REG_FIFO;
 8000a06:	2300      	movs	r3, #0
 8000a08:	733b      	strb	r3, [r7, #12]

		_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, curAddr);
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	200d      	movs	r0, #13
 8000a10:	f7ff ffa2 	bl	8000958 <_loraWriteReg>

		uint8_t spaceLeft = 255 - curAddr;
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	737b      	strb	r3, [r7, #13]
		if (spaceLeft >= packetSize) {
 8000a1a:	7b7a      	ldrb	r2, [r7, #13]
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d327      	bcc.n	8000a72 <LORA_ReceiveData+0xa2>
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <LORA_ReceiveData+0x160>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4b3e      	ldr	r3, [pc, #248]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	400a      	ands	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000a38:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <LORA_ReceiveData+0x164>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	f107 010c 	add.w	r1, r7, #12
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	2201      	movs	r2, #1
 8000a46:	f002 fc2d 	bl	80032a4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize, 1000);
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <LORA_ReceiveData+0x164>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f002 fd67 	bl	800352a <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000a5c:	4b33      	ldr	r3, [pc, #204]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <LORA_ReceiveData+0x160>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4b30      	ldr	r3, [pc, #192]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	e055      	b.n	8000b1e <LORA_ReceiveData+0x14e>
		} else {
			_nssPort->ODR &= ~_nssPin; // nss 0
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	695a      	ldr	r2, [r3, #20]
 8000a78:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <LORA_ReceiveData+0x160>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	400a      	ands	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000a88:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <LORA_ReceiveData+0x164>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f107 010c 	add.w	r1, r7, #12
 8000a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a94:	2201      	movs	r2, #1
 8000a96:	f002 fc05 	bl	80032a4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, spaceLeft, 1000);
 8000a9a:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <LORA_ReceiveData+0x164>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	7b7b      	ldrb	r3, [r7, #13]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f002 fd3f 	bl	800352a <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <LORA_ReceiveData+0x160>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	615a      	str	r2, [r3, #20]

			_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	200d      	movs	r0, #13
 8000ac4:	f7ff ff48 	bl	8000958 <_loraWriteReg>

			_nssPort->ODR &= ~_nssPin; // nss 0
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	695a      	ldr	r2, [r3, #20]
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <LORA_ReceiveData+0x160>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	400a      	ands	r2, r1
 8000adc:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <LORA_ReceiveData+0x164>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f107 010c 	add.w	r1, r7, #12
 8000ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aea:	2201      	movs	r2, #1
 8000aec:	f002 fbda 	bl	80032a4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize - spaceLeft, 1000);
 8000af0:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <LORA_ReceiveData+0x164>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	f002 fd10 	bl	800352a <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <LORA_ReceiveData+0x160>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <LORA_ReceiveData+0x15c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	615a      	str	r2, [r3, #20]
		}
		return packetSize;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	e000      	b.n	8000b24 <LORA_ReceiveData+0x154>
	}
	return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000278 	.word	0x20000278
 8000b30:	2000027c 	.word	0x2000027c
 8000b34:	20000274 	.word	0x20000274

08000b38 <LORA_TransmitData>:

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8000b44:	21ff      	movs	r1, #255	@ 0xff
 8000b46:	200d      	movs	r0, #13
 8000b48:	f7ff ff06 	bl	8000958 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2022      	movs	r0, #34	@ 0x22
 8000b52:	f7ff ff01 	bl	8000958 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <LORA_TransmitData+0xa4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <LORA_TransmitData+0xa8>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <LORA_TransmitData+0xa4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <LORA_TransmitData+0xac>)
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	f107 010f 	add.w	r1, r7, #15
 8000b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f002 fb91 	bl	80032a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <LORA_TransmitData+0xac>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f002 fb88 	bl	80032a4 <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <LORA_TransmitData+0xa4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <LORA_TransmitData+0xa8>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <LORA_TransmitData+0xa4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8000ba8:	2103      	movs	r1, #3
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fed4 	bl	8000958 <_loraWriteReg>
	while(!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE));
 8000bb0:	bf00      	nop
 8000bb2:	2012      	movs	r0, #18
 8000bb4:	f7ff fe9a 	bl	80008ec <_loraReadReg>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f7      	beq.n	8000bb2 <LORA_TransmitData+0x7a>
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	2012      	movs	r0, #18
 8000bc6:	f7ff fec7 	bl	8000958 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8000bca:	2105      	movs	r1, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fec3 	bl	8000958 <_loraWriteReg>

}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000278 	.word	0x20000278
 8000be0:	2000027c 	.word	0x2000027c
 8000be4:	20000274 	.word	0x20000274

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <HAL_SPI_MspInit+0x84>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12b      	bne.n	8000cb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c92:	2338      	movs	r3, #56	@ 0x38
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000cae:	f000 fa2b 	bl	8001108 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	@ 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ccc:	f002 fa46 	bl	800315c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x8>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 f89b 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <OTG_FS_IRQHandler+0x10>)
 8000d32:	f000 fcca 	bl	80016ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200009e4 	.word	0x200009e4

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f006 ffff 	bl	8007d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fb95 	bl	80004c4 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000da8:	08007e50 	.word	0x08007e50
  ldr r2, =_sbss
 8000dac:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000db0:	200010e8 	.word	0x200010e8

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f94f 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fefc 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f967 	bl	80010ee <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f92f 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000280 	.word	0x20000280

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000280 	.word	0x20000280

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e159      	b.n	80013d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8148 	bne.w	80013d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	2b02      	cmp	r3, #2
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a2 	beq.w	80013d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b57      	ldr	r3, [pc, #348]	@ (80013f0 <HAL_GPIO_Init+0x2e8>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a56      	ldr	r2, [pc, #344]	@ (80013f0 <HAL_GPIO_Init+0x2e8>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b54      	ldr	r3, [pc, #336]	@ (80013f0 <HAL_GPIO_Init+0x2e8>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012aa:	4a52      	ldr	r2, [pc, #328]	@ (80013f4 <HAL_GPIO_Init+0x2ec>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a49      	ldr	r2, [pc, #292]	@ (80013f8 <HAL_GPIO_Init+0x2f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x202>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a48      	ldr	r2, [pc, #288]	@ (80013fc <HAL_GPIO_Init+0x2f4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x1fe>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a47      	ldr	r2, [pc, #284]	@ (8001400 <HAL_GPIO_Init+0x2f8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <HAL_GPIO_Init+0x2fc>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x1f6>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a45      	ldr	r2, [pc, #276]	@ (8001408 <HAL_GPIO_Init+0x300>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x1f2>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x204>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x204>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x204>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x204>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x204>
 800130a:	2300      	movs	r3, #0
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131c:	4935      	ldr	r1, [pc, #212]	@ (80013f4 <HAL_GPIO_Init+0x2ec>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b38      	ldr	r3, [pc, #224]	@ (800140c <HAL_GPIO_Init+0x304>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a2f      	ldr	r2, [pc, #188]	@ (800140c <HAL_GPIO_Init+0x304>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_GPIO_Init+0x304>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a24      	ldr	r2, [pc, #144]	@ (800140c <HAL_GPIO_Init+0x304>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <HAL_GPIO_Init+0x304>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a2:	4a1a      	ldr	r2, [pc, #104]	@ (800140c <HAL_GPIO_Init+0x304>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_GPIO_Init+0x304>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013cc:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <HAL_GPIO_Init+0x304>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f67f aea2 	bls.w	8001124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af02      	add	r7, sp, #8
 8001448:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e101      	b.n	8001658 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f006 f974 	bl	800775c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001482:	d102      	bne.n	800148a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fd6d 	bl	8003f6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7c1a      	ldrb	r2, [r3, #16]
 800149c:	f88d 2000 	strb.w	r2, [sp]
 80014a0:	3304      	adds	r3, #4
 80014a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a4:	f002 fc4c 	bl	8003d40 <USB_CoreInit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2202      	movs	r2, #2
 80014b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0ce      	b.n	8001658 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fd65 	bl	8003f90 <USB_SetCurrentMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0bf      	b.n	8001658 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e04a      	b.n	8001574 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3315      	adds	r3, #21
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3314      	adds	r3, #20
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	b298      	uxth	r0, r3
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	332e      	adds	r3, #46	@ 0x2e
 800151a:	4602      	mov	r2, r0
 800151c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3318      	adds	r3, #24
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	331c      	adds	r3, #28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3320      	adds	r3, #32
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3324      	adds	r3, #36	@ 0x24
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3301      	adds	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3af      	bcc.n	80014de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e044      	b.n	800160e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	791b      	ldrb	r3, [r3, #4]
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3b5      	bcc.n	8001584 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7c1a      	ldrb	r2, [r3, #16]
 8001620:	f88d 2000 	strb.w	r2, [sp]
 8001624:	3304      	adds	r3, #4
 8001626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001628:	f002 fcfe 	bl	8004028 <USB_DevInit>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00c      	b.n	8001658 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fd42 	bl	80050da <USB_DevDisconnect>

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_PCD_Start+0x1c>
 8001678:	2302      	movs	r3, #2
 800167a:	e022      	b.n	80016c2 <HAL_PCD_Start+0x62>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fc4f 	bl	8003f4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fcf0 	bl	8005098 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ca:	b590      	push	{r4, r7, lr}
 80016cc:	b08d      	sub	sp, #52	@ 0x34
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fdae 	bl	8005242 <USB_GetMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f040 848c 	bne.w	8002006 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fd12 	bl	800511c <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8482 	beq.w	8002004 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fcff 	bl	800511c <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d107      	bne.n	8001738 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f002 0202 	and.w	r2, r2, #2
 8001736:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fced 	bl	800511c <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b10      	cmp	r3, #16
 800174a:	d161      	bne.n	8001810 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0210 	bic.w	r2, r2, #16
 800175a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f003 020f 	and.w	r2, r3, #15
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	0c5b      	lsrs	r3, r3, #17
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	2b02      	cmp	r3, #2
 8001786:	d124      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d035      	beq.n	8001800 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800179e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	6a38      	ldr	r0, [r7, #32]
 80017a8:	f003 fb24 	bl	8004df4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b8:	441a      	add	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ca:	441a      	add	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	e016      	b.n	8001800 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	0c5b      	lsrs	r3, r3, #17
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d110      	bne.n	8001800 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017e4:	2208      	movs	r2, #8
 80017e6:	4619      	mov	r1, r3
 80017e8:	6a38      	ldr	r0, [r7, #32]
 80017ea:	f003 fb03 	bl	8004df4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fa:	441a      	add	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0210 	orr.w	r2, r2, #16
 800180e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fc81 	bl	800511c <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001820:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001824:	f040 80a7 	bne.w	8001976 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fc86 	bl	8005142 <USB_ReadDevAllOutEpInterrupt>
 8001836:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001838:	e099      	b.n	800196e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800183a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808e 	beq.w	8001962 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fcaa 	bl	80051aa <USB_ReadDevOutEPInterrupt>
 8001856:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00c      	beq.n	800187c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800186e:	461a      	mov	r2, r3
 8001870:	2301      	movs	r3, #1
 8001872:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fea2 	bl	80025c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00c      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001892:	461a      	mov	r2, r3
 8001894:	2308      	movs	r3, #8
 8001896:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 ff78 	bl	8002790 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018b6:	461a      	mov	r2, r3
 80018b8:	2310      	movs	r3, #16
 80018ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ce:	2b80      	cmp	r3, #128	@ 0x80
 80018d0:	d109      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2200      	movs	r2, #0
 8001908:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f006 f829 	bl	8007968 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	2302      	movs	r3, #2
 8001926:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	2320      	movs	r3, #32
 8001942:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800195a:	461a      	mov	r2, r3
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f af62 	bne.w	800183a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fbce 	bl	800511c <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001986:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800198a:	f040 80db 	bne.w	8001b44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fbef 	bl	8005176 <USB_ReadDevAllInEpInterrupt>
 8001998:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800199e:	e0cd      	b.n	8001b3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80c2 	beq.w	8001b30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fc15 	bl	80051e6 <USB_ReadDevInEPInterrupt>
 80019bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d057      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	2201      	movs	r2, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69f9      	ldr	r1, [r7, #28]
 80019e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80019e8:	4013      	ands	r3, r2
 80019ea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019f8:	461a      	mov	r2, r3
 80019fa:	2301      	movs	r3, #1
 80019fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	799b      	ldrb	r3, [r3, #6]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d132      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3320      	adds	r3, #32
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4403      	add	r3, r0
 8001a26:	331c      	adds	r3, #28
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4419      	add	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4403      	add	r3, r0
 8001a3a:	3320      	adds	r3, #32
 8001a3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d113      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x3a2>
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3324      	adds	r3, #36	@ 0x24
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a64:	461a      	mov	r2, r3
 8001a66:	2101      	movs	r1, #1
 8001a68:	f003 fc1c 	bl	80052a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f005 fef3 	bl	800785e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2308      	movs	r3, #8
 8001a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2310      	movs	r3, #16
 8001aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	015a      	lsls	r2, r3, #5
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2340      	movs	r3, #64	@ 0x40
 8001aca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d023      	beq.n	8001b1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ad6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ad8:	6a38      	ldr	r0, [r7, #32]
 8001ada:	f002 fc09 	bl	80042f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	3310      	adds	r3, #16
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d108      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2200      	movs	r2, #0
 8001afe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f005 ff40 	bl	800798c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fcbb 	bl	80024a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	3301      	adds	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f47f af2e 	bne.w	80019a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fae7 	bl	800511c <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b58:	d122      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fea2 	bl	80028cc <HAL_PCDEx_LPM_Callback>
 8001b88:	e002      	b.n	8001b90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f005 fede 	bl	800794c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fab9 	bl	800511c <USB_ReadInterrupts>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bb4:	d112      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f005 fe9a 	bl	8007900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001bda:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fa9b 	bl	800511c <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bf0:	f040 80b7 	bne.w	8001d62 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fb6e 	bl	80042f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c18:	e046      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c26:	461a      	mov	r2, r3
 8001c28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3e:	0151      	lsls	r1, r2, #5
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	440a      	add	r2, r1
 8001c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c72:	0151      	lsls	r1, r2, #5
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	440a      	add	r2, r1
 8001c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c92:	0151      	lsls	r1, r2, #5
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	440a      	add	r2, r1
 8001c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ca0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	791b      	ldrb	r3, [r3, #4]
 8001cac:	461a      	mov	r2, r3
 8001cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d3b2      	bcc.n	8001c1a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cc2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001cc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7bdb      	ldrb	r3, [r3, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d016      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ce0:	f043 030b 	orr.w	r3, r3, #11
 8001ce4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cf6:	f043 030b 	orr.w	r3, r3, #11
 8001cfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfc:	e015      	b.n	8001d2a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d10:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001d14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d24:	f043 030b 	orr.w	r3, r3, #11
 8001d28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d38:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f003 faa9 	bl	80052a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 f9d8 	bl	800511c <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d76:	d123      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fa6e 	bl	800525e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fb2b 	bl	80043e2 <USB_GetDevSpeed>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	f001 f9d4 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001da2:	461a      	mov	r2, r3
 8001da4:	4620      	mov	r0, r4
 8001da6:	f002 f82f 	bl	8003e08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f005 fd7f 	bl	80078ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 f9a9 	bl	800511c <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d10a      	bne.n	8001dea <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f005 fd5c 	bl	8007892 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f002 0208 	and.w	r2, r2, #8
 8001de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 f994 	bl	800511c <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfa:	2b80      	cmp	r3, #128	@ 0x80
 8001dfc:	d123      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0e:	e014      	b.n	8001e3a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fb08 	bl	8002444 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	3301      	adds	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	791b      	ldrb	r3, [r3, #4]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d3e4      	bcc.n	8001e10 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 f966 	bl	800511c <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e5a:	d13c      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e60:	e02b      	b.n	8001eba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3318      	adds	r3, #24
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d115      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da12      	bge.n	8001eb4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3317      	adds	r3, #23
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fac8 	bl	8002444 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d3cd      	bcc.n	8001e62 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f91e 	bl	800511c <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001eea:	d156      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eec:	2301      	movs	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef0:	e045      	b.n	8001f7e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12e      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da2b      	bge.n	8001f78 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001f2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d121      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f74:	6053      	str	r3, [r2, #4]
            break;
 8001f76:	e008      	b.n	8001f8a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d3b3      	bcc.n	8001ef2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 f8bc 	bl	800511c <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fae:	d10a      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f005 fcfd 	bl	80079b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f8a6 	bl	800511c <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d115      	bne.n	8002006 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f005 fced 	bl	80079cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	e000      	b.n	8002006 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002004:	bf00      	nop
    }
  }
}
 8002006:	3734      	adds	r7, #52	@ 0x34
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_PCD_SetAddress+0x1a>
 8002022:	2302      	movs	r3, #2
 8002024:	e012      	b.n	800204c <HAL_PCD_SetAddress+0x40>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f003 f805 	bl	800504c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4603      	mov	r3, r0
 8002064:	70fb      	strb	r3, [r7, #3]
 8002066:	460b      	mov	r3, r1
 8002068:	803b      	strh	r3, [r7, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0f      	bge.n	800209a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3310      	adds	r3, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00f      	b.n	80020ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020c6:	883a      	ldrh	r2, [r7, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	78ba      	ldrb	r2, [r7, #2]
 80020d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020e4:	78bb      	ldrb	r3, [r7, #2]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d102      	bne.n	80020f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_PCD_EP_Open+0xaa>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e00e      	b.n	800211c <HAL_PCD_EP_Open+0xc8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	4618      	mov	r0, r3
 800210e:	f002 f98d 	bl	800442c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800211a:	7afb      	ldrb	r3, [r7, #11]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	da0f      	bge.n	8002158 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 020f 	and.w	r2, r3, #15
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	3310      	adds	r3, #16
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	705a      	strb	r2, [r3, #1]
 8002156:	e00f      	b.n	8002178 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 020f 	and.w	r2, r3, #15
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_PCD_EP_Close+0x6e>
 800218e:	2302      	movs	r3, #2
 8002190:	e00e      	b.n	80021b0 <HAL_PCD_EP_Close+0x8c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 f9cb 	bl	800453c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	460b      	mov	r3, r1
 80021c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	b2da      	uxtb	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	799b      	ldrb	r3, [r3, #6]
 800221c:	461a      	mov	r2, r3
 800221e:	6979      	ldr	r1, [r7, #20]
 8002220:	f002 fa68 	bl	80046f4 <USB_EPStartXfer>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002250:	681b      	ldr	r3, [r3, #0]
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	460b      	mov	r3, r1
 800226c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	3310      	adds	r3, #16
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2201      	movs	r2, #1
 800229c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	799b      	ldrb	r3, [r3, #6]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	799b      	ldrb	r3, [r3, #6]
 80022c0:	461a      	mov	r2, r3
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	f002 fa16 	bl	80046f4 <USB_EPStartXfer>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	7912      	ldrb	r2, [r2, #4]
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e04f      	b.n	8002390 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da0f      	bge.n	8002318 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3310      	adds	r3, #16
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
 8002316:	e00d      	b.n	8002334 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_PCD_EP_SetStall+0x82>
 8002350:	2302      	movs	r3, #2
 8002352:	e01d      	b.n	8002390 <HAL_PCD_EP_SetStall+0xbe>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fd9e 	bl	8004ea4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7999      	ldrb	r1, [r3, #6]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002380:	461a      	mov	r2, r3
 8002382:	f002 ff8f 	bl	80052a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	7912      	ldrb	r2, [r2, #4]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e042      	b.n	800243c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da0f      	bge.n	80023de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 020f 	and.w	r2, r3, #15
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	3310      	adds	r3, #16
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	705a      	strb	r2, [r3, #1]
 80023dc:	e00f      	b.n	80023fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	3304      	adds	r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_PCD_EP_ClrStall+0x86>
 800241a:	2302      	movs	r3, #2
 800241c:	e00e      	b.n	800243c <HAL_PCD_EP_ClrStall+0xa4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fda7 	bl	8004f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da0c      	bge.n	8002472 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3310      	adds	r3, #16
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e00c      	b.n	800248c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fbc6 	bl	8004c24 <USB_EPStopXfer>
 8002498:	4603      	mov	r3, r0
 800249a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800249c:	7afb      	ldrb	r3, [r7, #11]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b08a      	sub	sp, #40	@ 0x28
 80024aa:	af02      	add	r7, sp, #8
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	3310      	adds	r3, #16
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d901      	bls.n	80024de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d902      	bls.n	80024fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3303      	adds	r3, #3
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002502:	e02a      	b.n	800255a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	429a      	cmp	r2, r3
 8002518:	d902      	bls.n	8002520 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3303      	adds	r3, #3
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68d9      	ldr	r1, [r3, #12]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	6978      	ldr	r0, [r7, #20]
 800253e:	f002 fc1b 	bl	8004d78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	441a      	add	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	441a      	add	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	d809      	bhi.n	8002584 <PCD_WriteEmptyTxFifo+0xde>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002578:	429a      	cmp	r2, r3
 800257a:	d203      	bcs.n	8002584 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1bf      	bne.n	8002504 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	d811      	bhi.n	80025b4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2201      	movs	r2, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	6939      	ldr	r1, [r7, #16]
 80025ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025b0:	4013      	ands	r3, r2
 80025b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	333c      	adds	r3, #60	@ 0x3c
 80025d8:	3304      	adds	r3, #4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	799b      	ldrb	r3, [r3, #6]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d17b      	bne.n	80026ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a61      	ldr	r2, [pc, #388]	@ (8002788 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	f240 80b9 	bls.w	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80b3 	beq.w	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002622:	461a      	mov	r2, r3
 8002624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002628:	6093      	str	r3, [r2, #8]
 800262a:	e0a7      	b.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002642:	461a      	mov	r2, r3
 8002644:	2320      	movs	r3, #32
 8002646:	6093      	str	r3, [r2, #8]
 8002648:	e098      	b.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 8093 	bne.w	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4a4b      	ldr	r2, [pc, #300]	@ (8002788 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d90f      	bls.n	800267e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002674:	461a      	mov	r2, r3
 8002676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800267a:	6093      	str	r3, [r2, #8]
 800267c:	e07e      	b.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	0159      	lsls	r1, r3, #5
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	440b      	add	r3, r1
 80026a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d114      	bne.n	80026e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026c8:	461a      	mov	r2, r3
 80026ca:	2101      	movs	r1, #1
 80026cc:	f002 fdea 	bl	80052a4 <USB_EP0_OutStart>
 80026d0:	e006      	b.n	80026e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f005 f89e 	bl	8007828 <HAL_PCD_DataOutStageCallback>
 80026ec:	e046      	b.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	4a26      	ldr	r2, [pc, #152]	@ (800278c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d124      	bne.n	8002740 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002712:	6093      	str	r3, [r2, #8]
 8002714:	e032      	b.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800272c:	461a      	mov	r2, r3
 800272e:	2320      	movs	r3, #32
 8002730:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f005 f875 	bl	8007828 <HAL_PCD_DataOutStageCallback>
 800273e:	e01d      	b.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d114      	bne.n	8002770 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002768:	461a      	mov	r2, r3
 800276a:	2100      	movs	r1, #0
 800276c:	f002 fd9a 	bl	80052a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f005 f856 	bl	8007828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	4f54300a 	.word	0x4f54300a
 800278c:	4f54310a 	.word	0x4f54310a

08002790 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	333c      	adds	r3, #60	@ 0x3c
 80027a8:	3304      	adds	r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a15      	ldr	r2, [pc, #84]	@ (8002818 <PCD_EP_OutSetupPacket_int+0x88>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d90e      	bls.n	80027e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f005 f80d 	bl	8007804 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <PCD_EP_OutSetupPacket_int+0x88>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d90c      	bls.n	800280c <PCD_EP_OutSetupPacket_int+0x7c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	799b      	ldrb	r3, [r3, #6]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d108      	bne.n	800280c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002804:	461a      	mov	r2, r3
 8002806:	2101      	movs	r1, #1
 8002808:	f002 fd4c 	bl	80052a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	4f54300a 	.word	0x4f54300a

0800281c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
 8002828:	4613      	mov	r3, r2
 800282a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800283a:	883b      	ldrh	r3, [r7, #0]
 800283c:	0419      	lsls	r1, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	430a      	orrs	r2, r1
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28
 8002848:	e028      	b.n	800289c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e00d      	b.n	800287a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3340      	adds	r3, #64	@ 0x40
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4413      	add	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	3301      	adds	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	3b01      	subs	r3, #1
 8002880:	429a      	cmp	r2, r3
 8002882:	d3ec      	bcc.n	800285e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002884:	883b      	ldrh	r3, [r7, #0]
 8002886:	0418      	lsls	r0, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	3b01      	subs	r3, #1
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	4302      	orrs	r2, r0
 8002894:	3340      	adds	r3, #64	@ 0x40
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e267      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d075      	beq.n	80029ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002902:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d00c      	beq.n	8002928 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d112      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291a:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002926:	d10b      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	4b7e      	ldr	r3, [pc, #504]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05b      	beq.n	80029ec <HAL_RCC_OscConfig+0x108>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d157      	bne.n	80029ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e242      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x74>
 800294a:	4b76      	ldr	r3, [pc, #472]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x98>
 8002962:	4b70      	ldr	r3, [pc, #448]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6f      	ldr	r2, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6c      	ldr	r2, [pc, #432]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 800297c:	4b69      	ldr	r3, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a68      	ldr	r2, [pc, #416]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b66      	ldr	r3, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a65      	ldr	r2, [pc, #404]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fa72 	bl	8000e84 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fa6e 	bl	8000e84 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e207      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0xc0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fa5e 	bl	8000e84 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe fa5a 	bl	8000e84 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1f3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b51      	ldr	r3, [pc, #324]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0xe8>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b44      	ldr	r3, [pc, #272]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e1c7      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4937      	ldr	r1, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e03a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x244>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fa13 	bl	8000e84 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fe fa0f 	bl	8000e84 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1a8      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4925      	ldr	r1, [pc, #148]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_RCC_OscConfig+0x244>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe f9f2 	bl	8000e84 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fe f9ee 	bl	8000e84 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e187      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d036      	beq.n	8002b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_RCC_OscConfig+0x248>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe f9d2 	bl	8000e84 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7fe f9ce 	bl	8000e84 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e167      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x200>
 8002b02:	e01b      	b.n	8002b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x248>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe f9bb 	bl	8000e84 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	e00e      	b.n	8002b30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fe f9b7 	bl	8000e84 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d907      	bls.n	8002b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e150      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	42470000 	.word	0x42470000
 8002b2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	4b88      	ldr	r3, [pc, #544]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ea      	bne.n	8002b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8097 	beq.w	8002c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4e:	4b81      	ldr	r3, [pc, #516]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	4a7c      	ldr	r2, [pc, #496]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b86:	4b74      	ldr	r3, [pc, #464]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a73      	ldr	r2, [pc, #460]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7fe f977 	bl	8000e84 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9a:	f7fe f973 	bl	8000e84 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e10c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x2ea>
 8002bc0:	4b64      	ldr	r3, [pc, #400]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	4a63      	ldr	r2, [pc, #396]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bcc:	e01c      	b.n	8002c08 <HAL_RCC_OscConfig+0x324>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x30c>
 8002bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a5e      	ldr	r2, [pc, #376]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x324>
 8002bf0:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a57      	ldr	r2, [pc, #348]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfc:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	4a54      	ldr	r2, [pc, #336]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 0304 	bic.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe f938 	bl	8000e84 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fe f934 	bl	8000e84 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0cb      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	4b49      	ldr	r3, [pc, #292]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ee      	beq.n	8002c18 <HAL_RCC_OscConfig+0x334>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f922 	bl	8000e84 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe f91e 	bl	8000e84 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0b5      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ee      	bne.n	8002c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	4a38      	ldr	r2, [pc, #224]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a1 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c82:	4b34      	ldr	r3, [pc, #208]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d05c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d141      	bne.n	8002d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe f8f2 	bl	8000e84 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe f8ee 	bl	8000e84 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e087      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	491b      	ldr	r1, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f8c7 	bl	8000e84 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe f8c3 	bl	8000e84 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e05c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x416>
 8002d18:	e054      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe f8b0 	bl	8000e84 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe f8ac 	bl	8000e84 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e045      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x444>
 8002d46:	e03d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e038      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_RCC_OscConfig+0x4ec>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d028      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d121      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cc      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b68      	ldr	r3, [pc, #416]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d90c      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b65      	ldr	r3, [pc, #404]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a52      	ldr	r2, [pc, #328]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d044      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d119      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b3f      	ldr	r3, [pc, #252]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e067      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b37      	ldr	r3, [pc, #220]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4934      	ldr	r1, [pc, #208]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fd ffde 	bl	8000e84 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fd ffda 	bl	8000e84 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e04f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d20c      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f46:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 f82d 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490a      	ldr	r1, [pc, #40]	@ (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd ff3e 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08007e30 	.word	0x08007e30
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <HAL_RCC_EnableCSS+0x14>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	4247004c 	.word	0x4247004c

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fbc:	b090      	sub	sp, #64	@ 0x40
 8002fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fc8:	2300      	movs	r3, #0
 8002fca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd0:	4b59      	ldr	r3, [pc, #356]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d00d      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	f200 80a1 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x34>
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fea:	e09b      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b53      	ldr	r3, [pc, #332]	@ (800313c <HAL_RCC_GetSysClockFreq+0x184>)
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ff0:	e09b      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ff2:	4b53      	ldr	r3, [pc, #332]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ff6:	e098      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003002:	4b4d      	ldr	r3, [pc, #308]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x180>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d028      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300e:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x180>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	099b      	lsrs	r3, r3, #6
 8003014:	2200      	movs	r2, #0
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	627a      	str	r2, [r7, #36]	@ 0x24
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003020:	2100      	movs	r1, #0
 8003022:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x188>)
 8003024:	fb03 f201 	mul.w	r2, r3, r1
 8003028:	2300      	movs	r3, #0
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	4413      	add	r3, r2
 8003030:	4a43      	ldr	r2, [pc, #268]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x188>)
 8003032:	fba0 1202 	umull	r1, r2, r0, r2
 8003036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003038:	460a      	mov	r2, r1
 800303a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800303c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800303e:	4413      	add	r3, r2
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	2200      	movs	r2, #0
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	61fa      	str	r2, [r7, #28]
 800304a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003052:	f7fd f8bf 	bl	80001d4 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800305e:	e053      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003060:	4b35      	ldr	r3, [pc, #212]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x180>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	2200      	movs	r2, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	617a      	str	r2, [r7, #20]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003072:	f04f 0b00 	mov.w	fp, #0
 8003076:	4652      	mov	r2, sl
 8003078:	465b      	mov	r3, fp
 800307a:	f04f 0000 	mov.w	r0, #0
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	0159      	lsls	r1, r3, #5
 8003084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003088:	0150      	lsls	r0, r2, #5
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	ebb2 080a 	subs.w	r8, r2, sl
 8003092:	eb63 090b 	sbc.w	r9, r3, fp
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030aa:	ebb2 0408 	subs.w	r4, r2, r8
 80030ae:	eb63 0509 	sbc.w	r5, r3, r9
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	00eb      	lsls	r3, r5, #3
 80030bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c0:	00e2      	lsls	r2, r4, #3
 80030c2:	4614      	mov	r4, r2
 80030c4:	461d      	mov	r5, r3
 80030c6:	eb14 030a 	adds.w	r3, r4, sl
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	eb45 030b 	adc.w	r3, r5, fp
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030de:	4629      	mov	r1, r5
 80030e0:	028b      	lsls	r3, r1, #10
 80030e2:	4621      	mov	r1, r4
 80030e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e8:	4621      	mov	r1, r4
 80030ea:	028a      	lsls	r2, r1, #10
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f2:	2200      	movs	r2, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	60fa      	str	r2, [r7, #12]
 80030f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030fc:	f7fd f86a 	bl	80001d4 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x180>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	3301      	adds	r3, #1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003118:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetSysClockFreq+0x184>)
 8003126:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800312c:	4618      	mov	r0, r3
 800312e:	3740      	adds	r7, #64	@ 0x40
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	00f42400 	.word	0x00f42400
 8003140:	016e3600 	.word	0x016e3600

08003144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b03      	ldr	r3, [pc, #12]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000000 	.word	0x20000000

0800315c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	2b80      	cmp	r3, #128	@ 0x80
 800316a:	d104      	bne.n	8003176 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800316c:	f000 f80a 	bl	8003184 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003170:	4b03      	ldr	r3, [pc, #12]	@ (8003180 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003172:	2280      	movs	r2, #128	@ 0x80
 8003174:	701a      	strb	r2, [r3, #0]
  }
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	4002380e 	.word	0x4002380e

08003184 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e07b      	b.n	800329c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b4:	d009      	beq.n	80031ca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	61da      	str	r2, [r3, #28]
 80031bc:	e005      	b.n	80031ca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fd fd27 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003200:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324e:	ea42 0103 	orr.w	r1, r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f003 0104 	and.w	r1, r3, #4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	f003 0210 	and.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_SPI_Transmit+0x22>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e12d      	b.n	8003522 <HAL_SPI_Transmit+0x27e>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ce:	f7fd fdd9 	bl	8000e84 <HAL_GetTick>
 80032d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d002      	beq.n	80032ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
 80032e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032e8:	e116      	b.n	8003518 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_SPI_Transmit+0x52>
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fa:	e10d      	b.n	8003518 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2203      	movs	r2, #3
 8003300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003342:	d10f      	bne.n	8003364 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003352:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003362:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d007      	beq.n	8003382 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338a:	d14f      	bne.n	800342c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_SPI_Transmit+0xf6>
 8003394:	8afb      	ldrh	r3, [r7, #22]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d142      	bne.n	8003420 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033be:	e02f      	b.n	8003420 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d112      	bne.n	80033f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033f2:	e015      	b.n	8003420 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f4:	f7fd fd46 	bl	8000e84 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d803      	bhi.n	800340c <HAL_SPI_Transmit+0x168>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d102      	bne.n	8003412 <HAL_SPI_Transmit+0x16e>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800341e:	e07b      	b.n	8003518 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ca      	bne.n	80033c0 <HAL_SPI_Transmit+0x11c>
 800342a:	e050      	b.n	80034ce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_Transmit+0x196>
 8003434:	8afb      	ldrh	r3, [r7, #22]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d144      	bne.n	80034c4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003460:	e030      	b.n	80034c4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d113      	bne.n	8003498 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003496:	e015      	b.n	80034c4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003498:	f7fd fcf4 	bl	8000e84 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d803      	bhi.n	80034b0 <HAL_SPI_Transmit+0x20c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Transmit+0x212>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80034c2:	e029      	b.n	8003518 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1c9      	bne.n	8003462 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fbe0 	bl	8003c98 <SPI_EndRxTxTransaction>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e003      	b.n	8003518 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003520:	7ffb      	ldrb	r3, [r7, #31]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b088      	sub	sp, #32
 800352e:	af02      	add	r7, sp, #8
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d002      	beq.n	8003550 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800354a:	2302      	movs	r3, #2
 800354c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800354e:	e0fb      	b.n	8003748 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003558:	d112      	bne.n	8003580 <HAL_SPI_Receive+0x56>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2204      	movs	r2, #4
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8ef 	bl	800375a <HAL_SPI_TransmitReceive>
 800357c:	4603      	mov	r3, r0
 800357e:	e0e8      	b.n	8003752 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_SPI_Receive+0x64>
 800358a:	2302      	movs	r3, #2
 800358c:	e0e1      	b.n	8003752 <HAL_SPI_Receive+0x228>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003596:	f7fd fc75 	bl	8000e84 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Receive+0x7e>
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ac:	e0cc      	b.n	8003748 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2204      	movs	r2, #4
 80035b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f4:	d10f      	bne.n	8003616 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d007      	beq.n	8003634 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d16a      	bne.n	8003712 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800363c:	e032      	b.n	80036a4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d115      	bne.n	8003678 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f103 020c 	add.w	r2, r3, #12
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003676:	e015      	b.n	80036a4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003678:	f7fd fc04 	bl	8000e84 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d803      	bhi.n	8003690 <HAL_SPI_Receive+0x166>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d102      	bne.n	8003696 <HAL_SPI_Receive+0x16c>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80036a2:	e051      	b.n	8003748 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1c7      	bne.n	800363e <HAL_SPI_Receive+0x114>
 80036ae:	e035      	b.n	800371c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d113      	bne.n	80036e6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	b292      	uxth	r2, r2
 80036ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036e4:	e015      	b.n	8003712 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e6:	f7fd fbcd 	bl	8000e84 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d803      	bhi.n	80036fe <HAL_SPI_Receive+0x1d4>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_Receive+0x1da>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003710:	e01a      	b.n	8003748 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1c9      	bne.n	80036b0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fa53 	bl	8003bcc <SPI_EndRxTransaction>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
 800373e:	e003      	b.n	8003748 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08c      	sub	sp, #48	@ 0x30
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x26>
 800377c:	2302      	movs	r3, #2
 800377e:	e198      	b.n	8003ab2 <HAL_SPI_TransmitReceive+0x358>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003788:	f7fd fb7c 	bl	8000e84 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d00f      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x70>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b0:	d107      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x68>
 80037ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
 80037c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80037c8:	e16d      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_SPI_TransmitReceive+0x82>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_TransmitReceive+0x82>
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80037e2:	e160      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d003      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2205      	movs	r2, #5
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	887a      	ldrh	r2, [r7, #2]
 8003820:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	d007      	beq.n	800384c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800384a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003854:	d17c      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x10a>
 800385e:	8b7b      	ldrh	r3, [r7, #26]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d16a      	bne.n	800393a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	e057      	b.n	800393a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x176>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x176>
 80038a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d113      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d119      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x1b8>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d014      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	b292      	uxth	r2, r2
 80038f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	1c9a      	adds	r2, r3, #2
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390e:	2301      	movs	r3, #1
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003912:	f7fd fab7 	bl	8000e84 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800391e:	429a      	cmp	r2, r3
 8003920:	d80b      	bhi.n	800393a <HAL_SPI_TransmitReceive+0x1e0>
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d007      	beq.n	800393a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003938:	e0b5      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1a2      	bne.n	800388a <HAL_SPI_TransmitReceive+0x130>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19d      	bne.n	800388a <HAL_SPI_TransmitReceive+0x130>
 800394e:	e080      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_TransmitReceive+0x204>
 8003958:	8b7b      	ldrh	r3, [r7, #26]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d16f      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003984:	e05b      	b.n	8003a3e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d11c      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x274>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <HAL_SPI_TransmitReceive+0x274>
 800399e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d114      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d119      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x2b6>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a10:	f7fd fa38 	bl	8000e84 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d803      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0x2ce>
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d102      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x2d4>
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003a3c:	e033      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d19e      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x22c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d199      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f91e 	bl	8003c98 <SPI_EndRxTxTransaction>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003a6e:	e01a      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a9c:	e003      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003aae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3730      	adds	r7, #48	@ 0x30
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003acc:	f7fd f9da 	bl	8000e84 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4413      	add	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003adc:	f7fd f9d2 	bl	8000e84 <HAL_GetTick>
 8003ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae2:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	0d1b      	lsrs	r3, r3, #20
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af2:	e054      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d050      	beq.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003afc:	f7fd f9c2 	bl	8000e84 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13d      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2a:	d111      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b34:	d004      	beq.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3e:	d107      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b58:	d10f      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e017      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d19b      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003be0:	d111      	bne.n	8003c06 <SPI_EndRxTransaction+0x3a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bea:	d004      	beq.n	8003bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf4:	d107      	bne.n	8003c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0e:	d12a      	bne.n	8003c66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c18:	d012      	beq.n	8003c40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2180      	movs	r1, #128	@ 0x80
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff49 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d02d      	beq.n	8003c8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e026      	b.n	8003c8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2101      	movs	r1, #1
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ff36 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01a      	beq.n	8003c8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e013      	b.n	8003c8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2101      	movs	r1, #1
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff ff23 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2201      	movs	r2, #1
 8003cac:	2102      	movs	r1, #2
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ff04 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e032      	b.n	8003d30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <SPI_EndRxTxTransaction+0xa0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1b      	ldr	r2, [pc, #108]	@ (8003d3c <SPI_EndRxTxTransaction+0xa4>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	0d5b      	lsrs	r3, r3, #21
 8003cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ce8:	d112      	bne.n	8003d10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	@ 0x80
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff fee1 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e00f      	b.n	8003d30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b80      	cmp	r3, #128	@ 0x80
 8003d28:	d0f2      	beq.n	8003d10 <SPI_EndRxTxTransaction+0x78>
 8003d2a:	e000      	b.n	8003d2e <SPI_EndRxTxTransaction+0x96>
        break;
 8003d2c:	bf00      	nop
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	165e9f81 	.word	0x165e9f81

08003d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d40:	b084      	sub	sp, #16
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	f107 001c 	add.w	r0, r7, #28
 8003d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d123      	bne.n	8003da2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f001 fae2 	bl	8005360 <USB_CoreReset>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e01b      	b.n	8003dda <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f001 fad6 	bl	8005360 <USB_CoreReset>
 8003db4:	4603      	mov	r3, r0
 8003db6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003db8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	@ 0x38
 8003dcc:	e005      	b.n	8003dda <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dda:	7fbb      	ldrb	r3, [r7, #30]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10b      	bne.n	8003df8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f043 0206 	orr.w	r2, r3, #6
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e04:	b004      	add	sp, #16
 8003e06:	4770      	bx	lr

08003e08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d165      	bne.n	8003ee8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4a41      	ldr	r2, [pc, #260]	@ (8003f24 <USB_SetTurnaroundTime+0x11c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d906      	bls.n	8003e32 <USB_SetTurnaroundTime+0x2a>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a40      	ldr	r2, [pc, #256]	@ (8003f28 <USB_SetTurnaroundTime+0x120>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d202      	bcs.n	8003e32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e2c:	230f      	movs	r3, #15
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e062      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	@ (8003f28 <USB_SetTurnaroundTime+0x120>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d306      	bcc.n	8003e48 <USB_SetTurnaroundTime+0x40>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f2c <USB_SetTurnaroundTime+0x124>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d202      	bcs.n	8003e48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e42:	230e      	movs	r3, #14
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e057      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4a38      	ldr	r2, [pc, #224]	@ (8003f2c <USB_SetTurnaroundTime+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d306      	bcc.n	8003e5e <USB_SetTurnaroundTime+0x56>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a37      	ldr	r2, [pc, #220]	@ (8003f30 <USB_SetTurnaroundTime+0x128>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d202      	bcs.n	8003e5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e58:	230d      	movs	r3, #13
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e04c      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4a33      	ldr	r2, [pc, #204]	@ (8003f30 <USB_SetTurnaroundTime+0x128>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d306      	bcc.n	8003e74 <USB_SetTurnaroundTime+0x6c>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4a32      	ldr	r2, [pc, #200]	@ (8003f34 <USB_SetTurnaroundTime+0x12c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d802      	bhi.n	8003e74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e6e:	230c      	movs	r3, #12
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e041      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4a2f      	ldr	r2, [pc, #188]	@ (8003f34 <USB_SetTurnaroundTime+0x12c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d906      	bls.n	8003e8a <USB_SetTurnaroundTime+0x82>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <USB_SetTurnaroundTime+0x130>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d802      	bhi.n	8003e8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e84:	230b      	movs	r3, #11
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e036      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f38 <USB_SetTurnaroundTime+0x130>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d906      	bls.n	8003ea0 <USB_SetTurnaroundTime+0x98>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a29      	ldr	r2, [pc, #164]	@ (8003f3c <USB_SetTurnaroundTime+0x134>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d802      	bhi.n	8003ea0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e02b      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <USB_SetTurnaroundTime+0x134>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d906      	bls.n	8003eb6 <USB_SetTurnaroundTime+0xae>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a25      	ldr	r2, [pc, #148]	@ (8003f40 <USB_SetTurnaroundTime+0x138>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d202      	bcs.n	8003eb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003eb0:	2309      	movs	r3, #9
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e020      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4a21      	ldr	r2, [pc, #132]	@ (8003f40 <USB_SetTurnaroundTime+0x138>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d306      	bcc.n	8003ecc <USB_SetTurnaroundTime+0xc4>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <USB_SetTurnaroundTime+0x13c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d802      	bhi.n	8003ecc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e015      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <USB_SetTurnaroundTime+0x13c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d906      	bls.n	8003ee2 <USB_SetTurnaroundTime+0xda>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <USB_SetTurnaroundTime+0x140>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d202      	bcs.n	8003ee2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003edc:	2307      	movs	r3, #7
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e00a      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e007      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003eee:	2309      	movs	r3, #9
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e001      	b.n	8003ef8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ef4:	2309      	movs	r3, #9
 8003ef6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	00d8acbf 	.word	0x00d8acbf
 8003f28:	00e4e1c0 	.word	0x00e4e1c0
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	01067380 	.word	0x01067380
 8003f34:	011a499f 	.word	0x011a499f
 8003f38:	01312cff 	.word	0x01312cff
 8003f3c:	014ca43f 	.word	0x014ca43f
 8003f40:	016e3600 	.word	0x016e3600
 8003f44:	01a6ab1f 	.word	0x01a6ab1f
 8003f48:	01e84800 	.word	0x01e84800

08003f4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f043 0201 	orr.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d115      	bne.n	8003fde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fbe:	200a      	movs	r0, #10
 8003fc0:	f7fc ff6c 	bl	8000e9c <HAL_Delay>
      ms += 10U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	330a      	adds	r3, #10
 8003fc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f001 f939 	bl	8005242 <USB_GetMode>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d01e      	beq.n	8004014 <USB_SetCurrentMode+0x84>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fda:	d9f0      	bls.n	8003fbe <USB_SetCurrentMode+0x2e>
 8003fdc:	e01a      	b.n	8004014 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d115      	bne.n	8004010 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ff0:	200a      	movs	r0, #10
 8003ff2:	f7fc ff53 	bl	8000e9c <HAL_Delay>
      ms += 10U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	330a      	adds	r3, #10
 8003ffa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 f920 	bl	8005242 <USB_GetMode>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <USB_SetCurrentMode+0x84>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2bc7      	cmp	r3, #199	@ 0xc7
 800400c:	d9f0      	bls.n	8003ff0 <USB_SetCurrentMode+0x60>
 800400e:	e001      	b.n	8004014 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e005      	b.n	8004020 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2bc8      	cmp	r3, #200	@ 0xc8
 8004018:	d101      	bne.n	800401e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004028:	b084      	sub	sp, #16
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	e009      	b.n	800405c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3340      	adds	r3, #64	@ 0x40
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	2200      	movs	r2, #0
 8004054:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b0e      	cmp	r3, #14
 8004060:	d9f2      	bls.n	8004048 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004062:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11c      	bne.n	80040a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80040a2:	e00b      	b.n	80040bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040c2:	461a      	mov	r2, r3
 80040c4:	2300      	movs	r3, #0
 80040c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10d      	bne.n	80040ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040d8:	2100      	movs	r1, #0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f968 	bl	80043b0 <USB_SetDevSpeed>
 80040e0:	e008      	b.n	80040f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040e2:	2101      	movs	r1, #1
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f963 	bl	80043b0 <USB_SetDevSpeed>
 80040ea:	e003      	b.n	80040f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040ec:	2103      	movs	r1, #3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f95e 	bl	80043b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040f4:	2110      	movs	r1, #16
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8fa 	bl	80042f0 <USB_FlushTxFifo>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f924 	bl	8004354 <USB_FlushRxFifo>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800411c:	461a      	mov	r2, r3
 800411e:	2300      	movs	r3, #0
 8004120:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004128:	461a      	mov	r2, r3
 800412a:	2300      	movs	r3, #0
 800412c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004134:	461a      	mov	r2, r3
 8004136:	2300      	movs	r3, #0
 8004138:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e043      	b.n	80041c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004152:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004156:	d118      	bne.n	800418a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416a:	461a      	mov	r2, r3
 800416c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e013      	b.n	800419c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e008      	b.n	800419c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ba:	461a      	mov	r2, r3
 80041bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3301      	adds	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041cc:	461a      	mov	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d3b5      	bcc.n	8004140 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e043      	b.n	8004262 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041f0:	d118      	bne.n	8004224 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e013      	b.n	8004236 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e008      	b.n	8004236 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	2300      	movs	r3, #0
 8004234:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	2300      	movs	r3, #0
 8004246:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800425a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3301      	adds	r3, #1
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004266:	461a      	mov	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4293      	cmp	r3, r2
 800426c:	d3b5      	bcc.n	80041da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004280:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800428e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004290:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f043 0210 	orr.w	r2, r3, #16
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <USB_DevInit+0x2c4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f043 0208 	orr.w	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042d4:	f043 0304 	orr.w	r3, r3, #4
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr
 80042ec:	803c3800 	.word	0x803c3800

080042f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800430a:	d901      	bls.n	8004310 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e01b      	b.n	8004348 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	daf2      	bge.n	80042fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	019b      	lsls	r3, r3, #6
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004334:	d901      	bls.n	800433a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e006      	b.n	8004348 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d0f0      	beq.n	8004328 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800436c:	d901      	bls.n	8004372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e018      	b.n	80043a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	daf2      	bge.n	8004360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2210      	movs	r2, #16
 8004382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004390:	d901      	bls.n	8004396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e006      	b.n	80043a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d0f0      	beq.n	8004384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0306 	and.w	r3, r3, #6
 80043fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]
 8004406:	e00a      	b.n	800441e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d002      	beq.n	8004414 <USB_GetDevSpeed+0x32>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b06      	cmp	r3, #6
 8004412:	d102      	bne.n	800441a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004414:	2302      	movs	r3, #2
 8004416:	75fb      	strb	r3, [r7, #23]
 8004418:	e001      	b.n	800441e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800441a:	230f      	movs	r3, #15
 800441c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d13a      	bne.n	80044be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	b29b      	uxth	r3, r3
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004466:	4313      	orrs	r3, r2
 8004468:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d155      	bne.n	800452c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	791b      	ldrb	r3, [r3, #4]
 800449a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800449c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	059b      	lsls	r3, r3, #22
 80044a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044a4:	4313      	orrs	r3, r2
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e036      	b.n	800452c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	2101      	movs	r1, #1
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044dc:	4313      	orrs	r3, r2
 80044de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11a      	bne.n	800452c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	791b      	ldrb	r3, [r3, #4]
 8004510:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004512:	430b      	orrs	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d161      	bne.n	800461c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800456a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800456e:	d11f      	bne.n	80045b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800458a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800458e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045d0:	4013      	ands	r3, r2
 80045d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045f4:	4013      	ands	r3, r2
 80045f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0159      	lsls	r1, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	440b      	add	r3, r1
 800460e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004612:	4619      	mov	r1, r3
 8004614:	4b35      	ldr	r3, [pc, #212]	@ (80046ec <USB_DeactivateEndpoint+0x1b0>)
 8004616:	4013      	ands	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
 800461a:	e060      	b.n	80046de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004632:	d11f      	bne.n	8004674 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800464e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004652:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800466e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	43db      	mvns	r3, r3
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004694:	4013      	ands	r3, r2
 8004696:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	43db      	mvns	r3, r3
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046b8:	4013      	ands	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	0159      	lsls	r1, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d6:	4619      	mov	r1, r3
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <USB_DeactivateEndpoint+0x1b4>)
 80046da:	4013      	ands	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	ec337800 	.word	0xec337800
 80046f0:	eff37800 	.word	0xeff37800

080046f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 817a 	bne.w	8004a0a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d132      	bne.n	8004784 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004738:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800473c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800475c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800477c:	0cdb      	lsrs	r3, r3, #19
 800477e:	04db      	lsls	r3, r3, #19
 8004780:	6113      	str	r3, [r2, #16]
 8004782:	e092      	b.n	80048aa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800479e:	0cdb      	lsrs	r3, r3, #19
 80047a0:	04db      	lsls	r3, r3, #19
 80047a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11a      	bne.n	8004804 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d903      	bls.n	80047e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004800:	6113      	str	r3, [r2, #16]
 8004802:	e01b      	b.n	800483c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004810:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	440b      	add	r3, r1
 800481c:	1e59      	subs	r1, r3, #1
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	fbb1 f3f3 	udiv	r3, r1, r3
 8004826:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004828:	4ba2      	ldr	r3, [pc, #648]	@ (8004ab4 <USB_EPStartXfer+0x3c0>)
 800482a:	400b      	ands	r3, r1
 800482c:	69b9      	ldr	r1, [r7, #24]
 800482e:	0148      	lsls	r0, r1, #5
 8004830:	69f9      	ldr	r1, [r7, #28]
 8004832:	4401      	add	r1, r0
 8004834:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004838:	4313      	orrs	r3, r2
 800483a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	0148      	lsls	r0, r1, #5
 8004856:	69f9      	ldr	r1, [r7, #28]
 8004858:	4401      	add	r1, r0
 800485a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800485e:	4313      	orrs	r3, r2
 8004860:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	791b      	ldrb	r3, [r3, #4]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d11f      	bne.n	80048aa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	440a      	add	r2, r1
 8004880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004884:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004888:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d14b      	bne.n	8004948 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c4:	461a      	mov	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	791b      	ldrb	r3, [r3, #4]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d128      	bne.n	8004926 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d110      	bne.n	8004906 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e00f      	b.n	8004926 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004940:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e165      	b.n	8004c14 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004962:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004966:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d015      	beq.n	800499c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 814d 	beq.w	8004c14 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	2101      	movs	r1, #1
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	69f9      	ldr	r1, [r7, #28]
 8004992:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004996:	4313      	orrs	r3, r2
 8004998:	634b      	str	r3, [r1, #52]	@ 0x34
 800499a:	e13b      	b.n	8004c14 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d110      	bne.n	80049ce <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	e00f      	b.n	80049ee <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	68d9      	ldr	r1, [r3, #12]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	b298      	uxth	r0, r3
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4603      	mov	r3, r0
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f9b8 	bl	8004d78 <USB_WritePacket>
 8004a08:	e104      	b.n	8004c14 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a24:	0cdb      	lsrs	r3, r3, #19
 8004a26:	04db      	lsls	r3, r3, #19
 8004a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a4c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d131      	bne.n	8004ab8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a82:	69b9      	ldr	r1, [r7, #24]
 8004a84:	0148      	lsls	r0, r1, #5
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	4401      	add	r1, r0
 8004a8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ab0:	6113      	str	r3, [r2, #16]
 8004ab2:	e061      	b.n	8004b78 <USB_EPStartXfer+0x484>
 8004ab4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d123      	bne.n	8004b08 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	0148      	lsls	r0, r1, #5
 8004ada:	69f9      	ldr	r1, [r7, #28]
 8004adc:	4401      	add	r1, r0
 8004ade:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b04:	6113      	str	r3, [r2, #16]
 8004b06:	e037      	b.n	8004b78 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	1e5a      	subs	r2, r3, #1
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	8afa      	ldrh	r2, [r7, #22]
 8004b24:	fb03 f202 	mul.w	r2, r3, r2
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	8afb      	ldrh	r3, [r7, #22]
 8004b3c:	04d9      	lsls	r1, r3, #19
 8004b3e:	4b38      	ldr	r3, [pc, #224]	@ (8004c20 <USB_EPStartXfer+0x52c>)
 8004b40:	400b      	ands	r3, r1
 8004b42:	69b9      	ldr	r1, [r7, #24]
 8004b44:	0148      	lsls	r0, r1, #5
 8004b46:	69f9      	ldr	r1, [r7, #28]
 8004b48:	4401      	add	r1, r0
 8004b4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b68:	69b9      	ldr	r1, [r7, #24]
 8004b6a:	0148      	lsls	r0, r1, #5
 8004b6c:	69f9      	ldr	r1, [r7, #28]
 8004b6e:	4401      	add	r1, r0
 8004b70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b74:	4313      	orrs	r3, r2
 8004b76:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d10d      	bne.n	8004b9a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b96:	460a      	mov	r2, r1
 8004b98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d128      	bne.n	8004bf4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d110      	bne.n	8004bd4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e00f      	b.n	8004bf4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	1ff80000 	.word	0x1ff80000

08004c24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d14a      	bne.n	8004cd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c5a:	f040 8086 	bne.w	8004d6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ca4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d902      	bls.n	8004cbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8004cba:	e056      	b.n	8004d6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cd4:	d0e7      	beq.n	8004ca6 <USB_EPStopXfer+0x82>
 8004cd6:	e048      	b.n	8004d6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cf0:	d13b      	bne.n	8004d6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	7812      	ldrb	r2, [r2, #0]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d902      	bls.n	8004d50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d4e:	e00c      	b.n	8004d6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d68:	d0e7      	beq.n	8004d3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	@ 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	460b      	mov	r3, r1
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d123      	bne.n	8004de6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d9e:	88bb      	ldrh	r3, [r7, #4]
 8004da0:	3303      	adds	r3, #3
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e018      	b.n	8004dde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	031a      	lsls	r2, r3, #12
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004db8:	461a      	mov	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3e2      	bcc.n	8004dac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3724      	adds	r7, #36	@ 0x24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b08b      	sub	sp, #44	@ 0x2c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	e014      	b.n	8004e4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	3301      	adds	r3, #1
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	3301      	adds	r3, #1
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	3301      	adds	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	3301      	adds	r3, #1
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3e6      	bcc.n	8004e20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e52:	8bfb      	ldrh	r3, [r7, #30]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01e      	beq.n	8004e96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e62:	461a      	mov	r2, r3
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	701a      	strb	r2, [r3, #0]
      i++;
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	3301      	adds	r3, #1
 8004e82:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004e8a:	8bfb      	ldrh	r3, [r7, #30]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e90:	8bfb      	ldrh	r3, [r7, #30]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ea      	bne.n	8004e6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	372c      	adds	r7, #44	@ 0x2c
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d12c      	bne.n	8004f1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db12      	blt.n	8004ef8 <USB_EPSetStall+0x54>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00f      	beq.n	8004ef8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ef6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e02b      	b.n	8004f72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	db12      	blt.n	8004f52 <USB_EPSetStall+0xae>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00f      	beq.n	8004f52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d128      	bne.n	8004fee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	791b      	ldrb	r3, [r3, #4]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d003      	beq.n	8004fcc <USB_EPClearStall+0x4c>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	791b      	ldrb	r3, [r3, #4]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d138      	bne.n	800503e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e027      	b.n	800503e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005008:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800500c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d003      	beq.n	800501e <USB_EPClearStall+0x9e>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	791b      	ldrb	r3, [r3, #4]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d10f      	bne.n	800503e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800503c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800506a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800506e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005080:	68f9      	ldr	r1, [r7, #12]
 8005082:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050c6:	f023 0302 	bic.w	r3, r3, #2
 80050ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005134:	68fb      	ldr	r3, [r7, #12]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	0c1b      	lsrs	r3, r3, #16
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	b29b      	uxth	r3, r3
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4013      	ands	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051d8:	68bb      	ldr	r3, [r7, #8]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005208:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	fa22 f303 	lsr.w	r3, r2, r3
 8005216:	01db      	lsls	r3, r3, #7
 8005218:	b2db      	uxtb	r3, r3
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4013      	ands	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005234:	68bb      	ldr	r3, [r7, #8]
}
 8005236:	4618      	mov	r0, r3
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0301 	and.w	r3, r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005278:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800527c:	f023 0307 	bic.w	r3, r3, #7
 8005280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	460b      	mov	r3, r1
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	333c      	adds	r3, #60	@ 0x3c
 80052ba:	3304      	adds	r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4a26      	ldr	r2, [pc, #152]	@ (800535c <USB_EP0_OutStart+0xb8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d90a      	bls.n	80052de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d8:	d101      	bne.n	80052de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e037      	b.n	800534e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	2300      	movs	r3, #0
 80052e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800530c:	f043 0318 	orr.w	r3, r3, #24
 8005310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005320:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005324:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10f      	bne.n	800534c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005346:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800534a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	4f54300a 	.word	0x4f54300a

08005360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005378:	d901      	bls.n	800537e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e01b      	b.n	80053b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	daf2      	bge.n	800536c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f043 0201 	orr.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053a2:	d901      	bls.n	80053a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e006      	b.n	80053b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d0f0      	beq.n	8005396 <USB_CoreReset+0x36>

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80053d4:	f002 fc92 	bl	8007cfc <USBD_static_malloc>
 80053d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d109      	bne.n	80053f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	32b0      	adds	r2, #176	@ 0xb0
 80053ea:	2100      	movs	r1, #0
 80053ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053f0:	2302      	movs	r3, #2
 80053f2:	e0d4      	b.n	800559e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80053f4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80053f8:	2100      	movs	r1, #0
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f002 fcc2 	bl	8007d84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	32b0      	adds	r2, #176	@ 0xb0
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	32b0      	adds	r2, #176	@ 0xb0
 800541a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7c1b      	ldrb	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d138      	bne.n	800549e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800542c:	4b5e      	ldr	r3, [pc, #376]	@ (80055a8 <USBD_CDC_Init+0x1e4>)
 800542e:	7819      	ldrb	r1, [r3, #0]
 8005430:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005434:	2202      	movs	r2, #2
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f002 fb3d 	bl	8007ab6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800543c:	4b5a      	ldr	r3, [pc, #360]	@ (80055a8 <USBD_CDC_Init+0x1e4>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	3324      	adds	r3, #36	@ 0x24
 8005452:	2201      	movs	r2, #1
 8005454:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005456:	4b55      	ldr	r3, [pc, #340]	@ (80055ac <USBD_CDC_Init+0x1e8>)
 8005458:	7819      	ldrb	r1, [r3, #0]
 800545a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800545e:	2202      	movs	r2, #2
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f002 fb28 	bl	8007ab6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005466:	4b51      	ldr	r3, [pc, #324]	@ (80055ac <USBD_CDC_Init+0x1e8>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f003 020f 	and.w	r2, r3, #15
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800547e:	2201      	movs	r2, #1
 8005480:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005482:	4b4b      	ldr	r3, [pc, #300]	@ (80055b0 <USBD_CDC_Init+0x1ec>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f003 020f 	and.w	r2, r3, #15
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3326      	adds	r3, #38	@ 0x26
 8005498:	2210      	movs	r2, #16
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e035      	b.n	800550a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800549e:	4b42      	ldr	r3, [pc, #264]	@ (80055a8 <USBD_CDC_Init+0x1e4>)
 80054a0:	7819      	ldrb	r1, [r3, #0]
 80054a2:	2340      	movs	r3, #64	@ 0x40
 80054a4:	2202      	movs	r2, #2
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f002 fb05 	bl	8007ab6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054ac:	4b3e      	ldr	r3, [pc, #248]	@ (80055a8 <USBD_CDC_Init+0x1e4>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	3324      	adds	r3, #36	@ 0x24
 80054c2:	2201      	movs	r2, #1
 80054c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054c6:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <USBD_CDC_Init+0x1e8>)
 80054c8:	7819      	ldrb	r1, [r3, #0]
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	2202      	movs	r2, #2
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f002 faf1 	bl	8007ab6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <USBD_CDC_Init+0x1e8>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054ec:	2201      	movs	r2, #1
 80054ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054f0:	4b2f      	ldr	r3, [pc, #188]	@ (80055b0 <USBD_CDC_Init+0x1ec>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3326      	adds	r3, #38	@ 0x26
 8005506:	2210      	movs	r2, #16
 8005508:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800550a:	4b29      	ldr	r3, [pc, #164]	@ (80055b0 <USBD_CDC_Init+0x1ec>)
 800550c:	7819      	ldrb	r1, [r3, #0]
 800550e:	2308      	movs	r3, #8
 8005510:	2203      	movs	r2, #3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f002 facf 	bl	8007ab6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <USBD_CDC_Init+0x1ec>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	3324      	adds	r3, #36	@ 0x24
 800552e:	2201      	movs	r2, #1
 8005530:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	33b0      	adds	r3, #176	@ 0xb0
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005568:	2302      	movs	r3, #2
 800556a:	e018      	b.n	800559e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7c1b      	ldrb	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005574:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <USBD_CDC_Init+0x1e8>)
 8005576:	7819      	ldrb	r1, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800557e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f002 fb86 	bl	8007c94 <USBD_LL_PrepareReceive>
 8005588:	e008      	b.n	800559c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800558a:	4b08      	ldr	r3, [pc, #32]	@ (80055ac <USBD_CDC_Init+0x1e8>)
 800558c:	7819      	ldrb	r1, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005594:	2340      	movs	r3, #64	@ 0x40
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f002 fb7c 	bl	8007c94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000093 	.word	0x20000093
 80055ac:	20000094 	.word	0x20000094
 80055b0:	20000095 	.word	0x20000095

080055b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80055c0:	4b3a      	ldr	r3, [pc, #232]	@ (80056ac <USBD_CDC_DeInit+0xf8>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f002 fa9b 	bl	8007b02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80055cc:	4b37      	ldr	r3, [pc, #220]	@ (80056ac <USBD_CDC_DeInit+0xf8>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3324      	adds	r3, #36	@ 0x24
 80055e2:	2200      	movs	r2, #0
 80055e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80055e6:	4b32      	ldr	r3, [pc, #200]	@ (80056b0 <USBD_CDC_DeInit+0xfc>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f002 fa88 	bl	8007b02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80055f2:	4b2f      	ldr	r3, [pc, #188]	@ (80056b0 <USBD_CDC_DeInit+0xfc>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 020f 	and.w	r2, r3, #15
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800560a:	2200      	movs	r2, #0
 800560c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800560e:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <USBD_CDC_DeInit+0x100>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f002 fa74 	bl	8007b02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800561a:	4b26      	ldr	r3, [pc, #152]	@ (80056b4 <USBD_CDC_DeInit+0x100>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3324      	adds	r3, #36	@ 0x24
 8005630:	2200      	movs	r2, #0
 8005632:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005634:	4b1f      	ldr	r3, [pc, #124]	@ (80056b4 <USBD_CDC_DeInit+0x100>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 020f 	and.w	r2, r3, #15
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	3326      	adds	r3, #38	@ 0x26
 800564a:	2200      	movs	r2, #0
 800564c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	32b0      	adds	r2, #176	@ 0xb0
 8005658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01f      	beq.n	80056a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	33b0      	adds	r3, #176	@ 0xb0
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	32b0      	adds	r2, #176	@ 0xb0
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	4618      	mov	r0, r3
 8005684:	f002 fb48 	bl	8007d18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	32b0      	adds	r2, #176	@ 0xb0
 8005692:	2100      	movs	r1, #0
 8005694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000093 	.word	0x20000093
 80056b0:	20000094 	.word	0x20000094
 80056b4:	20000095 	.word	0x20000095

080056b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	32b0      	adds	r2, #176	@ 0xb0
 80056cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e0bf      	b.n	8005868 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d050      	beq.n	8005796 <USBD_CDC_Setup+0xde>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	f040 80af 	bne.w	8005858 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	88db      	ldrh	r3, [r3, #6]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d03a      	beq.n	8005778 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b25b      	sxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	da1b      	bge.n	8005744 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	33b0      	adds	r3, #176	@ 0xb0
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005722:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	88d2      	ldrh	r2, [r2, #6]
 8005728:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	88db      	ldrh	r3, [r3, #6]
 800572e:	2b07      	cmp	r3, #7
 8005730:	bf28      	it	cs
 8005732:	2307      	movcs	r3, #7
 8005734:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	89fa      	ldrh	r2, [r7, #14]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fd87 	bl	8007250 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005742:	e090      	b.n	8005866 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	785a      	ldrb	r2, [r3, #1]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	88db      	ldrh	r3, [r3, #6]
 8005752:	2b3f      	cmp	r3, #63	@ 0x3f
 8005754:	d803      	bhi.n	800575e <USBD_CDC_Setup+0xa6>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	88db      	ldrh	r3, [r3, #6]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	e000      	b.n	8005760 <USBD_CDC_Setup+0xa8>
 800575e:	2240      	movs	r2, #64	@ 0x40
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005766:	6939      	ldr	r1, [r7, #16]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800576e:	461a      	mov	r2, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fd99 	bl	80072a8 <USBD_CtlPrepareRx>
      break;
 8005776:	e076      	b.n	8005866 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	33b0      	adds	r3, #176	@ 0xb0
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	7850      	ldrb	r0, [r2, #1]
 800578e:	2200      	movs	r2, #0
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	4798      	blx	r3
      break;
 8005794:	e067      	b.n	8005866 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b0b      	cmp	r3, #11
 800579c:	d851      	bhi.n	8005842 <USBD_CDC_Setup+0x18a>
 800579e:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <USBD_CDC_Setup+0xec>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057d5 	.word	0x080057d5
 80057a8:	08005851 	.word	0x08005851
 80057ac:	08005843 	.word	0x08005843
 80057b0:	08005843 	.word	0x08005843
 80057b4:	08005843 	.word	0x08005843
 80057b8:	08005843 	.word	0x08005843
 80057bc:	08005843 	.word	0x08005843
 80057c0:	08005843 	.word	0x08005843
 80057c4:	08005843 	.word	0x08005843
 80057c8:	08005843 	.word	0x08005843
 80057cc:	080057ff 	.word	0x080057ff
 80057d0:	08005829 	.word	0x08005829
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d107      	bne.n	80057f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057e0:	f107 030a 	add.w	r3, r7, #10
 80057e4:	2202      	movs	r2, #2
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fd31 	bl	8007250 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057ee:	e032      	b.n	8005856 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 fcbb 	bl	800716e <USBD_CtlError>
            ret = USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	75fb      	strb	r3, [r7, #23]
          break;
 80057fc:	e02b      	b.n	8005856 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d107      	bne.n	800581a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800580a:	f107 030d 	add.w	r3, r7, #13
 800580e:	2201      	movs	r2, #1
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fd1c 	bl	8007250 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005818:	e01d      	b.n	8005856 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fca6 	bl	800716e <USBD_CtlError>
            ret = USBD_FAIL;
 8005822:	2303      	movs	r3, #3
 8005824:	75fb      	strb	r3, [r7, #23]
          break;
 8005826:	e016      	b.n	8005856 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b03      	cmp	r3, #3
 8005832:	d00f      	beq.n	8005854 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fc99 	bl	800716e <USBD_CtlError>
            ret = USBD_FAIL;
 800583c:	2303      	movs	r3, #3
 800583e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005840:	e008      	b.n	8005854 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fc92 	bl	800716e <USBD_CtlError>
          ret = USBD_FAIL;
 800584a:	2303      	movs	r3, #3
 800584c:	75fb      	strb	r3, [r7, #23]
          break;
 800584e:	e002      	b.n	8005856 <USBD_CDC_Setup+0x19e>
          break;
 8005850:	bf00      	nop
 8005852:	e008      	b.n	8005866 <USBD_CDC_Setup+0x1ae>
          break;
 8005854:	bf00      	nop
      }
      break;
 8005856:	e006      	b.n	8005866 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fc87 	bl	800716e <USBD_CtlError>
      ret = USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	75fb      	strb	r3, [r7, #23]
      break;
 8005864:	bf00      	nop
  }

  return (uint8_t)ret;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005882:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32b0      	adds	r2, #176	@ 0xb0
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005896:	2303      	movs	r3, #3
 8005898:	e065      	b.n	8005966 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	32b0      	adds	r2, #176	@ 0xb0
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3318      	adds	r3, #24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d02f      	beq.n	8005924 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	3318      	adds	r3, #24
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	f003 010f 	and.w	r1, r3, #15
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	460b      	mov	r3, r1
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	440b      	add	r3, r1
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4403      	add	r3, r0
 80058ec:	331c      	adds	r3, #28
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d112      	bne.n	8005924 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	3318      	adds	r3, #24
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005916:	78f9      	ldrb	r1, [r7, #3]
 8005918:	2300      	movs	r3, #0
 800591a:	2200      	movs	r2, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f002 f998 	bl	8007c52 <USBD_LL_Transmit>
 8005922:	e01f      	b.n	8005964 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	33b0      	adds	r3, #176	@ 0xb0
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d010      	beq.n	8005964 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	33b0      	adds	r3, #176	@ 0xb0
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	32b0      	adds	r2, #176	@ 0xb0
 8005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005988:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	32b0      	adds	r2, #176	@ 0xb0
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	e01a      	b.n	80059d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f002 f996 	bl	8007cd6 <USBD_LL_GetRxDataSize>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	33b0      	adds	r3, #176	@ 0xb0
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80059d0:	4611      	mov	r1, r2
 80059d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	32b0      	adds	r2, #176	@ 0xb0
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e024      	b.n	8005a4a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	33b0      	adds	r3, #176	@ 0xb0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d019      	beq.n	8005a48 <USBD_CDC_EP0_RxReady+0x6a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005a1a:	2bff      	cmp	r3, #255	@ 0xff
 8005a1c:	d014      	beq.n	8005a48 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	33b0      	adds	r3, #176	@ 0xb0
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005a36:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	@ 0xff
 8005a44:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a5c:	2182      	movs	r1, #130	@ 0x82
 8005a5e:	4818      	ldr	r0, [pc, #96]	@ (8005ac0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a60:	f000 fd4f 	bl	8006502 <USBD_GetEpDesc>
 8005a64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a66:	2101      	movs	r1, #1
 8005a68:	4815      	ldr	r0, [pc, #84]	@ (8005ac0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a6a:	f000 fd4a 	bl	8006502 <USBD_GetEpDesc>
 8005a6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a70:	2181      	movs	r1, #129	@ 0x81
 8005a72:	4813      	ldr	r0, [pc, #76]	@ (8005ac0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a74:	f000 fd45 	bl	8006502 <USBD_GetEpDesc>
 8005a78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2210      	movs	r2, #16
 8005a84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d006      	beq.n	8005a9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a94:	711a      	strb	r2, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d006      	beq.n	8005aae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa8:	711a      	strb	r2, [r3, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2243      	movs	r2, #67	@ 0x43
 8005ab2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ab4:	4b02      	ldr	r3, [pc, #8]	@ (8005ac0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000050 	.word	0x20000050

08005ac4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005acc:	2182      	movs	r1, #130	@ 0x82
 8005ace:	4818      	ldr	r0, [pc, #96]	@ (8005b30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ad0:	f000 fd17 	bl	8006502 <USBD_GetEpDesc>
 8005ad4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4815      	ldr	r0, [pc, #84]	@ (8005b30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ada:	f000 fd12 	bl	8006502 <USBD_GetEpDesc>
 8005ade:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ae0:	2181      	movs	r1, #129	@ 0x81
 8005ae2:	4813      	ldr	r0, [pc, #76]	@ (8005b30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ae4:	f000 fd0d 	bl	8006502 <USBD_GetEpDesc>
 8005ae8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2210      	movs	r2, #16
 8005af4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d006      	beq.n	8005b0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2200      	movs	r2, #0
 8005b00:	711a      	strb	r2, [r3, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f042 0202 	orr.w	r2, r2, #2
 8005b08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d006      	beq.n	8005b1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	711a      	strb	r2, [r3, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f042 0202 	orr.w	r2, r2, #2
 8005b1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2243      	movs	r2, #67	@ 0x43
 8005b22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b24:	4b02      	ldr	r3, [pc, #8]	@ (8005b30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000050 	.word	0x20000050

08005b34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b3c:	2182      	movs	r1, #130	@ 0x82
 8005b3e:	4818      	ldr	r0, [pc, #96]	@ (8005ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b40:	f000 fcdf 	bl	8006502 <USBD_GetEpDesc>
 8005b44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b46:	2101      	movs	r1, #1
 8005b48:	4815      	ldr	r0, [pc, #84]	@ (8005ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b4a:	f000 fcda 	bl	8006502 <USBD_GetEpDesc>
 8005b4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b50:	2181      	movs	r1, #129	@ 0x81
 8005b52:	4813      	ldr	r0, [pc, #76]	@ (8005ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b54:	f000 fcd5 	bl	8006502 <USBD_GetEpDesc>
 8005b58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2210      	movs	r2, #16
 8005b64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b74:	711a      	strb	r2, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b88:	711a      	strb	r2, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2243      	movs	r2, #67	@ 0x43
 8005b92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b94:	4b02      	ldr	r3, [pc, #8]	@ (8005ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000050 	.word	0x20000050

08005ba4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	220a      	movs	r2, #10
 8005bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005bb2:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	2000000c 	.word	0x2000000c

08005bc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e009      	b.n	8005bec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	33b0      	adds	r3, #176	@ 0xb0
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	32b0      	adds	r2, #176	@ 0xb0
 8005c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c12:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e008      	b.n	8005c30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	32b0      	adds	r2, #176	@ 0xb0
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e004      	b.n	8005c6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32b0      	adds	r2, #176	@ 0xb0
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e025      	b.n	8005cea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11f      	bne.n	8005ce8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005cb0:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <USBD_CDC_TransmitPacket+0x7c>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4403      	add	r3, r0
 8005cca:	3318      	adds	r3, #24
 8005ccc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <USBD_CDC_TransmitPacket+0x7c>)
 8005cd0:	7819      	ldrb	r1, [r3, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 ffb7 	bl	8007c52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000093 	.word	0x20000093

08005cf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	32b0      	adds	r2, #176	@ 0xb0
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	32b0      	adds	r2, #176	@ 0xb0
 8005d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e018      	b.n	8005d58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7c1b      	ldrb	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <USBD_CDC_ReceivePacket+0x68>)
 8005d30:	7819      	ldrb	r1, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 ffa9 	bl	8007c94 <USBD_LL_PrepareReceive>
 8005d42:	e008      	b.n	8005d56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d44:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <USBD_CDC_ReceivePacket+0x68>)
 8005d46:	7819      	ldrb	r1, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d4e:	2340      	movs	r3, #64	@ 0x40
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 ff9f 	bl	8007c94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000094 	.word	0x20000094

08005d64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e01f      	b.n	8005dbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	79fa      	ldrb	r2, [r7, #7]
 8005dae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 fe19 	bl	80079e8 <USBD_LL_Init>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e025      	b.n	8005e28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	32ae      	adds	r2, #174	@ 0xae
 8005dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00f      	beq.n	8005e18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32ae      	adds	r2, #174	@ 0xae
 8005e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	f107 020e 	add.w	r2, r7, #14
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4798      	blx	r3
 8005e10:	4602      	mov	r2, r0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fe21 	bl	8007a80 <USBD_LL_Start>
 8005e3e:	4603      	mov	r3, r0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	4611      	mov	r1, r2
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	4798      	blx	r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 f90c 	bl	80070fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d01a      	beq.n	8005f3c <USBD_LL_SetupStage+0x72>
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d822      	bhi.n	8005f50 <USBD_LL_SetupStage+0x86>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <USBD_LL_SetupStage+0x4a>
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d00a      	beq.n	8005f28 <USBD_LL_SetupStage+0x5e>
 8005f12:	e01d      	b.n	8005f50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fb63 	bl	80065e8 <USBD_StdDevReq>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
      break;
 8005f26:	e020      	b.n	8005f6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fbcb 	bl	80066cc <USBD_StdItfReq>
 8005f36:	4603      	mov	r3, r0
 8005f38:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3a:	e016      	b.n	8005f6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fc2d 	bl	80067a4 <USBD_StdEPReq>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4e:	e00c      	b.n	8005f6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fdee 	bl	8007b40 <USBD_LL_StallEP>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
      break;
 8005f68:	bf00      	nop
  }

  return ret;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d16e      	bne.n	800606a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005f92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	f040 8098 	bne.w	80060d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d913      	bls.n	8005fd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	bf28      	it	cs
 8005fc6:	4613      	movcs	r3, r2
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f001 f988 	bl	80072e2 <USBD_CtlContinueRx>
 8005fd2:	e07d      	b.n	80060d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d014      	beq.n	800600c <USBD_LL_DataOutStage+0x98>
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d81d      	bhi.n	8006022 <USBD_LL_DataOutStage+0xae>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <USBD_LL_DataOutStage+0x7c>
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d003      	beq.n	8005ff6 <USBD_LL_DataOutStage+0x82>
 8005fee:	e018      	b.n	8006022 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ff4:	e018      	b.n	8006028 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fa64 	bl	80064ce <USBD_CoreFindIF>
 8006006:	4603      	mov	r3, r0
 8006008:	75bb      	strb	r3, [r7, #22]
            break;
 800600a:	e00d      	b.n	8006028 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4619      	mov	r1, r3
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fa66 	bl	80064e8 <USBD_CoreFindEP>
 800601c:	4603      	mov	r3, r0
 800601e:	75bb      	strb	r3, [r7, #22]
            break;
 8006020:	e002      	b.n	8006028 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	75bb      	strb	r3, [r7, #22]
            break;
 8006026:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006028:	7dbb      	ldrb	r3, [r7, #22]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d119      	bne.n	8006062 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b03      	cmp	r3, #3
 8006038:	d113      	bne.n	8006062 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800603a:	7dba      	ldrb	r2, [r7, #22]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	32ae      	adds	r2, #174	@ 0xae
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800604a:	7dba      	ldrb	r2, [r7, #22]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006052:	7dba      	ldrb	r2, [r7, #22]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	32ae      	adds	r2, #174	@ 0xae
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f001 f94e 	bl	8007304 <USBD_CtlSendStatus>
 8006068:	e032      	b.n	80060d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006070:	b2db      	uxtb	r3, r3
 8006072:	4619      	mov	r1, r3
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fa37 	bl	80064e8 <USBD_CoreFindEP>
 800607a:	4603      	mov	r3, r0
 800607c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800607e:	7dbb      	ldrb	r3, [r7, #22]
 8006080:	2bff      	cmp	r3, #255	@ 0xff
 8006082:	d025      	beq.n	80060d0 <USBD_LL_DataOutStage+0x15c>
 8006084:	7dbb      	ldrb	r3, [r7, #22]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d122      	bne.n	80060d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d117      	bne.n	80060c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006096:	7dba      	ldrb	r2, [r7, #22]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	32ae      	adds	r2, #174	@ 0xae
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00f      	beq.n	80060c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80060a6:	7dba      	ldrb	r2, [r7, #22]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80060ae:	7dba      	ldrb	r2, [r7, #22]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	32ae      	adds	r2, #174	@ 0xae
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	7afa      	ldrb	r2, [r7, #11]
 80060bc:	4611      	mov	r1, r2
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	e000      	b.n	80060d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b086      	sub	sp, #24
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	460b      	mov	r3, r1
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d16f      	bne.n	80061ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3314      	adds	r3, #20
 80060f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d15a      	bne.n	80061b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	429a      	cmp	r2, r3
 8006108:	d914      	bls.n	8006134 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	1ad2      	subs	r2, r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	461a      	mov	r2, r3
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f001 f8b0 	bl	8007286 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006126:	2300      	movs	r3, #0
 8006128:	2200      	movs	r2, #0
 800612a:	2100      	movs	r1, #0
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f001 fdb1 	bl	8007c94 <USBD_LL_PrepareReceive>
 8006132:	e03f      	b.n	80061b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d11c      	bne.n	800617a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006148:	429a      	cmp	r2, r3
 800614a:	d316      	bcc.n	800617a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006156:	429a      	cmp	r2, r3
 8006158:	d20f      	bcs.n	800617a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 f891 	bl	8007286 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800616c:	2300      	movs	r3, #0
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f001 fd8e 	bl	8007c94 <USBD_LL_PrepareReceive>
 8006178:	e01c      	b.n	80061b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d10f      	bne.n	80061a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a6:	2180      	movs	r1, #128	@ 0x80
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fcc9 	bl	8007b40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 f8bb 	bl	800732a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d03a      	beq.n	8006234 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fe42 	bl	8005e48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80061cc:	e032      	b.n	8006234 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	4619      	mov	r1, r3
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f985 	bl	80064e8 <USBD_CoreFindEP>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2bff      	cmp	r3, #255	@ 0xff
 80061e6:	d025      	beq.n	8006234 <USBD_LL_DataInStage+0x15a>
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d122      	bne.n	8006234 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d11c      	bne.n	8006234 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061fa:	7dfa      	ldrb	r2, [r7, #23]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	32ae      	adds	r2, #174	@ 0xae
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800620a:	7dfa      	ldrb	r2, [r7, #23]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006212:	7dfa      	ldrb	r2, [r7, #23]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	32ae      	adds	r2, #174	@ 0xae
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	7afa      	ldrb	r2, [r7, #11]
 8006220:	4611      	mov	r1, r2
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	4798      	blx	r3
 8006226:	4603      	mov	r3, r0
 8006228:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800622a:	7dbb      	ldrb	r3, [r7, #22]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006230:	7dbb      	ldrb	r3, [r7, #22]
 8006232:	e000      	b.n	8006236 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d014      	beq.n	80062a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6852      	ldr	r2, [r2, #4]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	4611      	mov	r1, r2
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062a4:	2340      	movs	r3, #64	@ 0x40
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fc03 	bl	8007ab6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2240      	movs	r2, #64	@ 0x40
 80062bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062c0:	2340      	movs	r3, #64	@ 0x40
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	@ 0x80
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fbf5 	bl	8007ab6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2240      	movs	r2, #64	@ 0x40
 80062d6:	621a      	str	r2, [r3, #32]

  return ret;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b04      	cmp	r3, #4
 8006314:	d006      	beq.n	8006324 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800631c:	b2da      	uxtb	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2204      	movs	r2, #4
 8006328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b04      	cmp	r3, #4
 800634c:	d106      	bne.n	800635c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006354:	b2da      	uxtb	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d110      	bne.n	80063a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	32ae      	adds	r2, #174	@ 0xae
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e01c      	b.n	8006406 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d115      	bne.n	8006404 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	32ae      	adds	r2, #174	@ 0xae
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	32ae      	adds	r2, #174	@ 0xae
 80063f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4611      	mov	r1, r2
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	32ae      	adds	r2, #174	@ 0xae
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800642c:	2303      	movs	r3, #3
 800642e:	e01c      	b.n	800646a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b03      	cmp	r3, #3
 800643a:	d115      	bne.n	8006468 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	32ae      	adds	r2, #174	@ 0xae
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32ae      	adds	r2, #174	@ 0xae
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	4611      	mov	r1, r2
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6852      	ldr	r2, [r2, #4]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	4611      	mov	r1, r2
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	885b      	ldrh	r3, [r3, #2]
 800651e:	b29b      	uxth	r3, r3
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	7812      	ldrb	r2, [r2, #0]
 8006524:	4293      	cmp	r3, r2
 8006526:	d91f      	bls.n	8006568 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800652e:	e013      	b.n	8006558 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006530:	f107 030a 	add.w	r3, r7, #10
 8006534:	4619      	mov	r1, r3
 8006536:	6978      	ldr	r0, [r7, #20]
 8006538:	f000 f81b 	bl	8006572 <USBD_GetNextDesc>
 800653c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	2b05      	cmp	r3, #5
 8006544:	d108      	bne.n	8006558 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	789b      	ldrb	r3, [r3, #2]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	429a      	cmp	r2, r3
 8006552:	d008      	beq.n	8006566 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	885b      	ldrh	r3, [r3, #2]
 800655c:	b29a      	uxth	r2, r3
 800655e:	897b      	ldrh	r3, [r7, #10]
 8006560:	429a      	cmp	r2, r3
 8006562:	d8e5      	bhi.n	8006530 <USBD_GetEpDesc+0x2e>
 8006564:	e000      	b.n	8006568 <USBD_GetEpDesc+0x66>
          break;
 8006566:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006568:	693b      	ldr	r3, [r7, #16]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	4413      	add	r3, r2
 800658a:	b29a      	uxth	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800659c:	68fb      	ldr	r3, [r7, #12]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b087      	sub	sp, #28
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065c8:	8a3b      	ldrh	r3, [r7, #16]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	b21a      	sxth	r2, r3
 80065ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b21b      	sxth	r3, r3
 80065d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065d8:	89fb      	ldrh	r3, [r7, #14]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065fe:	2b40      	cmp	r3, #64	@ 0x40
 8006600:	d005      	beq.n	800660e <USBD_StdDevReq+0x26>
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	d857      	bhi.n	80066b6 <USBD_StdDevReq+0xce>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00f      	beq.n	800662a <USBD_StdDevReq+0x42>
 800660a:	2b20      	cmp	r3, #32
 800660c:	d153      	bne.n	80066b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	32ae      	adds	r2, #174	@ 0xae
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
 8006624:	4603      	mov	r3, r0
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e04a      	b.n	80066c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b09      	cmp	r3, #9
 8006630:	d83b      	bhi.n	80066aa <USBD_StdDevReq+0xc2>
 8006632:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <USBD_StdDevReq+0x50>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	0800668d 	.word	0x0800668d
 800663c:	080066a1 	.word	0x080066a1
 8006640:	080066ab 	.word	0x080066ab
 8006644:	08006697 	.word	0x08006697
 8006648:	080066ab 	.word	0x080066ab
 800664c:	0800666b 	.word	0x0800666b
 8006650:	08006661 	.word	0x08006661
 8006654:	080066ab 	.word	0x080066ab
 8006658:	08006683 	.word	0x08006683
 800665c:	08006675 	.word	0x08006675
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa3c 	bl	8006ae0 <USBD_GetDescriptor>
          break;
 8006668:	e024      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fba1 	bl	8006db4 <USBD_SetAddress>
          break;
 8006672:	e01f      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fbe0 	bl	8006e3c <USBD_SetConfig>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
          break;
 8006680:	e018      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fc83 	bl	8006f90 <USBD_GetConfig>
          break;
 800668a:	e013      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fcb4 	bl	8006ffc <USBD_GetStatus>
          break;
 8006694:	e00e      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fce3 	bl	8007064 <USBD_SetFeature>
          break;
 800669e:	e009      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fd07 	bl	80070b6 <USBD_ClrFeature>
          break;
 80066a8:	e004      	b.n	80066b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fd5e 	bl	800716e <USBD_CtlError>
          break;
 80066b2:	bf00      	nop
      }
      break;
 80066b4:	e004      	b.n	80066c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fd58 	bl	800716e <USBD_CtlError>
      break;
 80066be:	bf00      	nop
  }

  return ret;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop

080066cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d005      	beq.n	80066f2 <USBD_StdItfReq+0x26>
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d852      	bhi.n	8006790 <USBD_StdItfReq+0xc4>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <USBD_StdItfReq+0x26>
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d14e      	bne.n	8006790 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d840      	bhi.n	8006782 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	889b      	ldrh	r3, [r3, #4]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d836      	bhi.n	8006778 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	889b      	ldrh	r3, [r3, #4]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fedb 	bl	80064ce <USBD_CoreFindIF>
 8006718:	4603      	mov	r3, r0
 800671a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	2bff      	cmp	r3, #255	@ 0xff
 8006720:	d01d      	beq.n	800675e <USBD_StdItfReq+0x92>
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11a      	bne.n	800675e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006728:	7bba      	ldrb	r2, [r7, #14]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	32ae      	adds	r2, #174	@ 0xae
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00f      	beq.n	8006758 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006738:	7bba      	ldrb	r2, [r7, #14]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006740:	7bba      	ldrb	r2, [r7, #14]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	32ae      	adds	r2, #174	@ 0xae
 8006746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006756:	e004      	b.n	8006762 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800675c:	e001      	b.n	8006762 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800675e:	2303      	movs	r3, #3
 8006760:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	88db      	ldrh	r3, [r3, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d110      	bne.n	800678c <USBD_StdItfReq+0xc0>
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10d      	bne.n	800678c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fdc7 	bl	8007304 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006776:	e009      	b.n	800678c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fcf7 	bl	800716e <USBD_CtlError>
          break;
 8006780:	e004      	b.n	800678c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fcf2 	bl	800716e <USBD_CtlError>
          break;
 800678a:	e000      	b.n	800678e <USBD_StdItfReq+0xc2>
          break;
 800678c:	bf00      	nop
      }
      break;
 800678e:	e004      	b.n	800679a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fceb 	bl	800716e <USBD_CtlError>
      break;
 8006798:	bf00      	nop
  }

  return ret;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	889b      	ldrh	r3, [r3, #4]
 80067b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067c0:	2b40      	cmp	r3, #64	@ 0x40
 80067c2:	d007      	beq.n	80067d4 <USBD_StdEPReq+0x30>
 80067c4:	2b40      	cmp	r3, #64	@ 0x40
 80067c6:	f200 817f 	bhi.w	8006ac8 <USBD_StdEPReq+0x324>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d02a      	beq.n	8006824 <USBD_StdEPReq+0x80>
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	f040 817a 	bne.w	8006ac8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fe85 	bl	80064e8 <USBD_CoreFindEP>
 80067de:	4603      	mov	r3, r0
 80067e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067e2:	7b7b      	ldrb	r3, [r7, #13]
 80067e4:	2bff      	cmp	r3, #255	@ 0xff
 80067e6:	f000 8174 	beq.w	8006ad2 <USBD_StdEPReq+0x32e>
 80067ea:	7b7b      	ldrb	r3, [r7, #13]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 8170 	bne.w	8006ad2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067f2:	7b7a      	ldrb	r2, [r7, #13]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067fa:	7b7a      	ldrb	r2, [r7, #13]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	32ae      	adds	r2, #174	@ 0xae
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8163 	beq.w	8006ad2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800680c:	7b7a      	ldrb	r2, [r7, #13]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32ae      	adds	r2, #174	@ 0xae
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006822:	e156      	b.n	8006ad2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d008      	beq.n	800683e <USBD_StdEPReq+0x9a>
 800682c:	2b03      	cmp	r3, #3
 800682e:	f300 8145 	bgt.w	8006abc <USBD_StdEPReq+0x318>
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 809b 	beq.w	800696e <USBD_StdEPReq+0x1ca>
 8006838:	2b01      	cmp	r3, #1
 800683a:	d03c      	beq.n	80068b6 <USBD_StdEPReq+0x112>
 800683c:	e13e      	b.n	8006abc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d002      	beq.n	8006850 <USBD_StdEPReq+0xac>
 800684a:	2b03      	cmp	r3, #3
 800684c:	d016      	beq.n	800687c <USBD_StdEPReq+0xd8>
 800684e:	e02c      	b.n	80068aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <USBD_StdEPReq+0xce>
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	2b80      	cmp	r3, #128	@ 0x80
 800685a:	d00a      	beq.n	8006872 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f96d 	bl	8007b40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006866:	2180      	movs	r1, #128	@ 0x80
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f969 	bl	8007b40 <USBD_LL_StallEP>
 800686e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006870:	e020      	b.n	80068b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fc7a 	bl	800716e <USBD_CtlError>
              break;
 800687a:	e01b      	b.n	80068b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	885b      	ldrh	r3, [r3, #2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10e      	bne.n	80068a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <USBD_StdEPReq+0xfe>
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b80      	cmp	r3, #128	@ 0x80
 800688e:	d008      	beq.n	80068a2 <USBD_StdEPReq+0xfe>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	88db      	ldrh	r3, [r3, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 f94f 	bl	8007b40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fd2e 	bl	8007304 <USBD_CtlSendStatus>

              break;
 80068a8:	e004      	b.n	80068b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc5e 	bl	800716e <USBD_CtlError>
              break;
 80068b2:	bf00      	nop
          }
          break;
 80068b4:	e107      	b.n	8006ac6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d002      	beq.n	80068c8 <USBD_StdEPReq+0x124>
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d016      	beq.n	80068f4 <USBD_StdEPReq+0x150>
 80068c6:	e04b      	b.n	8006960 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <USBD_StdEPReq+0x146>
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b80      	cmp	r3, #128	@ 0x80
 80068d2:	d00a      	beq.n	80068ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f931 	bl	8007b40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068de:	2180      	movs	r1, #128	@ 0x80
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f92d 	bl	8007b40 <USBD_LL_StallEP>
 80068e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068e8:	e040      	b.n	800696c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fc3e 	bl	800716e <USBD_CtlError>
              break;
 80068f2:	e03b      	b.n	800696c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	885b      	ldrh	r3, [r3, #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d136      	bne.n	800696a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 f937 	bl	8007b7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fcf7 	bl	8007304 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fde4 	bl	80064e8 <USBD_CoreFindEP>
 8006920:	4603      	mov	r3, r0
 8006922:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006924:	7b7b      	ldrb	r3, [r7, #13]
 8006926:	2bff      	cmp	r3, #255	@ 0xff
 8006928:	d01f      	beq.n	800696a <USBD_StdEPReq+0x1c6>
 800692a:	7b7b      	ldrb	r3, [r7, #13]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d11c      	bne.n	800696a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006930:	7b7a      	ldrb	r2, [r7, #13]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006938:	7b7a      	ldrb	r2, [r7, #13]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	@ 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d010      	beq.n	800696a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006948:	7b7a      	ldrb	r2, [r7, #13]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	32ae      	adds	r2, #174	@ 0xae
 800694e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800695e:	e004      	b.n	800696a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fc03 	bl	800716e <USBD_CtlError>
              break;
 8006968:	e000      	b.n	800696c <USBD_StdEPReq+0x1c8>
              break;
 800696a:	bf00      	nop
          }
          break;
 800696c:	e0ab      	b.n	8006ac6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d002      	beq.n	8006980 <USBD_StdEPReq+0x1dc>
 800697a:	2b03      	cmp	r3, #3
 800697c:	d032      	beq.n	80069e4 <USBD_StdEPReq+0x240>
 800697e:	e097      	b.n	8006ab0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <USBD_StdEPReq+0x1f2>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b80      	cmp	r3, #128	@ 0x80
 800698a:	d004      	beq.n	8006996 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fbed 	bl	800716e <USBD_CtlError>
                break;
 8006994:	e091      	b.n	8006aba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da0b      	bge.n	80069b6 <USBD_StdEPReq+0x212>
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	3310      	adds	r3, #16
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	3304      	adds	r3, #4
 80069b4:	e00b      	b.n	80069ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	3304      	adds	r3, #4
 80069ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2202      	movs	r2, #2
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fc37 	bl	8007250 <USBD_CtlSendData>
              break;
 80069e2:	e06a      	b.n	8006aba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da11      	bge.n	8006a10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	f003 020f 	and.w	r2, r3, #15
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	3324      	adds	r3, #36	@ 0x24
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d117      	bne.n	8006a36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbb0 	bl	800716e <USBD_CtlError>
                  break;
 8006a0e:	e054      	b.n	8006aba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fb9d 	bl	800716e <USBD_CtlError>
                  break;
 8006a34:	e041      	b.n	8006aba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	da0b      	bge.n	8006a56 <USBD_StdEPReq+0x2b2>
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	3310      	adds	r3, #16
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	4413      	add	r3, r2
 8006a52:	3304      	adds	r3, #4
 8006a54:	e00b      	b.n	8006a6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <USBD_StdEPReq+0x2d8>
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b80      	cmp	r3, #128	@ 0x80
 8006a7a:	d103      	bne.n	8006a84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e00e      	b.n	8006aa2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 f897 	bl	8007bbc <USBD_LL_IsStallEP>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fbd1 	bl	8007250 <USBD_CtlSendData>
              break;
 8006aae:	e004      	b.n	8006aba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fb5b 	bl	800716e <USBD_CtlError>
              break;
 8006ab8:	bf00      	nop
          }
          break;
 8006aba:	e004      	b.n	8006ac6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fb55 	bl	800716e <USBD_CtlError>
          break;
 8006ac4:	bf00      	nop
      }
      break;
 8006ac6:	e005      	b.n	8006ad4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fb4f 	bl	800716e <USBD_CtlError>
      break;
 8006ad0:	e000      	b.n	8006ad4 <USBD_StdEPReq+0x330>
      break;
 8006ad2:	bf00      	nop
  }

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	f200 8128 	bhi.w	8006d56 <USBD_GetDescriptor+0x276>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <USBD_GetDescriptor+0x2c>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b29 	.word	0x08006b29
 8006b10:	08006b41 	.word	0x08006b41
 8006b14:	08006b81 	.word	0x08006b81
 8006b18:	08006d57 	.word	0x08006d57
 8006b1c:	08006d57 	.word	0x08006d57
 8006b20:	08006cf7 	.word	0x08006cf7
 8006b24:	08006d23 	.word	0x08006d23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	7c12      	ldrb	r2, [r2, #16]
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
 8006b3c:	60f8      	str	r0, [r7, #12]
      break;
 8006b3e:	e112      	b.n	8006d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7c1b      	ldrb	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10d      	bne.n	8006b64 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b50:	f107 0208 	add.w	r2, r7, #8
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	2202      	movs	r2, #2
 8006b60:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b62:	e100      	b.n	8006d66 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	f107 0208 	add.w	r2, r7, #8
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	701a      	strb	r2, [r3, #0]
      break;
 8006b7e:	e0f2      	b.n	8006d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	885b      	ldrh	r3, [r3, #2]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	f200 80ac 	bhi.w	8006ce4 <USBD_GetDescriptor+0x204>
 8006b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <USBD_GetDescriptor+0xb4>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bad 	.word	0x08006bad
 8006b98:	08006be1 	.word	0x08006be1
 8006b9c:	08006c15 	.word	0x08006c15
 8006ba0:	08006c49 	.word	0x08006c49
 8006ba4:	08006c7d 	.word	0x08006c7d
 8006ba8:	08006cb1 	.word	0x08006cb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bce:	e091      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 facb 	bl	800716e <USBD_CtlError>
            err++;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bde:	e089      	b.n	8006cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7c12      	ldrb	r2, [r2, #16]
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c02:	e077      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fab1 	bl	800716e <USBD_CtlError>
            err++;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	72fb      	strb	r3, [r7, #11]
          break;
 8006c12:	e06f      	b.n	8006cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	7c12      	ldrb	r2, [r2, #16]
 8006c2c:	f107 0108 	add.w	r1, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c36:	e05d      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa97 	bl	800716e <USBD_CtlError>
            err++;
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	3301      	adds	r3, #1
 8006c44:	72fb      	strb	r3, [r7, #11]
          break;
 8006c46:	e055      	b.n	8006cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	7c12      	ldrb	r2, [r2, #16]
 8006c60:	f107 0108 	add.w	r1, r7, #8
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
 8006c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c6a:	e043      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa7d 	bl	800716e <USBD_CtlError>
            err++;
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	3301      	adds	r3, #1
 8006c78:	72fb      	strb	r3, [r7, #11]
          break;
 8006c7a:	e03b      	b.n	8006cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7c12      	ldrb	r2, [r2, #16]
 8006c94:	f107 0108 	add.w	r1, r7, #8
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c9e:	e029      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa63 	bl	800716e <USBD_CtlError>
            err++;
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	3301      	adds	r3, #1
 8006cac:	72fb      	strb	r3, [r7, #11]
          break;
 8006cae:	e021      	b.n	8006cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	7c12      	ldrb	r2, [r2, #16]
 8006cc8:	f107 0108 	add.w	r1, r7, #8
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4798      	blx	r3
 8006cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cd2:	e00f      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa49 	bl	800716e <USBD_CtlError>
            err++;
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ce2:	e007      	b.n	8006cf4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa41 	bl	800716e <USBD_CtlError>
          err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006cf2:	bf00      	nop
      }
      break;
 8006cf4:	e037      	b.n	8006d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7c1b      	ldrb	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d06:	f107 0208 	add.w	r2, r7, #8
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4798      	blx	r3
 8006d0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d10:	e029      	b.n	8006d66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fa2a 	bl	800716e <USBD_CtlError>
        err++;
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d20:	e021      	b.n	8006d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	7c1b      	ldrb	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10d      	bne.n	8006d46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d32:	f107 0208 	add.w	r2, r7, #8
 8006d36:	4610      	mov	r0, r2
 8006d38:	4798      	blx	r3
 8006d3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	2207      	movs	r2, #7
 8006d42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d44:	e00f      	b.n	8006d66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa10 	bl	800716e <USBD_CtlError>
        err++;
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	3301      	adds	r3, #1
 8006d52:	72fb      	strb	r3, [r7, #11]
      break;
 8006d54:	e007      	b.n	8006d66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fa08 	bl	800716e <USBD_CtlError>
      err++;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	3301      	adds	r3, #1
 8006d62:	72fb      	strb	r3, [r7, #11]
      break;
 8006d64:	bf00      	nop
  }

  if (err != 0U)
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11e      	bne.n	8006daa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d016      	beq.n	8006da2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d74:	893b      	ldrh	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00e      	beq.n	8006d98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	88da      	ldrh	r2, [r3, #6]
 8006d7e:	893b      	ldrh	r3, [r7, #8]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	bf28      	it	cs
 8006d84:	4613      	movcs	r3, r2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa5d 	bl	8007250 <USBD_CtlSendData>
 8006d96:	e009      	b.n	8006dac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f9e7 	bl	800716e <USBD_CtlError>
 8006da0:	e004      	b.n	8006dac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 faae 	bl	8007304 <USBD_CtlSendStatus>
 8006da8:	e000      	b.n	8006dac <USBD_GetDescriptor+0x2cc>
    return;
 8006daa:	bf00      	nop
  }
}
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop

08006db4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	889b      	ldrh	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d131      	bne.n	8006e2a <USBD_SetAddress+0x76>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d12d      	bne.n	8006e2a <USBD_SetAddress+0x76>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	885b      	ldrh	r3, [r3, #2]
 8006dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd4:	d829      	bhi.n	8006e2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d104      	bne.n	8006df8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f9bc 	bl	800716e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df6:	e01d      	b.n	8006e34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7bfa      	ldrb	r2, [r7, #15]
 8006dfc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 ff05 	bl	8007c14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa7a 	bl	8007304 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1e:	e009      	b.n	8006e34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e28:	e004      	b.n	8006e34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f99e 	bl	800716e <USBD_CtlError>
  }
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	885b      	ldrh	r3, [r3, #2]
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	4b4e      	ldr	r3, [pc, #312]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006e52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e54:	4b4d      	ldr	r3, [pc, #308]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d905      	bls.n	8006e68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f985 	bl	800716e <USBD_CtlError>
    return USBD_FAIL;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e08c      	b.n	8006f82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d002      	beq.n	8006e7a <USBD_SetConfig+0x3e>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d029      	beq.n	8006ecc <USBD_SetConfig+0x90>
 8006e78:	e075      	b.n	8006f66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e7a:	4b44      	ldr	r3, [pc, #272]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d020      	beq.n	8006ec4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e82:	4b42      	ldr	r3, [pc, #264]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fe ffe3 	bl	8005e5e <USBD_SetClassConfig>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f962 	bl	800716e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eb2:	e065      	b.n	8006f80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa25 	bl	8007304 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006ec2:	e05d      	b.n	8006f80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa1d 	bl	8007304 <USBD_CtlSendStatus>
      break;
 8006eca:	e059      	b.n	8006f80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d112      	bne.n	8006efa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006edc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ee6:	4b29      	ldr	r3, [pc, #164]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fe ffd2 	bl	8005e96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa06 	bl	8007304 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ef8:	e042      	b.n	8006f80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006efa:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d02a      	beq.n	8006f5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fe ffc0 	bl	8005e96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f16:	4b1d      	ldr	r3, [pc, #116]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f20:	4b1a      	ldr	r3, [pc, #104]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fe ff99 	bl	8005e5e <USBD_SetClassConfig>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00f      	beq.n	8006f56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f918 	bl	800716e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe ffa5 	bl	8005e96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f54:	e014      	b.n	8006f80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f9d4 	bl	8007304 <USBD_CtlSendStatus>
      break;
 8006f5c:	e010      	b.n	8006f80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9d0 	bl	8007304 <USBD_CtlSendStatus>
      break;
 8006f64:	e00c      	b.n	8006f80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f900 	bl	800716e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f6e:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <USBD_SetConfig+0x150>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fe ff8e 	bl	8005e96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7e:	bf00      	nop
  }

  return ret;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000284 	.word	0x20000284

08006f90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d004      	beq.n	8006fac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f8e2 	bl	800716e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006faa:	e023      	b.n	8006ff4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	dc02      	bgt.n	8006fbe <USBD_GetConfig+0x2e>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dc03      	bgt.n	8006fc4 <USBD_GetConfig+0x34>
 8006fbc:	e015      	b.n	8006fea <USBD_GetConfig+0x5a>
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d00b      	beq.n	8006fda <USBD_GetConfig+0x4a>
 8006fc2:	e012      	b.n	8006fea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f93c 	bl	8007250 <USBD_CtlSendData>
        break;
 8006fd8:	e00c      	b.n	8006ff4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f934 	bl	8007250 <USBD_CtlSendData>
        break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f8be 	bl	800716e <USBD_CtlError>
        break;
 8006ff2:	bf00      	nop
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800700c:	b2db      	uxtb	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	2b02      	cmp	r3, #2
 8007012:	d81e      	bhi.n	8007052 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	88db      	ldrh	r3, [r3, #6]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d004      	beq.n	8007026 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8a5 	bl	800716e <USBD_CtlError>
        break;
 8007024:	e01a      	b.n	800705c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f043 0202 	orr.w	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	330c      	adds	r3, #12
 8007046:	2202      	movs	r2, #2
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f900 	bl	8007250 <USBD_CtlSendData>
      break;
 8007050:	e004      	b.n	800705c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f88a 	bl	800716e <USBD_CtlError>
      break;
 800705a:	bf00      	nop
  }
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f940 	bl	8007304 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007084:	e013      	b.n	80070ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	885b      	ldrh	r3, [r3, #2]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d10b      	bne.n	80070a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	889b      	ldrh	r3, [r3, #4]
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	b29b      	uxth	r3, r3
 8007096:	b2da      	uxtb	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f930 	bl	8007304 <USBD_CtlSendStatus>
}
 80070a4:	e003      	b.n	80070ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f860 	bl	800716e <USBD_CtlError>
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d80b      	bhi.n	80070e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	885b      	ldrh	r3, [r3, #2]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d10c      	bne.n	80070f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f910 	bl	8007304 <USBD_CtlSendStatus>
      }
      break;
 80070e4:	e004      	b.n	80070f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f840 	bl	800716e <USBD_CtlError>
      break;
 80070ee:	e000      	b.n	80070f2 <USBD_ClrFeature+0x3c>
      break;
 80070f0:	bf00      	nop
  }
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff fa40 	bl	80065aa <SWAPBYTE>
 800712a:	4603      	mov	r3, r0
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fa33 	bl	80065aa <SWAPBYTE>
 8007144:	4603      	mov	r3, r0
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff fa26 	bl	80065aa <SWAPBYTE>
 800715e:	4603      	mov	r3, r0
 8007160:	461a      	mov	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	80da      	strh	r2, [r3, #6]
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007178:	2180      	movs	r1, #128	@ 0x80
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fce0 	bl	8007b40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007180:	2100      	movs	r1, #0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fcdc 	bl	8007b40 <USBD_LL_StallEP>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d036      	beq.n	8007214 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80071aa:	6938      	ldr	r0, [r7, #16]
 80071ac:	f000 f836 	bl	800721c <USBD_GetLen>
 80071b0:	4603      	mov	r3, r0
 80071b2:	3301      	adds	r3, #1
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	4413      	add	r3, r2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7812      	ldrb	r2, [r2, #0]
 80071c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	3301      	adds	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	2203      	movs	r2, #3
 80071d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	3301      	adds	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071e0:	e013      	b.n	800720a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	4413      	add	r3, r2
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	7812      	ldrb	r2, [r2, #0]
 80071ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	3301      	adds	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]
    idx++;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	3301      	adds	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	4413      	add	r3, r2
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
    idx++;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	3301      	adds	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e7      	bne.n	80071e2 <USBD_GetString+0x52>
 8007212:	e000      	b.n	8007216 <USBD_GetString+0x86>
    return;
 8007214:	bf00      	nop
  }
}
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800722c:	e005      	b.n	800723a <USBD_GetLen+0x1e>
  {
    len++;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	3301      	adds	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	3301      	adds	r3, #1
 8007238:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f5      	bne.n	800722e <USBD_GetLen+0x12>
  }

  return len;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2202      	movs	r2, #2
 8007260:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	2100      	movs	r1, #0
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fceb 	bl	8007c52 <USBD_LL_Transmit>

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	2100      	movs	r1, #0
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fcda 	bl	8007c52 <USBD_LL_Transmit>

  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2203      	movs	r2, #3
 80072b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	2100      	movs	r1, #0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fcde 	bl	8007c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	2100      	movs	r1, #0
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fccd 	bl	8007c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2204      	movs	r2, #4
 8007310:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007314:	2300      	movs	r3, #0
 8007316:	2200      	movs	r2, #0
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fc99 	bl	8007c52 <USBD_LL_Transmit>

  return USBD_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2205      	movs	r2, #5
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800733a:	2300      	movs	r3, #0
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fca7 	bl	8007c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007354:	2200      	movs	r2, #0
 8007356:	4912      	ldr	r1, [pc, #72]	@ (80073a0 <MX_USB_DEVICE_Init+0x50>)
 8007358:	4812      	ldr	r0, [pc, #72]	@ (80073a4 <MX_USB_DEVICE_Init+0x54>)
 800735a:	f7fe fd03 	bl	8005d64 <USBD_Init>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007364:	f7f9 fa48 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007368:	490f      	ldr	r1, [pc, #60]	@ (80073a8 <MX_USB_DEVICE_Init+0x58>)
 800736a:	480e      	ldr	r0, [pc, #56]	@ (80073a4 <MX_USB_DEVICE_Init+0x54>)
 800736c:	f7fe fd2a 	bl	8005dc4 <USBD_RegisterClass>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007376:	f7f9 fa3f 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800737a:	490c      	ldr	r1, [pc, #48]	@ (80073ac <MX_USB_DEVICE_Init+0x5c>)
 800737c:	4809      	ldr	r0, [pc, #36]	@ (80073a4 <MX_USB_DEVICE_Init+0x54>)
 800737e:	f7fe fc21 	bl	8005bc4 <USBD_CDC_RegisterInterface>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007388:	f7f9 fa36 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800738c:	4805      	ldr	r0, [pc, #20]	@ (80073a4 <MX_USB_DEVICE_Init+0x54>)
 800738e:	f7fe fd4f 	bl	8005e30 <USBD_Start>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007398:	f7f9 fa2e 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800739c:	bf00      	nop
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	200000ac 	.word	0x200000ac
 80073a4:	20000288 	.word	0x20000288
 80073a8:	20000018 	.word	0x20000018
 80073ac:	20000098 	.word	0x20000098

080073b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073b4:	2200      	movs	r2, #0
 80073b6:	4905      	ldr	r1, [pc, #20]	@ (80073cc <CDC_Init_FS+0x1c>)
 80073b8:	4805      	ldr	r0, [pc, #20]	@ (80073d0 <CDC_Init_FS+0x20>)
 80073ba:	f7fe fc1d 	bl	8005bf8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073be:	4905      	ldr	r1, [pc, #20]	@ (80073d4 <CDC_Init_FS+0x24>)
 80073c0:	4803      	ldr	r0, [pc, #12]	@ (80073d0 <CDC_Init_FS+0x20>)
 80073c2:	f7fe fc3b 	bl	8005c3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	200006a4 	.word	0x200006a4
 80073d0:	20000288 	.word	0x20000288
 80073d4:	20000564 	.word	0x20000564

080073d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073de:	4618      	mov	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	2b23      	cmp	r3, #35	@ 0x23
 80073fc:	d84a      	bhi.n	8007494 <CDC_Control_FS+0xac>
 80073fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <CDC_Control_FS+0x1c>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007495 	.word	0x08007495
 8007408:	08007495 	.word	0x08007495
 800740c:	08007495 	.word	0x08007495
 8007410:	08007495 	.word	0x08007495
 8007414:	08007495 	.word	0x08007495
 8007418:	08007495 	.word	0x08007495
 800741c:	08007495 	.word	0x08007495
 8007420:	08007495 	.word	0x08007495
 8007424:	08007495 	.word	0x08007495
 8007428:	08007495 	.word	0x08007495
 800742c:	08007495 	.word	0x08007495
 8007430:	08007495 	.word	0x08007495
 8007434:	08007495 	.word	0x08007495
 8007438:	08007495 	.word	0x08007495
 800743c:	08007495 	.word	0x08007495
 8007440:	08007495 	.word	0x08007495
 8007444:	08007495 	.word	0x08007495
 8007448:	08007495 	.word	0x08007495
 800744c:	08007495 	.word	0x08007495
 8007450:	08007495 	.word	0x08007495
 8007454:	08007495 	.word	0x08007495
 8007458:	08007495 	.word	0x08007495
 800745c:	08007495 	.word	0x08007495
 8007460:	08007495 	.word	0x08007495
 8007464:	08007495 	.word	0x08007495
 8007468:	08007495 	.word	0x08007495
 800746c:	08007495 	.word	0x08007495
 8007470:	08007495 	.word	0x08007495
 8007474:	08007495 	.word	0x08007495
 8007478:	08007495 	.word	0x08007495
 800747c:	08007495 	.word	0x08007495
 8007480:	08007495 	.word	0x08007495
 8007484:	08007495 	.word	0x08007495
 8007488:	08007495 	.word	0x08007495
 800748c:	08007495 	.word	0x08007495
 8007490:	08007495 	.word	0x08007495
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007494:	bf00      	nop
  }

  return (USBD_OK);
 8007496:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	4805      	ldr	r0, [pc, #20]	@ (80074c8 <CDC_Receive_FS+0x24>)
 80074b2:	f7fe fbc3 	bl	8005c3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074b6:	4804      	ldr	r0, [pc, #16]	@ (80074c8 <CDC_Receive_FS+0x24>)
 80074b8:	f7fe fc1e 	bl	8005cf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80074bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000288 	.word	0x20000288

080074cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <CDC_Transmit_FS+0x48>)
 80074de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e00b      	b.n	800750a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074f2:	887b      	ldrh	r3, [r7, #2]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	4806      	ldr	r0, [pc, #24]	@ (8007514 <CDC_Transmit_FS+0x48>)
 80074fa:	f7fe fb7d 	bl	8005bf8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074fe:	4805      	ldr	r0, [pc, #20]	@ (8007514 <CDC_Transmit_FS+0x48>)
 8007500:	f7fe fbba 	bl	8005c78 <USBD_CDC_TransmitPacket>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000288 	.word	0x20000288

08007518 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800752a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800752e:	4618      	mov	r0, r3
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
	...

0800753c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2212      	movs	r2, #18
 800754c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800754e:	4b03      	ldr	r3, [pc, #12]	@ (800755c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	200000c8 	.word	0x200000c8

08007560 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2204      	movs	r2, #4
 8007570:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007572:	4b03      	ldr	r3, [pc, #12]	@ (8007580 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	200000dc 	.word	0x200000dc

08007584 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d105      	bne.n	80075a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4907      	ldr	r1, [pc, #28]	@ (80075b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800759a:	4808      	ldr	r0, [pc, #32]	@ (80075bc <USBD_FS_ProductStrDescriptor+0x38>)
 800759c:	f7ff fdf8 	bl	8007190 <USBD_GetString>
 80075a0:	e004      	b.n	80075ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4904      	ldr	r1, [pc, #16]	@ (80075b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80075a6:	4805      	ldr	r0, [pc, #20]	@ (80075bc <USBD_FS_ProductStrDescriptor+0x38>)
 80075a8:	f7ff fdf2 	bl	8007190 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075ac:	4b02      	ldr	r3, [pc, #8]	@ (80075b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	200007e4 	.word	0x200007e4
 80075bc:	08007df4 	.word	0x08007df4

080075c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	4904      	ldr	r1, [pc, #16]	@ (80075e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075d0:	4804      	ldr	r0, [pc, #16]	@ (80075e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075d2:	f7ff fddd 	bl	8007190 <USBD_GetString>
  return USBD_StrDesc;
 80075d6:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200007e4 	.word	0x200007e4
 80075e4:	08007e00 	.word	0x08007e00

080075e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	221a      	movs	r2, #26
 80075f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075fa:	f000 f843 	bl	8007684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075fe:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200000e0 	.word	0x200000e0

0800760c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4907      	ldr	r1, [pc, #28]	@ (8007640 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007622:	4808      	ldr	r0, [pc, #32]	@ (8007644 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007624:	f7ff fdb4 	bl	8007190 <USBD_GetString>
 8007628:	e004      	b.n	8007634 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4904      	ldr	r1, [pc, #16]	@ (8007640 <USBD_FS_ConfigStrDescriptor+0x34>)
 800762e:	4805      	ldr	r0, [pc, #20]	@ (8007644 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007630:	f7ff fdae 	bl	8007190 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007634:	4b02      	ldr	r3, [pc, #8]	@ (8007640 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	200007e4 	.word	0x200007e4
 8007644:	08007e14 	.word	0x08007e14

08007648 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4907      	ldr	r1, [pc, #28]	@ (800767c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800765e:	4808      	ldr	r0, [pc, #32]	@ (8007680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007660:	f7ff fd96 	bl	8007190 <USBD_GetString>
 8007664:	e004      	b.n	8007670 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4904      	ldr	r1, [pc, #16]	@ (800767c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800766a:	4805      	ldr	r0, [pc, #20]	@ (8007680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800766c:	f7ff fd90 	bl	8007190 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007670:	4b02      	ldr	r3, [pc, #8]	@ (800767c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	200007e4 	.word	0x200007e4
 8007680:	08007e20 	.word	0x08007e20

08007684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800768a:	4b0f      	ldr	r3, [pc, #60]	@ (80076c8 <Get_SerialNum+0x44>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007690:	4b0e      	ldr	r3, [pc, #56]	@ (80076cc <Get_SerialNum+0x48>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007696:	4b0e      	ldr	r3, [pc, #56]	@ (80076d0 <Get_SerialNum+0x4c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d009      	beq.n	80076be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076aa:	2208      	movs	r2, #8
 80076ac:	4909      	ldr	r1, [pc, #36]	@ (80076d4 <Get_SerialNum+0x50>)
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f814 	bl	80076dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076b4:	2204      	movs	r2, #4
 80076b6:	4908      	ldr	r1, [pc, #32]	@ (80076d8 <Get_SerialNum+0x54>)
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f000 f80f 	bl	80076dc <IntToUnicode>
  }
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	1fff7a10 	.word	0x1fff7a10
 80076cc:	1fff7a14 	.word	0x1fff7a14
 80076d0:	1fff7a18 	.word	0x1fff7a18
 80076d4:	200000e2 	.word	0x200000e2
 80076d8:	200000f2 	.word	0x200000f2

080076dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e027      	b.n	8007744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d80b      	bhi.n	8007714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3230      	adds	r2, #48	@ 0x30
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e00a      	b.n	800772a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	0f1b      	lsrs	r3, r3, #28
 8007718:	b2da      	uxtb	r2, r3
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4619      	mov	r1, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	440b      	add	r3, r1
 8007724:	3237      	adds	r2, #55	@ 0x37
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	3301      	adds	r3, #1
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	3301      	adds	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	7dfa      	ldrb	r2, [r7, #23]
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d3d3      	bcc.n	80076f4 <IntToUnicode+0x18>
  }
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
	...

0800775c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	@ 0x28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	609a      	str	r2, [r3, #8]
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800777c:	d13a      	bne.n	80077f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	4b1e      	ldr	r3, [pc, #120]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007786:	4a1d      	ldr	r2, [pc, #116]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	6313      	str	r3, [r2, #48]	@ 0x30
 800778e:	4b1b      	ldr	r3, [pc, #108]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800779a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800779e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a0:	2302      	movs	r3, #2
 80077a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a8:	2303      	movs	r3, #3
 80077aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077ac:	230a      	movs	r3, #10
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077b0:	f107 0314 	add.w	r3, r7, #20
 80077b4:	4619      	mov	r1, r3
 80077b6:	4812      	ldr	r0, [pc, #72]	@ (8007800 <HAL_PCD_MspInit+0xa4>)
 80077b8:	f7f9 fca6 	bl	8001108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077bc:	4b0f      	ldr	r3, [pc, #60]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	4a0e      	ldr	r2, [pc, #56]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 80077c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 80077ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d0:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 80077d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80077d8:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <HAL_PCD_MspInit+0xa0>)
 80077da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077e4:	2200      	movs	r2, #0
 80077e6:	2100      	movs	r1, #0
 80077e8:	2043      	movs	r0, #67	@ 0x43
 80077ea:	f7f9 fc56 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077ee:	2043      	movs	r0, #67	@ 0x43
 80077f0:	f7f9 fc6f 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077f4:	bf00      	nop
 80077f6:	3728      	adds	r7, #40	@ 0x28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	40020000 	.word	0x40020000

08007804 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe fb55 	bl	8005eca <USBD_LL_SetupStage>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	4619      	mov	r1, r3
 8007852:	f7fe fb8f 	bl	8005f74 <USBD_LL_DataOutStage>
}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	3320      	adds	r3, #32
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	4619      	mov	r1, r3
 8007886:	f7fe fc28 	bl	80060da <USBD_LL_DataInStage>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fd62 	bl	800636a <USBD_LL_SOF>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078b6:	2301      	movs	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	79db      	ldrb	r3, [r3, #7]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
 80078c6:	e008      	b.n	80078da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	79db      	ldrb	r3, [r3, #7]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d102      	bne.n	80078d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
 80078d4:	e001      	b.n	80078da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078d6:	f7f8 ff8f 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078e0:	7bfa      	ldrb	r2, [r7, #15]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fcfc 	bl	80062e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fca4 	bl	800623e <USBD_LL_Reset>
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fcf7 	bl	8006302 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6812      	ldr	r2, [r2, #0]
 8007922:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7adb      	ldrb	r3, [r3, #11]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007934:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <HAL_PCD_SuspendCallback+0x48>)
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	4a03      	ldr	r2, [pc, #12]	@ (8007948 <HAL_PCD_SuspendCallback+0x48>)
 800793a:	f043 0306 	orr.w	r3, r3, #6
 800793e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fced 	bl	800633a <USBD_LL_Resume>
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fd45 	bl	800640e <USBD_LL_IsoOUTIncomplete>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fd01 	bl	80063aa <USBD_LL_IsoINIncomplete>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fd57 	bl	8006472 <USBD_LL_DevConnected>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fd54 	bl	8006488 <USBD_LL_DevDisconnected>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d13c      	bne.n	8007a72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079f8:	4a20      	ldr	r2, [pc, #128]	@ (8007a7c <USBD_LL_Init+0x94>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a1e      	ldr	r2, [pc, #120]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a08:	4b1c      	ldr	r3, [pc, #112]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a12:	2204      	movs	r2, #4
 8007a14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a16:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a18:	2202      	movs	r2, #2
 8007a1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a1c:	4b17      	ldr	r3, [pc, #92]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a22:	4b16      	ldr	r3, [pc, #88]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a24:	2202      	movs	r2, #2
 8007a26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a28:	4b14      	ldr	r3, [pc, #80]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a2e:	4b13      	ldr	r3, [pc, #76]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a34:	4b11      	ldr	r3, [pc, #68]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a3a:	4b10      	ldr	r3, [pc, #64]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a40:	4b0e      	ldr	r3, [pc, #56]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a46:	480d      	ldr	r0, [pc, #52]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a48:	f7f9 fcfb 	bl	8001442 <HAL_PCD_Init>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a52:	f7f8 fed1 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a56:	2180      	movs	r1, #128	@ 0x80
 8007a58:	4808      	ldr	r0, [pc, #32]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a5a:	f7fa ff26 	bl	80028aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a5e:	2240      	movs	r2, #64	@ 0x40
 8007a60:	2100      	movs	r1, #0
 8007a62:	4806      	ldr	r0, [pc, #24]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a64:	f7fa feda 	bl	800281c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a68:	2280      	movs	r2, #128	@ 0x80
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	4803      	ldr	r0, [pc, #12]	@ (8007a7c <USBD_LL_Init+0x94>)
 8007a6e:	f7fa fed5 	bl	800281c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200009e4 	.word	0x200009e4

08007a80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7f9 fde2 	bl	8001660 <HAL_PCD_Start>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f942 	bl	8007d2c <USBD_Get_USB_Status>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	70fb      	strb	r3, [r7, #3]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70bb      	strb	r3, [r7, #2]
 8007acc:	4613      	mov	r3, r2
 8007ace:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ade:	78bb      	ldrb	r3, [r7, #2]
 8007ae0:	883a      	ldrh	r2, [r7, #0]
 8007ae2:	78f9      	ldrb	r1, [r7, #3]
 8007ae4:	f7fa fab6 	bl	8002054 <HAL_PCD_EP_Open>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f91c 	bl	8007d2c <USBD_Get_USB_Status>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fa faff 	bl	8002124 <HAL_PCD_EP_Close>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 f8fd 	bl	8007d2c <USBD_Get_USB_Status>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fa fbb7 	bl	80022d2 <HAL_PCD_EP_SetStall>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f8de 	bl	8007d2c <USBD_Get_USB_Status>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fa fbfb 	bl	8002398 <HAL_PCD_EP_ClrStall>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f8bf 	bl	8007d2c <USBD_Get_USB_Status>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da0b      	bge.n	8007bf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	4613      	mov	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	3316      	adds	r3, #22
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	e00b      	b.n	8007c08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007c06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fa f9ea 	bl	800200c <HAL_PCD_SetAddress>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f874 	bl	8007d2c <USBD_Get_USB_Status>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c70:	7af9      	ldrb	r1, [r7, #11]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	f7fa faf2 	bl	800225e <HAL_PCD_EP_Transmit>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f853 	bl	8007d2c <USBD_Get_USB_Status>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007cb2:	7af9      	ldrb	r1, [r7, #11]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	f7fa fa7e 	bl	80021b8 <HAL_PCD_EP_Receive>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f832 	bl	8007d2c <USBD_Get_USB_Status>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ccc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fa fa9e 	bl	800222e <HAL_PCD_EP_GetRxCount>
 8007cf2:	4603      	mov	r3, r0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d04:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <USBD_static_malloc+0x18>)
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000ec8 	.word	0x20000ec8

08007d18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d817      	bhi.n	8007d70 <USBD_Get_USB_Status+0x44>
 8007d40:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <USBD_Get_USB_Status+0x1c>)
 8007d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d46:	bf00      	nop
 8007d48:	08007d59 	.word	0x08007d59
 8007d4c:	08007d5f 	.word	0x08007d5f
 8007d50:	08007d65 	.word	0x08007d65
 8007d54:	08007d6b 	.word	0x08007d6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	e00b      	b.n	8007d76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	73fb      	strb	r3, [r7, #15]
    break;
 8007d62:	e008      	b.n	8007d76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d64:	2301      	movs	r3, #1
 8007d66:	73fb      	strb	r3, [r7, #15]
    break;
 8007d68:	e005      	b.n	8007d76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6e:	e002      	b.n	8007d76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	73fb      	strb	r3, [r7, #15]
    break;
 8007d74:	bf00      	nop
  }
  return usb_status;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <memset>:
 8007d84:	4402      	add	r2, r0
 8007d86:	4603      	mov	r3, r0
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d100      	bne.n	8007d8e <memset+0xa>
 8007d8c:	4770      	bx	lr
 8007d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d92:	e7f9      	b.n	8007d88 <memset+0x4>

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4d0d      	ldr	r5, [pc, #52]	@ (8007dcc <__libc_init_array+0x38>)
 8007d98:	4c0d      	ldr	r4, [pc, #52]	@ (8007dd0 <__libc_init_array+0x3c>)
 8007d9a:	1b64      	subs	r4, r4, r5
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	2600      	movs	r6, #0
 8007da0:	42a6      	cmp	r6, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	4d0b      	ldr	r5, [pc, #44]	@ (8007dd4 <__libc_init_array+0x40>)
 8007da6:	4c0c      	ldr	r4, [pc, #48]	@ (8007dd8 <__libc_init_array+0x44>)
 8007da8:	f000 f818 	bl	8007ddc <_init>
 8007dac:	1b64      	subs	r4, r4, r5
 8007dae:	10a4      	asrs	r4, r4, #2
 8007db0:	2600      	movs	r6, #0
 8007db2:	42a6      	cmp	r6, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbc:	4798      	blx	r3
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc6:	4798      	blx	r3
 8007dc8:	3601      	adds	r6, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	08007e48 	.word	0x08007e48
 8007dd0:	08007e48 	.word	0x08007e48
 8007dd4:	08007e48 	.word	0x08007e48
 8007dd8:	08007e4c 	.word	0x08007e4c

08007ddc <_init>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr

08007de8 <_fini>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr
