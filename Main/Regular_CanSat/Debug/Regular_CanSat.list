
Regular_CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004998  08004998  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004998  08004998  00005998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049a0  080049a0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a0  080049a0  000059a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049a4  080049a4  000059a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080049a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  080049b4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080049b4  00006248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117e3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b7  00000000  00000000  0001781f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00019fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc2  00000000  00000000  0001b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192e1  00000000  00000000  0001bd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001537f  00000000  00000000  00034ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8b4  00000000  00000000  0004a372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  000e4c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e9104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004954 	.word	0x08004954

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004954 	.word	0x08004954

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <KUP_Init>:
 */


#include "KUP.h"

int KUP_Init() {
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	return SUCCESS;
 8000504:	23aa      	movs	r3, #170	@ 0xaa
}
 8000506:	4618      	mov	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <KUP_Upgrade>:

int KUP_Upgrade() {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	return SUCCESS;
 8000514:	23aa      	movs	r3, #170	@ 0xaa
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fcbe 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f816 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f9a8 	bl	8000880 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000530:	f000 f8ce 	bl	80006d0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8000534:	f000 f8fa 	bl	800072c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000538:	f000 f918 	bl	800076c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800053c:	f000 f94c 	bl	80007d8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000540:	f000 f974 	bl	800082c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000544:	f003 ffee 	bl	8004524 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000548:	f000 f870 	bl	800062c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  KUP_Init();
 800054c:	f7ff ffd8 	bl	8000500 <KUP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		KUP_Upgrade();
 8000550:	f7ff ffde 	bl	8000510 <KUP_Upgrade>
 8000554:	e7fc      	b.n	8000550 <main+0x30>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 f9c7 	bl	80048fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a4:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005d0:	23c0      	movs	r3, #192	@ 0xc0
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fb37 	bl	8001c54 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ec:	f000 fa06 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fd9a 	bl	8002144 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 f9f1 	bl	80009fc <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	@ 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <MX_ADC1_Init+0x9c>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800066c:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <MX_ADC1_Init+0xa0>)
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000678:	2201      	movs	r2, #1
 800067a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800068c:	f000 fca0 	bl	8000fd0 <HAL_ADC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f9b1 	bl	80009fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800069a:	2303      	movs	r3, #3
 800069c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <MX_ADC1_Init+0x98>)
 80006ac:	f000 fcd4 	bl	8001058 <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006b6:	f000 f9a1 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f001 f95d 	bl	80019cc <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f970 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000070 	.word	0x20000070
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000732:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <MX_SDIO_SD_Init+0x3c>)
 8000734:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800074e:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	200000c4 	.word	0x200000c4
 8000768:	40012c00 	.word	0x40012c00

0800076c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_SPI1_Init+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007be:	f002 fe31 	bl	8003424 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 f918 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000148 	.word	0x20000148
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART1_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 8000810:	f002 fe91 	bl	8003536 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8ef 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001a0 	.word	0x200001a0
 8000828:	40011000 	.word	0x40011000

0800082c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART6_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART6_UART_Init+0x4c>)
 8000864:	f002 fe67 	bl	8003536 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f8c5 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001e8 	.word	0x200001e8
 800087c:	40011400 	.word	0x40011400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b54      	ldr	r3, [pc, #336]	@ (80009ec <MX_GPIO_Init+0x16c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a53      	ldr	r2, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b51      	ldr	r3, [pc, #324]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b4d      	ldr	r3, [pc, #308]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a4c      	ldr	r2, [pc, #304]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b4a      	ldr	r3, [pc, #296]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b46      	ldr	r3, [pc, #280]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a45      	ldr	r2, [pc, #276]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b43      	ldr	r3, [pc, #268]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b3f      	ldr	r3, [pc, #252]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a3e      	ldr	r2, [pc, #248]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b38      	ldr	r3, [pc, #224]	@ (80009ec <MX_GPIO_Init+0x16c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a37      	ldr	r2, [pc, #220]	@ (80009ec <MX_GPIO_Init+0x16c>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <MX_GPIO_Init+0x16c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR2_EN_GPIO_Port, PWR2_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2101      	movs	r1, #1
 8000926:	4832      	ldr	r0, [pc, #200]	@ (80009f0 <MX_GPIO_Init+0x170>)
 8000928:	f001 f836 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_ERR_Pin|LED_2_Pin|WQ_HOLD_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2117      	movs	r1, #23
 8000930:	4830      	ldr	r0, [pc, #192]	@ (80009f4 <MX_GPIO_Init+0x174>)
 8000932:	f001 f831 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WQ_NSS_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2130      	movs	r1, #48	@ 0x30
 800093a:	482d      	ldr	r0, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0x170>)
 800093c:	f001 f82c 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2107      	movs	r1, #7
 8000944:	482c      	ldr	r0, [pc, #176]	@ (80009f8 <MX_GPIO_Init+0x178>)
 8000946:	f001 f827 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_NSS_GPIO_Port, ADC_NSS_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000950:	4829      	ldr	r0, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0x178>)
 8000952:	f001 f821 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin;
 8000956:	2331      	movs	r3, #49	@ 0x31
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4820      	ldr	r0, [pc, #128]	@ (80009f0 <MX_GPIO_Init+0x170>)
 800096e:	f000 fe77 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_ERR_Pin LED_2_Pin WQ_HOLD_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_ERR_Pin|LED_2_Pin|WQ_HOLD_Pin;
 8000972:	2317      	movs	r3, #23
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	481a      	ldr	r0, [pc, #104]	@ (80009f4 <MX_GPIO_Init+0x174>)
 800098a:	f000 fe69 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
  GPIO_InitStruct.Pin = MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin;
 800098e:	f240 2307 	movw	r3, #519	@ 0x207
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4814      	ldr	r0, [pc, #80]	@ (80009f8 <MX_GPIO_Init+0x178>)
 80009a8:	f000 fe5a 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin|JMP_PROG_Pin;
 80009ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <MX_GPIO_Init+0x178>)
 80009c2:	f000 fe4d 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 80009c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_GPIO_Init+0x178>)
 80009de:	f000 fe3f 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <HAL_ADC_MspInit+0x7c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d127      	bne.n	8000aca <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000ac6:	f000 fdcb 	bl	8001660 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	@ 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012000 	.word	0x40012000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <HAL_I2C_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1e:	23c0      	movs	r3, #192	@ 0xc0
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <HAL_I2C_MspInit+0x8c>)
 8000b3a:	f000 fd91 	bl	8001660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	@ (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_I2C_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005400 	.word	0x40005400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a28      	ldr	r2, [pc, #160]	@ (8000c30 <HAL_SD_MspInit+0xc0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d14a      	bne.n	8000c28 <HAL_SD_MspInit+0xb8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	4a26      	ldr	r2, [pc, #152]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000b9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_SD_MspInit+0xc4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000be6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <HAL_SD_MspInit+0xc8>)
 8000c04:	f000 fd2c 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <HAL_SD_MspInit+0xcc>)
 8000c24:	f000 fd1c 	bl	8001660 <HAL_GPIO_Init>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	@ 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23e0      	movs	r3, #224	@ 0xe0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000cb6:	f000 fcd3 	bl	8001660 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a32      	ldr	r2, [pc, #200]	@ (8000db8 <HAL_UART_MspInit+0xe8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12d      	bne.n	8000d4e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a30      	ldr	r2, [pc, #192]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000cfc:	f043 0310 	orr.w	r3, r3, #16
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <HAL_UART_MspInit+0xf0>)
 8000d48:	f000 fc8a 	bl	8001660 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d4c:	e030      	b.n	8000db0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc4 <HAL_UART_MspInit+0xf4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d12b      	bne.n	8000db0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d60:	4a16      	ldr	r2, [pc, #88]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_UART_MspInit+0xec>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d90:	23c0      	movs	r3, #192	@ 0xc0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000da0:	2308      	movs	r3, #8
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <HAL_UART_MspInit+0xf8>)
 8000dac:	f000 fc58 	bl	8001660 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	@ 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40011400 	.word	0x40011400
 8000dc8:	40020800 	.word	0x40020800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f891 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 fd45 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb4d 	bl	8000520 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e94:	080049a8 	.word	0x080049a8
  ldr r2, =_sbss
 8000e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e9c:	20000248 	.word	0x20000248

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fb93 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fd96 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fb9d 	bl	8001646 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 fb73 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000230 	.word	0x20000230

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000230 	.word	0x20000230

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e033      	b.n	800104e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fd32 	bl	8000a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001016:	f023 0302 	bic.w	r3, r3, #2
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f93a 	bl	800129c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f023 0303 	bic.w	r3, r3, #3
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40
 800103e:	e001      	b.n	8001044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1c>
 8001070:	2302      	movs	r3, #2
 8001072:	e105      	b.n	8001280 <HAL_ADC_ConfigChannel+0x228>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b09      	cmp	r3, #9
 8001082:	d925      	bls.n	80010d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	3b1e      	subs	r3, #30
 800109a:	2207      	movs	r2, #7
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43da      	mvns	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	400a      	ands	r2, r1
 80010a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68d9      	ldr	r1, [r3, #12]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4403      	add	r3, r0
 80010c2:	3b1e      	subs	r3, #30
 80010c4:	409a      	lsls	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	e022      	b.n	8001116 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6919      	ldr	r1, [r3, #16]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	2207      	movs	r2, #7
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	400a      	ands	r2, r1
 80010f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6919      	ldr	r1, [r3, #16]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	4603      	mov	r3, r0
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4403      	add	r3, r0
 800110c:	409a      	lsls	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b06      	cmp	r3, #6
 800111c:	d824      	bhi.n	8001168 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	3b05      	subs	r3, #5
 8001130:	221f      	movs	r2, #31
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	3b05      	subs	r3, #5
 800115a:	fa00 f203 	lsl.w	r2, r0, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
 8001166:	e04c      	b.n	8001202 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b0c      	cmp	r3, #12
 800116e:	d824      	bhi.n	80011ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3b23      	subs	r3, #35	@ 0x23
 8001182:	221f      	movs	r2, #31
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43da      	mvns	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b23      	subs	r3, #35	@ 0x23
 80011ac:	fa00 f203 	lsl.w	r2, r0, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011b8:	e023      	b.n	8001202 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3b41      	subs	r3, #65	@ 0x41
 80011cc:	221f      	movs	r2, #31
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b41      	subs	r3, #65	@ 0x41
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_ADC_ConfigChannel+0x234>)
 8001204:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a21      	ldr	r2, [pc, #132]	@ (8001290 <HAL_ADC_ConfigChannel+0x238>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d109      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1cc>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b12      	cmp	r3, #18
 8001216:	d105      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <HAL_ADC_ConfigChannel+0x238>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d123      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x21e>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d003      	beq.n	800123e <HAL_ADC_ConfigChannel+0x1e6>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b11      	cmp	r3, #17
 800123c:	d11b      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b10      	cmp	r3, #16
 8001250:	d111      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_ADC_ConfigChannel+0x23c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_ADC_ConfigChannel+0x240>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	0c9a      	lsrs	r2, r3, #18
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001268:	e002      	b.n	8001270 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3b01      	subs	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f9      	bne.n	800126a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40012300 	.word	0x40012300
 8001290:	40012000 	.word	0x40012000
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83

0800129c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a4:	4b79      	ldr	r3, [pc, #484]	@ (800148c <ADC_Init+0x1f0>)
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	021a      	lsls	r2, r3, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6899      	ldr	r1, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	4a58      	ldr	r2, [pc, #352]	@ (8001490 <ADC_Init+0x1f4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d022      	beq.n	800137a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	e00f      	b.n	800139a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001398:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0202 	bic.w	r2, r2, #2
 80013a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
 80013b4:	005a      	lsls	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01b      	beq.n	8001400 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f2:	3b01      	subs	r3, #1
 80013f4:	035a      	lsls	r2, r3, #13
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	e007      	b.n	8001410 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800140e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800141e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	3b01      	subs	r3, #1
 800142c:	051a      	lsls	r2, r3, #20
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001452:	025a      	lsls	r2, r3, #9
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800146a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6899      	ldr	r1, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	029a      	lsls	r2, r3, #10
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40012300 	.word	0x40012300
 8001490:	0f000001 	.word	0x0f000001

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	@ (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	@ (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff8e 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff47 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5c 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff8e 	bl	800154c <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5d 	bl	80014f8 <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb0 	bl	80015b4 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e159      	b.n	8001930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8148 	bne.w	800192a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d130      	bne.n	8001714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 0201 	and.w	r2, r3, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b03      	cmp	r3, #3
 800171e:	d017      	beq.n	8001750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d123      	bne.n	80017a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	69b9      	ldr	r1, [r7, #24]
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a2 	beq.w	800192a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b57      	ldr	r3, [pc, #348]	@ (8001948 <HAL_GPIO_Init+0x2e8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a56      	ldr	r2, [pc, #344]	@ (8001948 <HAL_GPIO_Init+0x2e8>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b54      	ldr	r3, [pc, #336]	@ (8001948 <HAL_GPIO_Init+0x2e8>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	4a52      	ldr	r2, [pc, #328]	@ (800194c <HAL_GPIO_Init+0x2ec>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a49      	ldr	r2, [pc, #292]	@ (8001950 <HAL_GPIO_Init+0x2f0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x202>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a48      	ldr	r2, [pc, #288]	@ (8001954 <HAL_GPIO_Init+0x2f4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x1fe>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a47      	ldr	r2, [pc, #284]	@ (8001958 <HAL_GPIO_Init+0x2f8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x1fa>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a46      	ldr	r2, [pc, #280]	@ (800195c <HAL_GPIO_Init+0x2fc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a45      	ldr	r2, [pc, #276]	@ (8001960 <HAL_GPIO_Init+0x300>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x1f2>
 800184e:	2304      	movs	r3, #4
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001852:	2307      	movs	r3, #7
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x204>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x204>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	@ (800194c <HAL_GPIO_Init+0x2ec>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001964 <HAL_GPIO_Init+0x304>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <HAL_GPIO_Init+0x304>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <HAL_GPIO_Init+0x304>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_GPIO_Init+0x304>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <HAL_GPIO_Init+0x304>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f aea2 	bls.w	800167c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40013c00 	.word	0x40013c00

08001968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e001      	b.n	800198a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e12b      	b.n	8001c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff f874 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2224      	movs	r2, #36	@ 0x24
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a30:	f000 fd40 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8001a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a81      	ldr	r2, [pc, #516]	@ (8001c40 <HAL_I2C_Init+0x274>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d807      	bhi.n	8001a50 <HAL_I2C_Init+0x84>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a80      	ldr	r2, [pc, #512]	@ (8001c44 <HAL_I2C_Init+0x278>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	bf94      	ite	ls
 8001a48:	2301      	movls	r3, #1
 8001a4a:	2300      	movhi	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e006      	b.n	8001a5e <HAL_I2C_Init+0x92>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a7d      	ldr	r2, [pc, #500]	@ (8001c48 <HAL_I2C_Init+0x27c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	bf94      	ite	ls
 8001a58:	2301      	movls	r3, #1
 8001a5a:	2300      	movhi	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0e7      	b.n	8001c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a78      	ldr	r2, [pc, #480]	@ (8001c4c <HAL_I2C_Init+0x280>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	@ (8001c40 <HAL_I2C_Init+0x274>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d802      	bhi.n	8001aa0 <HAL_I2C_Init+0xd4>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	e009      	b.n	8001ab4 <HAL_I2C_Init+0xe8>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	4a69      	ldr	r2, [pc, #420]	@ (8001c50 <HAL_I2C_Init+0x284>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	099b      	lsrs	r3, r3, #6
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ac6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	495c      	ldr	r1, [pc, #368]	@ (8001c40 <HAL_I2C_Init+0x274>)
 8001ad0:	428b      	cmp	r3, r1
 8001ad2:	d819      	bhi.n	8001b08 <HAL_I2C_Init+0x13c>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1e59      	subs	r1, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae2:	1c59      	adds	r1, r3, #1
 8001ae4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ae8:	400b      	ands	r3, r1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <HAL_I2C_Init+0x138>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e59      	subs	r1, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b02:	e051      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b04:	2304      	movs	r3, #4
 8001b06:	e04f      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d111      	bne.n	8001b34 <HAL_I2C_Init+0x168>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e012      	b.n	8001b5a <HAL_I2C_Init+0x18e>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e58      	subs	r0, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	0099      	lsls	r1, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Init+0x196>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e022      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10e      	bne.n	8001b88 <HAL_I2C_Init+0x1bc>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e58      	subs	r0, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	440b      	add	r3, r1
 8001b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b86:	e00f      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	0099      	lsls	r1, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6809      	ldr	r1, [r1, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6911      	ldr	r1, [r2, #16]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68d2      	ldr	r2, [r2, #12]
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	000186a0 	.word	0x000186a0
 8001c44:	001e847f 	.word	0x001e847f
 8001c48:	003d08ff 	.word	0x003d08ff
 8001c4c:	431bde83 	.word	0x431bde83
 8001c50:	10624dd3 	.word	0x10624dd3

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e267      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c72:	4b88      	ldr	r3, [pc, #544]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b85      	ldr	r3, [pc, #532]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b82      	ldr	r3, [pc, #520]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b7e      	ldr	r3, [pc, #504]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e242      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b76      	ldr	r3, [pc, #472]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b70      	ldr	r3, [pc, #448]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6f      	ldr	r2, [pc, #444]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b6d      	ldr	r3, [pc, #436]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6c      	ldr	r2, [pc, #432]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b69      	ldr	r3, [pc, #420]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b66      	ldr	r3, [pc, #408]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a65      	ldr	r2, [pc, #404]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f930 	bl	8000f70 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f92c 	bl	8000f70 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e207      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b5b      	ldr	r3, [pc, #364]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f91c 	bl	8000f70 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f918 	bl	8000f70 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1f3      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b51      	ldr	r3, [pc, #324]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b47      	ldr	r3, [pc, #284]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b44      	ldr	r3, [pc, #272]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b41      	ldr	r3, [pc, #260]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1c7      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4937      	ldr	r1, [pc, #220]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <HAL_RCC_OscConfig+0x244>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f8d1 	bl	8000f70 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f8cd 	bl	8000f70 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1a8      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4925      	ldr	r1, [pc, #148]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_RCC_OscConfig+0x244>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f8b0 	bl	8000f70 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff f8ac 	bl	8000f70 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e187      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d036      	beq.n	8001eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <HAL_RCC_OscConfig+0x248>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f890 	bl	8000f70 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f88c 	bl	8000f70 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e167      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_RCC_OscConfig+0x248>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f879 	bl	8000f70 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e00e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff f875 	bl	8000f70 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d907      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e150      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	42470000 	.word	0x42470000
 8001e9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b88      	ldr	r3, [pc, #544]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ea      	bne.n	8001e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8097 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b81      	ldr	r3, [pc, #516]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b7d      	ldr	r3, [pc, #500]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b7a      	ldr	r3, [pc, #488]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b77      	ldr	r3, [pc, #476]	@ (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b74      	ldr	r3, [pc, #464]	@ (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a73      	ldr	r2, [pc, #460]	@ (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f835 	bl	8000f70 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7ff f831 	bl	8000f70 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e10c      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2ea>
 8001f30:	4b64      	ldr	r3, [pc, #400]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	4a63      	ldr	r2, [pc, #396]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x324>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x30c>
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	4b5c      	ldr	r3, [pc, #368]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	4a5b      	ldr	r2, [pc, #364]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x324>
 8001f60:	4b58      	ldr	r3, [pc, #352]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	4a57      	ldr	r2, [pc, #348]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6c:	4b55      	ldr	r3, [pc, #340]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f70:	4a54      	ldr	r2, [pc, #336]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7fe fff6 	bl	8000f70 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe fff2 	bl	8000f70 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0cb      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	4b49      	ldr	r3, [pc, #292]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ee      	beq.n	8001f88 <HAL_RCC_OscConfig+0x334>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7fe ffe0 	bl	8000f70 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ffdc 	bl	8000f70 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0b5      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	4b3e      	ldr	r3, [pc, #248]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	4a38      	ldr	r2, [pc, #224]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a1 	beq.w	8002134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff2:	4b34      	ldr	r3, [pc, #208]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d05c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d141      	bne.n	800208a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ffb0 	bl	8000f70 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ffac 	bl	8000f70 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e087      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	491b      	ldr	r1, [pc, #108]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x478>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe ff85 	bl	8000f70 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7fe ff81 	bl	8000f70 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e05c      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x416>
 8002088:	e054      	b.n	8002134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe ff6e 	bl	8000f70 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe ff6a 	bl	8000f70 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e045      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x444>
 80020b6:	e03d      	b.n	8002134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e038      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000
 80020cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x4ec>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d028      	beq.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d121      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11a      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	3b01      	subs	r3, #1
 800211a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cc      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b68      	ldr	r3, [pc, #416]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d90c      	bls.n	8002180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b65      	ldr	r3, [pc, #404]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d044      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b3f      	ldr	r3, [pc, #252]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e067      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4934      	ldr	r1, [pc, #208]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe fe9c 	bl	8000f70 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fe98 	bl	8000f70 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fdfc 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	0800496c 	.word	0x0800496c
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b090      	sub	sp, #64	@ 0x40
 8002316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d00d      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x40>
 8002334:	2b08      	cmp	r3, #8
 8002336:	f200 80a1 	bhi.w	800247c <HAL_RCC_GetSysClockFreq+0x16c>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 800233e:	2b04      	cmp	r3, #4
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x3a>
 8002342:	e09b      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x184>)
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002348:	e09b      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234a:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800234e:	e098      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4b4f      	ldr	r3, [pc, #316]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235a:	4b4d      	ldr	r3, [pc, #308]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d028      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b4a      	ldr	r3, [pc, #296]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	2200      	movs	r2, #0
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	627a      	str	r2, [r7, #36]	@ 0x24
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002378:	2100      	movs	r1, #0
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800237c:	fb03 f201 	mul.w	r2, r3, r1
 8002380:	2300      	movs	r3, #0
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	4413      	add	r3, r2
 8002388:	4a43      	ldr	r2, [pc, #268]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800238a:	fba0 1202 	umull	r1, r2, r0, r2
 800238e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002390:	460a      	mov	r2, r1
 8002392:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002396:	4413      	add	r3, r2
 8002398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800239a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239c:	2200      	movs	r2, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	61fa      	str	r2, [r7, #28]
 80023a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023aa:	f7fd ff13 	bl	80001d4 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4613      	mov	r3, r2
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b6:	e053      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b8:	4b35      	ldr	r3, [pc, #212]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	2200      	movs	r2, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	617a      	str	r2, [r7, #20]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ca:	f04f 0b00 	mov.w	fp, #0
 80023ce:	4652      	mov	r2, sl
 80023d0:	465b      	mov	r3, fp
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e0:	0150      	lsls	r0, r2, #5
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ebb2 080a 	subs.w	r8, r2, sl
 80023ea:	eb63 090b 	sbc.w	r9, r3, fp
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002402:	ebb2 0408 	subs.w	r4, r2, r8
 8002406:	eb63 0509 	sbc.w	r5, r3, r9
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	00eb      	lsls	r3, r5, #3
 8002414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002418:	00e2      	lsls	r2, r4, #3
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	eb14 030a 	adds.w	r3, r4, sl
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	eb45 030b 	adc.w	r3, r5, fp
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002436:	4629      	mov	r1, r5
 8002438:	028b      	lsls	r3, r1, #10
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002440:	4621      	mov	r1, r4
 8002442:	028a      	lsls	r2, r1, #10
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	2200      	movs	r2, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	f7fd febe 	bl	80001d4 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4613      	mov	r3, r2
 800245e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002470:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x184>)
 800247e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002484:	4618      	mov	r0, r3
 8002486:	3740      	adds	r7, #64	@ 0x40
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	00f42400 	.word	0x00f42400
 8002498:	017d7840 	.word	0x017d7840

0800249c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a9b      	lsrs	r3, r3, #10
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	0800497c 	.word	0x0800497c

080024dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e0:	f7ff ffdc 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	0b5b      	lsrs	r3, r3, #13
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4903      	ldr	r1, [pc, #12]	@ (8002500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	0800497c 	.word	0x0800497c

08002504 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e022      	b.n	800255c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe fb21 	bl	8000b70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f814 	bl	8002564 <HAL_SD_InitCard>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00a      	b.n	800255c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b08e      	sub	sp, #56	@ 0x38
 8002568:	af04      	add	r7, sp, #16
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002580:	2376      	movs	r3, #118	@ 0x76
 8002582:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681d      	ldr	r5, [r3, #0]
 8002588:	466c      	mov	r4, sp
 800258a:	f107 0318 	add.w	r3, r7, #24
 800258e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259c:	4628      	mov	r0, r5
 800259e:	f001 fa8f 	bl	8003ac0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80025a2:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <HAL_SD_InitCard+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fad0 	bl	8003b52 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80025b2:	4b26      	ldr	r3, [pc, #152]	@ (800264c <HAL_SD_InitCard+0xe8>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7fe fce5 	bl	8000f88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fe7a 	bl	80032b8 <SD_PowerON>
 80025c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e02e      	b.n	8002642 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fd99 	bl	800311c <SD_InitCard>
 80025ea:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e01b      	b.n	8002642 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fb2f 	bl	8003c76 <SDMMC_CmdBlockLength>
 8002618:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <HAL_SD_InitCard+0xec>)
 8002626:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3728      	adds	r7, #40	@ 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bdb0      	pop	{r4, r5, r7, pc}
 800264a:	bf00      	nop
 800264c:	422580a0 	.word	0x422580a0
 8002650:	004005ff 	.word	0x004005ff

08002654 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b092      	sub	sp, #72	@ 0x48
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002662:	f7fe fc85 	bl	8000f70 <HAL_GetTick>
 8002666:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e1c5      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	f040 81b8 	bne.w	8002a04 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800269a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	441a      	add	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d907      	bls.n	80026b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e1ac      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2203      	movs	r2, #3
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d002      	beq.n	80026d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80026d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80026e2:	2390      	movs	r3, #144	@ 0x90
 80026e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80026e6:	2302      	movs	r3, #2
 80026e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f107 0214 	add.w	r2, r7, #20
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fa8e 	bl	8003c1e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d90a      	bls.n	800271e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2202      	movs	r2, #2
 800270c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002714:	4618      	mov	r0, r3
 8002716:	f001 faf2 	bl	8003cfe <SDMMC_CmdReadMultiBlock>
 800271a:	6478      	str	r0, [r7, #68]	@ 0x44
 800271c:	e009      	b.n	8002732 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800272a:	4618      	mov	r0, r3
 800272c:	f001 fac5 	bl	8003cba <SDMMC_CmdReadSingleBlock>
 8002730:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002734:	2b00      	cmp	r3, #0
 8002736:	d012      	beq.n	800275e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a7e      	ldr	r2, [pc, #504]	@ (8002938 <HAL_SD_ReadBlocks+0x2e4>)
 800273e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e159      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002762:	e061      	b.n	8002828 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03c      	beq.n	80027ec <HAL_SD_ReadBlocks+0x198>
 8002772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d039      	beq.n	80027ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002778:	2300      	movs	r3, #0
 800277a:	643b      	str	r3, [r7, #64]	@ 0x40
 800277c:	e033      	b.n	80027e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f001 f9c7 	bl	8003b16 <SDIO_ReadFIFO>
 8002788:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800278a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278c:	b2da      	uxtb	r2, r3
 800278e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002790:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002794:	3301      	adds	r3, #1
 8002796:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800279a:	3b01      	subs	r3, #1
 800279c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800279e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027aa:	3301      	adds	r3, #1
 80027ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b0:	3b01      	subs	r3, #1
 80027b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80027b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c0:	3301      	adds	r3, #1
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c6:	3b01      	subs	r3, #1
 80027c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	0e1b      	lsrs	r3, r3, #24
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d6:	3301      	adds	r3, #1
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027dc:	3b01      	subs	r3, #1
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80027e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e2:	3301      	adds	r3, #1
 80027e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80027e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e8:	2b07      	cmp	r3, #7
 80027ea:	d9c8      	bls.n	800277e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80027ec:	f7fe fbc0 	bl	8000f70 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d902      	bls.n	8002802 <HAL_SD_ReadBlocks+0x1ae>
 80027fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d112      	bne.n	8002828 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4c      	ldr	r2, [pc, #304]	@ (8002938 <HAL_SD_ReadBlocks+0x2e4>)
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0f4      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800282e:	f240 332a 	movw	r3, #810	@ 0x32a
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d095      	beq.n	8002764 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d022      	beq.n	800288c <HAL_SD_ReadBlocks+0x238>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d91f      	bls.n	800288c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002850:	2b03      	cmp	r3, #3
 8002852:	d01b      	beq.n	800288c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fab7 	bl	8003dcc <SDMMC_CmdStopTransfer>
 800285e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a33      	ldr	r2, [pc, #204]	@ (8002938 <HAL_SD_ReadBlocks+0x2e4>)
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0c2      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_SD_ReadBlocks+0x254>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <HAL_SD_ReadBlocks+0x2e4>)
 80028ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	f043 0208 	orr.w	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0a1      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a15      	ldr	r2, [pc, #84]	@ (8002938 <HAL_SD_ReadBlocks+0x2e4>)
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	f043 0202 	orr.w	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e087      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d064      	beq.n	80029da <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <HAL_SD_ReadBlocks+0x2e4>)
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06d      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
 8002936:	bf00      	nop
 8002938:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f001 f8e8 	bl	8003b16 <SDIO_ReadFIFO>
 8002946:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294a:	b2da      	uxtb	r2, r3
 800294c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002952:	3301      	adds	r3, #1
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002958:	3b01      	subs	r3, #1
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800295c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b2da      	uxtb	r2, r3
 8002962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002964:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002968:	3301      	adds	r3, #1
 800296a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800296c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800296e:	3b01      	subs	r3, #1
 8002970:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	b2da      	uxtb	r2, r3
 8002978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	3301      	adds	r3, #1
 8002980:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002984:	3b01      	subs	r3, #1
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298a:	0e1b      	lsrs	r3, r3, #24
 800298c:	b2da      	uxtb	r2, r3
 800298e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002990:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002994:	3301      	adds	r3, #1
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299a:	3b01      	subs	r3, #1
 800299c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800299e:	f7fe fae7 	bl	8000f70 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d902      	bls.n	80029b4 <HAL_SD_ReadBlocks+0x360>
 80029ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d112      	bne.n	80029da <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <HAL_SD_ReadBlocks+0x3c8>)
 80029ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e01b      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_SD_ReadBlocks+0x39a>
 80029e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1a6      	bne.n	800293c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e006      	b.n	8002a12 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3748      	adds	r7, #72	@ 0x48
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	004005ff 	.word	0x004005ff

08002a20 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b092      	sub	sp, #72	@ 0x48
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a2e:	f7fe fa9f 	bl	8000f70 <HAL_GetTick>
 8002a32:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e16d      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	f040 8160 	bne.w	8002d20 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d907      	bls.n	8002a84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e154      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2203      	movs	r2, #3
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	025b      	lsls	r3, r3, #9
 8002aac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002aae:	2390      	movs	r3, #144	@ 0x90
 8002ab0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f107 0218 	add.w	r2, r7, #24
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 f8a8 	bl	8003c1e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d90a      	bls.n	8002aea <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f950 	bl	8003d86 <SDMMC_CmdWriteMultiBlock>
 8002ae6:	6478      	str	r0, [r7, #68]	@ 0x44
 8002ae8:	e009      	b.n	8002afe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2210      	movs	r2, #16
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f923 	bl	8003d42 <SDMMC_CmdWriteSingleBlock>
 8002afc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8b      	ldr	r2, [pc, #556]	@ (8002d38 <HAL_SD_WriteBlocks+0x318>)
 8002b0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e101      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b2e:	e065      	b.n	8002bfc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d040      	beq.n	8002bc0 <HAL_SD_WriteBlocks+0x1a0>
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03d      	beq.n	8002bc0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b48:	e037      	b.n	8002bba <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b52:	3301      	adds	r3, #1
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	3b01      	subs	r3, #1
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	3301      	adds	r3, #1
 8002b84:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	061a      	lsls	r2, r3, #24
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f107 0214 	add.w	r2, r7, #20
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 ffbe 	bl	8003b30 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	d9c4      	bls.n	8002b4a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002bc0:	f7fe f9d6 	bl	8000f70 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d902      	bls.n	8002bd6 <HAL_SD_WriteBlocks+0x1b6>
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d112      	bne.n	8002bfc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <HAL_SD_WriteBlocks+0x318>)
 8002bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e098      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c02:	f240 331a 	movw	r3, #794	@ 0x31a
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d091      	beq.n	8002b30 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d022      	beq.n	8002c60 <HAL_SD_WriteBlocks+0x240>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d91f      	bls.n	8002c60 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d01b      	beq.n	8002c60 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 f8cd 	bl	8003dcc <SDMMC_CmdStopTransfer>
 8002c32:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d38 <HAL_SD_WriteBlocks+0x318>)
 8002c40:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e066      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_SD_WriteBlocks+0x25c>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2d      	ldr	r2, [pc, #180]	@ (8002d38 <HAL_SD_WriteBlocks+0x318>)
 8002c82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	f043 0208 	orr.w	r2, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e045      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a20      	ldr	r2, [pc, #128]	@ (8002d38 <HAL_SD_WriteBlocks+0x318>)
 8002cb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	f043 0202 	orr.w	r2, r3, #2
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e02b      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <HAL_SD_WriteBlocks+0x318>)
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	f043 0210 	orr.w	r2, r3, #16
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e011      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002d12:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e006      	b.n	8002d2e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3748      	adds	r7, #72	@ 0x48
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	004005ff 	.word	0x004005ff

08002d3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d4a:	0f9b      	lsrs	r3, r3, #30
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d68:	0e1b      	lsrs	r3, r3, #24
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dba:	0bdb      	lsrs	r3, r3, #15
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dcc:	0b9b      	lsrs	r3, r3, #14
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002df0:	0b1b      	lsrs	r3, r3, #12
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d163      	bne.n	8002ed4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002e1c:	0f92      	lsrs	r2, r2, #30
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e28:	0edb      	lsrs	r3, r3, #27
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3a:	0e1b      	lsrs	r3, r3, #24
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4c:	0d5b      	lsrs	r3, r3, #21
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e5e:	0c9b      	lsrs	r3, r3, #18
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e70:	0bdb      	lsrs	r3, r3, #15
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	7e1b      	ldrb	r3, [r3, #24]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	3302      	adds	r3, #2
 8002e94:	2201      	movs	r2, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002e9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7a1b      	ldrb	r3, [r3, #8]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ec0:	0a52      	lsrs	r2, r2, #9
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed0:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ed2:	e031      	b.n	8002f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d11d      	bne.n	8002f18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	431a      	orrs	r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	029a      	lsls	r2, r3, #10
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f16:	e00f      	b.n	8002f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a58      	ldr	r2, [pc, #352]	@ (8003080 <HAL_SD_GetCardCSD+0x344>)
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e09d      	b.n	8003074 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f3c:	0b9b      	lsrs	r3, r3, #14
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f4e:	09db      	lsrs	r3, r3, #7
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f70:	0fdb      	lsrs	r3, r3, #31
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	0f5b      	lsrs	r3, r3, #29
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	0d9b      	lsrs	r3, r3, #22
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	0d5b      	lsrs	r3, r3, #21
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	0bdb      	lsrs	r3, r3, #15
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	0b9b      	lsrs	r3, r3, #14
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	0b5b      	lsrs	r3, r3, #13
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	0b1b      	lsrs	r3, r3, #12
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	b2da      	uxtb	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	b2da      	uxtb	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003062:	b2da      	uxtb	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	004005ff 	.word	0x004005ff

08003084 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f970 	bl	80033d4 <SD_SendStatus>
 80030f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	0a5b      	lsrs	r3, r3, #9
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003112:	693b      	ldr	r3, [r7, #16]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800311c:	b5b0      	push	{r4, r5, r7, lr}
 800311e:	b094      	sub	sp, #80	@ 0x50
 8003120:	af04      	add	r7, sp, #16
 8003122:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003124:	2301      	movs	r3, #1
 8003126:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fd1e 	bl	8003b6e <SDIO_GetPowerState>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003138:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800313c:	e0b8      	b.n	80032b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	2b03      	cmp	r3, #3
 8003144:	d02f      	beq.n	80031a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff05 	bl	8003f5a <SDMMC_CmdSendCID>
 8003150:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <SD_InitCard+0x40>
    {
      return errorstate;
 8003158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315a:	e0a9      	b.n	80032b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd48 	bl	8003bf8 <SDIO_GetResponse>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2104      	movs	r1, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fd3f 	bl	8003bf8 <SDIO_GetResponse>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2108      	movs	r1, #8
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fd36 	bl	8003bf8 <SDIO_GetResponse>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	210c      	movs	r1, #12
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fd2d 	bl	8003bf8 <SDIO_GetResponse>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d00d      	beq.n	80031ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f107 020e 	add.w	r2, r7, #14
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 ff0b 	bl	8003fd4 <SDMMC_CmdSetRelAdd>
 80031be:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <SD_InitCard+0xae>
    {
      return errorstate;
 80031c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c8:	e072      	b.n	80032b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d036      	beq.n	8003240 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80031d2:	89fb      	ldrh	r3, [r7, #14]
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fed5 	bl	8003f96 <SDMMC_CmdSendCSD>
 80031ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f6:	e05b      	b.n	80032b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fcfa 	bl	8003bf8 <SDIO_GetResponse>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2104      	movs	r1, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fcf1 	bl	8003bf8 <SDIO_GetResponse>
 8003216:	4602      	mov	r2, r0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2108      	movs	r1, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fce8 	bl	8003bf8 <SDIO_GetResponse>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	210c      	movs	r1, #12
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fcdf 	bl	8003bf8 <SDIO_GetResponse>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2104      	movs	r1, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcd6 	bl	8003bf8 <SDIO_GetResponse>
 800324c:	4603      	mov	r3, r0
 800324e:	0d1a      	lsrs	r2, r3, #20
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fd6e 	bl	8002d3c <HAL_SD_GetCardCSD>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003266:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800326a:	e021      	b.n	80032b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	2200      	movs	r2, #0
 8003278:	461c      	mov	r4, r3
 800327a:	4615      	mov	r5, r2
 800327c:	4622      	mov	r2, r4
 800327e:	462b      	mov	r3, r5
 8003280:	4608      	mov	r0, r1
 8003282:	f000 fdc5 	bl	8003e10 <SDMMC_CmdSelDesel>
 8003286:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <SD_InitCard+0x176>
  {
    return errorstate;
 800328e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003290:	e00e      	b.n	80032b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681d      	ldr	r5, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	466c      	mov	r4, sp
 800329a:	f103 0210 	add.w	r2, r3, #16
 800329e:	ca07      	ldmia	r2, {r0, r1, r2}
 80032a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032a4:	3304      	adds	r3, #4
 80032a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a8:	4628      	mov	r0, r5
 80032aa:	f000 fc09 	bl	8003ac0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3740      	adds	r7, #64	@ 0x40
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bdb0      	pop	{r4, r5, r7, pc}

080032b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fdc0 	bl	8003e56 <SDMMC_CmdGoIdleState>
 80032d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	e072      	b.n	80033c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fdd3 	bl	8003e92 <SDMMC_CmdOperCond>
 80032ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fda9 	bl	8003e56 <SDMMC_CmdGoIdleState>
 8003304:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <SD_PowerON+0x5e>
    {
      return errorstate;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	e05b      	b.n	80033c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331a:	2b01      	cmp	r3, #1
 800331c:	d137      	bne.n	800338e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fdd3 	bl	8003ed0 <SDMMC_CmdAppCommand>
 800332a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02d      	beq.n	800338e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003332:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003336:	e047      	b.n	80033c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fdc6 	bl	8003ed0 <SDMMC_CmdAppCommand>
 8003344:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <SD_PowerON+0x98>
    {
      return errorstate;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	e03b      	b.n	80033c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	491e      	ldr	r1, [pc, #120]	@ (80033d0 <SD_PowerON+0x118>)
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fddc 	bl	8003f14 <SDMMC_CmdAppOperCommand>
 800335c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003364:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003368:	e02e      	b.n	80033c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fc41 	bl	8003bf8 <SDIO_GetResponse>
 8003376:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	0fdb      	lsrs	r3, r3, #31
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <SD_PowerON+0xcc>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <SD_PowerON+0xce>
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]

    count++;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3301      	adds	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003394:	4293      	cmp	r3, r2
 8003396:	d802      	bhi.n	800339e <SD_PowerON+0xe6>
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0cc      	beq.n	8003338 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d902      	bls.n	80033ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80033a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ac:	e00c      	b.n	80033c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80033be:	e002      	b.n	80033c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	c1100000 	.word	0xc1100000

080033d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80033e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033e8:	e018      	b.n	800341c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fe0d 	bl	8004016 <SDMMC_CmdSendStatus>
 80033fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	e009      	b.n	800341c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fbf2 	bl	8003bf8 <SDIO_GetResponse>
 8003414:	4602      	mov	r2, r0
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07b      	b.n	800352e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003446:	d009      	beq.n	800345c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
 800344e:	e005      	b.n	800345c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fbe2 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	ea42 0103 	orr.w	r1, r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0104 	and.w	r1, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f003 0210 	and.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e042      	b.n	80035ce <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fd fbb7 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	@ 0x24
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003578:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f82c 	bl	80035d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800358e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800359e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035dc:	b0c0      	sub	sp, #256	@ 0x100
 80035de:	af00      	add	r7, sp, #0
 80035e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f4:	68d9      	ldr	r1, [r3, #12]
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	ea40 0301 	orr.w	r3, r0, r1
 8003600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	431a      	orrs	r2, r3
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003630:	f021 010c 	bic.w	r1, r1, #12
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800363e:	430b      	orrs	r3, r1
 8003640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	6999      	ldr	r1, [r3, #24]
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	ea40 0301 	orr.w	r3, r0, r1
 800365e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b8f      	ldr	r3, [pc, #572]	@ (80038a4 <UART_SetConfig+0x2cc>)
 8003668:	429a      	cmp	r2, r3
 800366a:	d005      	beq.n	8003678 <UART_SetConfig+0xa0>
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b8d      	ldr	r3, [pc, #564]	@ (80038a8 <UART_SetConfig+0x2d0>)
 8003674:	429a      	cmp	r2, r3
 8003676:	d104      	bne.n	8003682 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7fe ff30 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 800367c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003680:	e003      	b.n	800368a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003682:	f7fe ff17 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8003686:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003694:	f040 810c 	bne.w	80038b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369c:	2200      	movs	r2, #0
 800369e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036aa:	4622      	mov	r2, r4
 80036ac:	462b      	mov	r3, r5
 80036ae:	1891      	adds	r1, r2, r2
 80036b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036b2:	415b      	adcs	r3, r3
 80036b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036ba:	4621      	mov	r1, r4
 80036bc:	eb12 0801 	adds.w	r8, r2, r1
 80036c0:	4629      	mov	r1, r5
 80036c2:	eb43 0901 	adc.w	r9, r3, r1
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036da:	4690      	mov	r8, r2
 80036dc:	4699      	mov	r9, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	eb18 0303 	adds.w	r3, r8, r3
 80036e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036e8:	462b      	mov	r3, r5
 80036ea:	eb49 0303 	adc.w	r3, r9, r3
 80036ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003706:	460b      	mov	r3, r1
 8003708:	18db      	adds	r3, r3, r3
 800370a:	653b      	str	r3, [r7, #80]	@ 0x50
 800370c:	4613      	mov	r3, r2
 800370e:	eb42 0303 	adc.w	r3, r2, r3
 8003712:	657b      	str	r3, [r7, #84]	@ 0x54
 8003714:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003718:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800371c:	f7fc fd5a 	bl	80001d4 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4b61      	ldr	r3, [pc, #388]	@ (80038ac <UART_SetConfig+0x2d4>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	011c      	lsls	r4, r3, #4
 800372e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003732:	2200      	movs	r2, #0
 8003734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003738:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800373c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	1891      	adds	r1, r2, r2
 8003746:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003748:	415b      	adcs	r3, r3
 800374a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800374c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003750:	4641      	mov	r1, r8
 8003752:	eb12 0a01 	adds.w	sl, r2, r1
 8003756:	4649      	mov	r1, r9
 8003758:	eb43 0b01 	adc.w	fp, r3, r1
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003768:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800376c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003770:	4692      	mov	sl, r2
 8003772:	469b      	mov	fp, r3
 8003774:	4643      	mov	r3, r8
 8003776:	eb1a 0303 	adds.w	r3, sl, r3
 800377a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800377e:	464b      	mov	r3, r9
 8003780:	eb4b 0303 	adc.w	r3, fp, r3
 8003784:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003794:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003798:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800379c:	460b      	mov	r3, r1
 800379e:	18db      	adds	r3, r3, r3
 80037a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037a2:	4613      	mov	r3, r2
 80037a4:	eb42 0303 	adc.w	r3, r2, r3
 80037a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037b2:	f7fc fd0f 	bl	80001d4 <__aeabi_uldivmod>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ac <UART_SetConfig+0x2d4>)
 80037be:	fba3 2301 	umull	r2, r3, r3, r1
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2264      	movs	r2, #100	@ 0x64
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	1acb      	subs	r3, r1, r3
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037d2:	4b36      	ldr	r3, [pc, #216]	@ (80038ac <UART_SetConfig+0x2d4>)
 80037d4:	fba3 2302 	umull	r2, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037e0:	441c      	add	r4, r3
 80037e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037f4:	4642      	mov	r2, r8
 80037f6:	464b      	mov	r3, r9
 80037f8:	1891      	adds	r1, r2, r2
 80037fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037fc:	415b      	adcs	r3, r3
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003804:	4641      	mov	r1, r8
 8003806:	1851      	adds	r1, r2, r1
 8003808:	6339      	str	r1, [r7, #48]	@ 0x30
 800380a:	4649      	mov	r1, r9
 800380c:	414b      	adcs	r3, r1
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800381c:	4659      	mov	r1, fp
 800381e:	00cb      	lsls	r3, r1, #3
 8003820:	4651      	mov	r1, sl
 8003822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003826:	4651      	mov	r1, sl
 8003828:	00ca      	lsls	r2, r1, #3
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	4603      	mov	r3, r0
 8003830:	4642      	mov	r2, r8
 8003832:	189b      	adds	r3, r3, r2
 8003834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003838:	464b      	mov	r3, r9
 800383a:	460a      	mov	r2, r1
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003850:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003854:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003858:	460b      	mov	r3, r1
 800385a:	18db      	adds	r3, r3, r3
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800385e:	4613      	mov	r3, r2
 8003860:	eb42 0303 	adc.w	r3, r2, r3
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800386a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800386e:	f7fc fcb1 	bl	80001d4 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <UART_SetConfig+0x2d4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	@ 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	3332      	adds	r3, #50	@ 0x32
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <UART_SetConfig+0x2d4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 0207 	and.w	r2, r3, #7
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4422      	add	r2, r4
 800389e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038a0:	e106      	b.n	8003ab0 <UART_SetConfig+0x4d8>
 80038a2:	bf00      	nop
 80038a4:	40011000 	.word	0x40011000
 80038a8:	40011400 	.word	0x40011400
 80038ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038c2:	4642      	mov	r2, r8
 80038c4:	464b      	mov	r3, r9
 80038c6:	1891      	adds	r1, r2, r2
 80038c8:	6239      	str	r1, [r7, #32]
 80038ca:	415b      	adcs	r3, r3
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038d2:	4641      	mov	r1, r8
 80038d4:	1854      	adds	r4, r2, r1
 80038d6:	4649      	mov	r1, r9
 80038d8:	eb43 0501 	adc.w	r5, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	00eb      	lsls	r3, r5, #3
 80038e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ea:	00e2      	lsls	r2, r4, #3
 80038ec:	4614      	mov	r4, r2
 80038ee:	461d      	mov	r5, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	18e3      	adds	r3, r4, r3
 80038f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038f8:	464b      	mov	r3, r9
 80038fa:	eb45 0303 	adc.w	r3, r5, r3
 80038fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800390e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800391e:	4629      	mov	r1, r5
 8003920:	008b      	lsls	r3, r1, #2
 8003922:	4621      	mov	r1, r4
 8003924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003928:	4621      	mov	r1, r4
 800392a:	008a      	lsls	r2, r1, #2
 800392c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003930:	f7fc fc50 	bl	80001d4 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4b60      	ldr	r3, [pc, #384]	@ (8003abc <UART_SetConfig+0x4e4>)
 800393a:	fba3 2302 	umull	r2, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	011c      	lsls	r4, r3, #4
 8003942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800394c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003950:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	1891      	adds	r1, r2, r2
 800395a:	61b9      	str	r1, [r7, #24]
 800395c:	415b      	adcs	r3, r3
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003964:	4641      	mov	r1, r8
 8003966:	1851      	adds	r1, r2, r1
 8003968:	6139      	str	r1, [r7, #16]
 800396a:	4649      	mov	r1, r9
 800396c:	414b      	adcs	r3, r1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800397c:	4659      	mov	r1, fp
 800397e:	00cb      	lsls	r3, r1, #3
 8003980:	4651      	mov	r1, sl
 8003982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003986:	4651      	mov	r1, sl
 8003988:	00ca      	lsls	r2, r1, #3
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	4603      	mov	r3, r0
 8003990:	4642      	mov	r2, r8
 8003992:	189b      	adds	r3, r3, r2
 8003994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003998:	464b      	mov	r3, r9
 800399a:	460a      	mov	r2, r1
 800399c:	eb42 0303 	adc.w	r3, r2, r3
 80039a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039bc:	4649      	mov	r1, r9
 80039be:	008b      	lsls	r3, r1, #2
 80039c0:	4641      	mov	r1, r8
 80039c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c6:	4641      	mov	r1, r8
 80039c8:	008a      	lsls	r2, r1, #2
 80039ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039ce:	f7fc fc01 	bl	80001d4 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <UART_SetConfig+0x4e4>)
 80039da:	fba3 2301 	umull	r2, r3, r3, r1
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2264      	movs	r2, #100	@ 0x64
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	1acb      	subs	r3, r1, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	@ 0x32
 80039ec:	4a33      	ldr	r2, [pc, #204]	@ (8003abc <UART_SetConfig+0x4e4>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f8:	441c      	add	r4, r3
 80039fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fe:	2200      	movs	r2, #0
 8003a00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a02:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	415b      	adcs	r3, r3
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a18:	4641      	mov	r1, r8
 8003a1a:	1851      	adds	r1, r2, r1
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	4649      	mov	r1, r9
 8003a20:	414b      	adcs	r3, r1
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a30:	4659      	mov	r1, fp
 8003a32:	00cb      	lsls	r3, r1, #3
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	4642      	mov	r2, r8
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	eb42 0303 	adc.w	r3, r2, r3
 8003a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	008b      	lsls	r3, r1, #2
 8003a70:	4641      	mov	r1, r8
 8003a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a76:	4641      	mov	r1, r8
 8003a78:	008a      	lsls	r2, r1, #2
 8003a7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a7e:	f7fc fba9 	bl	80001d4 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <UART_SetConfig+0x4e4>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	@ 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	3332      	adds	r3, #50	@ 0x32
 8003a9a:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <UART_SetConfig+0x4e4>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 020f 	and.w	r2, r3, #15
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4422      	add	r2, r4
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abc:	51eb851f 	.word	0x51eb851f

08003ac0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	f107 001c 	add.w	r0, r7, #28
 8003ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003ad6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003ada:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003ade:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003ae2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003ae6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003aea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003afa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	b004      	add	sp, #16
 8003b14:	4770      	bx	lr

08003b16 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ba8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003bae:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003bb4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003bc4:	f023 030f 	bic.w	r3, r3, #15
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	b2db      	uxtb	r3, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3314      	adds	r3, #20
 8003c06:	461a      	mov	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
}  
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c44:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003c4a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003c50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0

}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b088      	sub	sp, #32
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003c84:	2310      	movs	r3, #16
 8003c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c88:	2340      	movs	r3, #64	@ 0x40
 8003c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff74 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f9d7 	bl	800405c <SDMMC_GetCmdResp1>
 8003cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b088      	sub	sp, #32
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cc8:	2311      	movs	r3, #17
 8003cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ccc:	2340      	movs	r3, #64	@ 0x40
 8003cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff52 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cea:	2111      	movs	r1, #17
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f9b5 	bl	800405c <SDMMC_GetCmdResp1>
 8003cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b088      	sub	sp, #32
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003d0c:	2312      	movs	r3, #18
 8003d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d10:	2340      	movs	r3, #64	@ 0x40
 8003d12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff30 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	2112      	movs	r1, #18
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f993 	bl	800405c <SDMMC_GetCmdResp1>
 8003d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d38:	69fb      	ldr	r3, [r7, #28]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b088      	sub	sp, #32
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d50:	2318      	movs	r3, #24
 8003d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d54:	2340      	movs	r3, #64	@ 0x40
 8003d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff0e 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	2118      	movs	r1, #24
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f971 	bl	800405c <SDMMC_GetCmdResp1>
 8003d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b088      	sub	sp, #32
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003d94:	2319      	movs	r3, #25
 8003d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d98:	2340      	movs	r3, #64	@ 0x40
 8003d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003da4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff feec 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db6:	2119      	movs	r1, #25
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f94f 	bl	800405c <SDMMC_GetCmdResp1>
 8003dbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003dd8:	230c      	movs	r3, #12
 8003dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ddc:	2340      	movs	r3, #64	@ 0x40
 8003dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003de8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff feca 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003df6:	4a05      	ldr	r2, [pc, #20]	@ (8003e0c <SDMMC_CmdStopTransfer+0x40>)
 8003df8:	210c      	movs	r1, #12
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f92e 	bl	800405c <SDMMC_GetCmdResp1>
 8003e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e02:	69fb      	ldr	r3, [r7, #28]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	05f5e100 	.word	0x05f5e100

08003e10 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	@ 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003e20:	2307      	movs	r3, #7
 8003e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e24:	2340      	movs	r3, #64	@ 0x40
 8003e26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e30:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e32:	f107 0310 	add.w	r3, r7, #16
 8003e36:	4619      	mov	r1, r3
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff fea6 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e42:	2107      	movs	r1, #7
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f909 	bl	800405c <SDMMC_GetCmdResp1>
 8003e4a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	@ 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fe85 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fb23 	bl	80044cc <SDMMC_GetCmdError>
 8003e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e88:	69fb      	ldr	r3, [r7, #28]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b088      	sub	sp, #32
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003e9a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003e9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ea4:	2340      	movs	r3, #64	@ 0x40
 8003ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff fe66 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fab6 	bl	8004430 <SDMMC_GetCmdResp7>
 8003ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003ede:	2337      	movs	r3, #55	@ 0x37
 8003ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ee2:	2340      	movs	r3, #64	@ 0x40
 8003ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fe47 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	2137      	movs	r1, #55	@ 0x37
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8aa 	bl	800405c <SDMMC_GetCmdResp1>
 8003f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003f2a:	2329      	movs	r3, #41	@ 0x29
 8003f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f2e:	2340      	movs	r3, #64	@ 0x40
 8003f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f3c:	f107 0308 	add.w	r3, r7, #8
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fe21 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f9bd 	bl	80042c8 <SDMMC_GetCmdResp3>
 8003f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f50:	69fb      	ldr	r3, [r7, #28]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f66:	2302      	movs	r3, #2
 8003f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f6a:	23c0      	movs	r3, #192	@ 0xc0
 8003f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe03 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f957 	bl	8004238 <SDMMC_GetCmdResp2>
 8003f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b088      	sub	sp, #32
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003fa8:	23c0      	movs	r3, #192	@ 0xc0
 8003faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fde4 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f938 	bl	8004238 <SDMMC_GetCmdResp2>
 8003fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fca:	69fb      	ldr	r3, [r7, #28]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fe6:	2340      	movs	r3, #64	@ 0x40
 8003fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ff2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fdc5 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	2103      	movs	r1, #3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f99d 	bl	8004344 <SDMMC_GetCmdResp6>
 800400a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800400c:	69fb      	ldr	r3, [r7, #28]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b088      	sub	sp, #32
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004024:	230d      	movs	r3, #13
 8004026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004028:	2340      	movs	r3, #64	@ 0x40
 800402a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004034:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004036:	f107 0308 	add.w	r3, r7, #8
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fda4 	bl	8003b8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004046:	210d      	movs	r1, #13
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f807 	bl	800405c <SDMMC_GetCmdResp1>
 800404e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004050:	69fb      	ldr	r3, [r7, #28]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	460b      	mov	r3, r1
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800406a:	4b70      	ldr	r3, [pc, #448]	@ (800422c <SDMMC_GetCmdResp1+0x1d0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a70      	ldr	r2, [pc, #448]	@ (8004230 <SDMMC_GetCmdResp1+0x1d4>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0a5a      	lsrs	r2, r3, #9
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	61fa      	str	r2, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800408c:	e0c9      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004092:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ef      	beq.n	800407e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2204      	movs	r2, #4
 80040b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040ba:	2304      	movs	r3, #4
 80040bc:	e0b1      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0a6      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	22c5      	movs	r2, #197	@ 0xc5
 80040d8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fd7f 	bl	8003bde <SDIO_GetCommandResponse>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d001      	beq.n	80040ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e099      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80040ee:	2100      	movs	r1, #0
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fd81 	bl	8003bf8 <SDIO_GetResponse>
 80040f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004234 <SDMMC_GetCmdResp1+0x1d8>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004102:	2300      	movs	r3, #0
 8004104:	e08d      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da02      	bge.n	8004112 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800410c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004110:	e087      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800411c:	2340      	movs	r3, #64	@ 0x40
 800411e:	e080      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800412a:	2380      	movs	r3, #128	@ 0x80
 800412c:	e079      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800413c:	e071      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800414c:	e069      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800415c:	e061      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800416c:	e059      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800417c:	e051      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800418c:	e049      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004198:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800419c:	e041      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80041a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ac:	e039      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80041b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041bc:	e031      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80041c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041cc:	e029      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80041d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80041dc:	e021      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80041e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041ec:	e019      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80041f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041fc:	e011      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004208:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800420c:	e009      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004218:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800421c:	e001      	b.n	8004222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800421e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000000 	.word	0x20000000
 8004230:	10624dd3 	.word	0x10624dd3
 8004234:	fdffe008 	.word	0xfdffe008

08004238 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004240:	4b1f      	ldr	r3, [pc, #124]	@ (80042c0 <SDMMC_GetCmdResp2+0x88>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <SDMMC_GetCmdResp2+0x8c>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0a5b      	lsrs	r3, r3, #9
 800424c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	60fa      	str	r2, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004260:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004264:	e026      	b.n	80042b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ef      	beq.n	8004256 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ea      	bne.n	8004256 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2204      	movs	r2, #4
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004292:	2304      	movs	r3, #4
 8004294:	e00e      	b.n	80042b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e003      	b.n	80042b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	22c5      	movs	r2, #197	@ 0xc5
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000000 	.word	0x20000000
 80042c4:	10624dd3 	.word	0x10624dd3

080042c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042d0:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <SDMMC_GetCmdResp3+0x74>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004340 <SDMMC_GetCmdResp3+0x78>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	0a5b      	lsrs	r3, r3, #9
 80042dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	60fa      	str	r2, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80042f4:	e01b      	b.n	800432e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0ef      	beq.n	80042e6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ea      	bne.n	80042e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2204      	movs	r2, #4
 8004320:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004322:	2304      	movs	r3, #4
 8004324:	e003      	b.n	800432e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	22c5      	movs	r2, #197	@ 0xc5
 800432a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000000 	.word	0x20000000
 8004340:	10624dd3 	.word	0x10624dd3

08004344 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	460b      	mov	r3, r1
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004352:	4b35      	ldr	r3, [pc, #212]	@ (8004428 <SDMMC_GetCmdResp6+0xe4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a35      	ldr	r2, [pc, #212]	@ (800442c <SDMMC_GetCmdResp6+0xe8>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	0a5b      	lsrs	r3, r3, #9
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	61fa      	str	r2, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004372:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004376:	e052      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ef      	beq.n	8004368 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1ea      	bne.n	8004368 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2204      	movs	r2, #4
 80043a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043a4:	2304      	movs	r3, #4
 80043a6:	e03a      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02f      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff fc0d 	bl	8003bde <SDIO_GetCommandResponse>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d001      	beq.n	80043d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e025      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	22c5      	movs	r2, #197	@ 0xc5
 80043d6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043d8:	2100      	movs	r1, #0
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fc0c 	bl	8003bf8 <SDIO_GetResponse>
 80043e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e011      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004408:	e009      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004418:	e001      	b.n	800441e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800441a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000
 800442c:	10624dd3 	.word	0x10624dd3

08004430 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004438:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <SDMMC_GetCmdResp7+0x94>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <SDMMC_GetCmdResp7+0x98>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0a5b      	lsrs	r3, r3, #9
 8004444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	60fa      	str	r2, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004458:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800445c:	e02c      	b.n	80044b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ef      	beq.n	800444e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ea      	bne.n	800444e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2204      	movs	r2, #4
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800448a:	2304      	movs	r3, #4
 800448c:	e014      	b.n	80044b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e009      	b.n	80044b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2240      	movs	r2, #64	@ 0x40
 80044b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044b6:	2300      	movs	r3, #0
  
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	20000000 	.word	0x20000000
 80044c8:	10624dd3 	.word	0x10624dd3

080044cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <SDMMC_GetCmdError+0x50>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a11      	ldr	r2, [pc, #68]	@ (8004520 <SDMMC_GetCmdError+0x54>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	60fa      	str	r2, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044f8:	e009      	b.n	800450e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f1      	beq.n	80044ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	22c5      	movs	r2, #197	@ 0xc5
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000000 	.word	0x20000000
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004528:	4904      	ldr	r1, [pc, #16]	@ (800453c <MX_FATFS_Init+0x18>)
 800452a:	4805      	ldr	r0, [pc, #20]	@ (8004540 <MX_FATFS_Init+0x1c>)
 800452c:	f000 f9d6 	bl	80048dc <FATFS_LinkDriver>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <MX_FATFS_Init+0x20>)
 8004536:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000238 	.word	0x20000238
 8004540:	08004984 	.word	0x08004984
 8004544:	20000234 	.word	0x20000234

08004548 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004552:	f000 f86b 	bl	800462c <BSP_SD_IsDetected>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e005      	b.n	800456c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004560:	4804      	ldr	r0, [pc, #16]	@ (8004574 <BSP_SD_Init+0x2c>)
 8004562:	f7fd ffcf 	bl	8002504 <HAL_SD_Init>
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800456a:	79fb      	ldrb	r3, [r7, #7]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200000c4 	.word	0x200000c4

08004578 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	4806      	ldr	r0, [pc, #24]	@ (80045b0 <BSP_SD_ReadBlocks+0x38>)
 8004596:	f7fe f85d 	bl	8002654 <HAL_SD_ReadBlocks>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200000c4 	.word	0x200000c4

080045b4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	4806      	ldr	r0, [pc, #24]	@ (80045ec <BSP_SD_WriteBlocks+0x38>)
 80045d2:	f7fe fa25 	bl	8002a20 <HAL_SD_WriteBlocks>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200000c4 	.word	0x200000c4

080045f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80045f4:	4805      	ldr	r0, [pc, #20]	@ (800460c <BSP_SD_GetCardState+0x1c>)
 80045f6:	f7fe fd71 	bl	80030dc <HAL_SD_GetCardState>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	200000c4 	.word	0x200000c4

08004610 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4803      	ldr	r0, [pc, #12]	@ (8004628 <BSP_SD_GetCardInfo+0x18>)
 800461c:	f7fe fd32 	bl	8003084 <HAL_SD_GetCardInfo>
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200000c4 	.word	0x200000c4

0800462c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004632:	2301      	movs	r3, #1
 8004634:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004636:	f000 f80b 	bl	8004650 <BSP_PlatformIsDetected>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004640:	2300      	movs	r3, #0
 8004642:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	b2db      	uxtb	r3, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004656:	2301      	movs	r3, #1
 8004658:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800465a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800465e:	4806      	ldr	r0, [pc, #24]	@ (8004678 <BSP_PlatformIsDetected+0x28>)
 8004660:	f7fd f982 	bl	8001968 <HAL_GPIO_ReadPin>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800466a:	2300      	movs	r3, #0
 800466c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800466e:	79fb      	ldrb	r3, [r7, #7]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40020400 	.word	0x40020400

0800467c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <SD_CheckStatus+0x38>)
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800468c:	f7ff ffb0 	bl	80045f0 <BSP_SD_GetCardState>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004696:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <SD_CheckStatus+0x38>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4b04      	ldr	r3, [pc, #16]	@ (80046b4 <SD_CheckStatus+0x38>)
 80046a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80046a6:	4b03      	ldr	r3, [pc, #12]	@ (80046b4 <SD_CheckStatus+0x38>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000009 	.word	0x20000009

080046b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <SD_initialize+0x38>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80046c8:	f7ff ff3e 	bl	8004548 <BSP_SD_Init>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ffd1 	bl	800467c <SD_CheckStatus>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <SD_initialize+0x38>)
 80046e0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80046e2:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <SD_initialize+0x38>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b2db      	uxtb	r3, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000009 	.word	0x20000009

080046f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ffbb 	bl	800467c <SD_CheckStatus>
 8004706:	4603      	mov	r3, r0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	68b8      	ldr	r0, [r7, #8]
 800472e:	f7ff ff23 	bl	8004578 <BSP_SD_ReadBlocks>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004738:	bf00      	nop
 800473a:	f7ff ff59 	bl	80045f0 <BSP_SD_GetCardState>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1fa      	bne.n	800473a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004748:	7dfb      	ldrb	r3, [r7, #23]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f7ff ff20 	bl	80045b4 <BSP_SD_WriteBlocks>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800477a:	bf00      	nop
 800477c:	f7ff ff38 	bl	80045f0 <BSP_SD_GetCardState>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1fa      	bne.n	800477c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08c      	sub	sp, #48	@ 0x30
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	603a      	str	r2, [r7, #0]
 800479e:	71fb      	strb	r3, [r7, #7]
 80047a0:	460b      	mov	r3, r1
 80047a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047aa:	4b25      	ldr	r3, [pc, #148]	@ (8004840 <SD_ioctl+0xac>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <SD_ioctl+0x28>
 80047b8:	2303      	movs	r3, #3
 80047ba:	e03c      	b.n	8004836 <SD_ioctl+0xa2>

  switch (cmd)
 80047bc:	79bb      	ldrb	r3, [r7, #6]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d834      	bhi.n	800482c <SD_ioctl+0x98>
 80047c2:	a201      	add	r2, pc, #4	@ (adr r2, 80047c8 <SD_ioctl+0x34>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004813 	.word	0x08004813
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80047de:	e028      	b.n	8004832 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80047e0:	f107 030c 	add.w	r3, r7, #12
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff13 	bl	8004610 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80047ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80047f6:	e01c      	b.n	8004832 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff07 	bl	8004610 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	b29a      	uxth	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004810:	e00f      	b.n	8004832 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fefa 	bl	8004610 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	0a5a      	lsrs	r2, r3, #9
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800482a:	e002      	b.n	8004832 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800482c:	2304      	movs	r3, #4
 800482e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004836:	4618      	mov	r0, r3
 8004838:	3730      	adds	r7, #48	@ 0x30
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000009 	.word	0x20000009

08004844 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800485a:	4b1f      	ldr	r3, [pc, #124]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 800485c:	7a5b      	ldrb	r3, [r3, #9]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d131      	bne.n	80048c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004864:	4b1c      	ldr	r3, [pc, #112]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 8004866:	7a5b      	ldrb	r3, [r3, #9]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 800486e:	2100      	movs	r1, #0
 8004870:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004872:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 8004874:	7a5b      	ldrb	r3, [r3, #9]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004882:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 8004884:	7a5b      	ldrb	r3, [r3, #9]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 800488c:	4413      	add	r3, r2
 800488e:	79fa      	ldrb	r2, [r7, #7]
 8004890:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004892:	4b11      	ldr	r3, [pc, #68]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 8004894:	7a5b      	ldrb	r3, [r3, #9]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	b2d1      	uxtb	r1, r2
 800489c:	4a0e      	ldr	r2, [pc, #56]	@ (80048d8 <FATFS_LinkDriverEx+0x94>)
 800489e:	7251      	strb	r1, [r2, #9]
 80048a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80048a2:	7dbb      	ldrb	r3, [r7, #22]
 80048a4:	3330      	adds	r3, #48	@ 0x30
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3301      	adds	r3, #1
 80048b0:	223a      	movs	r2, #58	@ 0x3a
 80048b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	3302      	adds	r3, #2
 80048b8:	222f      	movs	r2, #47	@ 0x2f
 80048ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3303      	adds	r3, #3
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	2000023c 	.word	0x2000023c

080048dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ffaa 	bl	8004844 <FATFS_LinkDriverEx>
 80048f0:	4603      	mov	r3, r0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <memset>:
 80048fa:	4402      	add	r2, r0
 80048fc:	4603      	mov	r3, r0
 80048fe:	4293      	cmp	r3, r2
 8004900:	d100      	bne.n	8004904 <memset+0xa>
 8004902:	4770      	bx	lr
 8004904:	f803 1b01 	strb.w	r1, [r3], #1
 8004908:	e7f9      	b.n	80048fe <memset+0x4>
	...

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4d0d      	ldr	r5, [pc, #52]	@ (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	@ (8004948 <__libc_init_array+0x3c>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2600      	movs	r6, #0
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4d0b      	ldr	r5, [pc, #44]	@ (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	@ (8004950 <__libc_init_array+0x44>)
 8004920:	f000 f818 	bl	8004954 <_init>
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2600      	movs	r6, #0
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	080049a0 	.word	0x080049a0
 8004948:	080049a0 	.word	0x080049a0
 800494c:	080049a0 	.word	0x080049a0
 8004950:	080049a4 	.word	0x080049a4

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
