
AlbertsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a574  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800a710  0800a710  0000b710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a868  0800a868  0000c094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a868  0800a868  0000b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a870  0800a870  0000c094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a870  0800a870  0000b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a874  0800a874  0000b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800a878  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  20000094  0800a90c  0000c094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0800a90c  0000c848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132cf  00000000  00000000  0000c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318d  00000000  00000000  0001f393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00022520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5a  00000000  00000000  00023560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f3  00000000  00000000  000241ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e1b  00000000  00000000  0003dbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa47  00000000  00000000  000569c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e640f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004790  00000000  00000000  000e6454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000eabe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a6f4 	.word	0x0800a6f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	0800a6f4 	.word	0x0800a6f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b988 	b.w	8000ec8 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	468e      	mov	lr, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	4688      	mov	r8, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14a      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d962      	bls.n	8000cac <__udivmoddi4+0xdc>
 8000be6:	fab2 f682 	clz	r6, r2
 8000bea:	b14e      	cbz	r6, 8000c00 <__udivmoddi4+0x30>
 8000bec:	f1c6 0320 	rsb	r3, r6, #32
 8000bf0:	fa01 f806 	lsl.w	r8, r1, r6
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	40b7      	lsls	r7, r6
 8000bfa:	ea43 0808 	orr.w	r8, r3, r8
 8000bfe:	40b4      	lsls	r4, r6
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c0c:	0c23      	lsrs	r3, r4, #16
 8000c0e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c16:	fb01 f20c 	mul.w	r2, r1, ip
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0x62>
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c24:	f080 80ea 	bcs.w	8000dfc <__udivmoddi4+0x22c>
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f240 80e7 	bls.w	8000dfc <__udivmoddi4+0x22c>
 8000c2e:	3902      	subs	r1, #2
 8000c30:	443b      	add	r3, r7
 8000c32:	1a9a      	subs	r2, r3, r2
 8000c34:	b2a3      	uxth	r3, r4
 8000c36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c42:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x8e>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	f080 80d6 	bcs.w	8000e00 <__udivmoddi4+0x230>
 8000c54:	459c      	cmp	ip, r3
 8000c56:	f240 80d3 	bls.w	8000e00 <__udivmoddi4+0x230>
 8000c5a:	443b      	add	r3, r7
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c62:	eba3 030c 	sub.w	r3, r3, ip
 8000c66:	2100      	movs	r1, #0
 8000c68:	b11d      	cbz	r5, 8000c72 <__udivmoddi4+0xa2>
 8000c6a:	40f3      	lsrs	r3, r6
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d905      	bls.n	8000c86 <__udivmoddi4+0xb6>
 8000c7a:	b10d      	cbz	r5, 8000c80 <__udivmoddi4+0xb0>
 8000c7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c80:	2100      	movs	r1, #0
 8000c82:	4608      	mov	r0, r1
 8000c84:	e7f5      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000c86:	fab3 f183 	clz	r1, r3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d146      	bne.n	8000d1c <__udivmoddi4+0x14c>
 8000c8e:	4573      	cmp	r3, lr
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xc8>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 8105 	bhi.w	8000ea2 <__udivmoddi4+0x2d2>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	d0e5      	beq.n	8000c72 <__udivmoddi4+0xa2>
 8000ca6:	e9c5 4800 	strd	r4, r8, [r5]
 8000caa:	e7e2      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f000 8090 	beq.w	8000dd2 <__udivmoddi4+0x202>
 8000cb2:	fab2 f682 	clz	r6, r2
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f040 80a4 	bne.w	8000e04 <__udivmoddi4+0x234>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	0c03      	lsrs	r3, r0, #16
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	b2bc      	uxth	r4, r7
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cce:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cd6:	fb04 f20c 	mul.w	r2, r4, ip
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x11e>
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x11c>
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	f200 80e0 	bhi.w	8000eac <__udivmoddi4+0x2dc>
 8000cec:	46c4      	mov	ip, r8
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cf4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cfc:	fb02 f404 	mul.w	r4, r2, r4
 8000d00:	429c      	cmp	r4, r3
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x144>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x142>
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	f200 80ca 	bhi.w	8000ea6 <__udivmoddi4+0x2d6>
 8000d12:	4602      	mov	r2, r0
 8000d14:	1b1b      	subs	r3, r3, r4
 8000d16:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0x98>
 8000d1c:	f1c1 0620 	rsb	r6, r1, #32
 8000d20:	408b      	lsls	r3, r1
 8000d22:	fa22 f706 	lsr.w	r7, r2, r6
 8000d26:	431f      	orrs	r7, r3
 8000d28:	fa0e f401 	lsl.w	r4, lr, r1
 8000d2c:	fa20 f306 	lsr.w	r3, r0, r6
 8000d30:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d34:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d38:	4323      	orrs	r3, r4
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	fa1f fc87 	uxth.w	ip, r7
 8000d42:	fbbe f0f9 	udiv	r0, lr, r9
 8000d46:	0c1c      	lsrs	r4, r3, #16
 8000d48:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d4c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d50:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	d909      	bls.n	8000d70 <__udivmoddi4+0x1a0>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d62:	f080 809c 	bcs.w	8000e9e <__udivmoddi4+0x2ce>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f240 8099 	bls.w	8000e9e <__udivmoddi4+0x2ce>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	443c      	add	r4, r7
 8000d70:	eba4 040e 	sub.w	r4, r4, lr
 8000d74:	fa1f fe83 	uxth.w	lr, r3
 8000d78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d80:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d84:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d88:	45a4      	cmp	ip, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1ce>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d92:	f080 8082 	bcs.w	8000e9a <__udivmoddi4+0x2ca>
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d97f      	bls.n	8000e9a <__udivmoddi4+0x2ca>
 8000d9a:	3b02      	subs	r3, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000daa:	4564      	cmp	r4, ip
 8000dac:	4673      	mov	r3, lr
 8000dae:	46e1      	mov	r9, ip
 8000db0:	d362      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000db2:	d05f      	beq.n	8000e74 <__udivmoddi4+0x2a4>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x1fe>
 8000db6:	ebb8 0203 	subs.w	r2, r8, r3
 8000dba:	eb64 0409 	sbc.w	r4, r4, r9
 8000dbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000dc6:	431e      	orrs	r6, r3
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	e9c5 6400 	strd	r6, r4, [r5]
 8000dce:	2100      	movs	r1, #0
 8000dd0:	e74f      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000dd2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dd6:	0c01      	lsrs	r1, r0, #16
 8000dd8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ddc:	b280      	uxth	r0, r0
 8000dde:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000de2:	463b      	mov	r3, r7
 8000de4:	4638      	mov	r0, r7
 8000de6:	463c      	mov	r4, r7
 8000de8:	46b8      	mov	r8, r7
 8000dea:	46be      	mov	lr, r7
 8000dec:	2620      	movs	r6, #32
 8000dee:	fbb1 f1f7 	udiv	r1, r1, r7
 8000df2:	eba2 0208 	sub.w	r2, r2, r8
 8000df6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dfa:	e766      	b.n	8000cca <__udivmoddi4+0xfa>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	e718      	b.n	8000c32 <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e72c      	b.n	8000c5e <__udivmoddi4+0x8e>
 8000e04:	f1c6 0220 	rsb	r2, r6, #32
 8000e08:	fa2e f302 	lsr.w	r3, lr, r2
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	40b1      	lsls	r1, r6
 8000e10:	fa20 f202 	lsr.w	r2, r0, r2
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e24:	0c11      	lsrs	r1, r2, #16
 8000e26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2a:	fb08 f904 	mul.w	r9, r8, r4
 8000e2e:	40b0      	lsls	r0, r6
 8000e30:	4589      	cmp	r9, r1
 8000e32:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e36:	b280      	uxth	r0, r0
 8000e38:	d93e      	bls.n	8000eb8 <__udivmoddi4+0x2e8>
 8000e3a:	1879      	adds	r1, r7, r1
 8000e3c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e40:	d201      	bcs.n	8000e46 <__udivmoddi4+0x276>
 8000e42:	4589      	cmp	r9, r1
 8000e44:	d81f      	bhi.n	8000e86 <__udivmoddi4+0x2b6>
 8000e46:	eba1 0109 	sub.w	r1, r1, r9
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fb09 f804 	mul.w	r8, r9, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	b292      	uxth	r2, r2
 8000e58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e5c:	4542      	cmp	r2, r8
 8000e5e:	d229      	bcs.n	8000eb4 <__udivmoddi4+0x2e4>
 8000e60:	18ba      	adds	r2, r7, r2
 8000e62:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e66:	d2c4      	bcs.n	8000df2 <__udivmoddi4+0x222>
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d2c2      	bcs.n	8000df2 <__udivmoddi4+0x222>
 8000e6c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e70:	443a      	add	r2, r7
 8000e72:	e7be      	b.n	8000df2 <__udivmoddi4+0x222>
 8000e74:	45f0      	cmp	r8, lr
 8000e76:	d29d      	bcs.n	8000db4 <__udivmoddi4+0x1e4>
 8000e78:	ebbe 0302 	subs.w	r3, lr, r2
 8000e7c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e80:	3801      	subs	r0, #1
 8000e82:	46e1      	mov	r9, ip
 8000e84:	e796      	b.n	8000db4 <__udivmoddi4+0x1e4>
 8000e86:	eba7 0909 	sub.w	r9, r7, r9
 8000e8a:	4449      	add	r1, r9
 8000e8c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	e7db      	b.n	8000e52 <__udivmoddi4+0x282>
 8000e9a:	4673      	mov	r3, lr
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1ce>
 8000e9e:	4650      	mov	r0, sl
 8000ea0:	e766      	b.n	8000d70 <__udivmoddi4+0x1a0>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e6fd      	b.n	8000ca2 <__udivmoddi4+0xd2>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3a02      	subs	r2, #2
 8000eaa:	e733      	b.n	8000d14 <__udivmoddi4+0x144>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	443b      	add	r3, r7
 8000eb2:	e71c      	b.n	8000cee <__udivmoddi4+0x11e>
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x222>
 8000eb8:	eba1 0109 	sub.w	r1, r1, r9
 8000ebc:	46c4      	mov	ip, r8
 8000ebe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec2:	fb09 f804 	mul.w	r8, r9, r4
 8000ec6:	e7c4      	b.n	8000e52 <__udivmoddi4+0x282>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <LSM_Init>:

uint8_t _lsmReadReg(uint8_t reg);
void _lsmWriteReg(uint8_t reg, uint8_t data);
void _lsmReadRegs(uint8_t reg, uint8_t *buf, uint8_t len);

uint8_t LSM_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]
	_lsm_hspi1 = hspi;
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <LSM_Init+0x5c>)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6013      	str	r3, [r2, #0]
	_lsm_nssPort = port;
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <LSM_Init+0x60>)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	6013      	str	r3, [r2, #0]
	_lsm_nssPin = pin;
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <LSM_Init+0x64>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	8013      	strh	r3, [r2, #0]

	uint8_t whoAmI = _lsmReadReg(LSM_REG_WHO_AM_I);
 8000eec:	200f      	movs	r0, #15
 8000eee:	f000 f8b1 	bl	8001054 <_lsmReadReg>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]

	if (whoAmI != LSM_SET_WHO_AM_I_VAL) {
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	2b6a      	cmp	r3, #106	@ 0x6a
 8000efa:	d001      	beq.n	8000f00 <LSM_Init+0x34>
		return 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e00e      	b.n	8000f1e <LSM_Init+0x52>
	}

	uint8_t xlmode = LSM_SET_CTRL1_XL_26_Hz;
 8000f00:	2324      	movs	r3, #36	@ 0x24
 8000f02:	75bb      	strb	r3, [r7, #22]
	uint8_t gmode = LSM_SET_CTRL2_G_26_Hz;
 8000f04:	232c      	movs	r3, #44	@ 0x2c
 8000f06:	757b      	strb	r3, [r7, #21]
	_lsmWriteReg(LSM_REG_CTRL1_XL, xlmode);
 8000f08:	7dbb      	ldrb	r3, [r7, #22]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2010      	movs	r0, #16
 8000f0e:	f000 f8db 	bl	80010c8 <_lsmWriteReg>
	_lsmWriteReg(LSM_REG_CTRL2_G, gmode);
 8000f12:	7d7b      	ldrb	r3, [r7, #21]
 8000f14:	4619      	mov	r1, r3
 8000f16:	2011      	movs	r0, #17
 8000f18:	f000 f8d6 	bl	80010c8 <_lsmWriteReg>

	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000b0 	.word	0x200000b0
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	200000b8 	.word	0x200000b8

08000f34 <LSM_ReadData>:

void LSM_ReadData(int16_t endBufer[]) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	uint8_t tempreg = LSM_REG_OUTX_L_G;
 8000f3c:	2322      	movs	r3, #34	@ 0x22
 8000f3e:	75fb      	strb	r3, [r7, #23]
	_lsmReadRegs(tempreg, buffer, 12);
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	220c      	movs	r2, #12
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f845 	bl	8000fd8 <_lsmReadRegs>

	endBufer[0] = (int16_t) ((buffer[1] << 8) | buffer[0]);   // Gyro X
 8000f4e:	7a7b      	ldrb	r3, [r7, #9]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	7a3b      	ldrb	r3, [r7, #8]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	801a      	strh	r2, [r3, #0]
	endBufer[1] = (int16_t) ((buffer[3] << 8) | buffer[2]);   // Gyro Y
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b219      	sxth	r1, r3
 8000f6a:	7abb      	ldrb	r3, [r7, #10]
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3302      	adds	r3, #2
 8000f72:	430a      	orrs	r2, r1
 8000f74:	b212      	sxth	r2, r2
 8000f76:	801a      	strh	r2, [r3, #0]
	endBufer[2] = (int16_t) ((buffer[5] << 8) | buffer[4]);   // Gyro Z
 8000f78:	7b7b      	ldrb	r3, [r7, #13]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b219      	sxth	r1, r3
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	b212      	sxth	r2, r2
 8000f8c:	801a      	strh	r2, [r3, #0]
	endBufer[3] = (int16_t) ((buffer[7] << 8) | buffer[6]);   // Accel X
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b219      	sxth	r1, r3
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	b212      	sxth	r2, r2
 8000fa2:	801a      	strh	r2, [r3, #0]
	endBufer[4] = (int16_t) ((buffer[9] << 8) | buffer[8]);   // Accel Y
 8000fa4:	7c7b      	ldrb	r3, [r7, #17]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b219      	sxth	r1, r3
 8000fac:	7c3b      	ldrb	r3, [r7, #16]
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	b212      	sxth	r2, r2
 8000fb8:	801a      	strh	r2, [r3, #0]
	endBufer[5] = (int16_t) ((buffer[11] << 8) | buffer[10]); // Accel Z
 8000fba:	7cfb      	ldrb	r3, [r7, #19]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b219      	sxth	r1, r3
 8000fc2:	7cbb      	ldrb	r3, [r7, #18]
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	330a      	adds	r3, #10
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	b212      	sxth	r2, r2
 8000fce:	801a      	strh	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_lsmReadRegs>:

void _lsmReadRegs(uint8_t reg, uint8_t *buf, uint8_t len) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	reg |= 0x80;  // auto-increment
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	71fb      	strb	r3, [r7, #7]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_lsmReadRegs+0x70>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <_lsmReadRegs+0x74>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_lsmReadRegs+0x70>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	400a      	ands	r2, r1
 8001006:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <_lsmReadRegs+0x78>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	1df9      	adds	r1, r7, #7
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	2201      	movs	r2, #1
 8001014:	f003 fe0b 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_lsm_hspi1, buf, len, 1000);
 8001018:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <_lsmReadRegs+0x78>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	b29a      	uxth	r2, r3
 8001020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	f003 ff46 	bl	8004eb6 <HAL_SPI_Receive>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_lsmReadRegs+0x70>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <_lsmReadRegs+0x74>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <_lsmReadRegs+0x70>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	615a      	str	r2, [r3, #20]
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000b4 	.word	0x200000b4
 800104c:	200000b8 	.word	0x200000b8
 8001050:	200000b0 	.word	0x200000b0

08001054 <_lsmReadReg>:

uint8_t _lsmReadReg(uint8_t reg) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	reg |= 0x80;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001064:	b2db      	uxtb	r3, r3
 8001066:	71fb      	strb	r3, [r7, #7]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <_lsmReadReg+0x68>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <_lsmReadReg+0x6c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	43db      	mvns	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_lsmReadReg+0x68>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	400a      	ands	r2, r1
 800107c:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <_lsmReadReg+0x70>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	1df9      	adds	r1, r7, #7
 8001084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001088:	2201      	movs	r2, #1
 800108a:	f003 fdd0 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_lsm_hspi1, &reg, 1, 1000);
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <_lsmReadReg+0x70>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	1df9      	adds	r1, r7, #7
 8001094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001098:	2201      	movs	r2, #1
 800109a:	f003 ff0c 	bl	8004eb6 <HAL_SPI_Receive>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <_lsmReadReg+0x68>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <_lsmReadReg+0x6c>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <_lsmReadReg+0x68>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	615a      	str	r2, [r3, #20]
	return reg;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000b4 	.word	0x200000b4
 80010c0:	200000b8 	.word	0x200000b8
 80010c4:	200000b0 	.word	0x200000b0

080010c8 <_lsmWriteReg>:

void _lsmWriteReg(uint8_t reg, uint8_t data) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	_lsm_nssPort->ODR &= ~_lsm_nssPin;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <_lsmWriteReg+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <_lsmWriteReg+0x68>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_lsmWriteReg+0x64>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	400a      	ands	r2, r1
 80010ec:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_lsm_hspi1, &reg, 1, 1000);
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_lsmWriteReg+0x6c>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	1df9      	adds	r1, r7, #7
 80010f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f8:	2201      	movs	r2, #1
 80010fa:	f003 fd98 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_lsm_hspi1, &data, 1, 1000);
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <_lsmWriteReg+0x6c>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	1db9      	adds	r1, r7, #6
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	2201      	movs	r2, #1
 800110a:	f003 fd90 	bl	8004c2e <HAL_SPI_Transmit>
	_lsm_nssPort->ODR |= _lsm_nssPin;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <_lsmWriteReg+0x64>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <_lsmWriteReg+0x68>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <_lsmWriteReg+0x64>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	615a      	str	r2, [r3, #20]
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000b4 	.word	0x200000b4
 8001130:	200000b8 	.word	0x200000b8
 8001134:	200000b0 	.word	0x200000b0

08001138 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b4a      	ldr	r3, [pc, #296]	@ (800127c <MX_GPIO_Init+0x144>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a49      	ldr	r2, [pc, #292]	@ (800127c <MX_GPIO_Init+0x144>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b47      	ldr	r3, [pc, #284]	@ (800127c <MX_GPIO_Init+0x144>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b43      	ldr	r3, [pc, #268]	@ (800127c <MX_GPIO_Init+0x144>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a42      	ldr	r2, [pc, #264]	@ (800127c <MX_GPIO_Init+0x144>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b40      	ldr	r3, [pc, #256]	@ (800127c <MX_GPIO_Init+0x144>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <MX_GPIO_Init+0x144>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a3b      	ldr	r2, [pc, #236]	@ (800127c <MX_GPIO_Init+0x144>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b39      	ldr	r3, [pc, #228]	@ (800127c <MX_GPIO_Init+0x144>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b35      	ldr	r3, [pc, #212]	@ (800127c <MX_GPIO_Init+0x144>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a34      	ldr	r2, [pc, #208]	@ (800127c <MX_GPIO_Init+0x144>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b32      	ldr	r3, [pc, #200]	@ (800127c <MX_GPIO_Init+0x144>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <MX_GPIO_Init+0x144>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <MX_GPIO_Init+0x144>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <MX_GPIO_Init+0x144>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2131      	movs	r1, #49	@ 0x31
 80011de:	4828      	ldr	r0, [pc, #160]	@ (8001280 <MX_GPIO_Init+0x148>)
 80011e0:	f001 fe6e 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2107      	movs	r1, #7
 80011e8:	4826      	ldr	r0, [pc, #152]	@ (8001284 <MX_GPIO_Init+0x14c>)
 80011ea:	f001 fe69 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WQ_HOLD_GPIO_Port, WQ_HOLD_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2110      	movs	r1, #16
 80011f2:	4824      	ldr	r0, [pc, #144]	@ (8001284 <MX_GPIO_Init+0x14c>)
 80011f4:	f001 fe64 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f240 2107 	movw	r1, #519	@ 0x207
 80011fe:	4822      	ldr	r0, [pc, #136]	@ (8001288 <MX_GPIO_Init+0x150>)
 8001200:	f001 fe5e 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR2_EN_Pin WQ_NSS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = PWR2_EN_Pin|WQ_NSS_Pin|LORA_NSS_Pin;
 8001204:	2331      	movs	r3, #49	@ 0x31
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4819      	ldr	r0, [pc, #100]	@ (8001280 <MX_GPIO_Init+0x148>)
 800121c:	f001 fccc 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin WQ_HOLD_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|WQ_HOLD_Pin;
 8001220:	2317      	movs	r3, #23
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4813      	ldr	r0, [pc, #76]	@ (8001284 <MX_GPIO_Init+0x14c>)
 8001238:	f001 fcbe 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS_NSS_Pin LIS_NSS_Pin LSM_NSS_Pin ADC_NSS_Pin */
  GPIO_InitStruct.Pin = MS_NSS_Pin|LIS_NSS_Pin|LSM_NSS_Pin|ADC_NSS_Pin;
 800123c:	f240 2307 	movw	r3, #519	@ 0x207
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <MX_GPIO_Init+0x150>)
 8001256:	f001 fcaf 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_CD_Pin JMP_PROG_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin|JMP_PROG_Pin;
 800125a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	@ (8001288 <MX_GPIO_Init+0x150>)
 8001270:	f001 fca2 	bl	8002bb8 <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	@ 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40020800 	.word	0x40020800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0c2      	sub	sp, #264	@ 0x108
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f001 fb15 	bl	80028c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001296:	f000 f845 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129a:	f7ff ff4d 	bl	8001138 <MX_GPIO_Init>
  MX_SPI1_Init();
 800129e:	f001 f98b 	bl	80025b8 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 80012a2:	f001 f8ff 	bl	80024a4 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80012a6:	f001 fa6f 	bl	8002788 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80012aa:	f005 fc1f 	bl	8006aec <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	cheakAll();
 80012ae:	f000 faa1 	bl	80017f4 <cheakAll>
	initVariables();
 80012b2:	f000 fb63 	bl	800197c <initVariables>

	HAL_UART_Transmit(&huart1, (uint8_t*) "b100", 4, 1000);
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	2204      	movs	r2, #4
 80012bc:	4915      	ldr	r1, [pc, #84]	@ (8001314 <main+0x88>)
 80012be:	4816      	ldr	r0, [pc, #88]	@ (8001318 <main+0x8c>)
 80012c0:	f004 fa4e 	bl	8005760 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		readData();
 80012c4:	f000 f8c8 	bl	8001458 <readData>

		writeData();
 80012c8:	f000 f9c2 	bl	8001650 <writeData>

//		recieveTransmitData();

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80012cc:	2101      	movs	r1, #1
 80012ce:	4813      	ldr	r0, [pc, #76]	@ (800131c <main+0x90>)
 80012d0:	f001 fe0f 	bl	8002ef2 <HAL_GPIO_TogglePin>

//		SvSend((uint8_t*) "f100", 4);

		if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <main+0x8c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	2b20      	cmp	r3, #32
 80012e0:	d103      	bne.n	80012ea <main+0x5e>
//			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//			HAL_Delay(500);
//			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

			SvGet((uint8_t*) &RoverData, ROVERDATA_SIZE);
 80012e2:	2125      	movs	r1, #37	@ 0x25
 80012e4:	480e      	ldr	r0, [pc, #56]	@ (8001320 <main+0x94>)
 80012e6:	f000 fb7d 	bl	80019e4 <SvGet>

		}

		uint8_t buffer[255];
		int recieved = 0; // = SvGet((uint8_t*) &RoverData);
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

		if (recieved) {
//
		}

		recieved = LORA_ReceiveData(buffer);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fc78 	bl	8001be8 <LORA_ReceiveData>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

		if (recieved) {
 80012fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0de      	beq.n	80012c4 <main+0x38>
			SvSend(buffer, recieved);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fb55 	bl	80019bc <SvSend>
	while (1) {
 8001312:	e7d7      	b.n	80012c4 <main+0x38>
 8001314:	0800a710 	.word	0x0800a710
 8001318:	20000688 	.word	0x20000688
 800131c:	40020000 	.word	0x40020000
 8001320:	20000004 	.word	0x20000004

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	@ 0x50
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	2230      	movs	r2, #48	@ 0x30
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f008 fa4d 	bl	80097d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <SystemClock_Config+0xcc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	4a27      	ldr	r2, [pc, #156]	@ (80013f0 <SystemClock_Config+0xcc>)
 8001352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001356:	6413      	str	r3, [r2, #64]	@ 0x40
 8001358:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <SystemClock_Config+0xcc>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <SystemClock_Config+0xd0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001370:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <SystemClock_Config+0xd0>)
 8001372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <SystemClock_Config+0xd0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001398:	2319      	movs	r3, #25
 800139a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800139c:	23a8      	movs	r3, #168	@ 0xa8
 800139e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fdbb 	bl	8002f28 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013b8:	f000 fb28 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2302      	movs	r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2102      	movs	r1, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 f81d 	bl	8003418 <HAL_RCC_ClockConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013e4:	f000 fb12 	bl	8001a0c <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	@ 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <writeSD_rData>:

/* USER CODE BEGIN 4 */

void writeSD_rData(RadioData_t str) {
 80013f8:	b084      	sub	sp, #16
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	f107 0c08 	add.w	ip, r7, #8
 8001402:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	f_open(&Fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001406:	2212      	movs	r2, #18
 8001408:	490f      	ldr	r1, [pc, #60]	@ (8001448 <writeSD_rData+0x50>)
 800140a:	4810      	ldr	r0, [pc, #64]	@ (800144c <writeSD_rData+0x54>)
 800140c:	f007 fafa 	bl	8008a04 <f_open>
	f_lseek(&Fil, f_size(&Fil));
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <writeSD_rData+0x54>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	@ (800144c <writeSD_rData+0x54>)
 8001418:	f007 fecb 	bl	80091b2 <f_lseek>
	HAL_Delay(5);
 800141c:	2005      	movs	r0, #5
 800141e:	f001 fac1 	bl	80029a4 <HAL_Delay>

	// ПРАВИЛЬНО: передаём адрес структуры напрямую
	f_write(&Fil, &str, sizeof(RadioData_t), &bytes_written);
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <writeSD_rData+0x58>)
 8001424:	223e      	movs	r2, #62	@ 0x3e
 8001426:	f107 0108 	add.w	r1, r7, #8
 800142a:	4808      	ldr	r0, [pc, #32]	@ (800144c <writeSD_rData+0x54>)
 800142c:	f007 fca4 	bl	8008d78 <f_write>

	HAL_Delay(15);
 8001430:	200f      	movs	r0, #15
 8001432:	f001 fab7 	bl	80029a4 <HAL_Delay>
	f_close(&Fil);
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <writeSD_rData+0x54>)
 8001438:	f007 fe91 	bl	800915e <f_close>
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001444:	b004      	add	sp, #16
 8001446:	4770      	bx	lr
 8001448:	0800a770 	.word	0x0800a770
 800144c:	20000334 	.word	0x20000334
 8001450:	20000568 	.word	0x20000568
 8001454:	00000000 	.word	0x00000000

08001458 <readData>:
	f_puts(str, &Fil);
	HAL_Delay(15);
	f_close(&Fil);
}

void readData() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 800145c:	4874      	ldr	r0, [pc, #464]	@ (8001630 <readData+0x1d8>)
 800145e:	f000 fcf5 	bl	8001e4c <MS_ReadData>
	LSM_ReadData(LSM_Data);
 8001462:	4874      	ldr	r0, [pc, #464]	@ (8001634 <readData+0x1dc>)
 8001464:	f7ff fd66 	bl	8000f34 <LSM_ReadData>

	beforAlt = SensorsData.alt;
 8001468:	4b73      	ldr	r3, [pc, #460]	@ (8001638 <readData+0x1e0>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a73      	ldr	r2, [pc, #460]	@ (800163c <readData+0x1e4>)
 800146e:	6013      	str	r3, [r2, #0]

	SensorsData.time = HAL_GetTick();
 8001470:	f001 fa8c 	bl	800298c <HAL_GetTick>
 8001474:	4603      	mov	r3, r0
 8001476:	4a70      	ldr	r2, [pc, #448]	@ (8001638 <readData+0x1e0>)
 8001478:	6013      	str	r3, [r2, #0]
	SensorsData.press = MS_Data[0];
 800147a:	4b6d      	ldr	r3, [pc, #436]	@ (8001630 <readData+0x1d8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	4b6d      	ldr	r3, [pc, #436]	@ (8001638 <readData+0x1e0>)
 8001482:	609a      	str	r2, [r3, #8]
	SensorsData.alt = (int32_t) 4433000
			* (1.0f - pow((float) SensorsData.press / seaLvlPress, 0.1903)); //(int32_t) ((SensorsData.press - seaLvlPress) / 133.32239023154 * 10.5 * 100);
 8001484:	4b6c      	ldr	r3, [pc, #432]	@ (8001638 <readData+0x1e0>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001490:	4b6b      	ldr	r3, [pc, #428]	@ (8001640 <readData+0x1e8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014a0:	ee16 0a90 	vmov	r0, s13
 80014a4:	f7fe fffc 	bl	80004a0 <__aeabi_f2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 8001618 <readData+0x1c0>
 80014b0:	ec43 2b10 	vmov	d0, r2, r3
 80014b4:	f008 f9c0 	bl	8009838 <pow>
 80014b8:	ec53 2b10 	vmov	r2, r3, d0
 80014bc:	f04f 0000 	mov.w	r0, #0
 80014c0:	4960      	ldr	r1, [pc, #384]	@ (8001644 <readData+0x1ec>)
 80014c2:	f7fe fe8d 	bl	80001e0 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	a354      	add	r3, pc, #336	@ (adr r3, 8001620 <readData+0x1c8>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f83c 	bl	8000550 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
	SensorsData.alt = (int32_t) 4433000
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fae6 	bl	8000ab0 <__aeabi_d2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a54      	ldr	r2, [pc, #336]	@ (8001638 <readData+0x1e0>)
 80014e8:	6053      	str	r3, [r2, #4]
	SensorsData.temp = MS_Data[1];
 80014ea:	4b51      	ldr	r3, [pc, #324]	@ (8001630 <readData+0x1d8>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <readData+0x1e0>)
 80014f2:	819a      	strh	r2, [r3, #12]
	SensorsData.accel1 = (int16_t) (LSM_Data[3] * 0.0488);
 80014f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001634 <readData+0x1dc>)
 80014f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffbe 	bl	800047c <__aeabi_i2d>
 8001500:	a349      	add	r3, pc, #292	@ (adr r3, 8001628 <readData+0x1d0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f823 	bl	8000550 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff facd 	bl	8000ab0 <__aeabi_d2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <readData+0x1e0>)
 800151c:	81da      	strh	r2, [r3, #14]
	SensorsData.accel2 = (int16_t) (LSM_Data[4] * 0.0488);
 800151e:	4b45      	ldr	r3, [pc, #276]	@ (8001634 <readData+0x1dc>)
 8001520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffa9 	bl	800047c <__aeabi_i2d>
 800152a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001628 <readData+0x1d0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f80e 	bl	8000550 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fab8 	bl	8000ab0 <__aeabi_d2iz>
 8001540:	4603      	mov	r3, r0
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <readData+0x1e0>)
 8001546:	821a      	strh	r2, [r3, #16]
	SensorsData.accel3 = (int16_t) (LSM_Data[5] * 0.0488);
 8001548:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <readData+0x1dc>)
 800154a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff94 	bl	800047c <__aeabi_i2d>
 8001554:	a334      	add	r3, pc, #208	@ (adr r3, 8001628 <readData+0x1d0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe fff9 	bl	8000550 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff faa3 	bl	8000ab0 <__aeabi_d2iz>
 800156a:	4603      	mov	r3, r0
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <readData+0x1e0>)
 8001570:	825a      	strh	r2, [r3, #18]
	SensorsData.gyro1 = LSM_Data[0] * 7;
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <readData+0x1dc>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	00d2      	lsls	r2, r2, #3
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <readData+0x1e0>)
 8001586:	829a      	strh	r2, [r3, #20]
	SensorsData.gyro2 = LSM_Data[1] * 7;
 8001588:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <readData+0x1dc>)
 800158a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	00d2      	lsls	r2, r2, #3
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <readData+0x1e0>)
 800159c:	82da      	strh	r2, [r3, #22]
	SensorsData.gyro3 = LSM_Data[2] * 7;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <readData+0x1dc>)
 80015a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	00d2      	lsls	r2, r2, #3
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <readData+0x1e0>)
 80015b2:	831a      	strh	r2, [r3, #24]

	if (SensorsData.alt > toStart) {
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <readData+0x1e0>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <readData+0x1f0>)
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	4293      	cmp	r3, r2
 80015be:	dd05      	ble.n	80015cc <readData+0x174>
		SensorsData.flagStart = true;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <readData+0x1e0>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	769a      	strb	r2, [r3, #26]
		mode = FLY;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <readData+0x1f4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
	}
	if (SensorsData.alt == beforAlt && SensorsData.flagStart) {
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <readData+0x1e0>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <readData+0x1e4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d106      	bne.n	80015e6 <readData+0x18e>
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <readData+0x1e0>)
 80015da:	7e9b      	ldrb	r3, [r3, #26]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <readData+0x18e>
		SensorsData.flagApag = true;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <readData+0x1e0>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	76da      	strb	r2, [r3, #27]
	}

	if ((SensorsData.alt < 200 || SensorsData.alt == beforAlt)
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <readData+0x1e0>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80015ec:	dd05      	ble.n	80015fa <readData+0x1a2>
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <readData+0x1e0>)
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <readData+0x1e4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d109      	bne.n	800160e <readData+0x1b6>
			&& SensorsData.flagApag) {
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <readData+0x1e0>)
 80015fc:	7edb      	ldrb	r3, [r3, #27]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <readData+0x1b6>
		SensorsData.flagLand = true;
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <readData+0x1e0>)
 8001604:	2201      	movs	r2, #1
 8001606:	771a      	strb	r2, [r3, #28]
		mode = LAND;
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <readData+0x1f4>)
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]
	}

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	1a36e2eb 	.word	0x1a36e2eb
 800161c:	3fc85bc0 	.word	0x3fc85bc0
 8001620:	00000000 	.word	0x00000000
 8001624:	4150e91a 	.word	0x4150e91a
 8001628:	4816f007 	.word	0x4816f007
 800162c:	3fa8fc50 	.word	0x3fa8fc50
 8001630:	200000bc 	.word	0x200000bc
 8001634:	200000c4 	.word	0x200000c4
 8001638:	200000e0 	.word	0x200000e0
 800163c:	200000d4 	.word	0x200000d4
 8001640:	200000d0 	.word	0x200000d0
 8001644:	3ff00000 	.word	0x3ff00000
 8001648:	20000000 	.word	0x20000000
 800164c:	20000100 	.word	0x20000100

08001650 <writeData>:

void writeData() {
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b09c      	sub	sp, #112	@ 0x70
 8001654:	af0c      	add	r7, sp, #48	@ 0x30

//	struct RadioData_t r;
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001656:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 800165a:	803b      	strh	r3, [r7, #0]
 800165c:	23d8      	movs	r3, #216	@ 0xd8
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	f001 f994 	bl	800298c <HAL_GetTick>
 8001664:	4603      	mov	r3, r0
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	4b5e      	ldr	r3, [pc, #376]	@ (80017e4 <writeData+0x194>)
 800166a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800166e:	813b      	strh	r3, [r7, #8]
			SensorsData.press, SensorsData.accel1, SensorsData.accel2,
 8001670:	4b5c      	ldr	r3, [pc, #368]	@ (80017e4 <writeData+0x194>)
 8001672:	689b      	ldr	r3, [r3, #8]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001674:	f8c7 300a 	str.w	r3, [r7, #10]
			SensorsData.press, SensorsData.accel1, SensorsData.accel2,
 8001678:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <writeData+0x194>)
 800167a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 800167e:	81fb      	strh	r3, [r7, #14]
			SensorsData.press, SensorsData.accel1, SensorsData.accel2,
 8001680:	4b58      	ldr	r3, [pc, #352]	@ (80017e4 <writeData+0x194>)
 8001682:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001686:	823b      	strh	r3, [r7, #16]
			SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
 8001688:	4b56      	ldr	r3, [pc, #344]	@ (80017e4 <writeData+0x194>)
 800168a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 800168e:	827b      	strh	r3, [r7, #18]
			SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
 8001690:	4b54      	ldr	r3, [pc, #336]	@ (80017e4 <writeData+0x194>)
 8001692:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001696:	82bb      	strh	r3, [r7, #20]
			SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
 8001698:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <writeData+0x194>)
 800169a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 800169e:	82fb      	strh	r3, [r7, #22]
			SensorsData.gyro3, 0, RoverData.answer, { RoverData.distanses[0],
 80016a0:	4b50      	ldr	r3, [pc, #320]	@ (80017e4 <writeData+0x194>)
 80016a2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016a6:	833b      	strh	r3, [r7, #24]
 80016a8:	2300      	movs	r3, #0
 80016aa:	76bb      	strb	r3, [r7, #26]
			SensorsData.gyro3, 0, RoverData.answer, { RoverData.distanses[0],
 80016ac:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <writeData+0x198>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016b0:	76fb      	strb	r3, [r7, #27]
			SensorsData.gyro3, 0, RoverData.answer, { RoverData.distanses[0],
 80016b2:	4b4d      	ldr	r3, [pc, #308]	@ (80017e8 <writeData+0x198>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016b6:	83bb      	strh	r3, [r7, #28]
					RoverData.distanses[1], RoverData.distanses[2],
 80016b8:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <writeData+0x198>)
 80016ba:	889b      	ldrh	r3, [r3, #4]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016bc:	83fb      	strh	r3, [r7, #30]
					RoverData.distanses[1], RoverData.distanses[2],
 80016be:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <writeData+0x198>)
 80016c0:	88db      	ldrh	r3, [r3, #6]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016c2:	843b      	strh	r3, [r7, #32]
					RoverData.distanses[3], RoverData.distanses[4],
 80016c4:	4b48      	ldr	r3, [pc, #288]	@ (80017e8 <writeData+0x198>)
 80016c6:	891b      	ldrh	r3, [r3, #8]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016c8:	847b      	strh	r3, [r7, #34]	@ 0x22
					RoverData.distanses[3], RoverData.distanses[4],
 80016ca:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <writeData+0x198>)
 80016cc:	895b      	ldrh	r3, [r3, #10]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
					RoverData.distanses[5], RoverData.distanses[6],
 80016d0:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <writeData+0x198>)
 80016d2:	899b      	ldrh	r3, [r3, #12]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
					RoverData.distanses[5], RoverData.distanses[6],
 80016d6:	4b44      	ldr	r3, [pc, #272]	@ (80017e8 <writeData+0x198>)
 80016d8:	89db      	ldrh	r3, [r3, #14]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016da:	853b      	strh	r3, [r7, #40]	@ 0x28
					RoverData.distanses[7], RoverData.distanses[8],
 80016dc:	4b42      	ldr	r3, [pc, #264]	@ (80017e8 <writeData+0x198>)
 80016de:	8a1b      	ldrh	r3, [r3, #16]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
					RoverData.distanses[7], RoverData.distanses[8],
 80016e2:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <writeData+0x198>)
 80016e4:	8a5b      	ldrh	r3, [r3, #18]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					RoverData.distanses[9], RoverData.distanses[10],
 80016e8:	4b3f      	ldr	r3, [pc, #252]	@ (80017e8 <writeData+0x198>)
 80016ea:	8a9b      	ldrh	r3, [r3, #20]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					RoverData.distanses[9], RoverData.distanses[10],
 80016ee:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <writeData+0x198>)
 80016f0:	8adb      	ldrh	r3, [r3, #22]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016f2:	863b      	strh	r3, [r7, #48]	@ 0x30
					RoverData.distanses[11], RoverData.distanses[12],
 80016f4:	4b3c      	ldr	r3, [pc, #240]	@ (80017e8 <writeData+0x198>)
 80016f6:	8b1b      	ldrh	r3, [r3, #24]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016f8:	867b      	strh	r3, [r7, #50]	@ 0x32
					RoverData.distanses[11], RoverData.distanses[12],
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <writeData+0x198>)
 80016fc:	8b5b      	ldrh	r3, [r3, #26]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 80016fe:	86bb      	strh	r3, [r7, #52]	@ 0x34
					RoverData.distanses[13], RoverData.distanses[14],
 8001700:	4b39      	ldr	r3, [pc, #228]	@ (80017e8 <writeData+0x198>)
 8001702:	8b9b      	ldrh	r3, [r3, #28]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001704:	86fb      	strh	r3, [r7, #54]	@ 0x36
					RoverData.distanses[13], RoverData.distanses[14],
 8001706:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <writeData+0x198>)
 8001708:	8bdb      	ldrh	r3, [r3, #30]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 800170a:	873b      	strh	r3, [r7, #56]	@ 0x38
					RoverData.distanses[15], RoverData.distanses[16] } };
 800170c:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <writeData+0x198>)
 800170e:	8c1b      	ldrh	r3, [r3, #32]
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001710:	877b      	strh	r3, [r7, #58]	@ 0x3a
					RoverData.distanses[15], RoverData.distanses[16] } };
 8001712:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <writeData+0x198>)
 8001714:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
	RadioData_t r_data = { 0xAAAA, 0xD8, HAL_GetTick(), SensorsData.temp,
 8001716:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	r_data.checksum = r_data.start_of_packet ^ r_data.team_id ^ r_data.time
 8001718:	883b      	ldrh	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4053      	eors	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	4053      	eors	r3, r2
 800172a:	b2da      	uxtb	r2, r3
			^ r_data.temperature ^ r_data.pressure ^ r_data.accelerometer_x
 800172c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4053      	eors	r3, r2
 8001734:	b2da      	uxtb	r2, r3
 8001736:	f8d7 300a 	ldr.w	r3, [r7, #10]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4053      	eors	r3, r2
 800173e:	b2da      	uxtb	r2, r3
 8001740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4053      	eors	r3, r2
 8001748:	b2da      	uxtb	r2, r3
			^ r_data.accelerometer_y ^ r_data.accelerometer_z
 800174a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4053      	eors	r3, r2
 8001752:	b2da      	uxtb	r2, r3
 8001754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4053      	eors	r3, r2
 800175c:	b2da      	uxtb	r2, r3
			^ r_data.gyroscope_x ^ r_data.gyroscope_y ^ r_data.gyroscope_z;
 800175e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4053      	eors	r3, r2
 8001766:	b2da      	uxtb	r2, r3
 8001768:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4053      	eors	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4053      	eors	r3, r2
 800177a:	b2db      	uxtb	r3, r3
	r_data.checksum = r_data.start_of_packet ^ r_data.team_id ^ r_data.time
 800177c:	76bb      	strb	r3, [r7, #26]

	if (HAL_GetTick() - timeToWrite >= 50) {
 800177e:	f001 f905 	bl	800298c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <writeData+0x19c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b31      	cmp	r3, #49	@ 0x31
 800178c:	d913      	bls.n	80017b6 <writeData+0x166>
//				SensorsData.temp, SensorsData.accel1, SensorsData.accel2,
//				SensorsData.accel3, SensorsData.gyro1, SensorsData.gyro2,
//				SensorsData.gyro3, SensorsData.flagStart, SensorsData.flagApag,
//				SensorsData.flagLand);

		writeSD_rData(r_data);
 800178e:	466c      	mov	r4, sp
 8001790:	f107 0510 	add.w	r5, r7, #16
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017a0:	c407      	stmia	r4!, {r0, r1, r2}
 80017a2:	8023      	strh	r3, [r4, #0]
 80017a4:	463b      	mov	r3, r7
 80017a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a8:	f7ff fe26 	bl	80013f8 <writeSD_rData>

		timeToWrite = HAL_GetTick();
 80017ac:	f001 f8ee 	bl	800298c <HAL_GetTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <writeData+0x19c>)
 80017b4:	6013      	str	r3, [r2, #0]
	}

	if (HAL_GetTick() - timeToSend >= 1000) {
 80017b6:	f001 f8e9 	bl	800298c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <writeData+0x1a0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017c6:	d309      	bcc.n	80017dc <writeData+0x18c>
//				SensorsData.accel3, SensorsData.flagStart, SensorsData.flagApag,
//				SensorsData.flagLand);
		//
//		LORA_TransmitData(buffer, sizeOfSnprintf);

		LORA_TransmitData((uint8_t*) &r_data, 26);
 80017c8:	463b      	mov	r3, r7
 80017ca:	211a      	movs	r1, #26
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fabf 	bl	8001d50 <LORA_TransmitData>
		timeToSend = HAL_GetTick();
 80017d2:	f001 f8db 	bl	800298c <HAL_GetTick>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <writeData+0x1a0>)
 80017da:	6013      	str	r3, [r2, #0]
	}

}
 80017dc:	bf00      	nop
 80017de:	3740      	adds	r7, #64	@ 0x40
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	200000e0 	.word	0x200000e0
 80017e8:	20000004 	.word	0x20000004
 80017ec:	200000dc 	.word	0x200000dc
 80017f0:	200000d8 	.word	0x200000d8

080017f4 <cheakAll>:
		writeSD("transmit to rover\n");
	}

}

void cheakAll() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 80017f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017fc:	f001 f8d2 	bl	80029a4 <HAL_Delay>

	LED2_GPIO_Port->ODR |= LED2_Pin;
 8001800:	4b55      	ldr	r3, [pc, #340]	@ (8001958 <cheakAll+0x164>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	4a54      	ldr	r2, [pc, #336]	@ (8001958 <cheakAll+0x164>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR |= LED3_Pin;
 800180c:	4b52      	ldr	r3, [pc, #328]	@ (8001958 <cheakAll+0x164>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	4a51      	ldr	r2, [pc, #324]	@ (8001958 <cheakAll+0x164>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR |= LED4_Pin;
 8001818:	4b4f      	ldr	r3, [pc, #316]	@ (8001958 <cheakAll+0x164>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	4a4e      	ldr	r2, [pc, #312]	@ (8001958 <cheakAll+0x164>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6153      	str	r3, [r2, #20]

	HAL_Delay(500);
 8001824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001828:	f001 f8bc 	bl	80029a4 <HAL_Delay>

	LED2_GPIO_Port->ODR &= ~LED2_Pin;
 800182c:	4b4a      	ldr	r3, [pc, #296]	@ (8001958 <cheakAll+0x164>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	4a49      	ldr	r2, [pc, #292]	@ (8001958 <cheakAll+0x164>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6153      	str	r3, [r2, #20]
	LED3_GPIO_Port->ODR &= ~LED3_Pin;
 8001838:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <cheakAll+0x164>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	4a46      	ldr	r2, [pc, #280]	@ (8001958 <cheakAll+0x164>)
 800183e:	f023 0302 	bic.w	r3, r3, #2
 8001842:	6153      	str	r3, [r2, #20]
	LED4_GPIO_Port->ODR &= ~LED4_Pin;
 8001844:	4b44      	ldr	r3, [pc, #272]	@ (8001958 <cheakAll+0x164>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4a43      	ldr	r2, [pc, #268]	@ (8001958 <cheakAll+0x164>)
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	6153      	str	r3, [r2, #20]

	FR_Status = f_mount(&FatFs, SDPath, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	4942      	ldr	r1, [pc, #264]	@ (800195c <cheakAll+0x168>)
 8001854:	4842      	ldr	r0, [pc, #264]	@ (8001960 <cheakAll+0x16c>)
 8001856:	f007 f88f 	bl	8008978 <f_mount>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <cheakAll+0x170>)
 8001860:	701a      	strb	r2, [r3, #0]

	if (FR_Status != FR_OK) {
 8001862:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <cheakAll+0x170>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02b      	beq.n	80018c2 <cheakAll+0xce>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800186a:	2102      	movs	r1, #2
 800186c:	483a      	ldr	r0, [pc, #232]	@ (8001958 <cheakAll+0x164>)
 800186e:	f001 fb40 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001872:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001876:	f001 f895 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800187a:	2102      	movs	r1, #2
 800187c:	4836      	ldr	r0, [pc, #216]	@ (8001958 <cheakAll+0x164>)
 800187e:	f001 fb38 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001882:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001886:	f001 f88d 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800188a:	2102      	movs	r1, #2
 800188c:	4832      	ldr	r0, [pc, #200]	@ (8001958 <cheakAll+0x164>)
 800188e:	f001 fb30 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001892:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001896:	f001 f885 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800189a:	2102      	movs	r1, #2
 800189c:	482e      	ldr	r0, [pc, #184]	@ (8001958 <cheakAll+0x164>)
 800189e:	f001 fb28 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80018a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018a6:	f001 f87d 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018aa:	2102      	movs	r1, #2
 80018ac:	482a      	ldr	r0, [pc, #168]	@ (8001958 <cheakAll+0x164>)
 80018ae:	f001 fb20 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80018b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018b6:	f001 f875 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018ba:	2102      	movs	r1, #2
 80018bc:	4826      	ldr	r0, [pc, #152]	@ (8001958 <cheakAll+0x164>)
 80018be:	f001 fb18 	bl	8002ef2 <HAL_GPIO_TogglePin>

	}

	f_unlink(filename);  // удаляет старый файл
 80018c2:	4829      	ldr	r0, [pc, #164]	@ (8001968 <cheakAll+0x174>)
 80018c4:	f007 fe7e 	bl	80095c4 <f_unlink>
	f_open(&Fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80018c8:	220a      	movs	r2, #10
 80018ca:	4927      	ldr	r1, [pc, #156]	@ (8001968 <cheakAll+0x174>)
 80018cc:	4827      	ldr	r0, [pc, #156]	@ (800196c <cheakAll+0x178>)
 80018ce:	f007 f899 	bl	8008a04 <f_open>
	f_close(&Fil);
 80018d2:	4826      	ldr	r0, [pc, #152]	@ (800196c <cheakAll+0x178>)
 80018d4:	f007 fc43 	bl	800915e <f_close>

//	writeSD("SD GOOD\n");

	if (LORA_Init(&hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin)) {
 80018d8:	2220      	movs	r2, #32
 80018da:	4925      	ldr	r1, [pc, #148]	@ (8001970 <cheakAll+0x17c>)
 80018dc:	4825      	ldr	r0, [pc, #148]	@ (8001974 <cheakAll+0x180>)
 80018de:	f000 f89b 	bl	8001a18 <LORA_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <cheakAll+0x10c>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018e8:	2102      	movs	r1, #2
 80018ea:	481b      	ldr	r0, [pc, #108]	@ (8001958 <cheakAll+0x164>)
 80018ec:	f001 fb01 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80018f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018f4:	f001 f856 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018f8:	2102      	movs	r1, #2
 80018fa:	4817      	ldr	r0, [pc, #92]	@ (8001958 <cheakAll+0x164>)
 80018fc:	f001 faf9 	bl	8002ef2 <HAL_GPIO_TogglePin>
	} else {
//		writeSD("LoRa GOOD\n");
	}

	MS_Init(&hspi1, MS_NSS_GPIO_Port, MS_NSS_Pin);
 8001900:	2201      	movs	r2, #1
 8001902:	491d      	ldr	r1, [pc, #116]	@ (8001978 <cheakAll+0x184>)
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <cheakAll+0x180>)
 8001906:	f000 fa7b 	bl	8001e00 <MS_Init>

	if (LSM_Init(&hspi1, LSM_NSS_GPIO_Port, LSM_NSS_Pin)) {
 800190a:	2204      	movs	r2, #4
 800190c:	491a      	ldr	r1, [pc, #104]	@ (8001978 <cheakAll+0x184>)
 800190e:	4819      	ldr	r0, [pc, #100]	@ (8001974 <cheakAll+0x180>)
 8001910:	f7ff fadc 	bl	8000ecc <LSM_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01b      	beq.n	8001952 <cheakAll+0x15e>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800191a:	2102      	movs	r1, #2
 800191c:	480e      	ldr	r0, [pc, #56]	@ (8001958 <cheakAll+0x164>)
 800191e:	f001 fae8 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001922:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001926:	f001 f83d 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800192a:	2102      	movs	r1, #2
 800192c:	480a      	ldr	r0, [pc, #40]	@ (8001958 <cheakAll+0x164>)
 800192e:	f001 fae0 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001932:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001936:	f001 f835 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800193a:	2102      	movs	r1, #2
 800193c:	4806      	ldr	r0, [pc, #24]	@ (8001958 <cheakAll+0x164>)
 800193e:	f001 fad8 	bl	8002ef2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001942:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001946:	f001 f82d 	bl	80029a4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800194a:	2102      	movs	r1, #2
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <cheakAll+0x164>)
 800194e:	f001 fad0 	bl	8002ef2 <HAL_GPIO_TogglePin>

//	writeSD("Start LOOP\n");

//	writeSD("name;time;height;pressure;temperature;accel_x;accel_y;accel_z;gyro_x;gyro_y;gyro_z;flag_start;flag_apag;flag_land;\n");

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40020000 	.word	0x40020000
 800195c:	200006d8 	.word	0x200006d8
 8001960:	20000104 	.word	0x20000104
 8001964:	20000564 	.word	0x20000564
 8001968:	0800a770 	.word	0x0800a770
 800196c:	20000334 	.word	0x20000334
 8001970:	40020800 	.word	0x40020800
 8001974:	20000630 	.word	0x20000630
 8001978:	40020400 	.word	0x40020400

0800197c <initVariables>:

void initVariables() {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	MS_ReadData(MS_Data);
 8001980:	480a      	ldr	r0, [pc, #40]	@ (80019ac <initVariables+0x30>)
 8001982:	f000 fa63 	bl	8001e4c <MS_ReadData>
	seaLvlPress = MS_Data[0];
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <initVariables+0x30>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <initVariables+0x34>)
 800198e:	601a      	str	r2, [r3, #0]
	SensorsData.flagStart = false;
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <initVariables+0x38>)
 8001992:	2200      	movs	r2, #0
 8001994:	769a      	strb	r2, [r3, #26]
	SensorsData.flagApag = false;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <initVariables+0x38>)
 8001998:	2200      	movs	r2, #0
 800199a:	76da      	strb	r2, [r3, #27]
	SensorsData.flagLand = false;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <initVariables+0x38>)
 800199e:	2200      	movs	r2, #0
 80019a0:	771a      	strb	r2, [r3, #28]
	mode = START;
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <initVariables+0x3c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200000bc 	.word	0x200000bc
 80019b0:	200000d0 	.word	0x200000d0
 80019b4:	200000e0 	.word	0x200000e0
 80019b8:	20000100 	.word	0x20000100

080019bc <SvSend>:

void SvSend(uint8_t *data, int size) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, data, size, HAL_MAX_DELAY);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4803      	ldr	r0, [pc, #12]	@ (80019e0 <SvSend+0x24>)
 80019d2:	f003 fec5 	bl	8005760 <HAL_UART_Transmit>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000688 	.word	0x20000688

080019e4 <SvGet>:
void SvGet(uint8_t *data, int expected_len) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
//			data[count++] = byte;
//			tick_start = HAL_GetTick(); // сброс таймаута при успешном приёме байта
//		}
//	}

	HAL_UART_Receive(&huart1, (uint8_t*) &RoverData, ROVERDATA_SIZE, 1000);
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	2225      	movs	r2, #37	@ 0x25
 80019f4:	4903      	ldr	r1, [pc, #12]	@ (8001a04 <SvGet+0x20>)
 80019f6:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <SvGet+0x24>)
 80019f8:	f003 ff3d 	bl	8005876 <HAL_UART_Receive>

//	return count;
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000004 	.word	0x20000004
 8001a08:	20000688 	.word	0x20000688

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <LORA_Init>:

uint8_t _loraReadReg(uint8_t reg);
void _loraWriteReg(uint8_t reg, uint8_t data);

uint8_t LORA_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *NSS_PORT,
		uint16_t NSS_PIN) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]

	_hspi = hspi;
 8001a26:	4a33      	ldr	r2, [pc, #204]	@ (8001af4 <LORA_Init+0xdc>)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6013      	str	r3, [r2, #0]
	_nssPort = NSS_PORT;
 8001a2c:	4a32      	ldr	r2, [pc, #200]	@ (8001af8 <LORA_Init+0xe0>)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	6013      	str	r3, [r2, #0]
	_nssPin = NSS_PIN;
 8001a32:	4a32      	ldr	r2, [pc, #200]	@ (8001afc <LORA_Init+0xe4>)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	8013      	strh	r3, [r2, #0]

	if (_loraReadReg(LORA_REG_VERSION) != LORA_SEMTECH_ID)
 8001a38:	2042      	movs	r0, #66	@ 0x42
 8001a3a:	f000 f863 	bl	8001b04 <_loraReadReg>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d001      	beq.n	8001a48 <LORA_Init+0x30>
		return 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e051      	b.n	8001aec <LORA_Init+0xd4>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_SLEEP);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f890 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE,
 8001a50:	2188      	movs	r1, #136	@ 0x88
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 f88c 	bl	8001b70 <_loraWriteReg>
			(LORA_SET_LoRa << 7) | (LORA_SET_LOW_FREQ << 3));

	uint32_t _lora_Frf = (curFreq << 19) / 32;
 8001a58:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <LORA_Init+0xe8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	04db      	lsls	r3, r3, #19
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	617b      	str	r3, [r7, #20]

	_loraWriteReg(LORA_REG_FR, _lora_Frf >> 16);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	2006      	movs	r0, #6
 8001a6c:	f000 f880 	bl	8001b70 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 1, _lora_Frf >> 8);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	2007      	movs	r0, #7
 8001a7a:	f000 f879 	bl	8001b70 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FR + 2, _lora_Frf);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	2008      	movs	r0, #8
 8001a86:	f000 f873 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PA_CONFIG,
 8001a8a:	21ff      	movs	r1, #255	@ 0xff
 8001a8c:	2009      	movs	r0, #9
 8001a8e:	f000 f86f 	bl	8001b70 <_loraWriteReg>
			(LORA_SET_PA_SEL << 7) | (LORA_SET_MAX_POWER << 4)
					| (LORA_SET_OUT_POWER));

	_loraWriteReg(LORA_REG_OCP, (LORA_SET_OCP_ON << 5) | LORA_SET_OCP_TRIM);
 8001a92:	210b      	movs	r1, #11
 8001a94:	200b      	movs	r0, #11
 8001a96:	f000 f86b 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_LNA, LORA_SET_LNA_GAIN << 5);
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	200c      	movs	r0, #12
 8001a9e:	f000 f867 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_FIFO_TX, LORA_SET_FIFO_TX_BASE_ADDR);
 8001aa2:	21ff      	movs	r1, #255	@ 0xff
 8001aa4:	200e      	movs	r0, #14
 8001aa6:	f000 f863 	bl	8001b70 <_loraWriteReg>
	_loraWriteReg(LORA_REG_FIFO_RX, LORA_SET_FIFO_RX_BASE_ADDR);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	200f      	movs	r0, #15
 8001aae:	f000 f85f 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_MODEM_CON,
 8001ab2:	2182      	movs	r1, #130	@ 0x82
 8001ab4:	201d      	movs	r0, #29
 8001ab6:	f000 f85b 	bl	8001b70 <_loraWriteReg>
			(LORA_SET_MODEM_CON_BW << 4) | (LORA_SET_MODEM_CON_COD_RATE << 1)
					| LORA_SET_MODEM_CON_HEADER_MODE_ON);

	_loraWriteReg(LORA_REG_MODEM_CON2,
 8001aba:	2170      	movs	r1, #112	@ 0x70
 8001abc:	201e      	movs	r0, #30
 8001abe:	f000 f857 	bl	8001b70 <_loraWriteReg>
			(LORA_SET_MODEM_CON2_SPEAD_FACT << 4)
					| (LORA_SET_MODEM_CON2_CRC << 2));

	_loraWriteReg(LORA_REG_PREAMBLE_MSB, LORA_SET_PREAMBLE >> 8);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2020      	movs	r0, #32
 8001ac6:	f000 f853 	bl	8001b70 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PREAMBLE_MSB + 1, LORA_SET_PREAMBLE);
 8001aca:	2106      	movs	r1, #6
 8001acc:	2021      	movs	r0, #33	@ 0x21
 8001ace:	f000 f84f 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_PAYLOAD, LORA_SET_PAYLOAD);
 8001ad2:	213c      	movs	r1, #60	@ 0x3c
 8001ad4:	2022      	movs	r0, #34	@ 0x22
 8001ad6:	f000 f84b 	bl	8001b70 <_loraWriteReg>
	_loraWriteReg(LORA_REG_MAX_PAYLOAD, LORA_SET_MAX_PAYLOAD);
 8001ada:	213c      	movs	r1, #60	@ 0x3c
 8001adc:	2023      	movs	r0, #35	@ 0x23
 8001ade:	f000 f847 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8001ae2:	2105      	movs	r1, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f000 f843 	bl	8001b70 <_loraWriteReg>

	return 0;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000056c 	.word	0x2000056c
 8001af8:	20000570 	.word	0x20000570
 8001afc:	20000574 	.word	0x20000574
 8001b00:	2000002c 	.word	0x2000002c

08001b04 <_loraReadReg>:

uint8_t _loraReadReg(uint8_t reg) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <_loraReadReg+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <_loraReadReg+0x64>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_loraReadReg+0x60>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	400a      	ands	r2, r1
 8001b22:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <_loraReadReg+0x68>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	1df9      	adds	r1, r7, #7
 8001b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f003 f87d 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_hspi, &reg, 1, 1000);
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <_loraReadReg+0x68>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	1df9      	adds	r1, r7, #7
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f003 f9b9 	bl	8004eb6 <HAL_SPI_Receive>
	_nssPort->ODR |= _nssPin; // nss 1
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_loraReadReg+0x60>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <_loraReadReg+0x64>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <_loraReadReg+0x60>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	615a      	str	r2, [r3, #20]
	return reg;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000570 	.word	0x20000570
 8001b68:	20000574 	.word	0x20000574
 8001b6c:	2000056c 	.word	0x2000056c

08001b70 <_loraWriteReg>:

void _loraWriteReg(uint8_t reg, uint8_t data) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	71bb      	strb	r3, [r7, #6]
	reg |= 1 << 7;
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	71fb      	strb	r3, [r7, #7]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <_loraWriteReg+0x6c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <_loraWriteReg+0x70>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <_loraWriteReg+0x6c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &reg, 1, 1000);
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <_loraWriteReg+0x74>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	1df9      	adds	r1, r7, #7
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	2201      	movs	r2, #1
 8001bac:	f003 f83f 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, &data, 1, 1000);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <_loraWriteReg+0x74>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	1db9      	adds	r1, r7, #6
 8001bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f003 f837 	bl	8004c2e <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <_loraWriteReg+0x6c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <_loraWriteReg+0x70>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <_loraWriteReg+0x6c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	615a      	str	r2, [r3, #20]
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000570 	.word	0x20000570
 8001be0:	20000574 	.word	0x20000574
 8001be4:	2000056c 	.word	0x2000056c

08001be8 <LORA_ReceiveData>:

uint8_t LORA_ReceiveData(uint8_t *data) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

	if (_loraReadReg(LORA_REG_FLAGS) & (LORA_FLAGS_RX_DONE)) {
 8001bf0:	2012      	movs	r0, #18
 8001bf2:	f7ff ff87 	bl	8001b04 <_loraReadReg>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 809c 	beq.w	8001d3a <LORA_ReceiveData+0x152>
		_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_RX_DONE);
 8001c02:	2140      	movs	r1, #64	@ 0x40
 8001c04:	2012      	movs	r0, #18
 8001c06:	f7ff ffb3 	bl	8001b70 <_loraWriteReg>

		uint8_t packetSize = _loraReadReg(LORA_REG_RX_NB_BYTES);
 8001c0a:	2013      	movs	r0, #19
 8001c0c:	f7ff ff7a 	bl	8001b04 <_loraReadReg>
 8001c10:	4603      	mov	r3, r0
 8001c12:	73fb      	strb	r3, [r7, #15]
		uint8_t curAddr = _loraReadReg(LORA_REG_FIFO_RX_CUR);
 8001c14:	2010      	movs	r0, #16
 8001c16:	f7ff ff75 	bl	8001b04 <_loraReadReg>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73bb      	strb	r3, [r7, #14]
		uint8_t regFifo = LORA_REG_FIFO;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	733b      	strb	r3, [r7, #12]

		_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, curAddr);
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	4619      	mov	r1, r3
 8001c26:	200d      	movs	r0, #13
 8001c28:	f7ff ffa2 	bl	8001b70 <_loraWriteReg>

		uint8_t spaceLeft = 255 - curAddr;
 8001c2c:	7bbb      	ldrb	r3, [r7, #14]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	737b      	strb	r3, [r7, #13]
		if (spaceLeft >= packetSize) {
 8001c32:	7b7a      	ldrb	r2, [r7, #13]
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d327      	bcc.n	8001c8a <LORA_ReceiveData+0xa2>
			_nssPort->ODR &= ~_nssPin; // nss 0
 8001c3a:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <LORA_ReceiveData+0x160>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001c50:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <LORA_ReceiveData+0x164>)
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	f107 010c 	add.w	r1, r7, #12
 8001c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f002 ffe6 	bl	8004c2e <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize, 1000);
 8001c62:	4b3a      	ldr	r3, [pc, #232]	@ (8001d4c <LORA_ReceiveData+0x164>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f003 f921 	bl	8004eb6 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <LORA_ReceiveData+0x160>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	e055      	b.n	8001d36 <LORA_ReceiveData+0x14e>
		} else {
			_nssPort->ODR &= ~_nssPin; // nss 0
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <LORA_ReceiveData+0x160>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <LORA_ReceiveData+0x164>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f107 010c 	add.w	r1, r7, #12
 8001ca8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cac:	2201      	movs	r2, #1
 8001cae:	f002 ffbe 	bl	8004c2e <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, spaceLeft, 1000);
 8001cb2:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <LORA_ReceiveData+0x164>)
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	7b7b      	ldrb	r3, [r7, #13]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f003 f8f9 	bl	8004eb6 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <LORA_ReceiveData+0x160>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	615a      	str	r2, [r3, #20]

			_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, 0);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	200d      	movs	r0, #13
 8001cdc:	f7ff ff48 	bl	8001b70 <_loraWriteReg>

			_nssPort->ODR &= ~_nssPin; // nss 0
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <LORA_ReceiveData+0x160>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <LORA_ReceiveData+0x164>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	f107 010c 	add.w	r1, r7, #12
 8001cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d02:	2201      	movs	r2, #1
 8001d04:	f002 ff93 	bl	8004c2e <HAL_SPI_Transmit>
			HAL_SPI_Receive(_hspi, data, packetSize - spaceLeft, 1000);
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <LORA_ReceiveData+0x164>)
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	7b7b      	ldrb	r3, [r7, #13]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	f003 f8ca 	bl	8004eb6 <HAL_SPI_Receive>
			_nssPort->ODR |= _nssPin; // nss 1
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <LORA_ReceiveData+0x160>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <LORA_ReceiveData+0x15c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	615a      	str	r2, [r3, #20]
		}
		return packetSize;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	e000      	b.n	8001d3c <LORA_ReceiveData+0x154>
	}
	return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000570 	.word	0x20000570
 8001d48:	20000574 	.word	0x20000574
 8001d4c:	2000056c 	.word	0x2000056c

08001d50 <LORA_TransmitData>:

void LORA_TransmitData(uint8_t *data, uint8_t size) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]

//	for (int i = 0; i < size; i++) {
//		dataToLora[i] = (uint8_t) data[i];
//	}

	_loraWriteReg(LORA_REG_FIFO_ADDR_PTR, LORA_SET_FIFO_TX_BASE_ADDR);
 8001d5c:	21ff      	movs	r1, #255	@ 0xff
 8001d5e:	200d      	movs	r0, #13
 8001d60:	f7ff ff06 	bl	8001b70 <_loraWriteReg>
	_loraWriteReg(LORA_REG_PAYLOAD, size);
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	4619      	mov	r1, r3
 8001d68:	2022      	movs	r0, #34	@ 0x22
 8001d6a:	f7ff ff01 	bl	8001b70 <_loraWriteReg>

	uint8_t regFifo = LORA_REG_FIFO | (1 << 7);
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	73fb      	strb	r3, [r7, #15]
	_nssPort->ODR &= ~_nssPin; // nss 0
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <LORA_TransmitData+0xa4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <LORA_TransmitData+0xa8>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <LORA_TransmitData+0xa4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	400a      	ands	r2, r1
 8001d86:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_hspi, &regFifo, 1, 1000);
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <LORA_TransmitData+0xac>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	f107 010f 	add.w	r1, r7, #15
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	2201      	movs	r2, #1
 8001d96:	f002 ff4a 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_hspi, data, size, 1000);
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <LORA_TransmitData+0xac>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f002 ff41 	bl	8004c2e <HAL_SPI_Transmit>
	_nssPort->ODR |= _nssPin; // nss 1
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <LORA_TransmitData+0xa4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <LORA_TransmitData+0xa8>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <LORA_TransmitData+0xa4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	615a      	str	r2, [r3, #20]

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_TX);
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fed4 	bl	8001b70 <_loraWriteReg>
	while (!(_loraReadReg(LORA_REG_FLAGS) & LORA_FLAGS_TX_DONE))
 8001dc8:	bf00      	nop
 8001dca:	2012      	movs	r0, #18
 8001dcc:	f7ff fe9a 	bl	8001b04 <_loraReadReg>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f7      	beq.n	8001dca <LORA_TransmitData+0x7a>
		;
	_loraWriteReg(LORA_REG_FLAGS, LORA_FLAGS_TX_DONE);
 8001dda:	2108      	movs	r1, #8
 8001ddc:	2012      	movs	r0, #18
 8001dde:	f7ff fec7 	bl	8001b70 <_loraWriteReg>

	_loraWriteReg(LORA_REG_OP_MODE, LORA_MODE_RX_CONT);
 8001de2:	2105      	movs	r1, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff fec3 	bl	8001b70 <_loraWriteReg>

}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000570 	.word	0x20000570
 8001df8:	20000574 	.word	0x20000574
 8001dfc:	2000056c 	.word	0x2000056c

08001e00 <MS_Init>:
void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i);
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]);

//real

void MS_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]

	_ms_hspi1 = hspi;
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <MS_Init+0x3c>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6013      	str	r3, [r2, #0]
	_ms_nssPort = port;
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <MS_Init+0x40>)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6013      	str	r3, [r2, #0]
	_ms_nssPin = pin;
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <MS_Init+0x44>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	8013      	strh	r3, [r2, #0]

	_msSendCmd(MS_RESET);
 8001e20:	201e      	movs	r0, #30
 8001e22:	f000 fa27 	bl	8002274 <_msSendCmd>
	HAL_Delay(100);
 8001e26:	2064      	movs	r0, #100	@ 0x64
 8001e28:	f000 fdbc 	bl	80029a4 <HAL_Delay>

	_msReadProm(_calibrCoeff);
 8001e2c:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MS_Init+0x48>)
 8001e2e:	f000 f82d 	bl	8001e8c <_msReadProm>

}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000578 	.word	0x20000578
 8001e40:	2000057c 	.word	0x2000057c
 8001e44:	20000580 	.word	0x20000580
 8001e48:	20000584 	.word	0x20000584

08001e4c <MS_ReadData>:

void MS_ReadData(uint32_t endBufer[]) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	uint32_t startPressTemp[2];

	_msReadAdc(startPressTemp);
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f80a 	bl	8001e72 <_msReadAdc>
	_calculate(startPressTemp, endBufer);
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f8c5 	bl	8001ff4 <_calculate>

}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_msReadAdc>:

void _msReadAdc(uint32_t bufForPresTemp[]) {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData32(MS_ADC_READ, bufForPresTemp);
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 fa7d 	bl	800237c <_msSendCmdGetData32>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <_msReadProm>:

void _msReadProm(uint16_t bufForCalibrCoef[]) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	_msSendCmdGetData16(ADRS[1], bufForCalibrCoef, 1);
 8001e94:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd4 <_msReadProm+0x148>)
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fa15 	bl	80022cc <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[2], bufForCalibrCoef, 2);
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <_msReadProm+0x148>)
 8001ea4:	789b      	ldrb	r3, [r3, #2]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fa0e 	bl	80022cc <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[3], bufForCalibrCoef, 3);
 8001eb0:	4b48      	ldr	r3, [pc, #288]	@ (8001fd4 <_msReadProm+0x148>)
 8001eb2:	78db      	ldrb	r3, [r3, #3]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fa07 	bl	80022cc <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[4], bufForCalibrCoef, 4);
 8001ebe:	4b45      	ldr	r3, [pc, #276]	@ (8001fd4 <_msReadProm+0x148>)
 8001ec0:	791b      	ldrb	r3, [r3, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fa00 	bl	80022cc <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[5], bufForCalibrCoef, 5);
 8001ecc:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <_msReadProm+0x148>)
 8001ece:	795b      	ldrb	r3, [r3, #5]
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f9f9 	bl	80022cc <_msSendCmdGetData16>
	_msSendCmdGetData16(ADRS[6], bufForCalibrCoef, 6);
 8001eda:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <_msReadProm+0x148>)
 8001edc:	799b      	ldrb	r3, [r3, #6]
 8001ede:	2206      	movs	r2, #6
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f9f2 	bl	80022cc <_msSendCmdGetData16>

	_realCalibrCoeff.Tref = _calibrCoeff[5] * 256.0;
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <_msReadProm+0x14c>)
 8001eea:	895b      	ldrh	r3, [r3, #10]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fac5 	bl	800047c <__aeabi_i2d>
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <_msReadProm+0x150>)
 8001ef8:	f7fe fb2a 	bl	8000550 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fdfc 	bl	8000b00 <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a35      	ldr	r2, [pc, #212]	@ (8001fe0 <_msReadProm+0x154>)
 8001f0c:	6013      	str	r3, [r2, #0]
	_realCalibrCoeff.TempSens = _calibrCoeff[6] / 8388608.0;
 8001f0e:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <_msReadProm+0x14c>)
 8001f10:	899b      	ldrh	r3, [r3, #12]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fab2 	bl	800047c <__aeabi_i2d>
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <_msReadProm+0x158>)
 8001f1e:	f7fe fc41 	bl	80007a4 <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fde9 	bl	8000b00 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe0 <_msReadProm+0x154>)
 8001f32:	6053      	str	r3, [r2, #4]
	_realCalibrCoeff.OffT1 = _calibrCoeff[2] * (65536.0);
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <_msReadProm+0x14c>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fa9f 	bl	800047c <__aeabi_i2d>
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <_msReadProm+0x15c>)
 8001f44:	f7fe fb04 	bl	8000550 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fdd6 	bl	8000b00 <__aeabi_d2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a22      	ldr	r2, [pc, #136]	@ (8001fe0 <_msReadProm+0x154>)
 8001f58:	6093      	str	r3, [r2, #8]
	_realCalibrCoeff.Tco = (_calibrCoeff[4]) / (128.0);
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <_msReadProm+0x14c>)
 8001f5c:	891b      	ldrh	r3, [r3, #8]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fa8c 	bl	800047c <__aeabi_i2d>
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <_msReadProm+0x160>)
 8001f6a:	f7fe fc1b 	bl	80007a4 <__aeabi_ddiv>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fdc3 	bl	8000b00 <__aeabi_d2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <_msReadProm+0x154>)
 8001f7e:	60d3      	str	r3, [r2, #12]
	_realCalibrCoeff.SensT1 = _calibrCoeff[1] * (32768.0);
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <_msReadProm+0x14c>)
 8001f82:	885b      	ldrh	r3, [r3, #2]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fa79 	bl	800047c <__aeabi_i2d>
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <_msReadProm+0x164>)
 8001f90:	f7fe fade 	bl	8000550 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fdb0 	bl	8000b00 <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <_msReadProm+0x154>)
 8001fa4:	6113      	str	r3, [r2, #16]
	_realCalibrCoeff.Tcs = (_calibrCoeff[3]) / (256.0);
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <_msReadProm+0x14c>)
 8001fa8:	88db      	ldrh	r3, [r3, #6]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa66 	bl	800047c <__aeabi_i2d>
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <_msReadProm+0x150>)
 8001fb6:	f7fe fbf5 	bl	80007a4 <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fd9d 	bl	8000b00 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_msReadProm+0x154>)
 8001fca:	6153      	str	r3, [r2, #20]
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000030 	.word	0x20000030
 8001fd8:	20000584 	.word	0x20000584
 8001fdc:	40700000 	.word	0x40700000
 8001fe0:	20000594 	.word	0x20000594
 8001fe4:	41600000 	.word	0x41600000
 8001fe8:	40f00000 	.word	0x40f00000
 8001fec:	40600000 	.word	0x40600000
 8001ff0:	40e00000 	.word	0x40e00000

08001ff4 <_calculate>:

void _calculate(uint32_t dataWithPressTemp[], uint32_t bufer[]) {
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08c      	sub	sp, #48	@ 0x30
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	uint32_t D1 = dataWithPressTemp[0];
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]
	uint32_t D2 = dataWithPressTemp[1];
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	617b      	str	r3, [r7, #20]

	float dT = D2 - _realCalibrCoeff.Tref;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002014:	4b90      	ldr	r3, [pc, #576]	@ (8002258 <_calculate+0x264>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201e:	edc7 7a04 	vstr	s15, [r7, #16]
	float TEMP = 2000 + dT * _realCalibrCoeff.TempSens;
 8002022:	4b8d      	ldr	r3, [pc, #564]	@ (8002258 <_calculate+0x264>)
 8002024:	ed93 7a01 	vldr	s14, [r3, #4]
 8002028:	edd7 7a04 	vldr	s15, [r7, #16]
 800202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002030:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800225c <_calculate+0x268>
 8002034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002038:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float OFF = _realCalibrCoeff.OffT1 + _realCalibrCoeff.Tco * dT;
 800203c:	4b86      	ldr	r3, [pc, #536]	@ (8002258 <_calculate+0x264>)
 800203e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <_calculate+0x264>)
 8002044:	edd3 6a03 	vldr	s13, [r3, #12]
 8002048:	edd7 7a04 	vldr	s15, [r7, #16]
 800204c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002054:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	float SENS = _realCalibrCoeff.SensT1 + _realCalibrCoeff.Tcs * dT;
 8002058:	4b7f      	ldr	r3, [pc, #508]	@ (8002258 <_calculate+0x264>)
 800205a:	ed93 7a04 	vldr	s14, [r3, #16]
 800205e:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <_calculate+0x264>)
 8002060:	edd3 6a05 	vldr	s13, [r3, #20]
 8002064:	edd7 7a04 	vldr	s15, [r7, #16]
 8002068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002070:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (TEMP < 2000) {
 8002074:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002078:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800225c <_calculate+0x268>
 800207c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	f140 80a2 	bpl.w	80021cc <_calculate+0x1d8>
		float T2 = (dT * dT) / 2147483648.0;
 8002088:	edd7 7a04 	vldr	s15, [r7, #16]
 800208c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002090:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002260 <_calculate+0x26c>
 8002094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002098:	edc7 7a03 	vstr	s15, [r7, #12]
		float OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2.0;
 800209c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020a0:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 800225c <_calculate+0x268>
 80020a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020b0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020b4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800225c <_calculate+0x268>
 80020b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80020bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	edc7 7a08 	vstr	s15, [r7, #32]
		float SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4.0;
 80020cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020d0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800225c <_calculate+0x268>
 80020d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020d8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80020dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020e4:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 800225c <_calculate+0x268>
 80020e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80020ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80020f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f8:	edc7 7a07 	vstr	s15, [r7, #28]

		if (TEMP < -1500) {
 80020fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002100:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002264 <_calculate+0x270>
 8002104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d546      	bpl.n	800219c <_calculate+0x1a8>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 800210e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002112:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002268 <_calculate+0x274>
 8002116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800211a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800211e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002122:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002126:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8002268 <_calculate+0x274>
 800212a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	ed97 7a08 	vldr	s14, [r7, #32]
 8002136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213a:	edc7 7a08 	vstr	s15, [r7, #32]
			SENS2 = SENS2 + 11 * (TEMP + 1500) * (TEMP + 1500) / 2.0;
 800213e:	69f8      	ldr	r0, [r7, #28]
 8002140:	f7fe f9ae 	bl	80004a0 <__aeabi_f2d>
 8002144:	4604      	mov	r4, r0
 8002146:	460d      	mov	r5, r1
 8002148:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800214c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002268 <_calculate+0x274>
 8002150:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002154:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8002158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800215c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002160:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002268 <_calculate+0x274>
 8002164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216c:	ee17 0a90 	vmov	r0, s15
 8002170:	f7fe f996 	bl	80004a0 <__aeabi_f2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800217c:	f7fe fb12 	bl	80007a4 <__aeabi_ddiv>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fe f82c 	bl	80001e4 <__adddf3>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fcb4 	bl	8000b00 <__aeabi_d2f>
 8002198:	4603      	mov	r3, r0
 800219a:	61fb      	str	r3, [r7, #28]
		}

		TEMP -= T2;
 800219c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80021a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		OFF -= OFF2;
 80021ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80021b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80021b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		SENS -= SENS2;
 80021bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80021c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80021c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	float PRES = (D1 * SENS / (2097152.0) - OFF) / 32768.0;
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	ee17 0a90 	vmov	r0, s15
 80021e2:	f7fe f95d 	bl	80004a0 <__aeabi_f2d>
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <_calculate+0x278>)
 80021ec:	f7fe fada 	bl	80007a4 <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021fa:	f7fe f951 	bl	80004a0 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4620      	mov	r0, r4
 8002204:	4629      	mov	r1, r5
 8002206:	f7fd ffeb 	bl	80001e0 <__aeabi_dsub>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <_calculate+0x27c>)
 8002218:	f7fe fac4 	bl	80007a4 <__aeabi_ddiv>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fc6c 	bl	8000b00 <__aeabi_d2f>
 8002228:	4603      	mov	r3, r0
 800222a:	60bb      	str	r3, [r7, #8]

	bufer[0] = PRES;
 800222c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002234:	ee17 2a90 	vmov	r2, s15
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]
	bufer[1] = TEMP;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	3304      	adds	r3, #4
 8002240:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002248:	ee17 2a90 	vmov	r2, s15
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3730      	adds	r7, #48	@ 0x30
 8002252:	46bd      	mov	sp, r7
 8002254:	bdb0      	pop	{r4, r5, r7, pc}
 8002256:	bf00      	nop
 8002258:	20000594 	.word	0x20000594
 800225c:	44fa0000 	.word	0x44fa0000
 8002260:	4f000000 	.word	0x4f000000
 8002264:	c4bb8000 	.word	0xc4bb8000
 8002268:	44bb8000 	.word	0x44bb8000
 800226c:	41400000 	.word	0x41400000
 8002270:	40e00000 	.word	0x40e00000

08002274 <_msSendCmd>:

void _msSendCmd(uint8_t cmd) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	_ms_nssPort->ODR &= ~_ms_nssPin;
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <_msSendCmd+0x4c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <_msSendCmd+0x50>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	43db      	mvns	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <_msSendCmd+0x4c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <_msSendCmd+0x54>)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	1df9      	adds	r1, r7, #7
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	2201      	movs	r2, #1
 80022a0:	f002 fcc5 	bl	8004c2e <HAL_SPI_Transmit>
	_ms_nssPort->ODR |= _ms_nssPin;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <_msSendCmd+0x4c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <_msSendCmd+0x50>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <_msSendCmd+0x4c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	615a      	str	r2, [r3, #20]
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000057c 	.word	0x2000057c
 80022c4:	20000580 	.word	0x20000580
 80022c8:	20000578 	.word	0x20000578

080022cc <_msSendCmdGetData16>:

void _msSendCmdGetData16(uint8_t cmd, uint16_t bufer[], uint8_t i) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;

	_ms_nssPort->ODR &= ~_ms_nssPin;
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <_msSendCmdGetData16+0xa4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <_msSendCmdGetData16+0xa8>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <_msSendCmdGetData16+0xa4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	400a      	ands	r2, r1
 80022f0:	615a      	str	r2, [r3, #20]

	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <_msSendCmdGetData16+0xac>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	1df9      	adds	r1, r7, #7
 80022f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fc:	2201      	movs	r2, #1
 80022fe:	f002 fc96 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_Delay(10);
 8002302:	200a      	movs	r0, #10
 8002304:	f000 fb4e 	bl	80029a4 <HAL_Delay>
	HAL_SPI_Receive(_ms_hspi1, &data1, 1, 1000);
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <_msSendCmdGetData16+0xac>)
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	f107 010d 	add.w	r1, r7, #13
 8002310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002314:	2201      	movs	r2, #1
 8002316:	f002 fdce 	bl	8004eb6 <HAL_SPI_Receive>
	HAL_SPI_Receive(_ms_hspi1, &data2, 1, 1000);
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <_msSendCmdGetData16+0xac>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f107 010c 	add.w	r1, r7, #12
 8002322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002326:	2201      	movs	r2, #1
 8002328:	f002 fdc5 	bl	8004eb6 <HAL_SPI_Receive>

	_ms_nssPort->ODR |= _ms_nssPin;
 800232c:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <_msSendCmdGetData16+0xa4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <_msSendCmdGetData16+0xa8>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <_msSendCmdGetData16+0xa4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	615a      	str	r2, [r3, #20]

	uint16_t receiveData = data1;
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	81fb      	strh	r3, [r7, #14]
	receiveData = receiveData << 8;
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	81fb      	strh	r3, [r7, #14]
	receiveData |= data2;
 800234a:	7b3b      	ldrb	r3, [r7, #12]
 800234c:	461a      	mov	r2, r3
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	4313      	orrs	r3, r2
 8002352:	81fb      	strh	r3, [r7, #14]

	bufer[i] = receiveData;
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	89fa      	ldrh	r2, [r7, #14]
 800235e:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 8002360:	2014      	movs	r0, #20
 8002362:	f000 fb1f 	bl	80029a4 <HAL_Delay>

}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000057c 	.word	0x2000057c
 8002374:	20000580 	.word	0x20000580
 8002378:	20000578 	.word	0x20000578

0800237c <_msSendCmdGetData32>:
void _msSendCmdGetData32(uint8_t cmd, uint32_t bufer[]) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
	uint8_t presData[3];
	uint8_t tempData[3];

	_msSendCmd(MS_D1);
 8002388:	2044      	movs	r0, #68	@ 0x44
 800238a:	f7ff ff73 	bl	8002274 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 800238e:	200c      	movs	r0, #12
 8002390:	f000 fb08 	bl	80029a4 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 8002394:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	4b40      	ldr	r3, [pc, #256]	@ (800249c <_msSendCmdGetData32+0x120>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	43db      	mvns	r3, r3
 80023a0:	4619      	mov	r1, r3
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	400a      	ands	r2, r1
 80023a8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 80023aa:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <_msSendCmdGetData32+0x124>)
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	1df9      	adds	r1, r7, #7
 80023b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b4:	2201      	movs	r2, #1
 80023b6:	f002 fc3a 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, presData, 3, 1000);
 80023ba:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <_msSendCmdGetData32+0x124>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	f107 010c 	add.w	r1, r7, #12
 80023c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c6:	2203      	movs	r2, #3
 80023c8:	f002 fd75 	bl	8004eb6 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	4b32      	ldr	r3, [pc, #200]	@ (800249c <_msSendCmdGetData32+0x120>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	615a      	str	r2, [r3, #20]

	_msSendCmd(MS_D2);
 80023e0:	2054      	movs	r0, #84	@ 0x54
 80023e2:	f7ff ff47 	bl	8002274 <_msSendCmd>
	HAL_Delay(ADC_DELAY);
 80023e6:	200c      	movs	r0, #12
 80023e8:	f000 fadc 	bl	80029a4 <HAL_Delay>

	_ms_nssPort->ODR &= ~_ms_nssPin;
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <_msSendCmdGetData32+0x120>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(_ms_hspi1, &cmd, 1, 1000);
 8002402:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <_msSendCmdGetData32+0x124>)
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	1df9      	adds	r1, r7, #7
 8002408:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800240c:	2201      	movs	r2, #1
 800240e:	f002 fc0e 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_SPI_Receive(_ms_hspi1, tempData, 3, 1000);
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <_msSendCmdGetData32+0x124>)
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f107 0108 	add.w	r1, r7, #8
 800241a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241e:	2203      	movs	r2, #3
 8002420:	f002 fd49 	bl	8004eb6 <HAL_SPI_Receive>
	_ms_nssPort->ODR |= _ms_nssPin;
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <_msSendCmdGetData32+0x120>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <_msSendCmdGetData32+0x11c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	615a      	str	r2, [r3, #20]

	int32_t pres = presData[0];
 8002438:	7b3b      	ldrb	r3, [r7, #12]
 800243a:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	617b      	str	r3, [r7, #20]
	pres |= presData[1];
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	461a      	mov	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
	pres = pres << 8;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	617b      	str	r3, [r7, #20]
	pres |= presData[2];
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	461a      	mov	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

	int32_t temp = tempData[0];
 800245c:	7a3b      	ldrb	r3, [r7, #8]
 800245e:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	613b      	str	r3, [r7, #16]
	temp |= tempData[1];
 8002466:	7a7b      	ldrb	r3, [r7, #9]
 8002468:	461a      	mov	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
	temp = temp << 8;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	613b      	str	r3, [r7, #16]
	temp |= tempData[2];
 8002476:	7abb      	ldrb	r3, [r7, #10]
 8002478:	461a      	mov	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

	bufer[0] = pres;
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]
	bufer[1] = temp;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3304      	adds	r3, #4
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	601a      	str	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000057c 	.word	0x2000057c
 800249c:	20000580 	.word	0x20000580
 80024a0:	20000578 	.word	0x20000578

080024a4 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80024a8:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024aa:	4a0e      	ldr	r2, [pc, #56]	@ (80024e4 <MX_SDIO_SD_Init+0x40>)
 80024ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024c6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <MX_SDIO_SD_Init+0x3c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	200005ac 	.word	0x200005ac
 80024e4:	40012c00 	.word	0x40012c00

080024e8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a28      	ldr	r2, [pc, #160]	@ (80025a8 <HAL_SD_MspInit+0xc0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d14a      	bne.n	80025a0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	4a26      	ldr	r2, [pc, #152]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 8002514:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002518:	6453      	str	r3, [r2, #68]	@ 0x44
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a1f      	ldr	r2, [pc, #124]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_SD_MspInit+0xc4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800255e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002562:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002570:	230c      	movs	r3, #12
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	@ (80025b0 <HAL_SD_MspInit+0xc8>)
 800257c:	f000 fb1c 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002580:	2304      	movs	r3, #4
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002590:	230c      	movs	r3, #12
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	4806      	ldr	r0, [pc, #24]	@ (80025b4 <HAL_SD_MspInit+0xcc>)
 800259c:	f000 fb0c 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80025a0:	bf00      	nop
 80025a2:	3728      	adds	r7, #40	@ 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00

080025b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_SPI1_Init+0x64>)
 80025be:	4a18      	ldr	r2, [pc, #96]	@ (8002620 <MX_SPI1_Init+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_SPI1_Init+0x64>)
 80025c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ca:	4b14      	ldr	r3, [pc, #80]	@ (800261c <MX_SPI1_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <MX_SPI1_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <MX_SPI1_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <MX_SPI1_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_SPI1_Init+0x64>)
 80025e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <MX_SPI1_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <MX_SPI1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <MX_SPI1_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	@ (800261c <MX_SPI1_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <MX_SPI1_Init+0x64>)
 8002604:	220a      	movs	r2, #10
 8002606:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	@ (800261c <MX_SPI1_Init+0x64>)
 800260a:	f002 fa87 	bl	8004b1c <HAL_SPI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002614:	f7ff f9fa 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000630 	.word	0x20000630
 8002620:	40013000 	.word	0x40013000

08002624 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a19      	ldr	r2, [pc, #100]	@ (80026a8 <HAL_SPI_MspInit+0x84>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12b      	bne.n	800269e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b18      	ldr	r3, [pc, #96]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002650:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002654:	6453      	str	r3, [r2, #68]	@ 0x44
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a10      	ldr	r2, [pc, #64]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <HAL_SPI_MspInit+0x88>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23e0      	movs	r3, #224	@ 0xe0
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268e:	2305      	movs	r3, #5
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <HAL_SPI_MspInit+0x8c>)
 800269a:	f000 fa8d 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	@ 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40013000 	.word	0x40013000
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002700 <HAL_MspInit+0x4c>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	4a08      	ldr	r2, [pc, #32]	@ (8002700 <HAL_MspInit+0x4c>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <NMI_Handler+0x4>

0800270c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <HardFault_Handler+0x4>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <MemManage_Handler+0x4>

0800271c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <BusFault_Handler+0x4>

08002724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <UsageFault_Handler+0x4>

0800272c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275a:	f000 f903 	bl	8002964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <SystemInit+0x20>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <SystemInit+0x20>)
 8002770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <MX_USART1_UART_Init+0x50>)
 8002790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 8002794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027ae:	220c      	movs	r2, #12
 80027b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027be:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027c0:	f002 ff7e 	bl	80056c0 <HAL_UART_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027ca:	f7ff f91f 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000688 	.word	0x20000688
 80027d8:	40011000 	.word	0x40011000

080027dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_UART_MspInit+0x84>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d12c      	bne.n	8002858 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <HAL_UART_MspInit+0x88>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_UART_MspInit+0x88>)
 8002808:	f043 0310 	orr.w	r3, r3, #16
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <HAL_UART_MspInit+0x88>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_UART_MspInit+0x88>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a10      	ldr	r2, [pc, #64]	@ (8002864 <HAL_UART_MspInit+0x88>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_UART_MspInit+0x88>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002848:	2307      	movs	r3, #7
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4805      	ldr	r0, [pc, #20]	@ (8002868 <HAL_UART_MspInit+0x8c>)
 8002854:	f000 f9b0 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	@ 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40011000 	.word	0x40011000
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000

0800286c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800286c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002870:	f7ff ff78 	bl	8002764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002874:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002876:	490d      	ldr	r1, [pc, #52]	@ (80028ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002878:	4a0d      	ldr	r2, [pc, #52]	@ (80028b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800287c:	e002      	b.n	8002884 <LoopCopyDataInit>

0800287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002882:	3304      	adds	r3, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002888:	d3f9      	bcc.n	800287e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800288c:	4c0a      	ldr	r4, [pc, #40]	@ (80028b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002890:	e001      	b.n	8002896 <LoopFillZerobss>

08002892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002894:	3204      	adds	r2, #4

08002896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002898:	d3fb      	bcc.n	8002892 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800289a:	f006 ffa9 	bl	80097f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289e:	f7fe fcf5 	bl	800128c <main>
  bx  lr    
 80028a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ac:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80028b0:	0800a878 	.word	0x0800a878
  ldr r2, =_sbss
 80028b4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80028b8:	20000848 	.word	0x20000848

080028bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028bc:	e7fe      	b.n	80028bc <ADC_IRQHandler>
	...

080028c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_Init+0x40>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <HAL_Init+0x40>)
 80028d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_Init+0x40>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f000 f931 	bl	8002b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ee:	200f      	movs	r0, #15
 80028f0:	f000 f808 	bl	8002904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f4:	f7ff fede 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_InitTick+0x54>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_InitTick+0x58>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800291a:	fbb3 f3f1 	udiv	r3, r3, r1
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f93b 	bl	8002b9e <HAL_SYSTICK_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00e      	b.n	8002950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d80a      	bhi.n	800294e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002938:	2200      	movs	r2, #0
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f000 f911 	bl	8002b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002944:	4a06      	ldr	r2, [pc, #24]	@ (8002960 <HAL_InitTick+0x5c>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000038 	.word	0x20000038
 800295c:	20000040 	.word	0x20000040
 8002960:	2000003c 	.word	0x2000003c

08002964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_IncTick+0x20>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_IncTick+0x24>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4413      	add	r3, r2
 8002974:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <HAL_IncTick+0x24>)
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000040 	.word	0x20000040
 8002988:	200006d0 	.word	0x200006d0

0800298c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_GetTick+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	200006d0 	.word	0x200006d0

080029a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff ffee 	bl	800298c <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d005      	beq.n	80029ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_Delay+0x44>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ca:	bf00      	nop
 80029cc:	f7ff ffde 	bl	800298c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d8f7      	bhi.n	80029cc <HAL_Delay+0x28>
  {
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000040 	.word	0x20000040

080029ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x44>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1e:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x44>)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	60d3      	str	r3, [r2, #12]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <__NVIC_GetPriorityGrouping+0x18>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	f003 0307 	and.w	r3, r3, #7
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	@ (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	@ (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	@ 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b1c:	d301      	bcc.n	8002b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b22:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <SysTick_Config+0x40>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f7ff ff8e 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <SysTick_Config+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3a:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <SysTick_Config+0x40>)
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000e010 	.word	0xe000e010

08002b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff47 	bl	80029ec <__NVIC_SetPriorityGrouping>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff5c 	bl	8002a34 <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff8e 	bl	8002aa4 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5d 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffb0 	bl	8002b0c <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	@ 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e159      	b.n	8002e88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f040 8148 	bne.w	8002e82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d005      	beq.n	8002c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d130      	bne.n	8002c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 0201 	and.w	r2, r3, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d017      	beq.n	8002ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d123      	bne.n	8002cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	08da      	lsrs	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3208      	adds	r2, #8
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	08da      	lsrs	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3208      	adds	r2, #8
 8002cf6:	69b9      	ldr	r1, [r7, #24]
 8002cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a2 	beq.w	8002e82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b57      	ldr	r3, [pc, #348]	@ (8002ea0 <HAL_GPIO_Init+0x2e8>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	4a56      	ldr	r2, [pc, #344]	@ (8002ea0 <HAL_GPIO_Init+0x2e8>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ea0 <HAL_GPIO_Init+0x2e8>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ea4 <HAL_GPIO_Init+0x2ec>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a49      	ldr	r2, [pc, #292]	@ (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x202>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a48      	ldr	r2, [pc, #288]	@ (8002eac <HAL_GPIO_Init+0x2f4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x1fe>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a47      	ldr	r2, [pc, #284]	@ (8002eb0 <HAL_GPIO_Init+0x2f8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x1fa>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a46      	ldr	r2, [pc, #280]	@ (8002eb4 <HAL_GPIO_Init+0x2fc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x1f6>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a45      	ldr	r2, [pc, #276]	@ (8002eb8 <HAL_GPIO_Init+0x300>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x1f2>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x204>
 8002daa:	2307      	movs	r3, #7
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x204>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x204>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x204>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x204>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4935      	ldr	r1, [pc, #212]	@ (8002ea4 <HAL_GPIO_Init+0x2ec>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dda:	4b38      	ldr	r3, [pc, #224]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e04:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e28:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2e:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e52:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e58:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ebc <HAL_GPIO_Init+0x304>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f aea2 	bls.w	8002bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002edc:	e003      	b.n	8002ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	041a      	lsls	r2, r3, #16
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	400b      	ands	r3, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e267      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d075      	beq.n	8003032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00c      	beq.n	8002f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b85      	ldr	r3, [pc, #532]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d112      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05b      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d157      	bne.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e242      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x74>
 8002f8e:	4b76      	ldr	r3, [pc, #472]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a75      	ldr	r2, [pc, #468]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x98>
 8002fa6:	4b70      	ldr	r3, [pc, #448]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6f      	ldr	r2, [pc, #444]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002fc0:	4b69      	ldr	r3, [pc, #420]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a68      	ldr	r2, [pc, #416]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b66      	ldr	r3, [pc, #408]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a65      	ldr	r2, [pc, #404]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fcd4 	bl	800298c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7ff fcd0 	bl	800298c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e207      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7ff fcc0 	bl	800298c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7ff fcbc 	bl	800298c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1f3      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b51      	ldr	r3, [pc, #324]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800303e:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b47      	ldr	r3, [pc, #284]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c7      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4937      	ldr	r1, [pc, #220]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b34      	ldr	r3, [pc, #208]	@ (800316c <HAL_RCC_OscConfig+0x244>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7ff fc75 	bl	800298c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7ff fc71 	bl	800298c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a8      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4925      	ldr	r1, [pc, #148]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCC_OscConfig+0x244>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff fc54 	bl	800298c <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff fc50 	bl	800298c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e187      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_RCC_OscConfig+0x248>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7ff fc34 	bl	800298c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7ff fc30 	bl	800298c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e167      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800313c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x200>
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_RCC_OscConfig+0x248>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7ff fc1d 	bl	800298c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	e00e      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003156:	f7ff fc19 	bl	800298c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d907      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e150      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b88      	ldr	r3, [pc, #544]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ea      	bne.n	8003156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b81      	ldr	r3, [pc, #516]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b77      	ldr	r3, [pc, #476]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b74      	ldr	r3, [pc, #464]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7ff fbd9 	bl	800298c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7ff fbd5 	bl	800298c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e10c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b6a      	ldr	r3, [pc, #424]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x2ea>
 8003204:	4b64      	ldr	r3, [pc, #400]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003208:	4a63      	ldr	r2, [pc, #396]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x30c>
 800321a:	4b5f      	ldr	r3, [pc, #380]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	4a5e      	ldr	r2, [pc, #376]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	@ 0x70
 8003226:	4b5c      	ldr	r3, [pc, #368]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	4a5b      	ldr	r2, [pc, #364]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	@ 0x70
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003234:	4b58      	ldr	r3, [pc, #352]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	4a57      	ldr	r2, [pc, #348]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003240:	4b55      	ldr	r3, [pc, #340]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003244:	4a54      	ldr	r2, [pc, #336]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7ff fb9a 	bl	800298c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7ff fb96 	bl	800298c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0cb      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b49      	ldr	r3, [pc, #292]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ee      	beq.n	800325c <HAL_RCC_OscConfig+0x334>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7ff fb84 	bl	800298c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7ff fb80 	bl	800298c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0b5      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	4b3e      	ldr	r3, [pc, #248]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ee      	bne.n	8003288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	4a38      	ldr	r2, [pc, #224]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a1 	beq.w	8003408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c6:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d05c      	beq.n	800338c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d141      	bne.n	800335e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <HAL_RCC_OscConfig+0x478>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7ff fb54 	bl	800298c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7ff fb50 	bl	800298c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e087      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	491b      	ldr	r1, [pc, #108]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7ff fb29 	bl	800298c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7ff fb25 	bl	800298c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e05c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x416>
 800335c:	e054      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff fb12 	bl	800298c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7ff fb0e 	bl	800298c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e045      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x444>
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e038      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_RCC_OscConfig+0x4ec>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d028      	beq.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d121      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	4293      	cmp	r3, r2
 80033de:	d111      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0cc      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b68      	ldr	r3, [pc, #416]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d90c      	bls.n	8003454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b65      	ldr	r3, [pc, #404]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b63      	ldr	r3, [pc, #396]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0b8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a58      	ldr	r2, [pc, #352]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003484:	4b53      	ldr	r3, [pc, #332]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a52      	ldr	r2, [pc, #328]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800348e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	494d      	ldr	r1, [pc, #308]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d044      	beq.n	8003538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d119      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	4b3f      	ldr	r3, [pc, #252]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e6:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e067      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4934      	ldr	r1, [pc, #208]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003508:	f7ff fa40 	bl	800298c <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7ff fa3c 	bl	800298c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e04f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b25      	ldr	r3, [pc, #148]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d20c      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b22      	ldr	r3, [pc, #136]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b20      	ldr	r3, [pc, #128]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e032      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4916      	ldr	r1, [pc, #88]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358a:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	490e      	ldr	r1, [pc, #56]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359e:	f000 f821 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	490a      	ldr	r1, [pc, #40]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	5ccb      	ldrb	r3, [r1, r3]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a09      	ldr	r2, [pc, #36]	@ (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f9a0 	bl	8002904 <HAL_InitTick>

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	0800a77c 	.word	0x0800a77c
 80035dc:	20000038 	.word	0x20000038
 80035e0:	2000003c 	.word	0x2000003c

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e8:	b090      	sub	sp, #64	@ 0x40
 80035ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035fc:	4b59      	ldr	r3, [pc, #356]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d00d      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x40>
 8003608:	2b08      	cmp	r3, #8
 800360a:	f200 80a1 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x16c>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x34>
 8003612:	2b04      	cmp	r3, #4
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x3a>
 8003616:	e09b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x184>)
 800361a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800361c:	e09b      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361e:	4b53      	ldr	r3, [pc, #332]	@ (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 8003620:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003622:	e098      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003624:	4b4f      	ldr	r3, [pc, #316]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362e:	4b4d      	ldr	r3, [pc, #308]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363a:	4b4a      	ldr	r3, [pc, #296]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	2200      	movs	r2, #0
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	627a      	str	r2, [r7, #36]	@ 0x24
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800364c:	2100      	movs	r1, #0
 800364e:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 8003650:	fb03 f201 	mul.w	r2, r3, r1
 8003654:	2300      	movs	r3, #0
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	4413      	add	r3, r2
 800365c:	4a43      	ldr	r2, [pc, #268]	@ (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 800365e:	fba0 1202 	umull	r1, r2, r0, r2
 8003662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003664:	460a      	mov	r2, r1
 8003666:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800366a:	4413      	add	r3, r2
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003670:	2200      	movs	r2, #0
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	61fa      	str	r2, [r7, #28]
 8003676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800367a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800367e:	f7fd fa8f 	bl	8000ba0 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4613      	mov	r3, r2
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368a:	e053      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368c:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	2200      	movs	r2, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	617a      	str	r2, [r7, #20]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800369e:	f04f 0b00 	mov.w	fp, #0
 80036a2:	4652      	mov	r2, sl
 80036a4:	465b      	mov	r3, fp
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	ebb2 080a 	subs.w	r8, r2, sl
 80036be:	eb63 090b 	sbc.w	r9, r3, fp
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036d6:	ebb2 0408 	subs.w	r4, r2, r8
 80036da:	eb63 0509 	sbc.w	r5, r3, r9
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	00eb      	lsls	r3, r5, #3
 80036e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ec:	00e2      	lsls	r2, r4, #3
 80036ee:	4614      	mov	r4, r2
 80036f0:	461d      	mov	r5, r3
 80036f2:	eb14 030a 	adds.w	r3, r4, sl
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	eb45 030b 	adc.w	r3, r5, fp
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370a:	4629      	mov	r1, r5
 800370c:	028b      	lsls	r3, r1, #10
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003714:	4621      	mov	r1, r4
 8003716:	028a      	lsls	r2, r1, #10
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	2200      	movs	r2, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	60fa      	str	r2, [r7, #12]
 8003724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003728:	f7fd fa3a 	bl	8000ba0 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003744:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x184>)
 8003752:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003758:	4618      	mov	r0, r3
 800375a:	3740      	adds	r7, #64	@ 0x40
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	017d7840 	.word	0x017d7840

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000038 	.word	0x20000038

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0a9b      	lsrs	r3, r3, #10
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	@ (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	0800a78c 	.word	0x0800a78c

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b4:	f7ff ffdc 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0b5b      	lsrs	r3, r3, #13
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	@ (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	0800a78c 	.word	0x0800a78c

080037d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7fe fe73 	bl	80024e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f814 	bl	8003838 <HAL_SD_InitCard>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00a      	b.n	8003830 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b08e      	sub	sp, #56	@ 0x38
 800383c:	af04      	add	r7, sp, #16
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003854:	2376      	movs	r3, #118	@ 0x76
 8003856:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681d      	ldr	r5, [r3, #0]
 800385c:	466c      	mov	r4, sp
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003870:	4628      	mov	r0, r5
 8003872:	f002 fbc7 	bl	8006004 <SDIO_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800387c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e04f      	b.n	8003928 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003888:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <HAL_SD_InitCard+0xf8>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fbff 	bl	8006096 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003898:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <HAL_SD_InitCard+0xf8>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800389e:	2002      	movs	r0, #2
 80038a0:	f7ff f880 	bl	80029a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 ff13 	bl	80046d0 <SD_PowerON>
 80038aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e02e      	b.n	8003928 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fe32 	bl	8004534 <SD_InitCard>
 80038d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e01b      	b.n	8003928 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fc5e 	bl	80061ba <SDMMC_CmdBlockLength>
 80038fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00f      	beq.n	8003926 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_SD_InitCard+0xfc>)
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3728      	adds	r7, #40	@ 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bdb0      	pop	{r4, r5, r7, pc}
 8003930:	422580a0 	.word	0x422580a0
 8003934:	004005ff 	.word	0x004005ff

08003938 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b092      	sub	sp, #72	@ 0x48
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7ff f821 	bl	800298c <HAL_GetTick>
 800394a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e1c5      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	f040 81b8 	bne.w	8003ce8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800397e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	441a      	add	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003988:	429a      	cmp	r2, r3
 800398a:	d907      	bls.n	800399c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e1ac      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2203      	movs	r2, #3
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d002      	beq.n	80039ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80039b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b6:	025b      	lsls	r3, r3, #9
 80039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	025b      	lsls	r3, r3, #9
 80039c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80039c6:	2390      	movs	r3, #144	@ 0x90
 80039c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039ca:	2302      	movs	r3, #2
 80039cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f107 0214 	add.w	r2, r7, #20
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 fbbe 	bl	8006162 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d90a      	bls.n	8003a02 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2202      	movs	r2, #2
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 fc22 	bl	8006242 <SDMMC_CmdReadMultiBlock>
 80039fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8003a00:	e009      	b.n	8003a16 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 fbf5 	bl	80061fe <SDMMC_CmdReadSingleBlock>
 8003a14:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7e      	ldr	r2, [pc, #504]	@ (8003c1c <HAL_SD_ReadBlocks+0x2e4>)
 8003a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e159      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a46:	e061      	b.n	8003b0c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d03c      	beq.n	8003ad0 <HAL_SD_ReadBlocks+0x198>
 8003a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d039      	beq.n	8003ad0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a60:	e033      	b.n	8003aca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f002 faf7 	bl	800605a <SDIO_ReadFIFO>
 8003a6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a78:	3301      	adds	r3, #1
 8003a7a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8e:	3301      	adds	r3, #1
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a94:	3b01      	subs	r3, #1
 8003a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	0e1b      	lsrs	r3, r3, #24
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	3301      	adds	r3, #1
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003acc:	2b07      	cmp	r3, #7
 8003ace:	d9c8      	bls.n	8003a62 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ad0:	f7fe ff5c 	bl	800298c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d902      	bls.n	8003ae6 <HAL_SD_ReadBlocks+0x1ae>
 8003ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d112      	bne.n	8003b0c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a4c      	ldr	r2, [pc, #304]	@ (8003c1c <HAL_SD_ReadBlocks+0x2e4>)
 8003aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0f4      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b12:	f240 332a 	movw	r3, #810	@ 0x32a
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d095      	beq.n	8003a48 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d022      	beq.n	8003b70 <HAL_SD_ReadBlocks+0x238>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d91f      	bls.n	8003b70 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d01b      	beq.n	8003b70 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 fbe7 	bl	8006310 <SDMMC_CmdStopTransfer>
 8003b42:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a33      	ldr	r2, [pc, #204]	@ (8003c1c <HAL_SD_ReadBlocks+0x2e4>)
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0c2      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_SD_ReadBlocks+0x254>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <HAL_SD_ReadBlocks+0x2e4>)
 8003b92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	f043 0208 	orr.w	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0a1      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d012      	beq.n	8003be6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <HAL_SD_ReadBlocks+0x2e4>)
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	f043 0202 	orr.w	r2, r3, #2
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e087      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d064      	beq.n	8003cbe <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a08      	ldr	r2, [pc, #32]	@ (8003c1c <HAL_SD_ReadBlocks+0x2e4>)
 8003bfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06d      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
 8003c1a:	bf00      	nop
 8003c1c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 fa18 	bl	800605a <SDIO_ReadFIFO>
 8003c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c32:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	3301      	adds	r3, #1
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c48:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c52:	3b01      	subs	r3, #1
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	3301      	adds	r3, #1
 8003c64:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6e:	0e1b      	lsrs	r3, r3, #24
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c74:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c78:	3301      	adds	r3, #1
 8003c7a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003c82:	f7fe fe83 	bl	800298c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d902      	bls.n	8003c98 <HAL_SD_ReadBlocks+0x360>
 8003c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d112      	bne.n	8003cbe <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_SD_ReadBlocks+0x3c8>)
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e01b      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SD_ReadBlocks+0x39a>
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1a6      	bne.n	8003c20 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e006      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3748      	adds	r7, #72	@ 0x48
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	004005ff 	.word	0x004005ff

08003d04 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b092      	sub	sp, #72	@ 0x48
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d12:	f7fe fe3b 	bl	800298c <HAL_GetTick>
 8003d16:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e16d      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	f040 8160 	bne.w	8004004 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	441a      	add	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d907      	bls.n	8003d68 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e154      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2200      	movs	r2, #0
 8003d76:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d002      	beq.n	8003d86 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	025b      	lsls	r3, r3, #9
 8003d84:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	025b      	lsls	r3, r3, #9
 8003d90:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d92:	2390      	movs	r3, #144	@ 0x90
 8003d94:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f107 0218 	add.w	r2, r7, #24
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 f9d8 	bl	8006162 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d90a      	bls.n	8003dce <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 fa80 	bl	80062ca <SDMMC_CmdWriteMultiBlock>
 8003dca:	6478      	str	r0, [r7, #68]	@ 0x44
 8003dcc:	e009      	b.n	8003de2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f002 fa53 	bl	8006286 <SDMMC_CmdWriteSingleBlock>
 8003de0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a8b      	ldr	r2, [pc, #556]	@ (800401c <HAL_SD_WriteBlocks+0x318>)
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e101      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e12:	e065      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d040      	beq.n	8003ea4 <HAL_SD_WriteBlocks+0x1a0>
 8003e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d03d      	beq.n	8003ea4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e2c:	e037      	b.n	8003e9e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	3301      	adds	r3, #1
 8003e38:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4e:	3301      	adds	r3, #1
 8003e50:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	3b01      	subs	r3, #1
 8003e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	3301      	adds	r3, #1
 8003e68:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	061a      	lsls	r2, r3, #24
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7e:	3301      	adds	r3, #1
 8003e80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e84:	3b01      	subs	r3, #1
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f107 0214 	add.w	r2, r7, #20
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f002 f8ee 	bl	8006074 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea0:	2b07      	cmp	r3, #7
 8003ea2:	d9c4      	bls.n	8003e2e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ea4:	f7fe fd72 	bl	800298c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d902      	bls.n	8003eba <HAL_SD_WriteBlocks+0x1b6>
 8003eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d112      	bne.n	8003ee0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a57      	ldr	r2, [pc, #348]	@ (800401c <HAL_SD_WriteBlocks+0x318>)
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e098      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee6:	f240 331a 	movw	r3, #794	@ 0x31a
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d091      	beq.n	8003e14 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d022      	beq.n	8003f44 <HAL_SD_WriteBlocks+0x240>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d91f      	bls.n	8003f44 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d01b      	beq.n	8003f44 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f002 f9fd 	bl	8006310 <SDMMC_CmdStopTransfer>
 8003f16:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a3e      	ldr	r2, [pc, #248]	@ (800401c <HAL_SD_WriteBlocks+0x318>)
 8003f24:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e066      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_SD_WriteBlocks+0x25c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	@ (800401c <HAL_SD_WriteBlocks+0x318>)
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	f043 0208 	orr.w	r2, r3, #8
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e045      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d012      	beq.n	8003fba <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a20      	ldr	r2, [pc, #128]	@ (800401c <HAL_SD_WriteBlocks+0x318>)
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	f043 0202 	orr.w	r2, r3, #2
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02b      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	@ (800401c <HAL_SD_WriteBlocks+0x318>)
 8003fce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	f043 0210 	orr.w	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e011      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003ff6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e006      	b.n	8004012 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3748      	adds	r7, #72	@ 0x48
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	004005ff 	.word	0x004005ff

08004020 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402e:	0f9b      	lsrs	r3, r3, #30
 8004030:	b2da      	uxtb	r2, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800403a:	0e9b      	lsrs	r3, r3, #26
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	b2da      	uxtb	r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404c:	0e1b      	lsrs	r3, r3, #24
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	b2da      	uxtb	r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	b2da      	uxtb	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b2da      	uxtb	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004076:	b2da      	uxtb	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004080:	0d1b      	lsrs	r3, r3, #20
 8004082:	b29a      	uxth	r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	b2da      	uxtb	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800409e:	0bdb      	lsrs	r3, r3, #15
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b0:	0b9b      	lsrs	r3, r3, #14
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c2:	0b5b      	lsrs	r3, r3, #13
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040d4:	0b1b      	lsrs	r3, r3, #12
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d163      	bne.n	80041b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f4:	009a      	lsls	r2, r3, #2
 80040f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004100:	0f92      	lsrs	r2, r2, #30
 8004102:	431a      	orrs	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800410c:	0edb      	lsrs	r3, r3, #27
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	b2da      	uxtb	r2, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411e:	0e1b      	lsrs	r3, r3, #24
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004130:	0d5b      	lsrs	r3, r3, #21
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004142:	0c9b      	lsrs	r3, r3, #18
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004154:	0bdb      	lsrs	r3, r3, #15
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	b2da      	uxtb	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	7e1b      	ldrb	r3, [r3, #24]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	3302      	adds	r3, #2
 8004178:	2201      	movs	r2, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004182:	fb03 f202 	mul.w	r2, r3, r2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7a1b      	ldrb	r3, [r3, #8]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80041a4:	0a52      	lsrs	r2, r2, #9
 80041a6:	fb03 f202 	mul.w	r2, r3, r2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80041b6:	e031      	b.n	800421c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d11d      	bne.n	80041fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	3301      	adds	r3, #1
 80041dc:	029a      	lsls	r2, r3, #10
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041f0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80041fa:	e00f      	b.n	800421c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <HAL_SD_GetCardCSD+0x344>)
 8004202:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e09d      	b.n	8004358 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004220:	0b9b      	lsrs	r3, r3, #14
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	b2da      	uxtb	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004232:	09db      	lsrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423a:	b2da      	uxtb	r2, r3
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424a:	b2da      	uxtb	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004254:	0fdb      	lsrs	r3, r3, #31
 8004256:	b2da      	uxtb	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004260:	0f5b      	lsrs	r3, r3, #29
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	b2da      	uxtb	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	b2da      	uxtb	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004284:	0d9b      	lsrs	r3, r3, #22
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	b2da      	uxtb	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	0d5b      	lsrs	r3, r3, #21
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	0bdb      	lsrs	r3, r3, #15
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	0b9b      	lsrs	r3, r3, #14
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	0b5b      	lsrs	r3, r3, #13
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	0b1b      	lsrs	r3, r3, #12
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	0a9b      	lsrs	r3, r3, #10
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	b2da      	uxtb	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	b2da      	uxtb	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004346:	b2da      	uxtb	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	004005ff 	.word	0x004005ff

08004368 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80043c0:	b5b0      	push	{r4, r5, r7, lr}
 80043c2:	b08e      	sub	sp, #56	@ 0x38
 80043c4:	af04      	add	r7, sp, #16
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2203      	movs	r2, #3
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d02e      	beq.n	800443e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	d106      	bne.n	80043f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80043f4:	e029      	b.n	800444a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fc:	d10a      	bne.n	8004414 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa1c 	bl	800483c <SD_WideBus_Enable>
 8004404:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	639a      	str	r2, [r3, #56]	@ 0x38
 8004412:	e01a      	b.n	800444a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa59 	bl	80048d2 <SD_WideBus_Disable>
 8004420:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38
 800442e:	e00c      	b.n	800444a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	@ 0x38
 800443c:	e005      	b.n	800444a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004442:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004468:	e01f      	b.n	80044aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681d      	ldr	r5, [r3, #0]
 8004490:	466c      	mov	r4, sp
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800449a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a4:	4628      	mov	r0, r5
 80044a6:	f001 fdad 	bl	8006004 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 fe81 	bl	80061ba <SDMMC_CmdBlockLength>
 80044b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80044c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80044e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3728      	adds	r7, #40	@ 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bdb0      	pop	{r4, r5, r7, pc}
 80044ee:	bf00      	nop
 80044f0:	004005ff 	.word	0x004005ff

080044f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004500:	f107 030c 	add.w	r3, r7, #12
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f970 	bl	80047ec <SD_SendStatus>
 800450c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	0a5b      	lsrs	r3, r3, #9
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800452a:	693b      	ldr	r3, [r7, #16]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004534:	b5b0      	push	{r4, r5, r7, lr}
 8004536:	b094      	sub	sp, #80	@ 0x50
 8004538:	af04      	add	r7, sp, #16
 800453a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f001 fdb4 	bl	80060b2 <SDIO_GetPowerState>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004550:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004554:	e0b8      	b.n	80046c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	2b03      	cmp	r3, #3
 800455c:	d02f      	beq.n	80045be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f001 ffde 	bl	8006524 <SDMMC_CmdSendCID>
 8004568:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800456a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <SD_InitCard+0x40>
    {
      return errorstate;
 8004570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004572:	e0a9      	b.n	80046c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fdde 	bl	800613c <SDIO_GetResponse>
 8004580:	4602      	mov	r2, r0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2104      	movs	r1, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fdd5 	bl	800613c <SDIO_GetResponse>
 8004592:	4602      	mov	r2, r0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2108      	movs	r1, #8
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fdcc 	bl	800613c <SDIO_GetResponse>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	210c      	movs	r1, #12
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 fdc3 	bl	800613c <SDIO_GetResponse>
 80045b6:	4602      	mov	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d00d      	beq.n	80045e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f107 020e 	add.w	r2, r7, #14
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f001 ffe4 	bl	800659e <SDMMC_CmdSetRelAdd>
 80045d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80045de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e0:	e072      	b.n	80046c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d036      	beq.n	8004658 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f001 ffae 	bl	8006560 <SDMMC_CmdSendCSD>
 8004604:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SD_InitCard+0xdc>
    {
      return errorstate;
 800460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460e:	e05b      	b.n	80046c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fd90 	bl	800613c <SDIO_GetResponse>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2104      	movs	r1, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f001 fd87 	bl	800613c <SDIO_GetResponse>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2108      	movs	r1, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fd7e 	bl	800613c <SDIO_GetResponse>
 8004640:	4602      	mov	r2, r0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	210c      	movs	r1, #12
 800464c:	4618      	mov	r0, r3
 800464e:	f001 fd75 	bl	800613c <SDIO_GetResponse>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2104      	movs	r1, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f001 fd6c 	bl	800613c <SDIO_GetResponse>
 8004664:	4603      	mov	r3, r0
 8004666:	0d1a      	lsrs	r2, r3, #20
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fcd4 	bl	8004020 <HAL_SD_GetCardCSD>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800467e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004682:	e021      	b.n	80046c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	2200      	movs	r2, #0
 8004690:	461c      	mov	r4, r3
 8004692:	4615      	mov	r5, r2
 8004694:	4622      	mov	r2, r4
 8004696:	462b      	mov	r3, r5
 8004698:	4608      	mov	r0, r1
 800469a:	f001 fe5b 	bl	8006354 <SDMMC_CmdSelDesel>
 800469e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <SD_InitCard+0x176>
  {
    return errorstate;
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a8:	e00e      	b.n	80046c8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681d      	ldr	r5, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	466c      	mov	r4, sp
 80046b2:	f103 0210 	add.w	r2, r3, #16
 80046b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80046b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046bc:	3304      	adds	r3, #4
 80046be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046c0:	4628      	mov	r0, r5
 80046c2:	f001 fc9f 	bl	8006004 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3740      	adds	r7, #64	@ 0x40
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bdb0      	pop	{r4, r5, r7, pc}

080046d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fe56 	bl	800639a <SDMMC_CmdGoIdleState>
 80046ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	e072      	b.n	80047e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 fe69 	bl	80063d6 <SDMMC_CmdOperCond>
 8004704:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fe3f 	bl	800639a <SDMMC_CmdGoIdleState>
 800471c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	e05b      	b.n	80047e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004732:	2b01      	cmp	r3, #1
 8004734:	d137      	bne.n	80047a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fe69 	bl	8006414 <SDMMC_CmdAppCommand>
 8004742:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02d      	beq.n	80047a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800474a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800474e:	e047      	b.n	80047e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f001 fe5c 	bl	8006414 <SDMMC_CmdAppCommand>
 800475c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <SD_PowerON+0x98>
    {
      return errorstate;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	e03b      	b.n	80047e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	491e      	ldr	r1, [pc, #120]	@ (80047e8 <SD_PowerON+0x118>)
 800476e:	4618      	mov	r0, r3
 8004770:	f001 fe72 	bl	8006458 <SDMMC_CmdAppOperCommand>
 8004774:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800477c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004780:	e02e      	b.n	80047e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fcd7 	bl	800613c <SDIO_GetResponse>
 800478e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	0fdb      	lsrs	r3, r3, #31
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <SD_PowerON+0xcc>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <SD_PowerON+0xce>
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]

    count++;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d802      	bhi.n	80047b6 <SD_PowerON+0xe6>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0cc      	beq.n	8004750 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80047bc:	4293      	cmp	r3, r2
 80047be:	d902      	bls.n	80047c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80047c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047c4:	e00c      	b.n	80047e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80047d6:	e002      	b.n	80047de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	c1100000 	.word	0xc1100000

080047ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80047fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004800:	e018      	b.n	8004834 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f001 fee6 	bl	80065e0 <SDMMC_CmdSendStatus>
 8004814:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <SD_SendStatus+0x34>
  {
    return errorstate;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e009      	b.n	8004834 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f001 fc88 	bl	800613c <SDIO_GetResponse>
 800482c:	4602      	mov	r2, r0
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fc72 	bl	800613c <SDIO_GetResponse>
 8004858:	4603      	mov	r3, r0
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004862:	d102      	bne.n	800486a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004864:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004868:	e02f      	b.n	80048ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f879 	bl	8004968 <SD_FindSCR>
 8004876:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	e023      	b.n	80048ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01c      	beq.n	80048c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f001 fdbb 	bl	8006414 <SDMMC_CmdAppCommand>
 800489e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	e00f      	b.n	80048ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2102      	movs	r1, #2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 fdf4 	bl	800649e <SDMMC_CmdBusWidth>
 80048b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	e003      	b.n	80048ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e001      	b.n	80048ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 fc27 	bl	800613c <SDIO_GetResponse>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048f8:	d102      	bne.n	8004900 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048fe:	e02f      	b.n	8004960 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f82e 	bl	8004968 <SD_FindSCR>
 800490c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	e023      	b.n	8004960 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01c      	beq.n	800495c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f001 fd70 	bl	8006414 <SDMMC_CmdAppCommand>
 8004934:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	e00f      	b.n	8004960 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f001 fda9 	bl	800649e <SDMMC_CmdBusWidth>
 800494c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e003      	b.n	8004960 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004958:	2300      	movs	r3, #0
 800495a:	e001      	b.n	8004960 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800495c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b08f      	sub	sp, #60	@ 0x3c
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004972:	f7fe f80b 	bl	800298c <HAL_GetTick>
 8004976:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2108      	movs	r1, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fc13 	bl	80061ba <SDMMC_CmdBlockLength>
 8004994:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	e0b9      	b.n	8004b14 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f001 fd31 	bl	8006414 <SDMMC_CmdAppCommand>
 80049b2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <SD_FindSCR+0x56>
  {
    return errorstate;
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	e0aa      	b.n	8004b14 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80049c4:	2308      	movs	r3, #8
 80049c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80049c8:	2330      	movs	r3, #48	@ 0x30
 80049ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80049cc:	2302      	movs	r3, #2
 80049ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f107 0210 	add.w	r2, r7, #16
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fbbd 	bl	8006162 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fd78 	bl	80064e2 <SDMMC_CmdSendSCR>
 80049f2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02a      	beq.n	8004a50 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	e08a      	b.n	8004b14 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00f      	beq.n	8004a2c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	f107 0208 	add.w	r2, r7, #8
 8004a18:	18d4      	adds	r4, r2, r3
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	f001 fb1d 	bl	800605a <SDIO_ReadFIFO>
 8004a20:	4603      	mov	r3, r0
 8004a22:	6023      	str	r3, [r4, #0]
      index++;
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	3301      	adds	r3, #1
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a2a:	e006      	b.n	8004a3a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d012      	beq.n	8004a60 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004a3a:	f7fd ffa7 	bl	800298c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d102      	bne.n	8004a50 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004a4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004a4e:	e061      	b.n	8004b14 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a56:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0cf      	beq.n	80049fe <SD_FindSCR+0x96>
 8004a5e:	e000      	b.n	8004a62 <SD_FindSCR+0xfa>
      break;
 8004a60:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <SD_FindSCR+0x116>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2208      	movs	r2, #8
 8004a84:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004a86:	2308      	movs	r3, #8
 8004a88:	e044      	b.n	8004b14 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e037      	b.n	8004b14 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004aba:	2320      	movs	r3, #32
 8004abc:	e02a      	b.n	8004b14 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	061a      	lsls	r2, r3, #24
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ad4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0a1b      	lsrs	r3, r3, #8
 8004ada:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ade:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	0e1b      	lsrs	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	601a      	str	r2, [r3, #0]
    scr++;
 8004aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aec:	3304      	adds	r3, #4
 8004aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	061a      	lsls	r2, r3, #24
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004afc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	373c      	adds	r7, #60	@ 0x3c
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd90      	pop	{r4, r7, pc}

08004b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07b      	b.n	8004c26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b3e:	d009      	beq.n	8004b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
 8004b46:	e005      	b.n	8004b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fd58 	bl	8002624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd8:	ea42 0103 	orr.w	r1, r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0104 	and.w	r1, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	f003 0210 	and.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c3e:	f7fd fea5 	bl	800298c <HAL_GetTick>
 8004c42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
 8004c56:	e12a      	b.n	8004eae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Transmit+0x36>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e122      	b.n	8004eae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_SPI_Transmit+0x48>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e11b      	b.n	8004eae <HAL_SPI_Transmit+0x280>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2203      	movs	r2, #3
 8004c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	88fa      	ldrh	r2, [r7, #6]
 8004c96:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ce4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d007      	beq.n	8004d04 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d0c:	d152      	bne.n	8004db4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0xee>
 8004d16:	8b7b      	ldrh	r3, [r7, #26]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d145      	bne.n	8004da8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d40:	e032      	b.n	8004da8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d112      	bne.n	8004d76 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d74:	e018      	b.n	8004da8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d76:	f7fd fe09 	bl	800298c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d803      	bhi.n	8004d8e <HAL_SPI_Transmit+0x160>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d102      	bne.n	8004d94 <HAL_SPI_Transmit+0x166>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e082      	b.n	8004eae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1c7      	bne.n	8004d42 <HAL_SPI_Transmit+0x114>
 8004db2:	e053      	b.n	8004e5c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Transmit+0x194>
 8004dbc:	8b7b      	ldrh	r3, [r7, #26]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d147      	bne.n	8004e52 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004de8:	e033      	b.n	8004e52 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d113      	bne.n	8004e20 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e1e:	e018      	b.n	8004e52 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e20:	f7fd fdb4 	bl	800298c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d803      	bhi.n	8004e38 <HAL_SPI_Transmit+0x20a>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d102      	bne.n	8004e3e <HAL_SPI_Transmit+0x210>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e02d      	b.n	8004eae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1c6      	bne.n	8004dea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fbd9 	bl	8005618 <SPI_EndRxTxTransaction>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b088      	sub	sp, #32
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d001      	beq.n	8004ed6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e104      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ede:	d112      	bne.n	8004f06 <HAL_SPI_Receive+0x50>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10e      	bne.n	8004f06 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2204      	movs	r2, #4
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f8f3 	bl	80050e8 <HAL_SPI_TransmitReceive>
 8004f02:	4603      	mov	r3, r0
 8004f04:	e0ec      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f06:	f7fd fd41 	bl	800298c <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_Receive+0x62>
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0e1      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_SPI_Receive+0x74>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0da      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2204      	movs	r2, #4
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f78:	d10f      	bne.n	8004f9a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d007      	beq.n	8004fb8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d170      	bne.n	80050a2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fc0:	e035      	b.n	800502e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d115      	bne.n	8004ffc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f103 020c 	add.w	r2, r3, #12
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ffa:	e018      	b.n	800502e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffc:	f7fd fcc6 	bl	800298c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d803      	bhi.n	8005014 <HAL_SPI_Receive+0x15e>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d102      	bne.n	800501a <HAL_SPI_Receive+0x164>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e058      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1c4      	bne.n	8004fc2 <HAL_SPI_Receive+0x10c>
 8005038:	e038      	b.n	80050ac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d113      	bne.n	8005070 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	b292      	uxth	r2, r2
 8005054:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505a:	1c9a      	adds	r2, r3, #2
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800506e:	e018      	b.n	80050a2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005070:	f7fd fc8c 	bl	800298c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d803      	bhi.n	8005088 <HAL_SPI_Receive+0x1d2>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d102      	bne.n	800508e <HAL_SPI_Receive+0x1d8>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e01e      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1c6      	bne.n	800503a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fa4b 	bl	800554c <SPI_EndRxTransaction>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80050de:	2300      	movs	r3, #0
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	@ 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050f6:	2301      	movs	r3, #1
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050fa:	f7fd fc47 	bl	800298c <HAL_GetTick>
 80050fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005106:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005112:	7ffb      	ldrb	r3, [r7, #31]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d00c      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x4a>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511e:	d106      	bne.n	800512e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <HAL_SPI_TransmitReceive+0x46>
 8005128:	7ffb      	ldrb	r3, [r7, #31]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d001      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
 8005130:	e17f      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x5c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x5c>
 800513e:	887b      	ldrh	r3, [r7, #2]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e174      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x6e>
 8005152:	2302      	movs	r3, #2
 8005154:	e16d      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b04      	cmp	r3, #4
 8005168:	d003      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2205      	movs	r2, #5
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	887a      	ldrh	r2, [r7, #2]
 8005182:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	887a      	ldrh	r2, [r7, #2]
 800519a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d007      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ce:	d17e      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_SPI_TransmitReceive+0xf6>
 80051d8:	8afb      	ldrh	r3, [r7, #22]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d16c      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e2:	881a      	ldrh	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005202:	e059      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d11b      	bne.n	800524a <HAL_SPI_TransmitReceive+0x162>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d016      	beq.n	800524a <HAL_SPI_TransmitReceive+0x162>
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	2b01      	cmp	r3, #1
 8005220:	d113      	bne.n	800524a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b01      	cmp	r3, #1
 8005256:	d119      	bne.n	800528c <HAL_SPI_TransmitReceive+0x1a4>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d014      	beq.n	800528c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	b292      	uxth	r2, r2
 800526e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005288:	2301      	movs	r3, #1
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800528c:	f7fd fb7e 	bl	800298c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005298:	429a      	cmp	r2, r3
 800529a:	d80d      	bhi.n	80052b8 <HAL_SPI_TransmitReceive+0x1d0>
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d009      	beq.n	80052b8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0bc      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1a0      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x11c>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d19b      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x11c>
 80052cc:	e082      	b.n	80053d4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x1f4>
 80052d6:	8afb      	ldrh	r3, [r7, #22]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d171      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005302:	e05d      	b.n	80053c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d11c      	bne.n	800534c <HAL_SPI_TransmitReceive+0x264>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_SPI_TransmitReceive+0x264>
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	2b01      	cmp	r3, #1
 8005320:	d114      	bne.n	800534c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d119      	bne.n	800538e <HAL_SPI_TransmitReceive+0x2a6>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d014      	beq.n	800538e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800538a:	2301      	movs	r3, #1
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800538e:	f7fd fafd 	bl	800298c <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539a:	429a      	cmp	r2, r3
 800539c:	d803      	bhi.n	80053a6 <HAL_SPI_TransmitReceive+0x2be>
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d102      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x2c4>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e038      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d19c      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x21c>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d197      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f91d 	bl	8005618 <SPI_EndRxTxTransaction>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e01d      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005430:	2300      	movs	r3, #0
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	@ 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800544c:	f7fd fa9e 	bl	800298c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4413      	add	r3, r2
 800545a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800545c:	f7fd fa96 	bl	800298c <HAL_GetTick>
 8005460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005462:	4b39      	ldr	r3, [pc, #228]	@ (8005548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	0d1b      	lsrs	r3, r3, #20
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	e054      	b.n	800551e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d050      	beq.n	800551e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800547c:	f7fd fa86 	bl	800298c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	429a      	cmp	r2, r3
 800548a:	d902      	bls.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d13d      	bne.n	800550e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054aa:	d111      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b4:	d004      	beq.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054be:	d107      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d8:	d10f      	bne.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e017      	b.n	800553e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3b01      	subs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	429a      	cmp	r2, r3
 800553a:	d19b      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000038 	.word	0x20000038

0800554c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005560:	d111      	bne.n	8005586 <SPI_EndRxTransaction+0x3a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556a:	d004      	beq.n	8005576 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005574:	d107      	bne.n	8005586 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005584:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800558e:	d12a      	bne.n	80055e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005598:	d012      	beq.n	80055c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2180      	movs	r1, #128	@ 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ff49 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02d      	beq.n	800560c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e026      	b.n	800560e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	2101      	movs	r1, #1
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff ff36 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01a      	beq.n	800560c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e013      	b.n	800560e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2200      	movs	r2, #0
 80055ee:	2101      	movs	r1, #1
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff ff23 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e000      	b.n	800560e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2201      	movs	r2, #1
 800562c:	2102      	movs	r1, #2
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff ff04 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e032      	b.n	80056b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800564a:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <SPI_EndRxTxTransaction+0xa0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	@ (80056bc <SPI_EndRxTxTransaction+0xa4>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	0d5b      	lsrs	r3, r3, #21
 8005656:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005668:	d112      	bne.n	8005690 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	@ 0x80
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff fee1 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e00f      	b.n	80056b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	3b01      	subs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d0f2      	beq.n	8005690 <SPI_EndRxTxTransaction+0x78>
 80056aa:	e000      	b.n	80056ae <SPI_EndRxTxTransaction+0x96>
        break;
 80056ac:	bf00      	nop
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000038 	.word	0x20000038
 80056bc:	165e9f81 	.word	0x165e9f81

080056c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e042      	b.n	8005758 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd f878 	bl	80027dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2224      	movs	r2, #36	@ 0x24
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa09 	bl	8005b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	@ 0x28
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b20      	cmp	r3, #32
 800577e:	d175      	bne.n	800586c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_UART_Transmit+0x2c>
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e06e      	b.n	800586e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2221      	movs	r2, #33	@ 0x21
 800579a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579e:	f7fd f8f5 	bl	800298c <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b8:	d108      	bne.n	80057cc <HAL_UART_Transmit+0x6c>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e003      	b.n	80057d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d4:	e02e      	b.n	8005834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f8df 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e03a      	b.n	800586e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3302      	adds	r3, #2
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e007      	b.n	8005826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1cb      	bne.n	80057d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	2140      	movs	r1, #64	@ 0x40
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f8ab 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e006      	b.n	800586e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b08a      	sub	sp, #40	@ 0x28
 800587a:	af02      	add	r7, sp, #8
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b20      	cmp	r3, #32
 8005894:	f040 8081 	bne.w	800599a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_UART_Receive+0x2e>
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e079      	b.n	800599c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2222      	movs	r2, #34	@ 0x22
 80058b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058bc:	f7fd f866 	bl	800298c <HAL_GetTick>
 80058c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d6:	d108      	bne.n	80058ea <HAL_UART_Receive+0x74>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e003      	b.n	80058f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80058f2:	e047      	b.n	8005984 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2200      	movs	r2, #0
 80058fc:	2120      	movs	r1, #32
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f850 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e042      	b.n	800599c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10c      	bne.n	8005936 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005928:	b29a      	uxth	r2, r3
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	3302      	adds	r3, #2
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	e01f      	b.n	8005976 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593e:	d007      	beq.n	8005950 <HAL_UART_Receive+0xda>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <HAL_UART_Receive+0xe8>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e008      	b.n	8005970 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800596a:	b2da      	uxtb	r2, r3
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3301      	adds	r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1b2      	bne.n	80058f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	e03b      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d037      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fc ffe5 	bl	800298c <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e03a      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d023      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8a>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b80      	cmp	r3, #128	@ 0x80
 80059ea:	d020      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8a>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b40      	cmp	r3, #64	@ 0x40
 80059f0:	d01d      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d116      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f81d 	bl	8005a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2208      	movs	r2, #8
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e00f      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2301      	moveq	r3, #1
 8005a40:	2300      	movne	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d0b4      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b095      	sub	sp, #84	@ 0x54
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3314      	adds	r3, #20
 8005ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d119      	bne.n	8005b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f023 0310 	bic.w	r3, r3, #16
 8005ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aee:	61ba      	str	r2, [r7, #24]
 8005af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	613b      	str	r3, [r7, #16]
   return(result);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b10:	bf00      	nop
 8005b12:	3754      	adds	r7, #84	@ 0x54
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b20:	b0c0      	sub	sp, #256	@ 0x100
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b38:	68d9      	ldr	r1, [r3, #12]
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	ea40 0301 	orr.w	r3, r0, r1
 8005b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b74:	f021 010c 	bic.w	r1, r1, #12
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b82:	430b      	orrs	r3, r1
 8005b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b96:	6999      	ldr	r1, [r3, #24]
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b8f      	ldr	r3, [pc, #572]	@ (8005de8 <UART_SetConfig+0x2cc>)
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d005      	beq.n	8005bbc <UART_SetConfig+0xa0>
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8005dec <UART_SetConfig+0x2d0>)
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d104      	bne.n	8005bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fd fdf8 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bc4:	e003      	b.n	8005bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bc6:	f7fd fddf 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8005bca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd8:	f040 810c 	bne.w	8005df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005be6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bee:	4622      	mov	r2, r4
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	1891      	adds	r1, r2, r2
 8005bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bf6:	415b      	adcs	r3, r3
 8005bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bfe:	4621      	mov	r1, r4
 8005c00:	eb12 0801 	adds.w	r8, r2, r1
 8005c04:	4629      	mov	r1, r5
 8005c06:	eb43 0901 	adc.w	r9, r3, r1
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1e:	4690      	mov	r8, r2
 8005c20:	4699      	mov	r9, r3
 8005c22:	4623      	mov	r3, r4
 8005c24:	eb18 0303 	adds.w	r3, r8, r3
 8005c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	eb49 0303 	adc.w	r3, r9, r3
 8005c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	18db      	adds	r3, r3, r3
 8005c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c50:	4613      	mov	r3, r2
 8005c52:	eb42 0303 	adc.w	r3, r2, r3
 8005c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c60:	f7fa ff9e 	bl	8000ba0 <__aeabi_uldivmod>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4b61      	ldr	r3, [pc, #388]	@ (8005df0 <UART_SetConfig+0x2d4>)
 8005c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	011c      	lsls	r4, r3, #4
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c94:	4641      	mov	r1, r8
 8005c96:	eb12 0a01 	adds.w	sl, r2, r1
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb4:	4692      	mov	sl, r2
 8005cb6:	469b      	mov	fp, r3
 8005cb8:	4643      	mov	r3, r8
 8005cba:	eb1a 0303 	adds.w	r3, sl, r3
 8005cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	18db      	adds	r3, r3, r3
 8005ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	eb42 0303 	adc.w	r3, r2, r3
 8005cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cf6:	f7fa ff53 	bl	8000ba0 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <UART_SetConfig+0x2d4>)
 8005d02:	fba3 2301 	umull	r2, r3, r3, r1
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2264      	movs	r2, #100	@ 0x64
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d16:	4b36      	ldr	r3, [pc, #216]	@ (8005df0 <UART_SetConfig+0x2d4>)
 8005d18:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d24:	441c      	add	r4, r3
 8005d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	1891      	adds	r1, r2, r2
 8005d3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d40:	415b      	adcs	r3, r3
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d48:	4641      	mov	r1, r8
 8005d4a:	1851      	adds	r1, r2, r1
 8005d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d4e:	4649      	mov	r1, r9
 8005d50:	414b      	adcs	r3, r1
 8005d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d60:	4659      	mov	r1, fp
 8005d62:	00cb      	lsls	r3, r1, #3
 8005d64:	4651      	mov	r1, sl
 8005d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	00ca      	lsls	r2, r1, #3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4619      	mov	r1, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	4642      	mov	r2, r8
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	460a      	mov	r2, r1
 8005d80:	eb42 0303 	adc.w	r3, r2, r3
 8005d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	18db      	adds	r3, r3, r3
 8005da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da2:	4613      	mov	r3, r2
 8005da4:	eb42 0303 	adc.w	r3, r2, r3
 8005da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005db2:	f7fa fef5 	bl	8000ba0 <__aeabi_uldivmod>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <UART_SetConfig+0x2d4>)
 8005dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	2164      	movs	r1, #100	@ 0x64
 8005dc4:	fb01 f303 	mul.w	r3, r1, r3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	3332      	adds	r3, #50	@ 0x32
 8005dce:	4a08      	ldr	r2, [pc, #32]	@ (8005df0 <UART_SetConfig+0x2d4>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	f003 0207 	and.w	r2, r3, #7
 8005dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4422      	add	r2, r4
 8005de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005de4:	e106      	b.n	8005ff4 <UART_SetConfig+0x4d8>
 8005de6:	bf00      	nop
 8005de8:	40011000 	.word	0x40011000
 8005dec:	40011400 	.word	0x40011400
 8005df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e06:	4642      	mov	r2, r8
 8005e08:	464b      	mov	r3, r9
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	6239      	str	r1, [r7, #32]
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e16:	4641      	mov	r1, r8
 8005e18:	1854      	adds	r4, r2, r1
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb43 0501 	adc.w	r5, r3, r1
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	00eb      	lsls	r3, r5, #3
 8005e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e2e:	00e2      	lsls	r2, r4, #3
 8005e30:	4614      	mov	r4, r2
 8005e32:	461d      	mov	r5, r3
 8005e34:	4643      	mov	r3, r8
 8005e36:	18e3      	adds	r3, r4, r3
 8005e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	eb45 0303 	adc.w	r3, r5, r3
 8005e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e62:	4629      	mov	r1, r5
 8005e64:	008b      	lsls	r3, r1, #2
 8005e66:	4621      	mov	r1, r4
 8005e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	008a      	lsls	r2, r1, #2
 8005e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e74:	f7fa fe94 	bl	8000ba0 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4b60      	ldr	r3, [pc, #384]	@ (8006000 <UART_SetConfig+0x4e4>)
 8005e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	011c      	lsls	r4, r3, #4
 8005e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	61b9      	str	r1, [r7, #24]
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	1851      	adds	r1, r2, r1
 8005eac:	6139      	str	r1, [r7, #16]
 8005eae:	4649      	mov	r1, r9
 8005eb0:	414b      	adcs	r3, r1
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	00cb      	lsls	r3, r1, #3
 8005ec4:	4651      	mov	r1, sl
 8005ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eca:	4651      	mov	r1, sl
 8005ecc:	00ca      	lsls	r2, r1, #3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	189b      	adds	r3, r3, r2
 8005ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005edc:	464b      	mov	r3, r9
 8005ede:	460a      	mov	r2, r1
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f00:	4649      	mov	r1, r9
 8005f02:	008b      	lsls	r3, r1, #2
 8005f04:	4641      	mov	r1, r8
 8005f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f0a:	4641      	mov	r1, r8
 8005f0c:	008a      	lsls	r2, r1, #2
 8005f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f12:	f7fa fe45 	bl	8000ba0 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4b38      	ldr	r3, [pc, #224]	@ (8006000 <UART_SetConfig+0x4e4>)
 8005f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2264      	movs	r2, #100	@ 0x64
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	1acb      	subs	r3, r1, r3
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	3332      	adds	r3, #50	@ 0x32
 8005f30:	4a33      	ldr	r2, [pc, #204]	@ (8006000 <UART_SetConfig+0x4e4>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f3c:	441c      	add	r4, r3
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	415b      	adcs	r3, r3
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	1851      	adds	r1, r2, r1
 8005f60:	6039      	str	r1, [r7, #0]
 8005f62:	4649      	mov	r1, r9
 8005f64:	414b      	adcs	r3, r1
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f74:	4659      	mov	r1, fp
 8005f76:	00cb      	lsls	r3, r1, #3
 8005f78:	4651      	mov	r1, sl
 8005f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7e:	4651      	mov	r1, sl
 8005f80:	00ca      	lsls	r2, r1, #3
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	4642      	mov	r2, r8
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f8e:	464b      	mov	r3, r9
 8005f90:	460a      	mov	r2, r1
 8005f92:	eb42 0303 	adc.w	r3, r2, r3
 8005f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fa2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	008b      	lsls	r3, r1, #2
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fba:	4641      	mov	r1, r8
 8005fbc:	008a      	lsls	r2, r1, #2
 8005fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fc2:	f7fa fded 	bl	8000ba0 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <UART_SetConfig+0x4e4>)
 8005fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	2164      	movs	r1, #100	@ 0x64
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	3332      	adds	r3, #50	@ 0x32
 8005fde:	4a08      	ldr	r2, [pc, #32]	@ (8006000 <UART_SetConfig+0x4e4>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f003 020f 	and.w	r2, r3, #15
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4422      	add	r2, r4
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006000:	51eb851f 	.word	0x51eb851f

08006004 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006004:	b084      	sub	sp, #16
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	f107 001c 	add.w	r0, r7, #28
 8006012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800601a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800601c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800601e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006022:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006026:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800602a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800602e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800603e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	b004      	add	sp, #16
 8006058:	4770      	bx	lr

0800605a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2203      	movs	r2, #3
 80060a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0303 	and.w	r3, r3, #3
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80060f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80060f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006108:	f023 030f 	bic.w	r3, r3, #15
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	b2db      	uxtb	r3, r3
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3314      	adds	r3, #20
 800614a:	461a      	mov	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	4413      	add	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
}  
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006188:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800618e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006194:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0

}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b088      	sub	sp, #32
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80061c8:	2310      	movs	r3, #16
 80061ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061cc:	2340      	movs	r3, #64	@ 0x40
 80061ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ff74 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80061e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ea:	2110      	movs	r1, #16
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa19 	bl	8006624 <SDMMC_GetCmdResp1>
 80061f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061f4:	69fb      	ldr	r3, [r7, #28]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800620c:	2311      	movs	r3, #17
 800620e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006210:	2340      	movs	r3, #64	@ 0x40
 8006212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800621c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff ff52 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800622a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800622e:	2111      	movs	r1, #17
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f9f7 	bl	8006624 <SDMMC_GetCmdResp1>
 8006236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006238:	69fb      	ldr	r3, [r7, #28]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b088      	sub	sp, #32
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006250:	2312      	movs	r3, #18
 8006252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006254:	2340      	movs	r3, #64	@ 0x40
 8006256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800625c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006262:	f107 0308 	add.w	r3, r7, #8
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff ff30 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800626e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006272:	2112      	movs	r1, #18
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f9d5 	bl	8006624 <SDMMC_GetCmdResp1>
 800627a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800627c:	69fb      	ldr	r3, [r7, #28]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b088      	sub	sp, #32
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006294:	2318      	movs	r3, #24
 8006296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006298:	2340      	movs	r3, #64	@ 0x40
 800629a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff0e 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80062b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b6:	2118      	movs	r1, #24
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f9b3 	bl	8006624 <SDMMC_GetCmdResp1>
 80062be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062c0:	69fb      	ldr	r3, [r7, #28]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b088      	sub	sp, #32
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80062d8:	2319      	movs	r3, #25
 80062da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062dc:	2340      	movs	r3, #64	@ 0x40
 80062de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff feec 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80062f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fa:	2119      	movs	r1, #25
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f991 	bl	8006624 <SDMMC_GetCmdResp1>
 8006302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006304:	69fb      	ldr	r3, [r7, #28]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800631c:	230c      	movs	r3, #12
 800631e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006320:	2340      	movs	r3, #64	@ 0x40
 8006322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800632c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff feca 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800633a:	4a05      	ldr	r2, [pc, #20]	@ (8006350 <SDMMC_CmdStopTransfer+0x40>)
 800633c:	210c      	movs	r1, #12
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f970 	bl	8006624 <SDMMC_GetCmdResp1>
 8006344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006346:	69fb      	ldr	r3, [r7, #28]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	05f5e100 	.word	0x05f5e100

08006354 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	@ 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006364:	2307      	movs	r3, #7
 8006366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006368:	2340      	movs	r3, #64	@ 0x40
 800636a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006374:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	4619      	mov	r1, r3
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fea6 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006386:	2107      	movs	r1, #7
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f94b 	bl	8006624 <SDMMC_GetCmdResp1>
 800638e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006392:	4618      	mov	r0, r3
 8006394:	3728      	adds	r7, #40	@ 0x28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b088      	sub	sp, #32
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063b8:	f107 0308 	add.w	r3, r7, #8
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fe85 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fb65 	bl	8006a94 <SDMMC_GetCmdError>
 80063ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063cc:	69fb      	ldr	r3, [r7, #28]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80063de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80063e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80063e4:	2308      	movs	r3, #8
 80063e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063e8:	2340      	movs	r3, #64	@ 0x40
 80063ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fe66 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 faf8 	bl	80069f8 <SDMMC_GetCmdResp7>
 8006408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006422:	2337      	movs	r3, #55	@ 0x37
 8006424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006426:	2340      	movs	r3, #64	@ 0x40
 8006428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800642e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fe47 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006444:	2137      	movs	r1, #55	@ 0x37
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f8ec 	bl	8006624 <SDMMC_GetCmdResp1>
 800644c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800644e:	69fb      	ldr	r3, [r7, #28]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006468:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800646c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800646e:	2329      	movs	r3, #41	@ 0x29
 8006470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006472:	2340      	movs	r3, #64	@ 0x40
 8006474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800647a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800647e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fe21 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f9ff 	bl	8006890 <SDMMC_GetCmdResp3>
 8006492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006494:	69fb      	ldr	r3, [r7, #28]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b088      	sub	sp, #32
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80064ac:	2306      	movs	r3, #6
 80064ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064b0:	2340      	movs	r3, #64	@ 0x40
 80064b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff fe02 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80064ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ce:	2106      	movs	r1, #6
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f8a7 	bl	8006624 <SDMMC_GetCmdResp1>
 80064d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064d8:	69fb      	ldr	r3, [r7, #28]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b088      	sub	sp, #32
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80064ee:	2333      	movs	r3, #51	@ 0x33
 80064f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064f2:	2340      	movs	r3, #64	@ 0x40
 80064f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fde1 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800650c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006510:	2133      	movs	r1, #51	@ 0x33
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f886 	bl	8006624 <SDMMC_GetCmdResp1>
 8006518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800651a:	69fb      	ldr	r3, [r7, #28]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006530:	2302      	movs	r3, #2
 8006532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006534:	23c0      	movs	r3, #192	@ 0xc0
 8006536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800653c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fdc0 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f956 	bl	8006800 <SDMMC_GetCmdResp2>
 8006554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006556:	69fb      	ldr	r3, [r7, #28]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800656e:	2309      	movs	r3, #9
 8006570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006572:	23c0      	movs	r3, #192	@ 0xc0
 8006574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800657a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800657e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006580:	f107 0308 	add.w	r3, r7, #8
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fda1 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f937 	bl	8006800 <SDMMC_GetCmdResp2>
 8006592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006594:	69fb      	ldr	r3, [r7, #28]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b088      	sub	sp, #32
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80065ac:	2303      	movs	r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065b0:	2340      	movs	r3, #64	@ 0x40
 80065b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065be:	f107 0308 	add.w	r3, r7, #8
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fd82 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	2103      	movs	r1, #3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f99c 	bl	800690c <SDMMC_GetCmdResp6>
 80065d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065d6:	69fb      	ldr	r3, [r7, #28]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80065ee:	230d      	movs	r3, #13
 80065f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065f2:	2340      	movs	r3, #64	@ 0x40
 80065f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006600:	f107 0308 	add.w	r3, r7, #8
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff fd61 	bl	80060ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800660c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006610:	210d      	movs	r1, #13
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f806 	bl	8006624 <SDMMC_GetCmdResp1>
 8006618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800661a:	69fb      	ldr	r3, [r7, #28]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	460b      	mov	r3, r1
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006632:	4b70      	ldr	r3, [pc, #448]	@ (80067f4 <SDMMC_GetCmdResp1+0x1d0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a70      	ldr	r2, [pc, #448]	@ (80067f8 <SDMMC_GetCmdResp1+0x1d4>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	0a5a      	lsrs	r2, r3, #9
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	fb02 f303 	mul.w	r3, r2, r3
 8006644:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	1e5a      	subs	r2, r3, #1
 800664a:	61fa      	str	r2, [r7, #28]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006650:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006654:	e0c9      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0ef      	beq.n	8006646 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ea      	bne.n	8006646 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2204      	movs	r2, #4
 8006680:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006682:	2304      	movs	r3, #4
 8006684:	e0b1      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006698:	2301      	movs	r3, #1
 800669a:	e0a6      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	22c5      	movs	r2, #197	@ 0xc5
 80066a0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fd3d 	bl	8006122 <SDIO_GetCommandResponse>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d001      	beq.n	80066b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e099      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066b6:	2100      	movs	r1, #0
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fd3f 	bl	800613c <SDIO_GetResponse>
 80066be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4b4e      	ldr	r3, [pc, #312]	@ (80067fc <SDMMC_GetCmdResp1+0x1d8>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e08d      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da02      	bge.n	80066da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80066d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066d8:	e087      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80066e4:	2340      	movs	r3, #64	@ 0x40
 80066e6:	e080      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80066f2:	2380      	movs	r3, #128	@ 0x80
 80066f4:	e079      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006704:	e071      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006714:	e069      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006724:	e061      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006730:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006734:	e059      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006744:	e051      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006754:	e049      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006760:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006764:	e041      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006774:	e039      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006784:	e031      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006790:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006794:	e029      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80067a4:	e021      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80067b4:	e019      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80067c4:	e011      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80067d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80067d4:	e009      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80067e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80067e4:	e001      	b.n	80067ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000038 	.word	0x20000038
 80067f8:	10624dd3 	.word	0x10624dd3
 80067fc:	fdffe008 	.word	0xfdffe008

08006800 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006808:	4b1f      	ldr	r3, [pc, #124]	@ (8006888 <SDMMC_GetCmdResp2+0x88>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1f      	ldr	r2, [pc, #124]	@ (800688c <SDMMC_GetCmdResp2+0x8c>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	0a5b      	lsrs	r3, r3, #9
 8006814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006818:	fb02 f303 	mul.w	r3, r2, r3
 800681c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1e5a      	subs	r2, r3, #1
 8006822:	60fa      	str	r2, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006828:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800682c:	e026      	b.n	800687c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006832:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0ef      	beq.n	800681e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ea      	bne.n	800681e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2204      	movs	r2, #4
 8006858:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800685a:	2304      	movs	r3, #4
 800685c:	e00e      	b.n	800687c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006870:	2301      	movs	r3, #1
 8006872:	e003      	b.n	800687c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	22c5      	movs	r2, #197	@ 0xc5
 8006878:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20000038 	.word	0x20000038
 800688c:	10624dd3 	.word	0x10624dd3

08006890 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006898:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <SDMMC_GetCmdResp3+0x74>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <SDMMC_GetCmdResp3+0x78>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	0a5b      	lsrs	r3, r3, #9
 80068a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	60fa      	str	r2, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80068bc:	e01b      	b.n	80068f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0ef      	beq.n	80068ae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1ea      	bne.n	80068ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2204      	movs	r2, #4
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068ea:	2304      	movs	r3, #4
 80068ec:	e003      	b.n	80068f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	22c5      	movs	r2, #197	@ 0xc5
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000038 	.word	0x20000038
 8006908:	10624dd3 	.word	0x10624dd3

0800690c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	460b      	mov	r3, r1
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800691a:	4b35      	ldr	r3, [pc, #212]	@ (80069f0 <SDMMC_GetCmdResp6+0xe4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a35      	ldr	r2, [pc, #212]	@ (80069f4 <SDMMC_GetCmdResp6+0xe8>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	0a5b      	lsrs	r3, r3, #9
 8006926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	1e5a      	subs	r2, r3, #1
 8006934:	61fa      	str	r2, [r7, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800693a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800693e:	e052      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006944:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0ef      	beq.n	8006930 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ea      	bne.n	8006930 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2204      	movs	r2, #4
 800696a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800696c:	2304      	movs	r3, #4
 800696e:	e03a      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d004      	beq.n	8006986 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006982:	2301      	movs	r3, #1
 8006984:	e02f      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fbcb 	bl	8006122 <SDIO_GetCommandResponse>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	4293      	cmp	r3, r2
 8006994:	d001      	beq.n	800699a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006996:	2301      	movs	r3, #1
 8006998:	e025      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	22c5      	movs	r2, #197	@ 0xc5
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff fbca 	bl	800613c <SDIO_GetResponse>
 80069a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80069be:	2300      	movs	r3, #0
 80069c0:	e011      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069d0:	e009      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80069dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069e0:	e001      	b.n	80069e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000038 	.word	0x20000038
 80069f4:	10624dd3 	.word	0x10624dd3

080069f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a00:	4b22      	ldr	r3, [pc, #136]	@ (8006a8c <SDMMC_GetCmdResp7+0x94>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a22      	ldr	r2, [pc, #136]	@ (8006a90 <SDMMC_GetCmdResp7+0x98>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	0a5b      	lsrs	r3, r3, #9
 8006a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	60fa      	str	r2, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d102      	bne.n	8006a26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a24:	e02c      	b.n	8006a80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0ef      	beq.n	8006a16 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ea      	bne.n	8006a16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a52:	2304      	movs	r3, #4
 8006a54:	e014      	b.n	8006a80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e009      	b.n	8006a80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2240      	movs	r2, #64	@ 0x40
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006a7e:	2300      	movs	r3, #0
  
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20000038 	.word	0x20000038
 8006a90:	10624dd3 	.word	0x10624dd3

08006a94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <SDMMC_GetCmdError+0x50>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a11      	ldr	r2, [pc, #68]	@ (8006ae8 <SDMMC_GetCmdError+0x54>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	0a5b      	lsrs	r3, r3, #9
 8006aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1e5a      	subs	r2, r3, #1
 8006ab6:	60fa      	str	r2, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006abc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ac0:	e009      	b.n	8006ad6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f1      	beq.n	8006ab2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	22c5      	movs	r2, #197	@ 0xc5
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000038 	.word	0x20000038
 8006ae8:	10624dd3 	.word	0x10624dd3

08006aec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006af0:	4904      	ldr	r1, [pc, #16]	@ (8006b04 <MX_FATFS_Init+0x18>)
 8006af2:	4805      	ldr	r0, [pc, #20]	@ (8006b08 <MX_FATFS_Init+0x1c>)
 8006af4:	f002 fe5e 	bl	80097b4 <FATFS_LinkDriver>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	4b03      	ldr	r3, [pc, #12]	@ (8006b0c <MX_FATFS_Init+0x20>)
 8006afe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b00:	bf00      	nop
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	200006d8 	.word	0x200006d8
 8006b08:	0800a794 	.word	0x0800a794
 8006b0c:	200006d4 	.word	0x200006d4

08006b10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b2a:	f000 f879 	bl	8006c20 <BSP_SD_IsDetected>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d001      	beq.n	8006b38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e012      	b.n	8006b5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006b38:	480b      	ldr	r0, [pc, #44]	@ (8006b68 <BSP_SD_Init+0x48>)
 8006b3a:	f7fc fe4d 	bl	80037d8 <HAL_SD_Init>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006b48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b4c:	4806      	ldr	r0, [pc, #24]	@ (8006b68 <BSP_SD_Init+0x48>)
 8006b4e:	f7fd fc37 	bl	80043c0 <HAL_SD_ConfigWideBusOperation>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	200005ac 	.word	0x200005ac

08006b6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	4806      	ldr	r0, [pc, #24]	@ (8006ba4 <BSP_SD_ReadBlocks+0x38>)
 8006b8a:	f7fc fed5 	bl	8003938 <HAL_SD_ReadBlocks>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200005ac 	.word	0x200005ac

08006ba8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	4806      	ldr	r0, [pc, #24]	@ (8006be0 <BSP_SD_WriteBlocks+0x38>)
 8006bc6:	f7fd f89d 	bl	8003d04 <HAL_SD_WriteBlocks>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	200005ac 	.word	0x200005ac

08006be4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006be8:	4805      	ldr	r0, [pc, #20]	@ (8006c00 <BSP_SD_GetCardState+0x1c>)
 8006bea:	f7fd fc83 	bl	80044f4 <HAL_SD_GetCardState>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	bf14      	ite	ne
 8006bf4:	2301      	movne	r3, #1
 8006bf6:	2300      	moveq	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200005ac 	.word	0x200005ac

08006c04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4803      	ldr	r0, [pc, #12]	@ (8006c1c <BSP_SD_GetCardInfo+0x18>)
 8006c10:	f7fd fbaa 	bl	8004368 <HAL_SD_GetCardInfo>
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	200005ac 	.word	0x200005ac

08006c20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c26:	2301      	movs	r3, #1
 8006c28:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	b2db      	uxtb	r3, r3
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <SD_CheckStatus+0x38>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006c4c:	f7ff ffca 	bl	8006be4 <BSP_SD_GetCardState>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d107      	bne.n	8006c66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006c56:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <SD_CheckStatus+0x38>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <SD_CheckStatus+0x38>)
 8006c64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006c66:	4b03      	ldr	r3, [pc, #12]	@ (8006c74 <SD_CheckStatus+0x38>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b2db      	uxtb	r3, r3
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000041 	.word	0x20000041

08006c78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006c82:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <SD_initialize+0x38>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006c88:	f7ff ff4a 	bl	8006b20 <BSP_SD_Init>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d107      	bne.n	8006ca2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ffd1 	bl	8006c3c <SD_CheckStatus>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <SD_initialize+0x38>)
 8006ca0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006ca2:	4b03      	ldr	r3, [pc, #12]	@ (8006cb0 <SD_initialize+0x38>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b2db      	uxtb	r3, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000041 	.word	0x20000041

08006cb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff ffbb 	bl	8006c3c <SD_CheckStatus>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	68b8      	ldr	r0, [r7, #8]
 8006cee:	f7ff ff3d 	bl	8006b6c <BSP_SD_ReadBlocks>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d107      	bne.n	8006d08 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006cf8:	bf00      	nop
 8006cfa:	f7ff ff73 	bl	8006be4 <BSP_SD_GetCardState>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1fa      	bne.n	8006cfa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006d26:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	68b8      	ldr	r0, [r7, #8]
 8006d30:	f7ff ff3a 	bl	8006ba8 <BSP_SD_WriteBlocks>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006d3a:	bf00      	nop
 8006d3c:	f7ff ff52 	bl	8006be4 <BSP_SD_GetCardState>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1fa      	bne.n	8006d3c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	@ 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	603a      	str	r2, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
 8006d60:	460b      	mov	r3, r1
 8006d62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d6a:	4b25      	ldr	r3, [pc, #148]	@ (8006e00 <SD_ioctl+0xac>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <SD_ioctl+0x28>
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e03c      	b.n	8006df6 <SD_ioctl+0xa2>

  switch (cmd)
 8006d7c:	79bb      	ldrb	r3, [r7, #6]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d834      	bhi.n	8006dec <SD_ioctl+0x98>
 8006d82:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <SD_ioctl+0x34>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006d99 	.word	0x08006d99
 8006d8c:	08006da1 	.word	0x08006da1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dd3 	.word	0x08006dd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006d9e:	e028      	b.n	8006df2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006da0:	f107 030c 	add.w	r3, r7, #12
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff ff2d 	bl	8006c04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006db6:	e01c      	b.n	8006df2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006db8:	f107 030c 	add.w	r3, r7, #12
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff21 	bl	8006c04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006dd0:	e00f      	b.n	8006df2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006dd2:	f107 030c 	add.w	r3, r7, #12
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff ff14 	bl	8006c04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	0a5a      	lsrs	r2, r3, #9
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006dea:	e002      	b.n	8006df2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3730      	adds	r7, #48	@ 0x30
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000041 	.word	0x20000041

08006e04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	4a08      	ldr	r2, [pc, #32]	@ (8006e34 <disk_status+0x30>)
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	79fa      	ldrb	r2, [r7, #7]
 8006e1c:	4905      	ldr	r1, [pc, #20]	@ (8006e34 <disk_status+0x30>)
 8006e1e:	440a      	add	r2, r1
 8006e20:	7a12      	ldrb	r2, [r2, #8]
 8006e22:	4610      	mov	r0, r2
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000704 	.word	0x20000704

08006e38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	4a0e      	ldr	r2, [pc, #56]	@ (8006e84 <disk_initialize+0x4c>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d114      	bne.n	8006e7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	4a0c      	ldr	r2, [pc, #48]	@ (8006e84 <disk_initialize+0x4c>)
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	79fa      	ldrb	r2, [r7, #7]
 8006e5e:	4909      	ldr	r1, [pc, #36]	@ (8006e84 <disk_initialize+0x4c>)
 8006e60:	440a      	add	r2, r1
 8006e62:	7a12      	ldrb	r2, [r2, #8]
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	4a03      	ldr	r2, [pc, #12]	@ (8006e84 <disk_initialize+0x4c>)
 8006e76:	2101      	movs	r1, #1
 8006e78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000704 	.word	0x20000704

08006e88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e88:	b590      	push	{r4, r7, lr}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec4 <disk_read+0x3c>)
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	689c      	ldr	r4, [r3, #8]
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4a07      	ldr	r2, [pc, #28]	@ (8006ec4 <disk_read+0x3c>)
 8006ea8:	4413      	add	r3, r2
 8006eaa:	7a18      	ldrb	r0, [r3, #8]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	47a0      	blx	r4
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000704 	.word	0x20000704

08006ec8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	4a0a      	ldr	r2, [pc, #40]	@ (8006f04 <disk_write+0x3c>)
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68dc      	ldr	r4, [r3, #12]
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	4a07      	ldr	r2, [pc, #28]	@ (8006f04 <disk_write+0x3c>)
 8006ee8:	4413      	add	r3, r2
 8006eea:	7a18      	ldrb	r0, [r3, #8]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	47a0      	blx	r4
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd90      	pop	{r4, r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000704 	.word	0x20000704

08006f08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	603a      	str	r2, [r7, #0]
 8006f12:	71fb      	strb	r3, [r7, #7]
 8006f14:	460b      	mov	r3, r1
 8006f16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	4a09      	ldr	r2, [pc, #36]	@ (8006f40 <disk_ioctl+0x38>)
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	79fa      	ldrb	r2, [r7, #7]
 8006f26:	4906      	ldr	r1, [pc, #24]	@ (8006f40 <disk_ioctl+0x38>)
 8006f28:	440a      	add	r2, r1
 8006f2a:	7a10      	ldrb	r0, [r2, #8]
 8006f2c:	79b9      	ldrb	r1, [r7, #6]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4798      	blx	r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000704 	.word	0x20000704

08006f44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	b21a      	sxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b21b      	sxth	r3, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	b21b      	sxth	r3, r3
 8006f66:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006f68:	89fb      	ldrh	r3, [r7, #14]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3303      	adds	r3, #3
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	3202      	adds	r2, #2
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	7812      	ldrb	r2, [r2, #0]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
	return rv;
 8006fae:	68fb      	ldr	r3, [r7, #12]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	887a      	ldrh	r2, [r7, #2]
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	b2d2      	uxtb	r2, r2
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	1c53      	adds	r3, r2, #1
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1c59      	adds	r1, r3, #1
 800706e:	6179      	str	r1, [r7, #20]
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3b01      	subs	r3, #1
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f1      	bne.n	8007064 <mem_cpy+0x1a>
	}
}
 8007080:	bf00      	nop
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	617a      	str	r2, [r7, #20]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f3      	bne.n	800709c <mem_set+0x10>
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80070c2:	b480      	push	{r7}
 80070c4:	b089      	sub	sp, #36	@ 0x24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	61fa      	str	r2, [r7, #28]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	61ba      	str	r2, [r7, #24]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	1acb      	subs	r3, r1, r3
 80070ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <mem_cmp+0x40>
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0eb      	beq.n	80070da <mem_cmp+0x18>

	return r;
 8007102:	697b      	ldr	r3, [r7, #20]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3724      	adds	r7, #36	@ 0x24
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800711a:	e002      	b.n	8007122 <chk_chr+0x12>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3301      	adds	r3, #1
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <chk_chr+0x26>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	4293      	cmp	r3, r2
 8007134:	d1f2      	bne.n	800711c <chk_chr+0xc>
	return *str;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	781b      	ldrb	r3, [r3, #0]
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
	...

08007148 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007152:	2300      	movs	r3, #0
 8007154:	60bb      	str	r3, [r7, #8]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e029      	b.n	80071b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800715c:	4a27      	ldr	r2, [pc, #156]	@ (80071fc <chk_lock+0xb4>)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	4413      	add	r3, r2
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01d      	beq.n	80071a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800716a:	4a24      	ldr	r2, [pc, #144]	@ (80071fc <chk_lock+0xb4>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	4413      	add	r3, r2
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d116      	bne.n	80071aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800717c:	4a1f      	ldr	r2, [pc, #124]	@ (80071fc <chk_lock+0xb4>)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	4413      	add	r3, r2
 8007184:	3304      	adds	r3, #4
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800718c:	429a      	cmp	r2, r3
 800718e:	d10c      	bne.n	80071aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007190:	4a1a      	ldr	r2, [pc, #104]	@ (80071fc <chk_lock+0xb4>)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	4413      	add	r3, r2
 8007198:	3308      	adds	r3, #8
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d102      	bne.n	80071aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071a4:	e007      	b.n	80071b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d9d2      	bls.n	800715c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d109      	bne.n	80071d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <chk_lock+0x80>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d101      	bne.n	80071cc <chk_lock+0x84>
 80071c8:	2300      	movs	r3, #0
 80071ca:	e010      	b.n	80071ee <chk_lock+0xa6>
 80071cc:	2312      	movs	r3, #18
 80071ce:	e00e      	b.n	80071ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d108      	bne.n	80071e8 <chk_lock+0xa0>
 80071d6:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <chk_lock+0xb4>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	330c      	adds	r3, #12
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e6:	d101      	bne.n	80071ec <chk_lock+0xa4>
 80071e8:	2310      	movs	r3, #16
 80071ea:	e000      	b.n	80071ee <chk_lock+0xa6>
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	200006e4 	.word	0x200006e4

08007200 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	e002      	b.n	8007212 <enq_lock+0x12>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3301      	adds	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d806      	bhi.n	8007226 <enq_lock+0x26>
 8007218:	4a09      	ldr	r2, [pc, #36]	@ (8007240 <enq_lock+0x40>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	4413      	add	r3, r2
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f2      	bne.n	800720c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b02      	cmp	r3, #2
 800722a:	bf14      	ite	ne
 800722c:	2301      	movne	r3, #1
 800722e:	2300      	moveq	r3, #0
 8007230:	b2db      	uxtb	r3, r3
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	200006e4 	.word	0x200006e4

08007244 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e01f      	b.n	8007294 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007254:	4a41      	ldr	r2, [pc, #260]	@ (800735c <inc_lock+0x118>)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4413      	add	r3, r2
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d113      	bne.n	800728e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007266:	4a3d      	ldr	r2, [pc, #244]	@ (800735c <inc_lock+0x118>)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	4413      	add	r3, r2
 800726e:	3304      	adds	r3, #4
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007276:	429a      	cmp	r2, r3
 8007278:	d109      	bne.n	800728e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800727a:	4a38      	ldr	r2, [pc, #224]	@ (800735c <inc_lock+0x118>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	4413      	add	r3, r2
 8007282:	3308      	adds	r3, #8
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800728a:	429a      	cmp	r2, r3
 800728c:	d006      	beq.n	800729c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d9dc      	bls.n	8007254 <inc_lock+0x10>
 800729a:	e000      	b.n	800729e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800729c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d132      	bne.n	800730a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <inc_lock+0x6c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d806      	bhi.n	80072c4 <inc_lock+0x80>
 80072b6:	4a29      	ldr	r2, [pc, #164]	@ (800735c <inc_lock+0x118>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	4413      	add	r3, r2
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f2      	bne.n	80072aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d101      	bne.n	80072ce <inc_lock+0x8a>
 80072ca:	2300      	movs	r3, #0
 80072cc:	e040      	b.n	8007350 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4922      	ldr	r1, [pc, #136]	@ (800735c <inc_lock+0x118>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	440b      	add	r3, r1
 80072da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	491e      	ldr	r1, [pc, #120]	@ (800735c <inc_lock+0x118>)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	440b      	add	r3, r1
 80072e8:	3304      	adds	r3, #4
 80072ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	491a      	ldr	r1, [pc, #104]	@ (800735c <inc_lock+0x118>)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	440b      	add	r3, r1
 80072f8:	3308      	adds	r3, #8
 80072fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80072fc:	4a17      	ldr	r2, [pc, #92]	@ (800735c <inc_lock+0x118>)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	4413      	add	r3, r2
 8007304:	330c      	adds	r3, #12
 8007306:	2200      	movs	r2, #0
 8007308:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <inc_lock+0xe0>
 8007310:	4a12      	ldr	r2, [pc, #72]	@ (800735c <inc_lock+0x118>)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	4413      	add	r3, r2
 8007318:	330c      	adds	r3, #12
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <inc_lock+0xe0>
 8007320:	2300      	movs	r3, #0
 8007322:	e015      	b.n	8007350 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d108      	bne.n	800733c <inc_lock+0xf8>
 800732a:	4a0c      	ldr	r2, [pc, #48]	@ (800735c <inc_lock+0x118>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	4413      	add	r3, r2
 8007332:	330c      	adds	r3, #12
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	3301      	adds	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	e001      	b.n	8007340 <inc_lock+0xfc>
 800733c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007340:	4906      	ldr	r1, [pc, #24]	@ (800735c <inc_lock+0x118>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	440b      	add	r3, r1
 8007348:	330c      	adds	r3, #12
 800734a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	200006e4 	.word	0x200006e4

08007360 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3b01      	subs	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d825      	bhi.n	80073c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007374:	4a17      	ldr	r2, [pc, #92]	@ (80073d4 <dec_lock+0x74>)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	4413      	add	r3, r2
 800737c:	330c      	adds	r3, #12
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007382:	89fb      	ldrh	r3, [r7, #14]
 8007384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007388:	d101      	bne.n	800738e <dec_lock+0x2e>
 800738a:	2300      	movs	r3, #0
 800738c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800738e:	89fb      	ldrh	r3, [r7, #14]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <dec_lock+0x3a>
 8007394:	89fb      	ldrh	r3, [r7, #14]
 8007396:	3b01      	subs	r3, #1
 8007398:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800739a:	4a0e      	ldr	r2, [pc, #56]	@ (80073d4 <dec_lock+0x74>)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4413      	add	r3, r2
 80073a2:	330c      	adds	r3, #12
 80073a4:	89fa      	ldrh	r2, [r7, #14]
 80073a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <dec_lock+0x5a>
 80073ae:	4a09      	ldr	r2, [pc, #36]	@ (80073d4 <dec_lock+0x74>)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	4413      	add	r3, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	737b      	strb	r3, [r7, #13]
 80073be:	e001      	b.n	80073c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80073c0:	2302      	movs	r3, #2
 80073c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80073c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	200006e4 	.word	0x200006e4

080073d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e010      	b.n	8007408 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073e6:	4a0d      	ldr	r2, [pc, #52]	@ (800741c <clear_lock+0x44>)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	4413      	add	r3, r2
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d105      	bne.n	8007402 <clear_lock+0x2a>
 80073f6:	4a09      	ldr	r2, [pc, #36]	@ (800741c <clear_lock+0x44>)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	4413      	add	r3, r2
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d9eb      	bls.n	80073e6 <clear_lock+0xe>
	}
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	200006e4 	.word	0x200006e4

08007420 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	78db      	ldrb	r3, [r3, #3]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d034      	beq.n	800749e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	7858      	ldrb	r0, [r3, #1]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007444:	2301      	movs	r3, #1
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	f7ff fd3e 	bl	8006ec8 <disk_write>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
 8007456:	e022      	b.n	800749e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	1ad2      	subs	r2, r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	429a      	cmp	r2, r3
 800746c:	d217      	bcs.n	800749e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	789b      	ldrb	r3, [r3, #2]
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	e010      	b.n	8007498 <sync_window+0x78>
					wsect += fs->fsize;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7858      	ldrb	r0, [r3, #1]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800748a:	2301      	movs	r3, #1
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	f7ff fd1b 	bl	8006ec8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3b01      	subs	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d8eb      	bhi.n	8007476 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d01b      	beq.n	80074f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ffad 	bl	8007420 <sync_window>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d113      	bne.n	80074f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7858      	ldrb	r0, [r3, #1]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074da:	2301      	movs	r3, #1
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	f7ff fcd3 	bl	8006e88 <disk_read>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff87 	bl	8007420 <sync_window>
 8007512:	4603      	mov	r3, r0
 8007514:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d158      	bne.n	80075ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b03      	cmp	r3, #3
 8007522:	d148      	bne.n	80075b6 <sync_fs+0xb2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	791b      	ldrb	r3, [r3, #4]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d144      	bne.n	80075b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3330      	adds	r3, #48	@ 0x30
 8007530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007534:	2100      	movs	r1, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fda8 	bl	800708c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3330      	adds	r3, #48	@ 0x30
 8007540:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007544:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fd37 	bl	8006fbc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3330      	adds	r3, #48	@ 0x30
 8007552:	4921      	ldr	r1, [pc, #132]	@ (80075d8 <sync_fs+0xd4>)
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff fd4c 	bl	8006ff2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3330      	adds	r3, #48	@ 0x30
 800755e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007562:	491e      	ldr	r1, [pc, #120]	@ (80075dc <sync_fs+0xd8>)
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fd44 	bl	8006ff2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3330      	adds	r3, #48	@ 0x30
 800756e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7ff fd3a 	bl	8006ff2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3330      	adds	r3, #48	@ 0x30
 8007582:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f7ff fd30 	bl	8006ff2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	7858      	ldrb	r0, [r3, #1]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	2301      	movs	r3, #1
 80075ac:	f7ff fc8c 	bl	8006ec8 <disk_write>
			fs->fsi_flag = 0;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fca2 	bl	8006f08 <disk_ioctl>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <sync_fs+0xca>
 80075ca:	2301      	movs	r3, #1
 80075cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	41615252 	.word	0x41615252
 80075dc:	61417272 	.word	0x61417272

080075e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	3b02      	subs	r3, #2
 80075ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	3b02      	subs	r3, #2
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d301      	bcc.n	8007600 <clust2sect+0x20>
 80075fc:	2300      	movs	r3, #0
 80075fe:	e008      	b.n	8007612 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	895b      	ldrh	r3, [r3, #10]
 8007604:	461a      	mov	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	fb03 f202 	mul.w	r2, r3, r2
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007610:	4413      	add	r3, r2
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d904      	bls.n	800763e <get_fat+0x20>
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <get_fat+0x26>
		val = 1;	/* Internal error */
 800763e:	2301      	movs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	e08e      	b.n	8007762 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007644:	f04f 33ff 	mov.w	r3, #4294967295
 8007648:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d061      	beq.n	8007716 <get_fat+0xf8>
 8007652:	2b03      	cmp	r3, #3
 8007654:	dc7b      	bgt.n	800774e <get_fat+0x130>
 8007656:	2b01      	cmp	r3, #1
 8007658:	d002      	beq.n	8007660 <get_fat+0x42>
 800765a:	2b02      	cmp	r3, #2
 800765c:	d041      	beq.n	80076e2 <get_fat+0xc4>
 800765e:	e076      	b.n	800774e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	0a5b      	lsrs	r3, r3, #9
 8007676:	4413      	add	r3, r2
 8007678:	4619      	mov	r1, r3
 800767a:	6938      	ldr	r0, [r7, #16]
 800767c:	f7ff ff14 	bl	80074a8 <move_window>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d166      	bne.n	8007754 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	60fa      	str	r2, [r7, #12]
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4413      	add	r3, r2
 8007694:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007698:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6a1a      	ldr	r2, [r3, #32]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	0a5b      	lsrs	r3, r3, #9
 80076a2:	4413      	add	r3, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	6938      	ldr	r0, [r7, #16]
 80076a8:	f7ff fefe 	bl	80074a8 <move_window>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d152      	bne.n	8007758 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4413      	add	r3, r2
 80076bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076c0:	021b      	lsls	r3, r3, #8
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <get_fat+0xba>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	e002      	b.n	80076de <get_fat+0xc0>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076de:	617b      	str	r3, [r7, #20]
			break;
 80076e0:	e03f      	b.n	8007762 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	6a1a      	ldr	r2, [r3, #32]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	4413      	add	r3, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	6938      	ldr	r0, [r7, #16]
 80076f0:	f7ff feda 	bl	80074a8 <move_window>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d130      	bne.n	800775c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007708:	4413      	add	r3, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fc1a 	bl	8006f44 <ld_word>
 8007710:	4603      	mov	r3, r0
 8007712:	617b      	str	r3, [r7, #20]
			break;
 8007714:	e025      	b.n	8007762 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6a1a      	ldr	r2, [r3, #32]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	09db      	lsrs	r3, r3, #7
 800771e:	4413      	add	r3, r2
 8007720:	4619      	mov	r1, r3
 8007722:	6938      	ldr	r0, [r7, #16]
 8007724:	f7ff fec0 	bl	80074a8 <move_window>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d118      	bne.n	8007760 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800773c:	4413      	add	r3, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fc19 	bl	8006f76 <ld_dword>
 8007744:	4603      	mov	r3, r0
 8007746:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800774a:	617b      	str	r3, [r7, #20]
			break;
 800774c:	e009      	b.n	8007762 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800774e:	2301      	movs	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e006      	b.n	8007762 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007754:	bf00      	nop
 8007756:	e004      	b.n	8007762 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007758:	bf00      	nop
 800775a:	e002      	b.n	8007762 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007760:	bf00      	nop
		}
	}

	return val;
 8007762:	697b      	ldr	r3, [r7, #20]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b089      	sub	sp, #36	@ 0x24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007778:	2302      	movs	r3, #2
 800777a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b01      	cmp	r3, #1
 8007780:	f240 80d9 	bls.w	8007936 <put_fat+0x1ca>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	429a      	cmp	r2, r3
 800778c:	f080 80d3 	bcs.w	8007936 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b03      	cmp	r3, #3
 8007796:	f000 8096 	beq.w	80078c6 <put_fat+0x15a>
 800779a:	2b03      	cmp	r3, #3
 800779c:	f300 80cb 	bgt.w	8007936 <put_fat+0x1ca>
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d002      	beq.n	80077aa <put_fat+0x3e>
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d06e      	beq.n	8007886 <put_fat+0x11a>
 80077a8:	e0c5      	b.n	8007936 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	085b      	lsrs	r3, r3, #1
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	4413      	add	r3, r2
 80077b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a1a      	ldr	r2, [r3, #32]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	0a5b      	lsrs	r3, r3, #9
 80077c0:	4413      	add	r3, r2
 80077c2:	4619      	mov	r1, r3
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7ff fe6f 	bl	80074a8 <move_window>
 80077ca:	4603      	mov	r3, r0
 80077cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077ce:	7ffb      	ldrb	r3, [r7, #31]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 80a9 	bne.w	8007928 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	1c59      	adds	r1, r3, #1
 80077e0:	61b9      	str	r1, [r7, #24]
 80077e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e6:	4413      	add	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <put_fat+0xa4>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	b25a      	sxtb	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	b25b      	sxtb	r3, r3
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	b25b      	sxtb	r3, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	b25b      	sxtb	r3, r3
 800780c:	b2db      	uxtb	r3, r3
 800780e:	e001      	b.n	8007814 <put_fat+0xa8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a1a      	ldr	r2, [r3, #32]
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	0a5b      	lsrs	r3, r3, #9
 8007826:	4413      	add	r3, r2
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7ff fe3c 	bl	80074a8 <move_window>
 8007830:	4603      	mov	r3, r0
 8007832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007834:	7ffb      	ldrb	r3, [r7, #31]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d178      	bne.n	800792c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	4413      	add	r3, r2
 8007848:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <put_fat+0xf0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	b2db      	uxtb	r3, r3
 800785a:	e00e      	b.n	800787a <put_fat+0x10e>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b25b      	sxtb	r3, r3
 8007862:	f023 030f 	bic.w	r3, r3, #15
 8007866:	b25a      	sxtb	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	b25b      	sxtb	r3, r3
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	b25b      	sxtb	r3, r3
 8007874:	4313      	orrs	r3, r2
 8007876:	b25b      	sxtb	r3, r3
 8007878:	b2db      	uxtb	r3, r3
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	70da      	strb	r2, [r3, #3]
			break;
 8007884:	e057      	b.n	8007936 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	0a1b      	lsrs	r3, r3, #8
 800788e:	4413      	add	r3, r2
 8007890:	4619      	mov	r1, r3
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff fe08 	bl	80074a8 <move_window>
 8007898:	4603      	mov	r3, r0
 800789a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800789c:	7ffb      	ldrb	r3, [r7, #31]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d146      	bne.n	8007930 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80078b0:	4413      	add	r3, r2
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	b292      	uxth	r2, r2
 80078b6:	4611      	mov	r1, r2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fb7f 	bl	8006fbc <st_word>
			fs->wflag = 1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	70da      	strb	r2, [r3, #3]
			break;
 80078c4:	e037      	b.n	8007936 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1a      	ldr	r2, [r3, #32]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	09db      	lsrs	r3, r3, #7
 80078ce:	4413      	add	r3, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff fde8 	bl	80074a8 <move_window>
 80078d8:	4603      	mov	r3, r0
 80078da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078dc:	7ffb      	ldrb	r3, [r7, #31]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d128      	bne.n	8007934 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80078f6:	4413      	add	r3, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fb3c 	bl	8006f76 <ld_dword>
 80078fe:	4603      	mov	r3, r0
 8007900:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007904:	4323      	orrs	r3, r4
 8007906:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007916:	4413      	add	r3, r2
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fb69 	bl	8006ff2 <st_dword>
			fs->wflag = 1;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	70da      	strb	r2, [r3, #3]
			break;
 8007926:	e006      	b.n	8007936 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007928:	bf00      	nop
 800792a:	e004      	b.n	8007936 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800792c:	bf00      	nop
 800792e:	e002      	b.n	8007936 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007930:	bf00      	nop
 8007932:	e000      	b.n	8007936 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007934:	bf00      	nop
		}
	}
	return res;
 8007936:	7ffb      	ldrb	r3, [r7, #31]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3724      	adds	r7, #36	@ 0x24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd90      	pop	{r4, r7, pc}

08007940 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d904      	bls.n	8007966 <remove_chain+0x26>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d301      	bcc.n	800796a <remove_chain+0x2a>
 8007966:	2302      	movs	r3, #2
 8007968:	e04b      	b.n	8007a02 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	69b8      	ldr	r0, [r7, #24]
 8007978:	f7ff fef8 	bl	800776c <put_fat>
 800797c:	4603      	mov	r3, r0
 800797e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <remove_chain+0x4a>
 8007986:	7ffb      	ldrb	r3, [r7, #31]
 8007988:	e03b      	b.n	8007a02 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fe46 	bl	800761e <get_fat>
 8007992:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d031      	beq.n	80079fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <remove_chain+0x64>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e02e      	b.n	8007a02 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d101      	bne.n	80079b0 <remove_chain+0x70>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e028      	b.n	8007a02 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80079b0:	2200      	movs	r2, #0
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	69b8      	ldr	r0, [r7, #24]
 80079b6:	f7ff fed9 	bl	800776c <put_fat>
 80079ba:	4603      	mov	r3, r0
 80079bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80079be:	7ffb      	ldrb	r3, [r7, #31]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <remove_chain+0x88>
 80079c4:	7ffb      	ldrb	r3, [r7, #31]
 80079c6:	e01c      	b.n	8007a02 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	3b02      	subs	r3, #2
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d20b      	bcs.n	80079ee <remove_chain+0xae>
			fs->free_clst++;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	791b      	ldrb	r3, [r3, #4]
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d3c6      	bcc.n	800798a <remove_chain+0x4a>
 80079fc:	e000      	b.n	8007a00 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80079fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b088      	sub	sp, #32
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10d      	bne.n	8007a3c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <create_chain+0x2c>
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d31b      	bcc.n	8007a6e <create_chain+0x64>
 8007a36:	2301      	movs	r3, #1
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	e018      	b.n	8007a6e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fded 	bl	800761e <get_fat>
 8007a44:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d801      	bhi.n	8007a50 <create_chain+0x46>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e070      	b.n	8007b32 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	d101      	bne.n	8007a5c <create_chain+0x52>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	e06a      	b.n	8007b32 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d201      	bcs.n	8007a6a <create_chain+0x60>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	e063      	b.n	8007b32 <create_chain+0x128>
		scl = clst;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3301      	adds	r3, #1
 8007a76:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d307      	bcc.n	8007a92 <create_chain+0x88>
				ncl = 2;
 8007a82:	2302      	movs	r3, #2
 8007a84:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d901      	bls.n	8007a92 <create_chain+0x88>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e04f      	b.n	8007b32 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a92:	69f9      	ldr	r1, [r7, #28]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fdc2 	bl	800761e <get_fat>
 8007a9a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d003      	beq.n	8007ab0 <create_chain+0xa6>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d101      	bne.n	8007ab4 <create_chain+0xaa>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	e03e      	b.n	8007b32 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d1da      	bne.n	8007a72 <create_chain+0x68>
 8007abc:	2300      	movs	r3, #0
 8007abe:	e038      	b.n	8007b32 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ac0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	69f9      	ldr	r1, [r7, #28]
 8007ac8:	6938      	ldr	r0, [r7, #16]
 8007aca:	f7ff fe4f 	bl	800776c <put_fat>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d109      	bne.n	8007aec <create_chain+0xe2>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d006      	beq.n	8007aec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f7ff fe42 	bl	800776c <put_fat>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d116      	bne.n	8007b20 <create_chain+0x116>
		fs->last_clst = ncl;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	3b02      	subs	r3, #2
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d804      	bhi.n	8007b10 <create_chain+0x106>
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	1e5a      	subs	r2, r3, #1
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	791b      	ldrb	r3, [r3, #4]
 8007b14:	f043 0301 	orr.w	r3, r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	711a      	strb	r2, [r3, #4]
 8007b1e:	e007      	b.n	8007b30 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d102      	bne.n	8007b2c <create_chain+0x122>
 8007b26:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2a:	e000      	b.n	8007b2e <create_chain+0x124>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007b30:	69fb      	ldr	r3, [r7, #28]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3720      	adds	r7, #32
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	3304      	adds	r3, #4
 8007b50:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	0a5b      	lsrs	r3, r3, #9
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	8952      	ldrh	r2, [r2, #10]
 8007b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1d1a      	adds	r2, r3, #4
 8007b64:	613a      	str	r2, [r7, #16]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <clmt_clust+0x3a>
 8007b70:	2300      	movs	r3, #0
 8007b72:	e010      	b.n	8007b96 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d307      	bcc.n	8007b8c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3304      	adds	r3, #4
 8007b88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b8a:	e7e9      	b.n	8007b60 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007b8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	4413      	add	r3, r2
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b086      	sub	sp, #24
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bb8:	d204      	bcs.n	8007bc4 <dir_sdi+0x22>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e063      	b.n	8007c90 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <dir_sdi+0x46>
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d902      	bls.n	8007be8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10c      	bne.n	8007c08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	095b      	lsrs	r3, r3, #5
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	8912      	ldrh	r2, [r2, #8]
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d301      	bcc.n	8007bfe <dir_sdi+0x5c>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e048      	b.n	8007c90 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	61da      	str	r2, [r3, #28]
 8007c06:	e029      	b.n	8007c5c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	895b      	ldrh	r3, [r3, #10]
 8007c0c:	025b      	lsls	r3, r3, #9
 8007c0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c10:	e019      	b.n	8007c46 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6979      	ldr	r1, [r7, #20]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fd01 	bl	800761e <get_fat>
 8007c1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d101      	bne.n	8007c2a <dir_sdi+0x88>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e032      	b.n	8007c90 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d904      	bls.n	8007c3a <dir_sdi+0x98>
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d301      	bcc.n	8007c3e <dir_sdi+0x9c>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e028      	b.n	8007c90 <dir_sdi+0xee>
			ofs -= csz;
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d2e1      	bcs.n	8007c12 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007c4e:	6979      	ldr	r1, [r7, #20]
 8007c50:	6938      	ldr	r0, [r7, #16]
 8007c52:	f7ff fcc5 	bl	80075e0 <clust2sect>
 8007c56:	4602      	mov	r2, r0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <dir_sdi+0xcc>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e010      	b.n	8007c90 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69da      	ldr	r2, [r3, #28]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	0a5b      	lsrs	r3, r3, #9
 8007c76:	441a      	add	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c88:	441a      	add	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	3320      	adds	r3, #32
 8007cae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <dir_next+0x28>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cbe:	d301      	bcc.n	8007cc4 <dir_next+0x2c>
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	e0aa      	b.n	8007e1a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f040 8098 	bne.w	8007e00 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	8912      	ldrh	r2, [r2, #8]
 8007cea:	4293      	cmp	r3, r2
 8007cec:	f0c0 8088 	bcc.w	8007e00 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	61da      	str	r2, [r3, #28]
 8007cf6:	2304      	movs	r3, #4
 8007cf8:	e08f      	b.n	8007e1a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	0a5b      	lsrs	r3, r3, #9
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	8952      	ldrh	r2, [r2, #10]
 8007d02:	3a01      	subs	r2, #1
 8007d04:	4013      	ands	r3, r2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d17a      	bne.n	8007e00 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f7ff fc83 	bl	800761e <get_fat>
 8007d18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d801      	bhi.n	8007d24 <dir_next+0x8c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e07a      	b.n	8007e1a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d101      	bne.n	8007d30 <dir_next+0x98>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e074      	b.n	8007e1a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d358      	bcc.n	8007dec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	61da      	str	r2, [r3, #28]
 8007d46:	2304      	movs	r3, #4
 8007d48:	e067      	b.n	8007e1a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7ff fe59 	bl	8007a0a <create_chain>
 8007d58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <dir_next+0xcc>
 8007d60:	2307      	movs	r3, #7
 8007d62:	e05a      	b.n	8007e1a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <dir_next+0xd6>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e055      	b.n	8007e1a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d101      	bne.n	8007d7a <dir_next+0xe2>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e04f      	b.n	8007e1a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff fb50 	bl	8007420 <sync_window>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <dir_next+0xf2>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e047      	b.n	8007e1a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3330      	adds	r3, #48	@ 0x30
 8007d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d92:	2100      	movs	r1, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff f979 	bl	800708c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	6979      	ldr	r1, [r7, #20]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fc1d 	bl	80075e0 <clust2sect>
 8007da6:	4602      	mov	r2, r0
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007dac:	e012      	b.n	8007dd4 <dir_next+0x13c>
						fs->wflag = 1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff fb33 	bl	8007420 <sync_window>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <dir_next+0x12c>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e02a      	b.n	8007e1a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	895b      	ldrh	r3, [r3, #10]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d3e6      	bcc.n	8007dae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007df2:	6979      	ldr	r1, [r7, #20]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff fbf3 	bl	80075e0 <clust2sect>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e12:	441a      	add	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff feb4 	bl	8007ba2 <dir_sdi>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d12b      	bne.n	8007e9c <dir_alloc+0x7a>
		n = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fb2a 	bl	80074a8 <move_window>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11d      	bne.n	8007e9a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2be5      	cmp	r3, #229	@ 0xe5
 8007e66:	d004      	beq.n	8007e72 <dir_alloc+0x50>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d107      	bne.n	8007e82 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3301      	adds	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d102      	bne.n	8007e86 <dir_alloc+0x64>
 8007e80:	e00c      	b.n	8007e9c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e86:	2101      	movs	r1, #1
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff05 	bl	8007c98 <dir_next>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0d7      	beq.n	8007e48 <dir_alloc+0x26>
 8007e98:	e000      	b.n	8007e9c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e9a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d101      	bne.n	8007ea6 <dir_alloc+0x84>
 8007ea2:	2307      	movs	r3, #7
 8007ea4:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	331a      	adds	r3, #26
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff f840 	bl	8006f44 <ld_word>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d109      	bne.n	8007ee4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff f835 	bl	8006f44 <ld_word>
 8007eda:	4603      	mov	r3, r0
 8007edc:	041b      	lsls	r3, r3, #16
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	331a      	adds	r3, #26
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	b292      	uxth	r2, r2
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff f859 	bl	8006fbc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d109      	bne.n	8007f26 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f103 0214 	add.w	r2, r3, #20
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	0c1b      	lsrs	r3, r3, #16
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7ff f84b 	bl	8006fbc <st_word>
	}
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007f38:	2304      	movs	r3, #4
 8007f3a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007f42:	e03c      	b.n	8007fbe <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6938      	ldr	r0, [r7, #16]
 8007f4c:	f7ff faac 	bl	80074a8 <move_window>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d136      	bne.n	8007fc8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d102      	bne.n	8007f6e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007f68:	2304      	movs	r3, #4
 8007f6a:	75fb      	strb	r3, [r7, #23]
 8007f6c:	e031      	b.n	8007fd2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	330b      	adds	r3, #11
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f7a:	73bb      	strb	r3, [r7, #14]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7bba      	ldrb	r2, [r7, #14]
 8007f80:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	2be5      	cmp	r3, #229	@ 0xe5
 8007f86:	d011      	beq.n	8007fac <dir_read+0x7e>
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f8c:	d00e      	beq.n	8007fac <dir_read+0x7e>
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b0f      	cmp	r3, #15
 8007f92:	d00b      	beq.n	8007fac <dir_read+0x7e>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	f023 0320 	bic.w	r3, r3, #32
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2301      	moveq	r3, #1
 8007fa0:	2300      	movne	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00f      	beq.n	8007fcc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007fac:	2100      	movs	r1, #0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fe72 	bl	8007c98 <dir_next>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d108      	bne.n	8007fd0 <dir_read+0xa2>
	while (dp->sect) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1be      	bne.n	8007f44 <dir_read+0x16>
 8007fc6:	e004      	b.n	8007fd2 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007fc8:	bf00      	nop
 8007fca:	e002      	b.n	8007fd2 <dir_read+0xa4>
				break;
 8007fcc:	bf00      	nop
 8007fce:	e000      	b.n	8007fd2 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007fd0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <dir_read+0xb0>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	61da      	str	r2, [r3, #28]
	return res;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fdd2 	bl	8007ba2 <dir_sdi>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <dir_find+0x24>
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	e03e      	b.n	800808a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	4619      	mov	r1, r3
 8008012:	6938      	ldr	r0, [r7, #16]
 8008014:	f7ff fa48 	bl	80074a8 <move_window>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d12f      	bne.n	8008082 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <dir_find+0x4e>
 8008030:	2304      	movs	r3, #4
 8008032:	75fb      	strb	r3, [r7, #23]
 8008034:	e028      	b.n	8008088 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	330b      	adds	r3, #11
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008042:	b2da      	uxtb	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	330b      	adds	r3, #11
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <dir_find+0x86>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a18      	ldr	r0, [r3, #32]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3324      	adds	r3, #36	@ 0x24
 8008060:	220b      	movs	r2, #11
 8008062:	4619      	mov	r1, r3
 8008064:	f7ff f82d 	bl	80070c2 <mem_cmp>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800806e:	2100      	movs	r1, #0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fe11 	bl	8007c98 <dir_next>
 8008076:	4603      	mov	r3, r0
 8008078:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0c5      	beq.n	800800c <dir_find+0x24>
 8008080:	e002      	b.n	8008088 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008082:	bf00      	nop
 8008084:	e000      	b.n	8008088 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008086:	bf00      	nop

	return res;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80080a0:	2101      	movs	r1, #1
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff febd 	bl	8007e22 <dir_alloc>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d11c      	bne.n	80080ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	4619      	mov	r1, r3
 80080b8:	68b8      	ldr	r0, [r7, #8]
 80080ba:	f7ff f9f5 	bl	80074a8 <move_window>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d111      	bne.n	80080ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	2220      	movs	r2, #32
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe ffdb 	bl	800708c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a18      	ldr	r0, [r3, #32]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3324      	adds	r3, #36	@ 0x24
 80080de:	220b      	movs	r2, #11
 80080e0:	4619      	mov	r1, r3
 80080e2:	f7fe ffb2 	bl	800704a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2201      	movs	r2, #1
 80080ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	4619      	mov	r1, r3
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff f9cc 	bl	80074a8 <move_window>
 8008110:	4603      	mov	r3, r0
 8008112:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	22e5      	movs	r2, #229	@ 0xe5
 8008120:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008128:	7afb      	ldrb	r3, [r7, #11]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3324      	adds	r3, #36	@ 0x24
 8008148:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800814a:	220b      	movs	r2, #11
 800814c:	2120      	movs	r1, #32
 800814e:	68b8      	ldr	r0, [r7, #8]
 8008150:	f7fe ff9c 	bl	800708c <mem_set>
	si = i = 0; ni = 8;
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	61fb      	str	r3, [r7, #28]
 800815c:	2308      	movs	r3, #8
 800815e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	61fa      	str	r2, [r7, #28]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800816e:	7efb      	ldrb	r3, [r7, #27]
 8008170:	2b20      	cmp	r3, #32
 8008172:	d94e      	bls.n	8008212 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008174:	7efb      	ldrb	r3, [r7, #27]
 8008176:	2b2f      	cmp	r3, #47	@ 0x2f
 8008178:	d006      	beq.n	8008188 <create_name+0x54>
 800817a:	7efb      	ldrb	r3, [r7, #27]
 800817c:	2b5c      	cmp	r3, #92	@ 0x5c
 800817e:	d110      	bne.n	80081a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008180:	e002      	b.n	8008188 <create_name+0x54>
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3301      	adds	r3, #1
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b2f      	cmp	r3, #47	@ 0x2f
 8008192:	d0f6      	beq.n	8008182 <create_name+0x4e>
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b5c      	cmp	r3, #92	@ 0x5c
 800819e:	d0f0      	beq.n	8008182 <create_name+0x4e>
			break;
 80081a0:	e038      	b.n	8008214 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80081a2:	7efb      	ldrb	r3, [r7, #27]
 80081a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80081a6:	d003      	beq.n	80081b0 <create_name+0x7c>
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d30c      	bcc.n	80081ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b0b      	cmp	r3, #11
 80081b4:	d002      	beq.n	80081bc <create_name+0x88>
 80081b6:	7efb      	ldrb	r3, [r7, #27]
 80081b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ba:	d001      	beq.n	80081c0 <create_name+0x8c>
 80081bc:	2306      	movs	r3, #6
 80081be:	e044      	b.n	800824a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80081c0:	2308      	movs	r3, #8
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	230b      	movs	r3, #11
 80081c6:	617b      	str	r3, [r7, #20]
			continue;
 80081c8:	e022      	b.n	8008210 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80081ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da04      	bge.n	80081dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80081d2:	7efb      	ldrb	r3, [r7, #27]
 80081d4:	3b80      	subs	r3, #128	@ 0x80
 80081d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008254 <create_name+0x120>)
 80081d8:	5cd3      	ldrb	r3, [r2, r3]
 80081da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80081dc:	7efb      	ldrb	r3, [r7, #27]
 80081de:	4619      	mov	r1, r3
 80081e0:	481d      	ldr	r0, [pc, #116]	@ (8008258 <create_name+0x124>)
 80081e2:	f7fe ff95 	bl	8007110 <chk_chr>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <create_name+0xbc>
 80081ec:	2306      	movs	r3, #6
 80081ee:	e02c      	b.n	800824a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80081f0:	7efb      	ldrb	r3, [r7, #27]
 80081f2:	2b60      	cmp	r3, #96	@ 0x60
 80081f4:	d905      	bls.n	8008202 <create_name+0xce>
 80081f6:	7efb      	ldrb	r3, [r7, #27]
 80081f8:	2b7a      	cmp	r3, #122	@ 0x7a
 80081fa:	d802      	bhi.n	8008202 <create_name+0xce>
 80081fc:	7efb      	ldrb	r3, [r7, #27]
 80081fe:	3b20      	subs	r3, #32
 8008200:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	613a      	str	r2, [r7, #16]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	4413      	add	r3, r2
 800820c:	7efa      	ldrb	r2, [r7, #27]
 800820e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008210:	e7a6      	b.n	8008160 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008212:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	441a      	add	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <create_name+0xf4>
 8008224:	2306      	movs	r3, #6
 8008226:	e010      	b.n	800824a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2be5      	cmp	r3, #229	@ 0xe5
 800822e:	d102      	bne.n	8008236 <create_name+0x102>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2205      	movs	r2, #5
 8008234:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008236:	7efb      	ldrb	r3, [r7, #27]
 8008238:	2b20      	cmp	r3, #32
 800823a:	d801      	bhi.n	8008240 <create_name+0x10c>
 800823c:	2204      	movs	r2, #4
 800823e:	e000      	b.n	8008242 <create_name+0x10e>
 8008240:	2200      	movs	r2, #0
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	330b      	adds	r3, #11
 8008246:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008248:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	0800a7a8 	.word	0x0800a7a8
 8008258:	0800a72c 	.word	0x0800a72c

0800825c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008270:	e002      	b.n	8008278 <follow_path+0x1c>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b2f      	cmp	r3, #47	@ 0x2f
 800827e:	d0f8      	beq.n	8008272 <follow_path+0x16>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b5c      	cmp	r3, #92	@ 0x5c
 8008286:	d0f4      	beq.n	8008272 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2200      	movs	r2, #0
 800828c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b1f      	cmp	r3, #31
 8008294:	d80a      	bhi.n	80082ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2280      	movs	r2, #128	@ 0x80
 800829a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fc7e 	bl	8007ba2 <dir_sdi>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	e043      	b.n	8008334 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80082ac:	463b      	mov	r3, r7
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff ff3f 	bl	8008134 <create_name>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d134      	bne.n	800832a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff fe91 	bl	8007fe8 <dir_find>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80082d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d127      	bne.n	800832e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d122      	bne.n	800832e <follow_path+0xd2>
 80082e8:	2305      	movs	r3, #5
 80082ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80082ec:	e01f      	b.n	800832e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11c      	bne.n	8008332 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	799b      	ldrb	r3, [r3, #6]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008304:	2305      	movs	r3, #5
 8008306:	75fb      	strb	r3, [r7, #23]
 8008308:	e014      	b.n	8008334 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008318:	4413      	add	r3, r2
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fdc7 	bl	8007eb0 <ld_clust>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008328:	e7c0      	b.n	80082ac <follow_path+0x50>
			if (res != FR_OK) break;
 800832a:	bf00      	nop
 800832c:	e002      	b.n	8008334 <follow_path+0xd8>
				break;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008332:	bf00      	nop
			}
		}
	}

	return res;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800833e:	b480      	push	{r7}
 8008340:	b087      	sub	sp, #28
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d031      	beq.n	80083b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	e002      	b.n	8008362 <get_ldnumber+0x24>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	3301      	adds	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b20      	cmp	r3, #32
 8008368:	d903      	bls.n	8008372 <get_ldnumber+0x34>
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008370:	d1f4      	bne.n	800835c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b3a      	cmp	r3, #58	@ 0x3a
 8008378:	d11c      	bne.n	80083b4 <get_ldnumber+0x76>
			tp = *path;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	60fa      	str	r2, [r7, #12]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	3b30      	subs	r3, #48	@ 0x30
 800838a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b09      	cmp	r3, #9
 8008390:	d80e      	bhi.n	80083b0 <get_ldnumber+0x72>
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	429a      	cmp	r2, r3
 8008398:	d10a      	bne.n	80083b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d107      	bne.n	80083b0 <get_ldnumber+0x72>
					vol = (int)i;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3301      	adds	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e002      	b.n	80083ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80083b4:	2300      	movs	r3, #0
 80083b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80083b8:	693b      	ldr	r3, [r7, #16]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	70da      	strb	r2, [r3, #3]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff f860 	bl	80074a8 <move_window>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <check_fs+0x2a>
 80083ee:	2304      	movs	r3, #4
 80083f0:	e038      	b.n	8008464 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3330      	adds	r3, #48	@ 0x30
 80083f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fda2 	bl	8006f44 <ld_word>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008408:	429a      	cmp	r2, r3
 800840a:	d001      	beq.n	8008410 <check_fs+0x48>
 800840c:	2303      	movs	r3, #3
 800840e:	e029      	b.n	8008464 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008416:	2be9      	cmp	r3, #233	@ 0xe9
 8008418:	d009      	beq.n	800842e <check_fs+0x66>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008420:	2beb      	cmp	r3, #235	@ 0xeb
 8008422:	d11e      	bne.n	8008462 <check_fs+0x9a>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800842a:	2b90      	cmp	r3, #144	@ 0x90
 800842c:	d119      	bne.n	8008462 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3330      	adds	r3, #48	@ 0x30
 8008432:	3336      	adds	r3, #54	@ 0x36
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fd9e 	bl	8006f76 <ld_dword>
 800843a:	4603      	mov	r3, r0
 800843c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008440:	4a0a      	ldr	r2, [pc, #40]	@ (800846c <check_fs+0xa4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <check_fs+0x82>
 8008446:	2300      	movs	r3, #0
 8008448:	e00c      	b.n	8008464 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3330      	adds	r3, #48	@ 0x30
 800844e:	3352      	adds	r3, #82	@ 0x52
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fd90 	bl	8006f76 <ld_dword>
 8008456:	4603      	mov	r3, r0
 8008458:	4a05      	ldr	r2, [pc, #20]	@ (8008470 <check_fs+0xa8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <check_fs+0x9a>
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008462:	2302      	movs	r3, #2
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	00544146 	.word	0x00544146
 8008470:	33544146 	.word	0x33544146

08008474 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b096      	sub	sp, #88	@ 0x58
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7ff ff58 	bl	800833e <get_ldnumber>
 800848e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008492:	2b00      	cmp	r3, #0
 8008494:	da01      	bge.n	800849a <find_volume+0x26>
 8008496:	230b      	movs	r3, #11
 8008498:	e22d      	b.n	80088f6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800849a:	4aa1      	ldr	r2, [pc, #644]	@ (8008720 <find_volume+0x2ac>)
 800849c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <find_volume+0x3a>
 80084aa:	230c      	movs	r3, #12
 80084ac:	e223      	b.n	80088f6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01a      	beq.n	80084fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe fc9b 	bl	8006e04 <disk_status>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10c      	bne.n	80084fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <find_volume+0x82>
 80084e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80084f2:	230a      	movs	r3, #10
 80084f4:	e1ff      	b.n	80088f6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80084f6:	2300      	movs	r3, #0
 80084f8:	e1fd      	b.n	80088f6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	2200      	movs	r2, #0
 80084fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008502:	b2da      	uxtb	r2, r3
 8008504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008506:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fc93 	bl	8006e38 <disk_initialize>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008524:	2303      	movs	r3, #3
 8008526:	e1e6      	b.n	80088f6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <find_volume+0xca>
 800852e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800853a:	230a      	movs	r3, #10
 800853c:	e1db      	b.n	80088f6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008542:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008544:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008546:	f7ff ff3f 	bl	80083c8 <check_fs>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008550:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008554:	2b02      	cmp	r3, #2
 8008556:	d149      	bne.n	80085ec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008558:	2300      	movs	r3, #0
 800855a:	643b      	str	r3, [r7, #64]	@ 0x40
 800855c:	e01e      	b.n	800859c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800855e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008560:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800856c:	4413      	add	r3, r2
 800856e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	3304      	adds	r3, #4
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d006      	beq.n	8008588 <find_volume+0x114>
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	3308      	adds	r3, #8
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fcf9 	bl	8006f76 <ld_dword>
 8008584:	4602      	mov	r2, r0
 8008586:	e000      	b.n	800858a <find_volume+0x116>
 8008588:	2200      	movs	r2, #0
 800858a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	3358      	adds	r3, #88	@ 0x58
 8008590:	443b      	add	r3, r7
 8008592:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008598:	3301      	adds	r3, #1
 800859a:	643b      	str	r3, [r7, #64]	@ 0x40
 800859c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d9dd      	bls.n	800855e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80085a2:	2300      	movs	r3, #0
 80085a4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80085a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <find_volume+0x13e>
 80085ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085ae:	3b01      	subs	r3, #1
 80085b0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80085b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3358      	adds	r3, #88	@ 0x58
 80085b8:	443b      	add	r3, r7
 80085ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80085be:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80085c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <find_volume+0x15e>
 80085c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80085ca:	f7ff fefd 	bl	80083c8 <check_fs>
 80085ce:	4603      	mov	r3, r0
 80085d0:	e000      	b.n	80085d4 <find_volume+0x160>
 80085d2:	2303      	movs	r3, #3
 80085d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80085d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d905      	bls.n	80085ec <find_volume+0x178>
 80085e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085e2:	3301      	adds	r3, #1
 80085e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80085e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d9e2      	bls.n	80085b2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80085ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d101      	bne.n	80085f8 <find_volume+0x184>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e17e      	b.n	80088f6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80085f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d901      	bls.n	8008604 <find_volume+0x190>
 8008600:	230d      	movs	r3, #13
 8008602:	e178      	b.n	80088f6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008606:	3330      	adds	r3, #48	@ 0x30
 8008608:	330b      	adds	r3, #11
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fc9a 	bl	8006f44 <ld_word>
 8008610:	4603      	mov	r3, r0
 8008612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008616:	d001      	beq.n	800861c <find_volume+0x1a8>
 8008618:	230d      	movs	r3, #13
 800861a:	e16c      	b.n	80088f6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	3330      	adds	r3, #48	@ 0x30
 8008620:	3316      	adds	r3, #22
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fc8e 	bl	8006f44 <ld_word>
 8008628:	4603      	mov	r3, r0
 800862a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800862c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <find_volume+0x1cc>
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	3330      	adds	r3, #48	@ 0x30
 8008636:	3324      	adds	r3, #36	@ 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe fc9c 	bl	8006f76 <ld_dword>
 800863e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008644:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008648:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	789b      	ldrb	r3, [r3, #2]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d005      	beq.n	8008664 <find_volume+0x1f0>
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	789b      	ldrb	r3, [r3, #2]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d001      	beq.n	8008664 <find_volume+0x1f0>
 8008660:	230d      	movs	r3, #13
 8008662:	e148      	b.n	80088f6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008666:	789b      	ldrb	r3, [r3, #2]
 8008668:	461a      	mov	r2, r3
 800866a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800866c:	fb02 f303 	mul.w	r3, r2, r3
 8008670:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008678:	461a      	mov	r2, r3
 800867a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	895b      	ldrh	r3, [r3, #10]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d008      	beq.n	8008698 <find_volume+0x224>
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	895b      	ldrh	r3, [r3, #10]
 800868a:	461a      	mov	r2, r3
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	895b      	ldrh	r3, [r3, #10]
 8008690:	3b01      	subs	r3, #1
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <find_volume+0x228>
 8008698:	230d      	movs	r3, #13
 800869a:	e12c      	b.n	80088f6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800869c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869e:	3330      	adds	r3, #48	@ 0x30
 80086a0:	3311      	adds	r3, #17
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fc4e 	bl	8006f44 <ld_word>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80086b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b2:	891b      	ldrh	r3, [r3, #8]
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <find_volume+0x24e>
 80086be:	230d      	movs	r3, #13
 80086c0:	e119      	b.n	80088f6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	3330      	adds	r3, #48	@ 0x30
 80086c6:	3313      	adds	r3, #19
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fc3b 	bl	8006f44 <ld_word>
 80086ce:	4603      	mov	r3, r0
 80086d0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80086d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <find_volume+0x272>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086da:	3330      	adds	r3, #48	@ 0x30
 80086dc:	3320      	adds	r3, #32
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fc49 	bl	8006f76 <ld_dword>
 80086e4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e8:	3330      	adds	r3, #48	@ 0x30
 80086ea:	330e      	adds	r3, #14
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fc29 	bl	8006f44 <ld_word>
 80086f2:	4603      	mov	r3, r0
 80086f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80086f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <find_volume+0x28c>
 80086fc:	230d      	movs	r3, #13
 80086fe:	e0fa      	b.n	80088f6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008700:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008704:	4413      	add	r3, r2
 8008706:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008708:	8912      	ldrh	r2, [r2, #8]
 800870a:	0912      	lsrs	r2, r2, #4
 800870c:	b292      	uxth	r2, r2
 800870e:	4413      	add	r3, r2
 8008710:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008716:	429a      	cmp	r2, r3
 8008718:	d204      	bcs.n	8008724 <find_volume+0x2b0>
 800871a:	230d      	movs	r3, #13
 800871c:	e0eb      	b.n	80088f6 <find_volume+0x482>
 800871e:	bf00      	nop
 8008720:	200006dc 	.word	0x200006dc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800872c:	8952      	ldrh	r2, [r2, #10]
 800872e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008732:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <find_volume+0x2ca>
 800873a:	230d      	movs	r3, #13
 800873c:	e0db      	b.n	80088f6 <find_volume+0x482>
		fmt = FS_FAT32;
 800873e:	2303      	movs	r3, #3
 8008740:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800874a:	4293      	cmp	r3, r2
 800874c:	d802      	bhi.n	8008754 <find_volume+0x2e0>
 800874e:	2302      	movs	r3, #2
 8008750:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800875a:	4293      	cmp	r3, r2
 800875c:	d802      	bhi.n	8008764 <find_volume+0x2f0>
 800875e:	2301      	movs	r3, #1
 8008760:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	1c9a      	adds	r2, r3, #2
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800876c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008770:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008772:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008776:	441a      	add	r2, r3
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800877c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	441a      	add	r2, r3
 8008782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008784:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008786:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800878a:	2b03      	cmp	r3, #3
 800878c:	d11e      	bne.n	80087cc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800878e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008790:	3330      	adds	r3, #48	@ 0x30
 8008792:	332a      	adds	r3, #42	@ 0x2a
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fbd5 	bl	8006f44 <ld_word>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <find_volume+0x330>
 80087a0:	230d      	movs	r3, #13
 80087a2:	e0a8      	b.n	80088f6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	891b      	ldrh	r3, [r3, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <find_volume+0x33c>
 80087ac:	230d      	movs	r3, #13
 80087ae:	e0a2      	b.n	80088f6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80087b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b2:	3330      	adds	r3, #48	@ 0x30
 80087b4:	332c      	adds	r3, #44	@ 0x2c
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fbdd 	bl	8006f76 <ld_dword>
 80087bc:	4602      	mov	r2, r0
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ca:	e01f      	b.n	800880c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80087cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ce:	891b      	ldrh	r3, [r3, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <find_volume+0x364>
 80087d4:	230d      	movs	r3, #13
 80087d6:	e08e      	b.n	80088f6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80087d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087da:	6a1a      	ldr	r2, [r3, #32]
 80087dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087de:	441a      	add	r2, r3
 80087e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80087e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d103      	bne.n	80087f4 <find_volume+0x380>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	e00a      	b.n	800880a <find_volume+0x396>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f6:	695a      	ldr	r2, [r3, #20]
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	085a      	lsrs	r2, r3, #1
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800880a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800880c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880e:	699a      	ldr	r2, [r3, #24]
 8008810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008812:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008816:	0a5b      	lsrs	r3, r3, #9
 8008818:	429a      	cmp	r2, r3
 800881a:	d201      	bcs.n	8008820 <find_volume+0x3ac>
 800881c:	230d      	movs	r3, #13
 800881e:	e06a      	b.n	80088f6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	611a      	str	r2, [r3, #16]
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	2280      	movs	r2, #128	@ 0x80
 8008834:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008836:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800883a:	2b03      	cmp	r3, #3
 800883c:	d149      	bne.n	80088d2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	3330      	adds	r3, #48	@ 0x30
 8008842:	3330      	adds	r3, #48	@ 0x30
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fb7d 	bl	8006f44 <ld_word>
 800884a:	4603      	mov	r3, r0
 800884c:	2b01      	cmp	r3, #1
 800884e:	d140      	bne.n	80088d2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008852:	3301      	adds	r3, #1
 8008854:	4619      	mov	r1, r3
 8008856:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008858:	f7fe fe26 	bl	80074a8 <move_window>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d137      	bne.n	80088d2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008864:	2200      	movs	r2, #0
 8008866:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886a:	3330      	adds	r3, #48	@ 0x30
 800886c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe fb67 	bl	8006f44 <ld_word>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800887e:	429a      	cmp	r2, r3
 8008880:	d127      	bne.n	80088d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	3330      	adds	r3, #48	@ 0x30
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fb75 	bl	8006f76 <ld_dword>
 800888c:	4603      	mov	r3, r0
 800888e:	4a1c      	ldr	r2, [pc, #112]	@ (8008900 <find_volume+0x48c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d11e      	bne.n	80088d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	3330      	adds	r3, #48	@ 0x30
 8008898:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fb6a 	bl	8006f76 <ld_dword>
 80088a2:	4603      	mov	r3, r0
 80088a4:	4a17      	ldr	r2, [pc, #92]	@ (8008904 <find_volume+0x490>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d113      	bne.n	80088d2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80088aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ac:	3330      	adds	r3, #48	@ 0x30
 80088ae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fb5f 	bl	8006f76 <ld_dword>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088bc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	3330      	adds	r3, #48	@ 0x30
 80088c2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fb55 	bl	8006f76 <ld_dword>
 80088cc:	4602      	mov	r2, r0
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80088d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80088d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <find_volume+0x494>)
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <find_volume+0x494>)
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	4b08      	ldr	r3, [pc, #32]	@ (8008908 <find_volume+0x494>)
 80088e8:	881a      	ldrh	r2, [r3, #0]
 80088ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80088ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80088f0:	f7fe fd72 	bl	80073d8 <clear_lock>
#endif
	return FR_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3758      	adds	r7, #88	@ 0x58
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	41615252 	.word	0x41615252
 8008904:	61417272 	.word	0x61417272
 8008908:	200006e0 	.word	0x200006e0

0800890c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008916:	2309      	movs	r3, #9
 8008918:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01c      	beq.n	800895a <validate+0x4e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d018      	beq.n	800895a <validate+0x4e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d013      	beq.n	800895a <validate+0x4e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	889a      	ldrh	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	88db      	ldrh	r3, [r3, #6]
 800893c:	429a      	cmp	r2, r3
 800893e:	d10c      	bne.n	800895a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fa5c 	bl	8006e04 <disk_status>
 800894c:	4603      	mov	r3, r0
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <validate+0x4e>
			res = FR_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <validate+0x5a>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	e000      	b.n	8008968 <validate+0x5c>
 8008966:	2300      	movs	r3, #0
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	6013      	str	r3, [r2, #0]
	return res;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff fcd5 	bl	800833e <get_ldnumber>
 8008994:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da01      	bge.n	80089a0 <f_mount+0x28>
 800899c:	230b      	movs	r3, #11
 800899e:	e02b      	b.n	80089f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80089a0:	4a17      	ldr	r2, [pc, #92]	@ (8008a00 <f_mount+0x88>)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80089b0:	69b8      	ldr	r0, [r7, #24]
 80089b2:	f7fe fd11 	bl	80073d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	490d      	ldr	r1, [pc, #52]	@ (8008a00 <f_mount+0x88>)
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <f_mount+0x66>
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d001      	beq.n	80089e2 <f_mount+0x6a>
 80089de:	2300      	movs	r3, #0
 80089e0:	e00a      	b.n	80089f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80089e2:	f107 010c 	add.w	r1, r7, #12
 80089e6:	f107 0308 	add.w	r3, r7, #8
 80089ea:	2200      	movs	r2, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff fd41 	bl	8008474 <find_volume>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200006dc 	.word	0x200006dc

08008a04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b098      	sub	sp, #96	@ 0x60
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <f_open+0x18>
 8008a18:	2309      	movs	r3, #9
 8008a1a:	e1a9      	b.n	8008d70 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	f107 0110 	add.w	r1, r7, #16
 8008a2a:	f107 0308 	add.w	r3, r7, #8
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fd20 	bl	8008474 <find_volume>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f040 818d 	bne.w	8008d5e <f_open+0x35a>
		dj.obj.fs = fs;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fc03 	bl	800825c <follow_path>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d118      	bne.n	8008a96 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008a64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a68:	b25b      	sxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da03      	bge.n	8008a76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008a6e:	2306      	movs	r3, #6
 8008a70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008a74:	e00f      	b.n	8008a96 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	bf8c      	ite	hi
 8008a7c:	2301      	movhi	r3, #1
 8008a7e:	2300      	movls	r3, #0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fb5c 	bl	8007148 <chk_lock>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	f003 031c 	and.w	r3, r3, #28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d07f      	beq.n	8008ba0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d017      	beq.n	8008ad8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d10e      	bne.n	8008ace <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ab0:	f7fe fba6 	bl	8007200 <enq_lock>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <f_open+0xc4>
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fae7 	bl	8008092 <dir_register>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	e000      	b.n	8008aca <f_open+0xc6>
 8008ac8:	2312      	movs	r3, #18
 8008aca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	f043 0308 	orr.w	r3, r3, #8
 8008ad4:	71fb      	strb	r3, [r7, #7]
 8008ad6:	e010      	b.n	8008afa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ad8:	7ebb      	ldrb	r3, [r7, #26]
 8008ada:	f003 0311 	and.w	r3, r3, #17
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <f_open+0xe6>
					res = FR_DENIED;
 8008ae2:	2307      	movs	r3, #7
 8008ae4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008ae8:	e007      	b.n	8008afa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <f_open+0xf6>
 8008af4:	2308      	movs	r3, #8
 8008af6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008afa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d168      	bne.n	8008bd4 <f_open+0x1d0>
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d063      	beq.n	8008bd4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008b0c:	f7fe f800 	bl	8006b10 <get_fattime>
 8008b10:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	330e      	adds	r3, #14
 8008b16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fa6a 	bl	8006ff2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	3316      	adds	r3, #22
 8008b22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fa64 	bl	8006ff2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2c:	330b      	adds	r3, #11
 8008b2e:	2220      	movs	r2, #32
 8008b30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff f9b9 	bl	8007eb0 <ld_clust>
 8008b3e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b44:	2200      	movs	r2, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff f9d1 	bl	8007eee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4e:	331c      	adds	r3, #28
 8008b50:	2100      	movs	r1, #0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fa4d 	bl	8006ff2 <st_dword>
					fs->wflag = 1;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d037      	beq.n	8008bd4 <f_open+0x1d0>
						dw = fs->winsect;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b68:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008b6a:	f107 0314 	add.w	r3, r7, #20
 8008b6e:	2200      	movs	r2, #0
 8008b70:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fee4 	bl	8007940 <remove_chain>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d126      	bne.n	8008bd4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fc8c 	bl	80074a8 <move_window>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	60da      	str	r2, [r3, #12]
 8008b9e:	e019      	b.n	8008bd4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d115      	bne.n	8008bd4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ba8:	7ebb      	ldrb	r3, [r7, #26]
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <f_open+0x1b6>
					res = FR_NO_FILE;
 8008bb2:	2304      	movs	r3, #4
 8008bb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008bb8:	e00c      	b.n	8008bd4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <f_open+0x1d0>
 8008bc4:	7ebb      	ldrb	r3, [r7, #26]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <f_open+0x1d0>
						res = FR_DENIED;
 8008bce:	2307      	movs	r3, #7
 8008bd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d126      	bne.n	8008c2a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008bf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	bf8c      	ite	hi
 8008c02:	2301      	movhi	r3, #1
 8008c04:	2300      	movls	r3, #0
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f107 0314 	add.w	r3, r7, #20
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fb17 	bl	8007244 <inc_lock>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <f_open+0x226>
 8008c24:	2302      	movs	r3, #2
 8008c26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 8095 	bne.w	8008d5e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff f938 	bl	8007eb0 <ld_clust>
 8008c40:	4602      	mov	r2, r0
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c48:	331c      	adds	r3, #28
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe f993 	bl	8006f76 <ld_dword>
 8008c50:	4602      	mov	r2, r0
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	88da      	ldrh	r2, [r3, #6]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	79fa      	ldrb	r2, [r7, #7]
 8008c6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3330      	adds	r3, #48	@ 0x30
 8008c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe f9fd 	bl	800708c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d060      	beq.n	8008d5e <f_open+0x35a>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d05c      	beq.n	8008d5e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	895b      	ldrh	r3, [r3, #10]
 8008cb0:	025b      	lsls	r3, r3, #9
 8008cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cc0:	e016      	b.n	8008cf0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fca9 	bl	800761e <get_fat>
 8008ccc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008cce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d802      	bhi.n	8008cda <f_open+0x2d6>
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce0:	d102      	bne.n	8008ce8 <f_open+0x2e4>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ce8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <f_open+0x2fc>
 8008cf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d8e0      	bhi.n	8008cc2 <f_open+0x2be>
				}
				fp->clust = clst;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d127      	bne.n	8008d5e <f_open+0x35a>
 8008d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d022      	beq.n	8008d5e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fc5f 	bl	80075e0 <clust2sect>
 8008d22:	6478      	str	r0, [r7, #68]	@ 0x44
 8008d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <f_open+0x32e>
						res = FR_INT_ERR;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008d30:	e015      	b.n	8008d5e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d34:	0a5a      	lsrs	r2, r3, #9
 8008d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d38:	441a      	add	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	7858      	ldrb	r0, [r3, #1]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1a      	ldr	r2, [r3, #32]
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f7fe f89b 	bl	8006e88 <disk_read>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <f_open+0x35a>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <f_open+0x368>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3760      	adds	r7, #96	@ 0x60
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08c      	sub	sp, #48	@ 0x30
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f107 0210 	add.w	r2, r7, #16
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff fdb7 	bl	800890c <validate>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008da4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <f_write+0x44>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	7d5b      	ldrb	r3, [r3, #21]
 8008db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <f_write+0x4a>
 8008dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008dc0:	e14b      	b.n	800905a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	7d1b      	ldrb	r3, [r3, #20]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <f_write+0x5a>
 8008dce:	2307      	movs	r3, #7
 8008dd0:	e143      	b.n	800905a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	699a      	ldr	r2, [r3, #24]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	441a      	add	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	f080 812d 	bcs.w	800903e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	43db      	mvns	r3, r3
 8008dea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008dec:	e127      	b.n	800903e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f040 80e3 	bne.w	8008fc2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	0a5b      	lsrs	r3, r3, #9
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	8952      	ldrh	r2, [r2, #10]
 8008e06:	3a01      	subs	r2, #1
 8008e08:	4013      	ands	r3, r2
 8008e0a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d143      	bne.n	8008e9a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10c      	bne.n	8008e34 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d11a      	bne.n	8008e5c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fded 	bl	8007a0a <create_chain>
 8008e30:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008e32:	e013      	b.n	8008e5c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d007      	beq.n	8008e4c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	4619      	mov	r1, r3
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7fe fe79 	bl	8007b3a <clmt_clust>
 8008e48:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008e4a:	e007      	b.n	8008e5c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f7fe fdd8 	bl	8007a0a <create_chain>
 8008e5a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 80f2 	beq.w	8009048 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d104      	bne.n	8008e74 <f_write+0xfc>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	755a      	strb	r2, [r3, #21]
 8008e70:	2302      	movs	r3, #2
 8008e72:	e0f2      	b.n	800905a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d104      	bne.n	8008e86 <f_write+0x10e>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	755a      	strb	r2, [r3, #21]
 8008e82:	2301      	movs	r3, #1
 8008e84:	e0e9      	b.n	800905a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e8a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <f_write+0x122>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e98:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	7d1b      	ldrb	r3, [r3, #20]
 8008e9e:	b25b      	sxtb	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	da18      	bge.n	8008ed6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	7858      	ldrb	r0, [r3, #1]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f7fe f808 	bl	8006ec8 <disk_write>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <f_write+0x150>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	755a      	strb	r2, [r3, #21]
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e0c8      	b.n	800905a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	7d1b      	ldrb	r3, [r3, #20]
 8008ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fe fb7e 	bl	80075e0 <clust2sect>
 8008ee4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <f_write+0x17e>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	755a      	strb	r2, [r3, #21]
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e0b1      	b.n	800905a <f_write+0x2e2>
			sect += csect;
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	4413      	add	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	0a5b      	lsrs	r3, r3, #9
 8008f02:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d03c      	beq.n	8008f84 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	4413      	add	r3, r2
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	8952      	ldrh	r2, [r2, #10]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d905      	bls.n	8008f24 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	895b      	ldrh	r3, [r3, #10]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	7858      	ldrb	r0, [r3, #1]
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	f7fd ffcb 	bl	8006ec8 <disk_write>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <f_write+0x1ca>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	755a      	strb	r2, [r3, #21]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e08b      	b.n	800905a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a1a      	ldr	r2, [r3, #32]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	6a3a      	ldr	r2, [r7, #32]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d915      	bls.n	8008f7c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a1a      	ldr	r2, [r3, #32]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	025b      	lsls	r3, r3, #9
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	4413      	add	r3, r2
 8008f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f7fe f86e 	bl	800704a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	7d1b      	ldrb	r3, [r3, #20]
 8008f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	025b      	lsls	r3, r3, #9
 8008f80:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008f82:	e03f      	b.n	8009004 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d016      	beq.n	8008fbc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d210      	bcs.n	8008fbc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	7858      	ldrb	r0, [r3, #1]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	f7fd ff6e 	bl	8006e88 <disk_read>
 8008fac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d004      	beq.n	8008fbc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	755a      	strb	r2, [r3, #21]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e04e      	b.n	800905a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fca:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d901      	bls.n	8008fdc <f_write+0x264>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fea:	4413      	add	r3, r2
 8008fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fee:	69f9      	ldr	r1, [r7, #28]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe f82a 	bl	800704a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	7d1b      	ldrb	r3, [r3, #20]
 8008ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009008:	4413      	add	r3, r2
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	699a      	ldr	r2, [r3, #24]
 8009010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009012:	441a      	add	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	619a      	str	r2, [r3, #24]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	429a      	cmp	r2, r3
 8009022:	bf38      	it	cc
 8009024:	461a      	movcc	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	60da      	str	r2, [r3, #12]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	441a      	add	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f47f aed4 	bne.w	8008dee <f_write+0x76>
 8009046:	e000      	b.n	800904a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009048:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	7d1b      	ldrb	r3, [r3, #20]
 800904e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009052:	b2da      	uxtb	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3730      	adds	r7, #48	@ 0x30
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f107 0208 	add.w	r2, r7, #8
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fc4a 	bl	800890c <validate>
 8009078:	4603      	mov	r3, r0
 800907a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d168      	bne.n	8009154 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	7d1b      	ldrb	r3, [r3, #20]
 8009086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d062      	beq.n	8009154 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7d1b      	ldrb	r3, [r3, #20]
 8009092:	b25b      	sxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	da15      	bge.n	80090c4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	7858      	ldrb	r0, [r3, #1]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	2301      	movs	r3, #1
 80090a8:	f7fd ff0e 	bl	8006ec8 <disk_write>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <f_sync+0x54>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e04f      	b.n	8009156 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7d1b      	ldrb	r3, [r3, #20]
 80090ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80090c4:	f7fd fd24 	bl	8006b10 <get_fattime>
 80090c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	4619      	mov	r1, r3
 80090d2:	4610      	mov	r0, r2
 80090d4:	f7fe f9e8 	bl	80074a8 <move_window>
 80090d8:	4603      	mov	r3, r0
 80090da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d138      	bne.n	8009154 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	330b      	adds	r3, #11
 80090ec:	781a      	ldrb	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	330b      	adds	r3, #11
 80090f2:	f042 0220 	orr.w	r2, r2, #32
 80090f6:	b2d2      	uxtb	r2, r2
 80090f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	461a      	mov	r2, r3
 8009104:	68f9      	ldr	r1, [r7, #12]
 8009106:	f7fe fef2 	bl	8007eee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f103 021c 	add.w	r2, r3, #28
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fd ff6b 	bl	8006ff2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	3316      	adds	r3, #22
 8009120:	6939      	ldr	r1, [r7, #16]
 8009122:	4618      	mov	r0, r3
 8009124:	f7fd ff65 	bl	8006ff2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3312      	adds	r3, #18
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd ff44 	bl	8006fbc <st_word>
					fs->wflag = 1;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2201      	movs	r2, #1
 8009138:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe f9e1 	bl	8007504 <sync_fs>
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7d1b      	ldrb	r3, [r3, #20]
 800914a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800914e:	b2da      	uxtb	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009154:	7dfb      	ldrb	r3, [r7, #23]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff ff7b 	bl	8009062 <f_sync>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d118      	bne.n	80091a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f107 0208 	add.w	r2, r7, #8
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff fbc4 	bl	800890c <validate>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10c      	bne.n	80091a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe f8e4 	bl	8007360 <dec_lock>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d102      	bne.n	80091a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b090      	sub	sp, #64	@ 0x40
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f107 0208 	add.w	r2, r7, #8
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff fba1 	bl	800890c <validate>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80091d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <f_lseek+0x2e>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7d5b      	ldrb	r3, [r3, #21]
 80091dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80091e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <f_lseek+0x3c>
 80091e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80091ec:	e1e6      	b.n	80095bc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80d1 	beq.w	800939a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fe:	d15a      	bne.n	80092b6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	627a      	str	r2, [r7, #36]	@ 0x24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	2302      	movs	r3, #2
 8009212:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	2b00      	cmp	r3, #0
 800921e:	d03a      	beq.n	8009296 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	2300      	movs	r3, #0
 8009226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	3302      	adds	r3, #2
 800922c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009234:	3301      	adds	r3, #1
 8009236:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe f9ee 	bl	800761e <get_fat>
 8009242:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	2b01      	cmp	r3, #1
 8009248:	d804      	bhi.n	8009254 <f_lseek+0xa2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2202      	movs	r2, #2
 800924e:	755a      	strb	r2, [r3, #21]
 8009250:	2302      	movs	r3, #2
 8009252:	e1b3      	b.n	80095bc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925a:	d104      	bne.n	8009266 <f_lseek+0xb4>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	755a      	strb	r2, [r3, #21]
 8009262:	2301      	movs	r3, #1
 8009264:	e1aa      	b.n	80095bc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800926c:	429a      	cmp	r2, r3
 800926e:	d0de      	beq.n	800922e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	429a      	cmp	r2, r3
 8009276:	d809      	bhi.n	800928c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	627a      	str	r2, [r7, #36]	@ 0x24
 800927e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	627a      	str	r2, [r7, #36]	@ 0x24
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	429a      	cmp	r2, r3
 8009294:	d3c4      	bcc.n	8009220 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800929c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800929e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d803      	bhi.n	80092ae <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e184      	b.n	80095b8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80092ae:	2311      	movs	r3, #17
 80092b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80092b4:	e180      	b.n	80095b8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d902      	bls.n	80092c6 <f_lseek+0x114>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8172 	beq.w	80095b8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fe fc2d 	bl	8007b3a <clmt_clust>
 80092e0:	4602      	mov	r2, r0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe f976 	bl	80075e0 <clust2sect>
 80092f4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <f_lseek+0x154>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	755a      	strb	r2, [r3, #21]
 8009302:	2302      	movs	r3, #2
 8009304:	e15a      	b.n	80095bc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	3b01      	subs	r3, #1
 800930a:	0a5b      	lsrs	r3, r3, #9
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	8952      	ldrh	r2, [r2, #10]
 8009310:	3a01      	subs	r2, #1
 8009312:	4013      	ands	r3, r2
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	4413      	add	r3, r2
 8009318:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 8148 	beq.w	80095b8 <f_lseek+0x406>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	429a      	cmp	r2, r3
 8009330:	f000 8142 	beq.w	80095b8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	7d1b      	ldrb	r3, [r3, #20]
 8009338:	b25b      	sxtb	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	da18      	bge.n	8009370 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	7858      	ldrb	r0, [r3, #1]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1a      	ldr	r2, [r3, #32]
 800934c:	2301      	movs	r3, #1
 800934e:	f7fd fdbb 	bl	8006ec8 <disk_write>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <f_lseek+0x1b0>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	755a      	strb	r2, [r3, #21]
 800935e:	2301      	movs	r3, #1
 8009360:	e12c      	b.n	80095bc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7d1b      	ldrb	r3, [r3, #20]
 8009366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800936a:	b2da      	uxtb	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	7858      	ldrb	r0, [r3, #1]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800937a:	2301      	movs	r3, #1
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	f7fd fd83 	bl	8006e88 <disk_read>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <f_lseek+0x1e0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	755a      	strb	r2, [r3, #21]
 800938e:	2301      	movs	r3, #1
 8009390:	e114      	b.n	80095bc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	621a      	str	r2, [r3, #32]
 8009398:	e10e      	b.n	80095b8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d908      	bls.n	80093b6 <f_lseek+0x204>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7d1b      	ldrb	r3, [r3, #20]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093c4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80a7 	beq.w	800951c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	895b      	ldrh	r3, [r3, #10]
 80093d2:	025b      	lsls	r3, r3, #9
 80093d4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01b      	beq.n	8009414 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	1e5a      	subs	r2, r3, #1
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	1e59      	subs	r1, r3, #1
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d30f      	bcc.n	8009414 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	1e5a      	subs	r2, r3, #1
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	425b      	negs	r3, r3
 80093fc:	401a      	ands	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009412:	e022      	b.n	800945a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800941a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941c:	2b00      	cmp	r3, #0
 800941e:	d119      	bne.n	8009454 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe faf0 	bl	8007a0a <create_chain>
 800942a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	2b01      	cmp	r3, #1
 8009430:	d104      	bne.n	800943c <f_lseek+0x28a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	755a      	strb	r2, [r3, #21]
 8009438:	2302      	movs	r3, #2
 800943a:	e0bf      	b.n	80095bc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800943c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009442:	d104      	bne.n	800944e <f_lseek+0x29c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	755a      	strb	r2, [r3, #21]
 800944a:	2301      	movs	r3, #1
 800944c:	e0b6      	b.n	80095bc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009452:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009458:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800945a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d05d      	beq.n	800951c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009460:	e03a      	b.n	80094d8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699a      	ldr	r2, [r3, #24]
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	441a      	add	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7d1b      	ldrb	r3, [r3, #20]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00b      	beq.n	800949a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fabf 	bl	8007a0a <create_chain>
 800948c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d108      	bne.n	80094a6 <f_lseek+0x2f4>
							ofs = 0; break;
 8009494:	2300      	movs	r3, #0
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	e022      	b.n	80094e0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe f8bd 	bl	800761e <get_fat>
 80094a4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d104      	bne.n	80094b8 <f_lseek+0x306>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	755a      	strb	r2, [r3, #21]
 80094b4:	2301      	movs	r3, #1
 80094b6:	e081      	b.n	80095bc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80094b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d904      	bls.n	80094c8 <f_lseek+0x316>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d304      	bcc.n	80094d2 <f_lseek+0x320>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	755a      	strb	r2, [r3, #21]
 80094ce:	2302      	movs	r3, #2
 80094d0:	e074      	b.n	80095bc <f_lseek+0x40a>
					fp->clust = clst;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094d6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d8c0      	bhi.n	8009462 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	441a      	add	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d012      	beq.n	800951c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe f870 	bl	80075e0 <clust2sect>
 8009500:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <f_lseek+0x360>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	755a      	strb	r2, [r3, #21]
 800950e:	2302      	movs	r3, #2
 8009510:	e054      	b.n	80095bc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	0a5b      	lsrs	r3, r3, #9
 8009516:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009518:	4413      	add	r3, r2
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	699a      	ldr	r2, [r3, #24]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	429a      	cmp	r2, r3
 8009526:	d90a      	bls.n	800953e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699a      	ldr	r2, [r3, #24]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7d1b      	ldrb	r3, [r3, #20]
 8009534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009538:	b2da      	uxtb	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009546:	2b00      	cmp	r3, #0
 8009548:	d036      	beq.n	80095b8 <f_lseek+0x406>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009550:	429a      	cmp	r2, r3
 8009552:	d031      	beq.n	80095b8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7d1b      	ldrb	r3, [r3, #20]
 8009558:	b25b      	sxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	da18      	bge.n	8009590 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	7858      	ldrb	r0, [r3, #1]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a1a      	ldr	r2, [r3, #32]
 800956c:	2301      	movs	r3, #1
 800956e:	f7fd fcab 	bl	8006ec8 <disk_write>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d004      	beq.n	8009582 <f_lseek+0x3d0>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	755a      	strb	r2, [r3, #21]
 800957e:	2301      	movs	r3, #1
 8009580:	e01c      	b.n	80095bc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7d1b      	ldrb	r3, [r3, #20]
 8009586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958a:	b2da      	uxtb	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	7858      	ldrb	r0, [r3, #1]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800959a:	2301      	movs	r3, #1
 800959c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800959e:	f7fd fc73 	bl	8006e88 <disk_read>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <f_lseek+0x400>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	755a      	strb	r2, [r3, #21]
 80095ae:	2301      	movs	r3, #1
 80095b0:	e004      	b.n	80095bc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095b6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80095b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3740      	adds	r7, #64	@ 0x40
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b09e      	sub	sp, #120	@ 0x78
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80095d0:	f107 010c 	add.w	r1, r7, #12
 80095d4:	1d3b      	adds	r3, r7, #4
 80095d6:	2202      	movs	r2, #2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe ff4b 	bl	8008474 <find_volume>
 80095de:	4603      	mov	r3, r0
 80095e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 80095e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 808e 	bne.w	800970e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe fe2e 	bl	800825c <follow_path>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009606:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800960a:	2b00      	cmp	r3, #0
 800960c:	d108      	bne.n	8009620 <f_unlink+0x5c>
 800960e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009612:	2102      	movs	r1, #2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fd fd97 	bl	8007148 <chk_lock>
 800961a:	4603      	mov	r3, r0
 800961c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009620:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009624:	2b00      	cmp	r3, #0
 8009626:	d172      	bne.n	800970e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009628:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800962c:	b25b      	sxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	da03      	bge.n	800963a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009632:	2306      	movs	r3, #6
 8009634:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009638:	e008      	b.n	800964c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800963a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009646:	2307      	movs	r3, #7
 8009648:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800964c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009650:	2b00      	cmp	r3, #0
 8009652:	d134      	bne.n	80096be <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fc28 	bl	8007eb0 <ld_clust>
 8009660:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009662:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009666:	f003 0310 	and.w	r3, r3, #16
 800966a:	2b00      	cmp	r3, #0
 800966c:	d027      	beq.n	80096be <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009674:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009676:	f107 0310 	add.w	r3, r7, #16
 800967a:	2100      	movs	r1, #0
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fa90 	bl	8007ba2 <dir_sdi>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8009688:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800968c:	2b00      	cmp	r3, #0
 800968e:	d116      	bne.n	80096be <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009690:	f107 0310 	add.w	r3, r7, #16
 8009694:	2100      	movs	r1, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fc49 	bl	8007f2e <dir_read>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80096a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <f_unlink+0xec>
 80096aa:	2307      	movs	r3, #7
 80096ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80096b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d102      	bne.n	80096be <f_unlink+0xfa>
 80096b8:	2300      	movs	r3, #0
 80096ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80096be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d123      	bne.n	800970e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80096c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fd13 	bl	80080f6 <dir_remove>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80096d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10c      	bne.n	80096f8 <f_unlink+0x134>
 80096de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80096e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80096e8:	2200      	movs	r2, #0
 80096ea:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe f927 	bl	8007940 <remove_chain>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80096f8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d106      	bne.n	800970e <f_unlink+0x14a>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4618      	mov	r0, r3
 8009704:	f7fd fefe 	bl	8007504 <sync_fs>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800970e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8009712:	4618      	mov	r0, r3
 8009714:	3778      	adds	r7, #120	@ 0x78
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009732:	4b1f      	ldr	r3, [pc, #124]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 8009734:	7a5b      	ldrb	r3, [r3, #9]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d131      	bne.n	80097a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800973c:	4b1c      	ldr	r3, [pc, #112]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 800973e:	7a5b      	ldrb	r3, [r3, #9]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	461a      	mov	r2, r3
 8009744:	4b1a      	ldr	r3, [pc, #104]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 8009746:	2100      	movs	r1, #0
 8009748:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800974a:	4b19      	ldr	r3, [pc, #100]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 800974c:	7a5b      	ldrb	r3, [r3, #9]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	4a17      	ldr	r2, [pc, #92]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800975a:	4b15      	ldr	r3, [pc, #84]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 800975c:	7a5b      	ldrb	r3, [r3, #9]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	461a      	mov	r2, r3
 8009762:	4b13      	ldr	r3, [pc, #76]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 8009764:	4413      	add	r3, r2
 8009766:	79fa      	ldrb	r2, [r7, #7]
 8009768:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800976a:	4b11      	ldr	r3, [pc, #68]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 800976c:	7a5b      	ldrb	r3, [r3, #9]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	b2d1      	uxtb	r1, r2
 8009774:	4a0e      	ldr	r2, [pc, #56]	@ (80097b0 <FATFS_LinkDriverEx+0x94>)
 8009776:	7251      	strb	r1, [r2, #9]
 8009778:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800977a:	7dbb      	ldrb	r3, [r7, #22]
 800977c:	3330      	adds	r3, #48	@ 0x30
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	3301      	adds	r3, #1
 8009788:	223a      	movs	r2, #58	@ 0x3a
 800978a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	3302      	adds	r3, #2
 8009790:	222f      	movs	r2, #47	@ 0x2f
 8009792:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	3303      	adds	r3, #3
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	20000704 	.word	0x20000704

080097b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80097be:	2200      	movs	r2, #0
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ffaa 	bl	800971c <FATFS_LinkDriverEx>
 80097c8:	4603      	mov	r3, r0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <memset>:
 80097d2:	4402      	add	r2, r0
 80097d4:	4603      	mov	r3, r0
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d100      	bne.n	80097dc <memset+0xa>
 80097da:	4770      	bx	lr
 80097dc:	f803 1b01 	strb.w	r1, [r3], #1
 80097e0:	e7f9      	b.n	80097d6 <memset+0x4>
	...

080097e4 <__errno>:
 80097e4:	4b01      	ldr	r3, [pc, #4]	@ (80097ec <__errno+0x8>)
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000044 	.word	0x20000044

080097f0 <__libc_init_array>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009828 <__libc_init_array+0x38>)
 80097f4:	4c0d      	ldr	r4, [pc, #52]	@ (800982c <__libc_init_array+0x3c>)
 80097f6:	1b64      	subs	r4, r4, r5
 80097f8:	10a4      	asrs	r4, r4, #2
 80097fa:	2600      	movs	r6, #0
 80097fc:	42a6      	cmp	r6, r4
 80097fe:	d109      	bne.n	8009814 <__libc_init_array+0x24>
 8009800:	4d0b      	ldr	r5, [pc, #44]	@ (8009830 <__libc_init_array+0x40>)
 8009802:	4c0c      	ldr	r4, [pc, #48]	@ (8009834 <__libc_init_array+0x44>)
 8009804:	f000 ff76 	bl	800a6f4 <_init>
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	2600      	movs	r6, #0
 800980e:	42a6      	cmp	r6, r4
 8009810:	d105      	bne.n	800981e <__libc_init_array+0x2e>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	f855 3b04 	ldr.w	r3, [r5], #4
 8009818:	4798      	blx	r3
 800981a:	3601      	adds	r6, #1
 800981c:	e7ee      	b.n	80097fc <__libc_init_array+0xc>
 800981e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009822:	4798      	blx	r3
 8009824:	3601      	adds	r6, #1
 8009826:	e7f2      	b.n	800980e <__libc_init_array+0x1e>
 8009828:	0800a870 	.word	0x0800a870
 800982c:	0800a870 	.word	0x0800a870
 8009830:	0800a870 	.word	0x0800a870
 8009834:	0800a874 	.word	0x0800a874

08009838 <pow>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	ed2d 8b02 	vpush	{d8}
 800983e:	eeb0 8a40 	vmov.f32	s16, s0
 8009842:	eef0 8a60 	vmov.f32	s17, s1
 8009846:	ec55 4b11 	vmov	r4, r5, d1
 800984a:	f000 f871 	bl	8009930 <__ieee754_pow>
 800984e:	4622      	mov	r2, r4
 8009850:	462b      	mov	r3, r5
 8009852:	4620      	mov	r0, r4
 8009854:	4629      	mov	r1, r5
 8009856:	ec57 6b10 	vmov	r6, r7, d0
 800985a:	f7f7 f913 	bl	8000a84 <__aeabi_dcmpun>
 800985e:	2800      	cmp	r0, #0
 8009860:	d13b      	bne.n	80098da <pow+0xa2>
 8009862:	ec51 0b18 	vmov	r0, r1, d8
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	f7f7 f8d9 	bl	8000a20 <__aeabi_dcmpeq>
 800986e:	b1b8      	cbz	r0, 80098a0 <pow+0x68>
 8009870:	2200      	movs	r2, #0
 8009872:	2300      	movs	r3, #0
 8009874:	4620      	mov	r0, r4
 8009876:	4629      	mov	r1, r5
 8009878:	f7f7 f8d2 	bl	8000a20 <__aeabi_dcmpeq>
 800987c:	2800      	cmp	r0, #0
 800987e:	d146      	bne.n	800990e <pow+0xd6>
 8009880:	ec45 4b10 	vmov	d0, r4, r5
 8009884:	f000 f848 	bl	8009918 <finite>
 8009888:	b338      	cbz	r0, 80098da <pow+0xa2>
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f7f7 f8cf 	bl	8000a34 <__aeabi_dcmplt>
 8009896:	b300      	cbz	r0, 80098da <pow+0xa2>
 8009898:	f7ff ffa4 	bl	80097e4 <__errno>
 800989c:	2322      	movs	r3, #34	@ 0x22
 800989e:	e01b      	b.n	80098d8 <pow+0xa0>
 80098a0:	ec47 6b10 	vmov	d0, r6, r7
 80098a4:	f000 f838 	bl	8009918 <finite>
 80098a8:	b9e0      	cbnz	r0, 80098e4 <pow+0xac>
 80098aa:	eeb0 0a48 	vmov.f32	s0, s16
 80098ae:	eef0 0a68 	vmov.f32	s1, s17
 80098b2:	f000 f831 	bl	8009918 <finite>
 80098b6:	b1a8      	cbz	r0, 80098e4 <pow+0xac>
 80098b8:	ec45 4b10 	vmov	d0, r4, r5
 80098bc:	f000 f82c 	bl	8009918 <finite>
 80098c0:	b180      	cbz	r0, 80098e4 <pow+0xac>
 80098c2:	4632      	mov	r2, r6
 80098c4:	463b      	mov	r3, r7
 80098c6:	4630      	mov	r0, r6
 80098c8:	4639      	mov	r1, r7
 80098ca:	f7f7 f8db 	bl	8000a84 <__aeabi_dcmpun>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d0e2      	beq.n	8009898 <pow+0x60>
 80098d2:	f7ff ff87 	bl	80097e4 <__errno>
 80098d6:	2321      	movs	r3, #33	@ 0x21
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	ecbd 8b02 	vpop	{d8}
 80098de:	ec47 6b10 	vmov	d0, r6, r7
 80098e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f7 f898 	bl	8000a20 <__aeabi_dcmpeq>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d0f2      	beq.n	80098da <pow+0xa2>
 80098f4:	eeb0 0a48 	vmov.f32	s0, s16
 80098f8:	eef0 0a68 	vmov.f32	s1, s17
 80098fc:	f000 f80c 	bl	8009918 <finite>
 8009900:	2800      	cmp	r0, #0
 8009902:	d0ea      	beq.n	80098da <pow+0xa2>
 8009904:	ec45 4b10 	vmov	d0, r4, r5
 8009908:	f000 f806 	bl	8009918 <finite>
 800990c:	e7c3      	b.n	8009896 <pow+0x5e>
 800990e:	4f01      	ldr	r7, [pc, #4]	@ (8009914 <pow+0xdc>)
 8009910:	2600      	movs	r6, #0
 8009912:	e7e2      	b.n	80098da <pow+0xa2>
 8009914:	3ff00000 	.word	0x3ff00000

08009918 <finite>:
 8009918:	b082      	sub	sp, #8
 800991a:	ed8d 0b00 	vstr	d0, [sp]
 800991e:	9801      	ldr	r0, [sp, #4]
 8009920:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009924:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009928:	0fc0      	lsrs	r0, r0, #31
 800992a:	b002      	add	sp, #8
 800992c:	4770      	bx	lr
	...

08009930 <__ieee754_pow>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	b091      	sub	sp, #68	@ 0x44
 8009936:	ed8d 1b00 	vstr	d1, [sp]
 800993a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800993e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009942:	ea5a 0001 	orrs.w	r0, sl, r1
 8009946:	ec57 6b10 	vmov	r6, r7, d0
 800994a:	d113      	bne.n	8009974 <__ieee754_pow+0x44>
 800994c:	19b3      	adds	r3, r6, r6
 800994e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009952:	4152      	adcs	r2, r2
 8009954:	4298      	cmp	r0, r3
 8009956:	4b9a      	ldr	r3, [pc, #616]	@ (8009bc0 <__ieee754_pow+0x290>)
 8009958:	4193      	sbcs	r3, r2
 800995a:	f080 84ee 	bcs.w	800a33a <__ieee754_pow+0xa0a>
 800995e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7f6 fc3d 	bl	80001e4 <__adddf3>
 800996a:	ec41 0b10 	vmov	d0, r0, r1
 800996e:	b011      	add	sp, #68	@ 0x44
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	4a93      	ldr	r2, [pc, #588]	@ (8009bc4 <__ieee754_pow+0x294>)
 8009976:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800997a:	4295      	cmp	r5, r2
 800997c:	46b8      	mov	r8, r7
 800997e:	4633      	mov	r3, r6
 8009980:	d80a      	bhi.n	8009998 <__ieee754_pow+0x68>
 8009982:	d104      	bne.n	800998e <__ieee754_pow+0x5e>
 8009984:	2e00      	cmp	r6, #0
 8009986:	d1ea      	bne.n	800995e <__ieee754_pow+0x2e>
 8009988:	45aa      	cmp	sl, r5
 800998a:	d8e8      	bhi.n	800995e <__ieee754_pow+0x2e>
 800998c:	e001      	b.n	8009992 <__ieee754_pow+0x62>
 800998e:	4592      	cmp	sl, r2
 8009990:	d802      	bhi.n	8009998 <__ieee754_pow+0x68>
 8009992:	4592      	cmp	sl, r2
 8009994:	d10f      	bne.n	80099b6 <__ieee754_pow+0x86>
 8009996:	b171      	cbz	r1, 80099b6 <__ieee754_pow+0x86>
 8009998:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800999c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80099a0:	ea58 0803 	orrs.w	r8, r8, r3
 80099a4:	d1db      	bne.n	800995e <__ieee754_pow+0x2e>
 80099a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099aa:	18db      	adds	r3, r3, r3
 80099ac:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80099b0:	4152      	adcs	r2, r2
 80099b2:	4598      	cmp	r8, r3
 80099b4:	e7cf      	b.n	8009956 <__ieee754_pow+0x26>
 80099b6:	f1b8 0f00 	cmp.w	r8, #0
 80099ba:	46ab      	mov	fp, r5
 80099bc:	da43      	bge.n	8009a46 <__ieee754_pow+0x116>
 80099be:	4a82      	ldr	r2, [pc, #520]	@ (8009bc8 <__ieee754_pow+0x298>)
 80099c0:	4592      	cmp	sl, r2
 80099c2:	d856      	bhi.n	8009a72 <__ieee754_pow+0x142>
 80099c4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80099c8:	4592      	cmp	sl, r2
 80099ca:	f240 84c5 	bls.w	800a358 <__ieee754_pow+0xa28>
 80099ce:	ea4f 522a 	mov.w	r2, sl, asr #20
 80099d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80099d6:	2a14      	cmp	r2, #20
 80099d8:	dd18      	ble.n	8009a0c <__ieee754_pow+0xdc>
 80099da:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80099de:	fa21 f402 	lsr.w	r4, r1, r2
 80099e2:	fa04 f202 	lsl.w	r2, r4, r2
 80099e6:	428a      	cmp	r2, r1
 80099e8:	f040 84b6 	bne.w	800a358 <__ieee754_pow+0xa28>
 80099ec:	f004 0401 	and.w	r4, r4, #1
 80099f0:	f1c4 0402 	rsb	r4, r4, #2
 80099f4:	2900      	cmp	r1, #0
 80099f6:	d159      	bne.n	8009aac <__ieee754_pow+0x17c>
 80099f8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80099fc:	d148      	bne.n	8009a90 <__ieee754_pow+0x160>
 80099fe:	4632      	mov	r2, r6
 8009a00:	463b      	mov	r3, r7
 8009a02:	4630      	mov	r0, r6
 8009a04:	4639      	mov	r1, r7
 8009a06:	f7f6 fda3 	bl	8000550 <__aeabi_dmul>
 8009a0a:	e7ae      	b.n	800996a <__ieee754_pow+0x3a>
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	d14c      	bne.n	8009aaa <__ieee754_pow+0x17a>
 8009a10:	f1c2 0214 	rsb	r2, r2, #20
 8009a14:	fa4a f402 	asr.w	r4, sl, r2
 8009a18:	fa04 f202 	lsl.w	r2, r4, r2
 8009a1c:	4552      	cmp	r2, sl
 8009a1e:	f040 8498 	bne.w	800a352 <__ieee754_pow+0xa22>
 8009a22:	f004 0401 	and.w	r4, r4, #1
 8009a26:	f1c4 0402 	rsb	r4, r4, #2
 8009a2a:	4a68      	ldr	r2, [pc, #416]	@ (8009bcc <__ieee754_pow+0x29c>)
 8009a2c:	4592      	cmp	sl, r2
 8009a2e:	d1e3      	bne.n	80099f8 <__ieee754_pow+0xc8>
 8009a30:	f1b9 0f00 	cmp.w	r9, #0
 8009a34:	f280 8489 	bge.w	800a34a <__ieee754_pow+0xa1a>
 8009a38:	4964      	ldr	r1, [pc, #400]	@ (8009bcc <__ieee754_pow+0x29c>)
 8009a3a:	4632      	mov	r2, r6
 8009a3c:	463b      	mov	r3, r7
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f7f6 feb0 	bl	80007a4 <__aeabi_ddiv>
 8009a44:	e791      	b.n	800996a <__ieee754_pow+0x3a>
 8009a46:	2400      	movs	r4, #0
 8009a48:	bb81      	cbnz	r1, 8009aac <__ieee754_pow+0x17c>
 8009a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8009bc4 <__ieee754_pow+0x294>)
 8009a4c:	4592      	cmp	sl, r2
 8009a4e:	d1ec      	bne.n	8009a2a <__ieee754_pow+0xfa>
 8009a50:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009a54:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	f000 846e 	beq.w	800a33a <__ieee754_pow+0xa0a>
 8009a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8009bd0 <__ieee754_pow+0x2a0>)
 8009a60:	429d      	cmp	r5, r3
 8009a62:	d908      	bls.n	8009a76 <__ieee754_pow+0x146>
 8009a64:	f1b9 0f00 	cmp.w	r9, #0
 8009a68:	f280 846b 	bge.w	800a342 <__ieee754_pow+0xa12>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	e77b      	b.n	800996a <__ieee754_pow+0x3a>
 8009a72:	2402      	movs	r4, #2
 8009a74:	e7e8      	b.n	8009a48 <__ieee754_pow+0x118>
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	f04f 0000 	mov.w	r0, #0
 8009a7e:	f04f 0100 	mov.w	r1, #0
 8009a82:	f6bf af72 	bge.w	800996a <__ieee754_pow+0x3a>
 8009a86:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009a8e:	e76c      	b.n	800996a <__ieee754_pow+0x3a>
 8009a90:	4a50      	ldr	r2, [pc, #320]	@ (8009bd4 <__ieee754_pow+0x2a4>)
 8009a92:	4591      	cmp	r9, r2
 8009a94:	d10a      	bne.n	8009aac <__ieee754_pow+0x17c>
 8009a96:	f1b8 0f00 	cmp.w	r8, #0
 8009a9a:	db07      	blt.n	8009aac <__ieee754_pow+0x17c>
 8009a9c:	ec47 6b10 	vmov	d0, r6, r7
 8009aa0:	b011      	add	sp, #68	@ 0x44
 8009aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa6:	f000 bd4f 	b.w	800a548 <__ieee754_sqrt>
 8009aaa:	2400      	movs	r4, #0
 8009aac:	ec47 6b10 	vmov	d0, r6, r7
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	f000 fc87 	bl	800a3c4 <fabs>
 8009ab6:	9b02      	ldr	r3, [sp, #8]
 8009ab8:	ec51 0b10 	vmov	r0, r1, d0
 8009abc:	bb43      	cbnz	r3, 8009b10 <__ieee754_pow+0x1e0>
 8009abe:	4b43      	ldr	r3, [pc, #268]	@ (8009bcc <__ieee754_pow+0x29c>)
 8009ac0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d000      	beq.n	8009aca <__ieee754_pow+0x19a>
 8009ac8:	bb15      	cbnz	r5, 8009b10 <__ieee754_pow+0x1e0>
 8009aca:	f1b9 0f00 	cmp.w	r9, #0
 8009ace:	da05      	bge.n	8009adc <__ieee754_pow+0x1ac>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	493d      	ldr	r1, [pc, #244]	@ (8009bcc <__ieee754_pow+0x29c>)
 8009ad8:	f7f6 fe64 	bl	80007a4 <__aeabi_ddiv>
 8009adc:	f1b8 0f00 	cmp.w	r8, #0
 8009ae0:	f6bf af43 	bge.w	800996a <__ieee754_pow+0x3a>
 8009ae4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009ae8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009aec:	4325      	orrs	r5, r4
 8009aee:	d108      	bne.n	8009b02 <__ieee754_pow+0x1d2>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	f7f6 fb72 	bl	80001e0 <__aeabi_dsub>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	e79e      	b.n	8009a40 <__ieee754_pow+0x110>
 8009b02:	2c01      	cmp	r4, #1
 8009b04:	f47f af31 	bne.w	800996a <__ieee754_pow+0x3a>
 8009b08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	e72c      	b.n	800996a <__ieee754_pow+0x3a>
 8009b10:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009b14:	3b01      	subs	r3, #1
 8009b16:	ea53 0204 	orrs.w	r2, r3, r4
 8009b1a:	d102      	bne.n	8009b22 <__ieee754_pow+0x1f2>
 8009b1c:	4632      	mov	r2, r6
 8009b1e:	463b      	mov	r3, r7
 8009b20:	e7e8      	b.n	8009af4 <__ieee754_pow+0x1c4>
 8009b22:	3c01      	subs	r4, #1
 8009b24:	431c      	orrs	r4, r3
 8009b26:	d016      	beq.n	8009b56 <__ieee754_pow+0x226>
 8009b28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009bb0 <__ieee754_pow+0x280>
 8009b2c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009b30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b34:	f240 8110 	bls.w	8009d58 <__ieee754_pow+0x428>
 8009b38:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <__ieee754_pow+0x2a8>)
 8009b3a:	459a      	cmp	sl, r3
 8009b3c:	4b24      	ldr	r3, [pc, #144]	@ (8009bd0 <__ieee754_pow+0x2a0>)
 8009b3e:	d916      	bls.n	8009b6e <__ieee754_pow+0x23e>
 8009b40:	429d      	cmp	r5, r3
 8009b42:	d80b      	bhi.n	8009b5c <__ieee754_pow+0x22c>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	da0b      	bge.n	8009b62 <__ieee754_pow+0x232>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	b011      	add	sp, #68	@ 0x44
 8009b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b52:	f000 bcf1 	b.w	800a538 <__math_oflow>
 8009b56:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009bb8 <__ieee754_pow+0x288>
 8009b5a:	e7e7      	b.n	8009b2c <__ieee754_pow+0x1fc>
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	dcf3      	bgt.n	8009b4a <__ieee754_pow+0x21a>
 8009b62:	2000      	movs	r0, #0
 8009b64:	b011      	add	sp, #68	@ 0x44
 8009b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	f000 bcdd 	b.w	800a528 <__math_uflow>
 8009b6e:	429d      	cmp	r5, r3
 8009b70:	d20c      	bcs.n	8009b8c <__ieee754_pow+0x25c>
 8009b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b76:	2200      	movs	r2, #0
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f7f6 ff5b 	bl	8000a34 <__aeabi_dcmplt>
 8009b7e:	3800      	subs	r0, #0
 8009b80:	bf18      	it	ne
 8009b82:	2001      	movne	r0, #1
 8009b84:	f1b9 0f00 	cmp.w	r9, #0
 8009b88:	daec      	bge.n	8009b64 <__ieee754_pow+0x234>
 8009b8a:	e7df      	b.n	8009b4c <__ieee754_pow+0x21c>
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bcc <__ieee754_pow+0x29c>)
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	d922      	bls.n	8009bdc <__ieee754_pow+0x2ac>
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f7f6 ff4a 	bl	8000a34 <__aeabi_dcmplt>
 8009ba0:	3800      	subs	r0, #0
 8009ba2:	bf18      	it	ne
 8009ba4:	2001      	movne	r0, #1
 8009ba6:	f1b9 0f00 	cmp.w	r9, #0
 8009baa:	dccf      	bgt.n	8009b4c <__ieee754_pow+0x21c>
 8009bac:	e7da      	b.n	8009b64 <__ieee754_pow+0x234>
 8009bae:	bf00      	nop
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	3ff00000 	.word	0x3ff00000
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	bff00000 	.word	0xbff00000
 8009bc0:	fff00000 	.word	0xfff00000
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	433fffff 	.word	0x433fffff
 8009bcc:	3ff00000 	.word	0x3ff00000
 8009bd0:	3fefffff 	.word	0x3fefffff
 8009bd4:	3fe00000 	.word	0x3fe00000
 8009bd8:	43f00000 	.word	0x43f00000
 8009bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8009d48 <__ieee754_pow+0x418>)
 8009bde:	f7f6 faff 	bl	80001e0 <__aeabi_dsub>
 8009be2:	a351      	add	r3, pc, #324	@ (adr r3, 8009d28 <__ieee754_pow+0x3f8>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	f7f6 fcb0 	bl	8000550 <__aeabi_dmul>
 8009bf0:	a34f      	add	r3, pc, #316	@ (adr r3, 8009d30 <__ieee754_pow+0x400>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460f      	mov	r7, r1
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fca7 	bl	8000550 <__aeabi_dmul>
 8009c02:	4b52      	ldr	r3, [pc, #328]	@ (8009d4c <__ieee754_pow+0x41c>)
 8009c04:	4682      	mov	sl, r0
 8009c06:	468b      	mov	fp, r1
 8009c08:	2200      	movs	r2, #0
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	f7f6 fc9f 	bl	8000550 <__aeabi_dmul>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	a148      	add	r1, pc, #288	@ (adr r1, 8009d38 <__ieee754_pow+0x408>)
 8009c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1c:	f7f6 fae0 	bl	80001e0 <__aeabi_dsub>
 8009c20:	4622      	mov	r2, r4
 8009c22:	462b      	mov	r3, r5
 8009c24:	f7f6 fc94 	bl	8000550 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	4948      	ldr	r1, [pc, #288]	@ (8009d50 <__ieee754_pow+0x420>)
 8009c30:	f7f6 fad6 	bl	80001e0 <__aeabi_dsub>
 8009c34:	4622      	mov	r2, r4
 8009c36:	4680      	mov	r8, r0
 8009c38:	4689      	mov	r9, r1
 8009c3a:	462b      	mov	r3, r5
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	f7f6 fc86 	bl	8000550 <__aeabi_dmul>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 fc80 	bl	8000550 <__aeabi_dmul>
 8009c50:	a33b      	add	r3, pc, #236	@ (adr r3, 8009d40 <__ieee754_pow+0x410>)
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f7f6 fc7b 	bl	8000550 <__aeabi_dmul>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4650      	mov	r0, sl
 8009c60:	4659      	mov	r1, fp
 8009c62:	f7f6 fabd 	bl	80001e0 <__aeabi_dsub>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	4689      	mov	r9, r1
 8009c6e:	4630      	mov	r0, r6
 8009c70:	4639      	mov	r1, r7
 8009c72:	f7f6 fab7 	bl	80001e4 <__adddf3>
 8009c76:	2400      	movs	r4, #0
 8009c78:	4632      	mov	r2, r6
 8009c7a:	463b      	mov	r3, r7
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	460d      	mov	r5, r1
 8009c80:	f7f6 faae 	bl	80001e0 <__aeabi_dsub>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4640      	mov	r0, r8
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	f7f6 faa8 	bl	80001e0 <__aeabi_dsub>
 8009c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9304      	str	r3, [sp, #16]
 8009c9c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	465b      	mov	r3, fp
 8009ca6:	4652      	mov	r2, sl
 8009ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cac:	f7f6 fa98 	bl	80001e0 <__aeabi_dsub>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	f7f6 fc4c 	bl	8000550 <__aeabi_dmul>
 8009cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 fc44 	bl	8000550 <__aeabi_dmul>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4640      	mov	r0, r8
 8009cce:	4649      	mov	r1, r9
 8009cd0:	f7f6 fa88 	bl	80001e4 <__adddf3>
 8009cd4:	465b      	mov	r3, fp
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460f      	mov	r7, r1
 8009cda:	4652      	mov	r2, sl
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fc36 	bl	8000550 <__aeabi_dmul>
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4689      	mov	r9, r1
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7f6 fa78 	bl	80001e4 <__adddf3>
 8009cf4:	4b17      	ldr	r3, [pc, #92]	@ (8009d54 <__ieee754_pow+0x424>)
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	f340 820b 	ble.w	800a118 <__ieee754_pow+0x7e8>
 8009d02:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009d06:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009d0a:	4303      	orrs	r3, r0
 8009d0c:	f000 81ea 	beq.w	800a0e4 <__ieee754_pow+0x7b4>
 8009d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d14:	2200      	movs	r2, #0
 8009d16:	2300      	movs	r3, #0
 8009d18:	f7f6 fe8c 	bl	8000a34 <__aeabi_dcmplt>
 8009d1c:	3800      	subs	r0, #0
 8009d1e:	bf18      	it	ne
 8009d20:	2001      	movne	r0, #1
 8009d22:	e713      	b.n	8009b4c <__ieee754_pow+0x21c>
 8009d24:	f3af 8000 	nop.w
 8009d28:	60000000 	.word	0x60000000
 8009d2c:	3ff71547 	.word	0x3ff71547
 8009d30:	f85ddf44 	.word	0xf85ddf44
 8009d34:	3e54ae0b 	.word	0x3e54ae0b
 8009d38:	55555555 	.word	0x55555555
 8009d3c:	3fd55555 	.word	0x3fd55555
 8009d40:	652b82fe 	.word	0x652b82fe
 8009d44:	3ff71547 	.word	0x3ff71547
 8009d48:	3ff00000 	.word	0x3ff00000
 8009d4c:	3fd00000 	.word	0x3fd00000
 8009d50:	3fe00000 	.word	0x3fe00000
 8009d54:	408fffff 	.word	0x408fffff
 8009d58:	4bd5      	ldr	r3, [pc, #852]	@ (800a0b0 <__ieee754_pow+0x780>)
 8009d5a:	ea08 0303 	and.w	r3, r8, r3
 8009d5e:	2200      	movs	r2, #0
 8009d60:	b92b      	cbnz	r3, 8009d6e <__ieee754_pow+0x43e>
 8009d62:	4bd4      	ldr	r3, [pc, #848]	@ (800a0b4 <__ieee754_pow+0x784>)
 8009d64:	f7f6 fbf4 	bl	8000550 <__aeabi_dmul>
 8009d68:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009d6c:	468b      	mov	fp, r1
 8009d6e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009d72:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009d76:	4413      	add	r3, r2
 8009d78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d7a:	4bcf      	ldr	r3, [pc, #828]	@ (800a0b8 <__ieee754_pow+0x788>)
 8009d7c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009d80:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009d84:	459b      	cmp	fp, r3
 8009d86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d8a:	dd08      	ble.n	8009d9e <__ieee754_pow+0x46e>
 8009d8c:	4bcb      	ldr	r3, [pc, #812]	@ (800a0bc <__ieee754_pow+0x78c>)
 8009d8e:	459b      	cmp	fp, r3
 8009d90:	f340 81a5 	ble.w	800a0de <__ieee754_pow+0x7ae>
 8009d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d96:	3301      	adds	r3, #1
 8009d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d9a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009d9e:	f04f 0a00 	mov.w	sl, #0
 8009da2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009da6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009da8:	4bc5      	ldr	r3, [pc, #788]	@ (800a0c0 <__ieee754_pow+0x790>)
 8009daa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dae:	ed93 7b00 	vldr	d7, [r3]
 8009db2:	4629      	mov	r1, r5
 8009db4:	ec53 2b17 	vmov	r2, r3, d7
 8009db8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009dbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dc0:	f7f6 fa0e 	bl	80001e0 <__aeabi_dsub>
 8009dc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dc8:	4606      	mov	r6, r0
 8009dca:	460f      	mov	r7, r1
 8009dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dd0:	f7f6 fa08 	bl	80001e4 <__adddf3>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	2000      	movs	r0, #0
 8009dda:	49ba      	ldr	r1, [pc, #744]	@ (800a0c4 <__ieee754_pow+0x794>)
 8009ddc:	f7f6 fce2 	bl	80007a4 <__aeabi_ddiv>
 8009de0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f6 fbb0 	bl	8000550 <__aeabi_dmul>
 8009df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009df4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009df8:	106d      	asrs	r5, r5, #1
 8009dfa:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009dfe:	f04f 0b00 	mov.w	fp, #0
 8009e02:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009e06:	4661      	mov	r1, ip
 8009e08:	2200      	movs	r2, #0
 8009e0a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009e0e:	4658      	mov	r0, fp
 8009e10:	46e1      	mov	r9, ip
 8009e12:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009e16:	4614      	mov	r4, r2
 8009e18:	461d      	mov	r5, r3
 8009e1a:	f7f6 fb99 	bl	8000550 <__aeabi_dmul>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 f9db 	bl	80001e0 <__aeabi_dsub>
 8009e2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460f      	mov	r7, r1
 8009e32:	4620      	mov	r0, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7f6 f9d3 	bl	80001e0 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e42:	f7f6 f9cd 	bl	80001e0 <__aeabi_dsub>
 8009e46:	465a      	mov	r2, fp
 8009e48:	464b      	mov	r3, r9
 8009e4a:	f7f6 fb81 	bl	8000550 <__aeabi_dmul>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 f9c3 	bl	80001e0 <__aeabi_dsub>
 8009e5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e5e:	f7f6 fb77 	bl	8000550 <__aeabi_dmul>
 8009e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7f6 fb6f 	bl	8000550 <__aeabi_dmul>
 8009e72:	a37d      	add	r3, pc, #500	@ (adr r3, 800a068 <__ieee754_pow+0x738>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	f7f6 fb68 	bl	8000550 <__aeabi_dmul>
 8009e80:	a37b      	add	r3, pc, #492	@ (adr r3, 800a070 <__ieee754_pow+0x740>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 f9ad 	bl	80001e4 <__adddf3>
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	f7f6 fb5f 	bl	8000550 <__aeabi_dmul>
 8009e92:	a379      	add	r3, pc, #484	@ (adr r3, 800a078 <__ieee754_pow+0x748>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 f9a4 	bl	80001e4 <__adddf3>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	f7f6 fb56 	bl	8000550 <__aeabi_dmul>
 8009ea4:	a376      	add	r3, pc, #472	@ (adr r3, 800a080 <__ieee754_pow+0x750>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 f99b 	bl	80001e4 <__adddf3>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	f7f6 fb4d 	bl	8000550 <__aeabi_dmul>
 8009eb6:	a374      	add	r3, pc, #464	@ (adr r3, 800a088 <__ieee754_pow+0x758>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 f992 	bl	80001e4 <__adddf3>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 fb44 	bl	8000550 <__aeabi_dmul>
 8009ec8:	a371      	add	r3, pc, #452	@ (adr r3, 800a090 <__ieee754_pow+0x760>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 f989 	bl	80001e4 <__adddf3>
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	462b      	mov	r3, r5
 8009eda:	4620      	mov	r0, r4
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7f6 fb37 	bl	8000550 <__aeabi_dmul>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 fb31 	bl	8000550 <__aeabi_dmul>
 8009eee:	465a      	mov	r2, fp
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	464b      	mov	r3, r9
 8009ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009efa:	f7f6 f973 	bl	80001e4 <__adddf3>
 8009efe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f02:	f7f6 fb25 	bl	8000550 <__aeabi_dmul>
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	f7f6 f96b 	bl	80001e4 <__adddf3>
 8009f0e:	465a      	mov	r2, fp
 8009f10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f14:	464b      	mov	r3, r9
 8009f16:	4658      	mov	r0, fp
 8009f18:	4649      	mov	r1, r9
 8009f1a:	f7f6 fb19 	bl	8000550 <__aeabi_dmul>
 8009f1e:	4b6a      	ldr	r3, [pc, #424]	@ (800a0c8 <__ieee754_pow+0x798>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	f7f6 f95d 	bl	80001e4 <__adddf3>
 8009f2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f2e:	f7f6 f959 	bl	80001e4 <__adddf3>
 8009f32:	46d8      	mov	r8, fp
 8009f34:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009f38:	460d      	mov	r5, r1
 8009f3a:	465a      	mov	r2, fp
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4640      	mov	r0, r8
 8009f40:	4649      	mov	r1, r9
 8009f42:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009f46:	f7f6 fb03 	bl	8000550 <__aeabi_dmul>
 8009f4a:	465c      	mov	r4, fp
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	4b5d      	ldr	r3, [pc, #372]	@ (800a0c8 <__ieee754_pow+0x798>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 f942 	bl	80001e0 <__aeabi_dsub>
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	463b      	mov	r3, r7
 8009f60:	f7f6 f93e 	bl	80001e0 <__aeabi_dsub>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f6c:	f7f6 f938 	bl	80001e0 <__aeabi_dsub>
 8009f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f74:	f7f6 faec 	bl	8000550 <__aeabi_dmul>
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	462b      	mov	r3, r5
 8009f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f84:	f7f6 fae4 	bl	8000550 <__aeabi_dmul>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 f928 	bl	80001e4 <__adddf3>
 8009f94:	4606      	mov	r6, r0
 8009f96:	460f      	mov	r7, r1
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 f920 	bl	80001e4 <__adddf3>
 8009fa4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009fa8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a098 <__ieee754_pow+0x768>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	4658      	mov	r0, fp
 8009fb0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	f7f6 facb 	bl	8000550 <__aeabi_dmul>
 8009fba:	465c      	mov	r4, fp
 8009fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 f90a 	bl	80001e0 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 f904 	bl	80001e0 <__aeabi_dsub>
 8009fd8:	a331      	add	r3, pc, #196	@ (adr r3, 800a0a0 <__ieee754_pow+0x770>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fab7 	bl	8000550 <__aeabi_dmul>
 8009fe2:	a331      	add	r3, pc, #196	@ (adr r3, 800a0a8 <__ieee754_pow+0x778>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	4606      	mov	r6, r0
 8009fea:	460f      	mov	r7, r1
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7f6 faae 	bl	8000550 <__aeabi_dmul>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 f8f2 	bl	80001e4 <__adddf3>
 800a000:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a002:	4b32      	ldr	r3, [pc, #200]	@ (800a0cc <__ieee754_pow+0x79c>)
 800a004:	4413      	add	r3, r2
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f7f6 f8eb 	bl	80001e4 <__adddf3>
 800a00e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a012:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a014:	f7f6 fa32 	bl	800047c <__aeabi_i2d>
 800a018:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a01a:	4b2d      	ldr	r3, [pc, #180]	@ (800a0d0 <__ieee754_pow+0x7a0>)
 800a01c:	4413      	add	r3, r2
 800a01e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a022:	4606      	mov	r6, r0
 800a024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a028:	460f      	mov	r7, r1
 800a02a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a02e:	f7f6 f8d9 	bl	80001e4 <__adddf3>
 800a032:	4642      	mov	r2, r8
 800a034:	464b      	mov	r3, r9
 800a036:	f7f6 f8d5 	bl	80001e4 <__adddf3>
 800a03a:	4632      	mov	r2, r6
 800a03c:	463b      	mov	r3, r7
 800a03e:	f7f6 f8d1 	bl	80001e4 <__adddf3>
 800a042:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a046:	4632      	mov	r2, r6
 800a048:	463b      	mov	r3, r7
 800a04a:	4658      	mov	r0, fp
 800a04c:	460d      	mov	r5, r1
 800a04e:	f7f6 f8c7 	bl	80001e0 <__aeabi_dsub>
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	f7f6 f8c3 	bl	80001e0 <__aeabi_dsub>
 800a05a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05e:	f7f6 f8bf 	bl	80001e0 <__aeabi_dsub>
 800a062:	465c      	mov	r4, fp
 800a064:	e036      	b.n	800a0d4 <__ieee754_pow+0x7a4>
 800a066:	bf00      	nop
 800a068:	4a454eef 	.word	0x4a454eef
 800a06c:	3fca7e28 	.word	0x3fca7e28
 800a070:	93c9db65 	.word	0x93c9db65
 800a074:	3fcd864a 	.word	0x3fcd864a
 800a078:	a91d4101 	.word	0xa91d4101
 800a07c:	3fd17460 	.word	0x3fd17460
 800a080:	518f264d 	.word	0x518f264d
 800a084:	3fd55555 	.word	0x3fd55555
 800a088:	db6fabff 	.word	0xdb6fabff
 800a08c:	3fdb6db6 	.word	0x3fdb6db6
 800a090:	33333303 	.word	0x33333303
 800a094:	3fe33333 	.word	0x3fe33333
 800a098:	e0000000 	.word	0xe0000000
 800a09c:	3feec709 	.word	0x3feec709
 800a0a0:	dc3a03fd 	.word	0xdc3a03fd
 800a0a4:	3feec709 	.word	0x3feec709
 800a0a8:	145b01f5 	.word	0x145b01f5
 800a0ac:	be3e2fe0 	.word	0xbe3e2fe0
 800a0b0:	7ff00000 	.word	0x7ff00000
 800a0b4:	43400000 	.word	0x43400000
 800a0b8:	0003988e 	.word	0x0003988e
 800a0bc:	000bb679 	.word	0x000bb679
 800a0c0:	0800a848 	.word	0x0800a848
 800a0c4:	3ff00000 	.word	0x3ff00000
 800a0c8:	40080000 	.word	0x40080000
 800a0cc:	0800a828 	.word	0x0800a828
 800a0d0:	0800a838 	.word	0x0800a838
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0dc:	e5d6      	b.n	8009c8c <__ieee754_pow+0x35c>
 800a0de:	f04f 0a01 	mov.w	sl, #1
 800a0e2:	e65e      	b.n	8009da2 <__ieee754_pow+0x472>
 800a0e4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a3bc <__ieee754_pow+0xa8c>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	f7f6 f879 	bl	80001e4 <__adddf3>
 800a0f2:	4642      	mov	r2, r8
 800a0f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 f86f 	bl	80001e0 <__aeabi_dsub>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a10a:	f7f6 fcb1 	bl	8000a70 <__aeabi_dcmpgt>
 800a10e:	2800      	cmp	r0, #0
 800a110:	f47f adfe 	bne.w	8009d10 <__ieee754_pow+0x3e0>
 800a114:	4ba2      	ldr	r3, [pc, #648]	@ (800a3a0 <__ieee754_pow+0xa70>)
 800a116:	e022      	b.n	800a15e <__ieee754_pow+0x82e>
 800a118:	4ca2      	ldr	r4, [pc, #648]	@ (800a3a4 <__ieee754_pow+0xa74>)
 800a11a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a11e:	42a3      	cmp	r3, r4
 800a120:	d919      	bls.n	800a156 <__ieee754_pow+0x826>
 800a122:	4ba1      	ldr	r3, [pc, #644]	@ (800a3a8 <__ieee754_pow+0xa78>)
 800a124:	440b      	add	r3, r1
 800a126:	4303      	orrs	r3, r0
 800a128:	d009      	beq.n	800a13e <__ieee754_pow+0x80e>
 800a12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	f7f6 fc7f 	bl	8000a34 <__aeabi_dcmplt>
 800a136:	3800      	subs	r0, #0
 800a138:	bf18      	it	ne
 800a13a:	2001      	movne	r0, #1
 800a13c:	e512      	b.n	8009b64 <__ieee754_pow+0x234>
 800a13e:	4642      	mov	r2, r8
 800a140:	464b      	mov	r3, r9
 800a142:	f7f6 f84d 	bl	80001e0 <__aeabi_dsub>
 800a146:	4632      	mov	r2, r6
 800a148:	463b      	mov	r3, r7
 800a14a:	f7f6 fc87 	bl	8000a5c <__aeabi_dcmpge>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d1eb      	bne.n	800a12a <__ieee754_pow+0x7fa>
 800a152:	4b96      	ldr	r3, [pc, #600]	@ (800a3ac <__ieee754_pow+0xa7c>)
 800a154:	e003      	b.n	800a15e <__ieee754_pow+0x82e>
 800a156:	4a96      	ldr	r2, [pc, #600]	@ (800a3b0 <__ieee754_pow+0xa80>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	f240 80e7 	bls.w	800a32c <__ieee754_pow+0x9fc>
 800a15e:	151b      	asrs	r3, r3, #20
 800a160:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a164:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a168:	fa4a fa03 	asr.w	sl, sl, r3
 800a16c:	44da      	add	sl, fp
 800a16e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a172:	4890      	ldr	r0, [pc, #576]	@ (800a3b4 <__ieee754_pow+0xa84>)
 800a174:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a178:	4108      	asrs	r0, r1
 800a17a:	ea00 030a 	and.w	r3, r0, sl
 800a17e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a182:	f1c1 0114 	rsb	r1, r1, #20
 800a186:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a18a:	fa4a fa01 	asr.w	sl, sl, r1
 800a18e:	f1bb 0f00 	cmp.w	fp, #0
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f04f 0200 	mov.w	r2, #0
 800a19a:	bfb8      	it	lt
 800a19c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a1a0:	f7f6 f81e 	bl	80001e0 <__aeabi_dsub>
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4689      	mov	r9, r1
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	463b      	mov	r3, r7
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 f818 	bl	80001e4 <__adddf3>
 800a1b4:	2400      	movs	r4, #0
 800a1b6:	a36a      	add	r3, pc, #424	@ (adr r3, 800a360 <__ieee754_pow+0xa30>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	4620      	mov	r0, r4
 800a1be:	460d      	mov	r5, r1
 800a1c0:	f7f6 f9c6 	bl	8000550 <__aeabi_dmul>
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ca:	464b      	mov	r3, r9
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f7f6 f806 	bl	80001e0 <__aeabi_dsub>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 f800 	bl	80001e0 <__aeabi_dsub>
 800a1e0:	a361      	add	r3, pc, #388	@ (adr r3, 800a368 <__ieee754_pow+0xa38>)
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	f7f6 f9b3 	bl	8000550 <__aeabi_dmul>
 800a1ea:	a361      	add	r3, pc, #388	@ (adr r3, 800a370 <__ieee754_pow+0xa40>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4689      	mov	r9, r1
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f6 f9aa 	bl	8000550 <__aeabi_dmul>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f5 ffee 	bl	80001e4 <__adddf3>
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a214:	f7f5 ffe6 	bl	80001e4 <__adddf3>
 800a218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a21c:	4680      	mov	r8, r0
 800a21e:	4689      	mov	r9, r1
 800a220:	f7f5 ffde 	bl	80001e0 <__aeabi_dsub>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4620      	mov	r0, r4
 800a22a:	4629      	mov	r1, r5
 800a22c:	f7f5 ffd8 	bl	80001e0 <__aeabi_dsub>
 800a230:	4642      	mov	r2, r8
 800a232:	4606      	mov	r6, r0
 800a234:	460f      	mov	r7, r1
 800a236:	464b      	mov	r3, r9
 800a238:	4640      	mov	r0, r8
 800a23a:	4649      	mov	r1, r9
 800a23c:	f7f6 f988 	bl	8000550 <__aeabi_dmul>
 800a240:	a34d      	add	r3, pc, #308	@ (adr r3, 800a378 <__ieee754_pow+0xa48>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	4604      	mov	r4, r0
 800a248:	460d      	mov	r5, r1
 800a24a:	f7f6 f981 	bl	8000550 <__aeabi_dmul>
 800a24e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a380 <__ieee754_pow+0xa50>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f5 ffc4 	bl	80001e0 <__aeabi_dsub>
 800a258:	4622      	mov	r2, r4
 800a25a:	462b      	mov	r3, r5
 800a25c:	f7f6 f978 	bl	8000550 <__aeabi_dmul>
 800a260:	a349      	add	r3, pc, #292	@ (adr r3, 800a388 <__ieee754_pow+0xa58>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f5 ffbd 	bl	80001e4 <__adddf3>
 800a26a:	4622      	mov	r2, r4
 800a26c:	462b      	mov	r3, r5
 800a26e:	f7f6 f96f 	bl	8000550 <__aeabi_dmul>
 800a272:	a347      	add	r3, pc, #284	@ (adr r3, 800a390 <__ieee754_pow+0xa60>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f7f5 ffb2 	bl	80001e0 <__aeabi_dsub>
 800a27c:	4622      	mov	r2, r4
 800a27e:	462b      	mov	r3, r5
 800a280:	f7f6 f966 	bl	8000550 <__aeabi_dmul>
 800a284:	a344      	add	r3, pc, #272	@ (adr r3, 800a398 <__ieee754_pow+0xa68>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f5 ffab 	bl	80001e4 <__adddf3>
 800a28e:	4622      	mov	r2, r4
 800a290:	462b      	mov	r3, r5
 800a292:	f7f6 f95d 	bl	8000550 <__aeabi_dmul>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	f7f5 ff9f 	bl	80001e0 <__aeabi_dsub>
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	f7f6 f94f 	bl	8000550 <__aeabi_dmul>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a2b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f5 ff8e 	bl	80001e0 <__aeabi_dsub>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2cc:	f7f6 fa6a 	bl	80007a4 <__aeabi_ddiv>
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	4640      	mov	r0, r8
 800a2da:	4649      	mov	r1, r9
 800a2dc:	f7f6 f938 	bl	8000550 <__aeabi_dmul>
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	f7f5 ff7e 	bl	80001e4 <__adddf3>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f5 ff76 	bl	80001e0 <__aeabi_dsub>
 800a2f4:	4642      	mov	r2, r8
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	f7f5 ff72 	bl	80001e0 <__aeabi_dsub>
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4602      	mov	r2, r0
 800a300:	492d      	ldr	r1, [pc, #180]	@ (800a3b8 <__ieee754_pow+0xa88>)
 800a302:	2000      	movs	r0, #0
 800a304:	f7f5 ff6c 	bl	80001e0 <__aeabi_dsub>
 800a308:	ec41 0b10 	vmov	d0, r0, r1
 800a30c:	ee10 3a90 	vmov	r3, s1
 800a310:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a318:	da0b      	bge.n	800a332 <__ieee754_pow+0xa02>
 800a31a:	4650      	mov	r0, sl
 800a31c:	f000 f85c 	bl	800a3d8 <scalbn>
 800a320:	ec51 0b10 	vmov	r0, r1, d0
 800a324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a328:	f7ff bb6d 	b.w	8009a06 <__ieee754_pow+0xd6>
 800a32c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a330:	e73a      	b.n	800a1a8 <__ieee754_pow+0x878>
 800a332:	ec51 0b10 	vmov	r0, r1, d0
 800a336:	4619      	mov	r1, r3
 800a338:	e7f4      	b.n	800a324 <__ieee754_pow+0x9f4>
 800a33a:	491f      	ldr	r1, [pc, #124]	@ (800a3b8 <__ieee754_pow+0xa88>)
 800a33c:	2000      	movs	r0, #0
 800a33e:	f7ff bb14 	b.w	800996a <__ieee754_pow+0x3a>
 800a342:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a346:	f7ff bb10 	b.w	800996a <__ieee754_pow+0x3a>
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7ff bb0c 	b.w	800996a <__ieee754_pow+0x3a>
 800a352:	460c      	mov	r4, r1
 800a354:	f7ff bb69 	b.w	8009a2a <__ieee754_pow+0xfa>
 800a358:	2400      	movs	r4, #0
 800a35a:	f7ff bb4b 	b.w	80099f4 <__ieee754_pow+0xc4>
 800a35e:	bf00      	nop
 800a360:	00000000 	.word	0x00000000
 800a364:	3fe62e43 	.word	0x3fe62e43
 800a368:	fefa39ef 	.word	0xfefa39ef
 800a36c:	3fe62e42 	.word	0x3fe62e42
 800a370:	0ca86c39 	.word	0x0ca86c39
 800a374:	be205c61 	.word	0xbe205c61
 800a378:	72bea4d0 	.word	0x72bea4d0
 800a37c:	3e663769 	.word	0x3e663769
 800a380:	c5d26bf1 	.word	0xc5d26bf1
 800a384:	3ebbbd41 	.word	0x3ebbbd41
 800a388:	af25de2c 	.word	0xaf25de2c
 800a38c:	3f11566a 	.word	0x3f11566a
 800a390:	16bebd93 	.word	0x16bebd93
 800a394:	3f66c16c 	.word	0x3f66c16c
 800a398:	5555553e 	.word	0x5555553e
 800a39c:	3fc55555 	.word	0x3fc55555
 800a3a0:	40900000 	.word	0x40900000
 800a3a4:	4090cbff 	.word	0x4090cbff
 800a3a8:	3f6f3400 	.word	0x3f6f3400
 800a3ac:	4090cc00 	.word	0x4090cc00
 800a3b0:	3fe00000 	.word	0x3fe00000
 800a3b4:	fff00000 	.word	0xfff00000
 800a3b8:	3ff00000 	.word	0x3ff00000
 800a3bc:	652b82fe 	.word	0x652b82fe
 800a3c0:	3c971547 	.word	0x3c971547

0800a3c4 <fabs>:
 800a3c4:	ec51 0b10 	vmov	r0, r1, d0
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3ce:	ec43 2b10 	vmov	d0, r2, r3
 800a3d2:	4770      	bx	lr
 800a3d4:	0000      	movs	r0, r0
	...

0800a3d8 <scalbn>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	ec55 4b10 	vmov	r4, r5, d0
 800a3de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	b991      	cbnz	r1, 800a40e <scalbn+0x36>
 800a3e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a3ec:	4323      	orrs	r3, r4
 800a3ee:	d03b      	beq.n	800a468 <scalbn+0x90>
 800a3f0:	4b33      	ldr	r3, [pc, #204]	@ (800a4c0 <scalbn+0xe8>)
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f7f6 f8aa 	bl	8000550 <__aeabi_dmul>
 800a3fc:	4b31      	ldr	r3, [pc, #196]	@ (800a4c4 <scalbn+0xec>)
 800a3fe:	429e      	cmp	r6, r3
 800a400:	4604      	mov	r4, r0
 800a402:	460d      	mov	r5, r1
 800a404:	da0f      	bge.n	800a426 <scalbn+0x4e>
 800a406:	a326      	add	r3, pc, #152	@ (adr r3, 800a4a0 <scalbn+0xc8>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	e01e      	b.n	800a44c <scalbn+0x74>
 800a40e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a412:	4291      	cmp	r1, r2
 800a414:	d10b      	bne.n	800a42e <scalbn+0x56>
 800a416:	4622      	mov	r2, r4
 800a418:	4620      	mov	r0, r4
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7f5 fee2 	bl	80001e4 <__adddf3>
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	e020      	b.n	800a468 <scalbn+0x90>
 800a426:	460b      	mov	r3, r1
 800a428:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a42c:	3936      	subs	r1, #54	@ 0x36
 800a42e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a432:	4296      	cmp	r6, r2
 800a434:	dd0d      	ble.n	800a452 <scalbn+0x7a>
 800a436:	2d00      	cmp	r5, #0
 800a438:	a11b      	add	r1, pc, #108	@ (adr r1, 800a4a8 <scalbn+0xd0>)
 800a43a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a43e:	da02      	bge.n	800a446 <scalbn+0x6e>
 800a440:	a11b      	add	r1, pc, #108	@ (adr r1, 800a4b0 <scalbn+0xd8>)
 800a442:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a446:	a318      	add	r3, pc, #96	@ (adr r3, 800a4a8 <scalbn+0xd0>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f6 f880 	bl	8000550 <__aeabi_dmul>
 800a450:	e7e6      	b.n	800a420 <scalbn+0x48>
 800a452:	1872      	adds	r2, r6, r1
 800a454:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a458:	428a      	cmp	r2, r1
 800a45a:	dcec      	bgt.n	800a436 <scalbn+0x5e>
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	dd06      	ble.n	800a46e <scalbn+0x96>
 800a460:	f36f 531e 	bfc	r3, #20, #11
 800a464:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a468:	ec45 4b10 	vmov	d0, r4, r5
 800a46c:	bd70      	pop	{r4, r5, r6, pc}
 800a46e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a472:	da08      	bge.n	800a486 <scalbn+0xae>
 800a474:	2d00      	cmp	r5, #0
 800a476:	a10a      	add	r1, pc, #40	@ (adr r1, 800a4a0 <scalbn+0xc8>)
 800a478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a47c:	dac3      	bge.n	800a406 <scalbn+0x2e>
 800a47e:	a10e      	add	r1, pc, #56	@ (adr r1, 800a4b8 <scalbn+0xe0>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	e7bf      	b.n	800a406 <scalbn+0x2e>
 800a486:	3236      	adds	r2, #54	@ 0x36
 800a488:	f36f 531e 	bfc	r3, #20, #11
 800a48c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a490:	4620      	mov	r0, r4
 800a492:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <scalbn+0xf0>)
 800a494:	4629      	mov	r1, r5
 800a496:	2200      	movs	r2, #0
 800a498:	e7d8      	b.n	800a44c <scalbn+0x74>
 800a49a:	bf00      	nop
 800a49c:	f3af 8000 	nop.w
 800a4a0:	c2f8f359 	.word	0xc2f8f359
 800a4a4:	01a56e1f 	.word	0x01a56e1f
 800a4a8:	8800759c 	.word	0x8800759c
 800a4ac:	7e37e43c 	.word	0x7e37e43c
 800a4b0:	8800759c 	.word	0x8800759c
 800a4b4:	fe37e43c 	.word	0xfe37e43c
 800a4b8:	c2f8f359 	.word	0xc2f8f359
 800a4bc:	81a56e1f 	.word	0x81a56e1f
 800a4c0:	43500000 	.word	0x43500000
 800a4c4:	ffff3cb0 	.word	0xffff3cb0
 800a4c8:	3c900000 	.word	0x3c900000

0800a4cc <with_errno>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	ed2d 8b02 	vpush	{d8}
 800a4d2:	eeb0 8a40 	vmov.f32	s16, s0
 800a4d6:	eef0 8a60 	vmov.f32	s17, s1
 800a4da:	4604      	mov	r4, r0
 800a4dc:	f7ff f982 	bl	80097e4 <__errno>
 800a4e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a4e4:	eef0 0a68 	vmov.f32	s1, s17
 800a4e8:	ecbd 8b02 	vpop	{d8}
 800a4ec:	6004      	str	r4, [r0, #0]
 800a4ee:	bd10      	pop	{r4, pc}

0800a4f0 <xflow>:
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	b507      	push	{r0, r1, r2, lr}
 800a4f4:	ec51 0b10 	vmov	r0, r1, d0
 800a4f8:	b183      	cbz	r3, 800a51c <xflow+0x2c>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a500:	e9cd 2300 	strd	r2, r3, [sp]
 800a504:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a508:	f7f6 f822 	bl	8000550 <__aeabi_dmul>
 800a50c:	ec41 0b10 	vmov	d0, r0, r1
 800a510:	2022      	movs	r0, #34	@ 0x22
 800a512:	b003      	add	sp, #12
 800a514:	f85d eb04 	ldr.w	lr, [sp], #4
 800a518:	f7ff bfd8 	b.w	800a4cc <with_errno>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	e7ee      	b.n	800a500 <xflow+0x10>
 800a522:	0000      	movs	r0, r0
 800a524:	0000      	movs	r0, r0
	...

0800a528 <__math_uflow>:
 800a528:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a530 <__math_uflow+0x8>
 800a52c:	f7ff bfe0 	b.w	800a4f0 <xflow>
 800a530:	00000000 	.word	0x00000000
 800a534:	10000000 	.word	0x10000000

0800a538 <__math_oflow>:
 800a538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a540 <__math_oflow+0x8>
 800a53c:	f7ff bfd8 	b.w	800a4f0 <xflow>
 800a540:	00000000 	.word	0x00000000
 800a544:	70000000 	.word	0x70000000

0800a548 <__ieee754_sqrt>:
 800a548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	4a66      	ldr	r2, [pc, #408]	@ (800a6e8 <__ieee754_sqrt+0x1a0>)
 800a54e:	ec55 4b10 	vmov	r4, r5, d0
 800a552:	43aa      	bics	r2, r5
 800a554:	462b      	mov	r3, r5
 800a556:	4621      	mov	r1, r4
 800a558:	d110      	bne.n	800a57c <__ieee754_sqrt+0x34>
 800a55a:	4622      	mov	r2, r4
 800a55c:	4620      	mov	r0, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 fff6 	bl	8000550 <__aeabi_dmul>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4620      	mov	r0, r4
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f5 fe3a 	bl	80001e4 <__adddf3>
 800a570:	4604      	mov	r4, r0
 800a572:	460d      	mov	r5, r1
 800a574:	ec45 4b10 	vmov	d0, r4, r5
 800a578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	dc0e      	bgt.n	800a59e <__ieee754_sqrt+0x56>
 800a580:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a584:	4322      	orrs	r2, r4
 800a586:	d0f5      	beq.n	800a574 <__ieee754_sqrt+0x2c>
 800a588:	b19d      	cbz	r5, 800a5b2 <__ieee754_sqrt+0x6a>
 800a58a:	4622      	mov	r2, r4
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f5 fe26 	bl	80001e0 <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	f7f6 f904 	bl	80007a4 <__aeabi_ddiv>
 800a59c:	e7e8      	b.n	800a570 <__ieee754_sqrt+0x28>
 800a59e:	152a      	asrs	r2, r5, #20
 800a5a0:	d115      	bne.n	800a5ce <__ieee754_sqrt+0x86>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e009      	b.n	800a5ba <__ieee754_sqrt+0x72>
 800a5a6:	0acb      	lsrs	r3, r1, #11
 800a5a8:	3a15      	subs	r2, #21
 800a5aa:	0549      	lsls	r1, r1, #21
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0fa      	beq.n	800a5a6 <__ieee754_sqrt+0x5e>
 800a5b0:	e7f7      	b.n	800a5a2 <__ieee754_sqrt+0x5a>
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	e7fa      	b.n	800a5ac <__ieee754_sqrt+0x64>
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	02dc      	lsls	r4, r3, #11
 800a5bc:	d5fb      	bpl.n	800a5b6 <__ieee754_sqrt+0x6e>
 800a5be:	1e44      	subs	r4, r0, #1
 800a5c0:	1b12      	subs	r2, r2, r4
 800a5c2:	f1c0 0420 	rsb	r4, r0, #32
 800a5c6:	fa21 f404 	lsr.w	r4, r1, r4
 800a5ca:	4323      	orrs	r3, r4
 800a5cc:	4081      	lsls	r1, r0
 800a5ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5d2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a5d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5da:	07d2      	lsls	r2, r2, #31
 800a5dc:	bf5c      	itt	pl
 800a5de:	005b      	lslpl	r3, r3, #1
 800a5e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a5e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5e8:	bf58      	it	pl
 800a5ea:	0049      	lslpl	r1, r1, #1
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a5f2:	107f      	asrs	r7, r7, #1
 800a5f4:	0049      	lsls	r1, r1, #1
 800a5f6:	2016      	movs	r0, #22
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a5fe:	1915      	adds	r5, r2, r4
 800a600:	429d      	cmp	r5, r3
 800a602:	bfde      	ittt	le
 800a604:	192a      	addle	r2, r5, r4
 800a606:	1b5b      	suble	r3, r3, r5
 800a608:	1936      	addle	r6, r6, r4
 800a60a:	0fcd      	lsrs	r5, r1, #31
 800a60c:	3801      	subs	r0, #1
 800a60e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a612:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a616:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a61a:	d1f0      	bne.n	800a5fe <__ieee754_sqrt+0xb6>
 800a61c:	4605      	mov	r5, r0
 800a61e:	2420      	movs	r4, #32
 800a620:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a624:	4293      	cmp	r3, r2
 800a626:	eb0c 0e00 	add.w	lr, ip, r0
 800a62a:	dc02      	bgt.n	800a632 <__ieee754_sqrt+0xea>
 800a62c:	d113      	bne.n	800a656 <__ieee754_sqrt+0x10e>
 800a62e:	458e      	cmp	lr, r1
 800a630:	d811      	bhi.n	800a656 <__ieee754_sqrt+0x10e>
 800a632:	f1be 0f00 	cmp.w	lr, #0
 800a636:	eb0e 000c 	add.w	r0, lr, ip
 800a63a:	da3f      	bge.n	800a6bc <__ieee754_sqrt+0x174>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	db3d      	blt.n	800a6bc <__ieee754_sqrt+0x174>
 800a640:	f102 0801 	add.w	r8, r2, #1
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	458e      	cmp	lr, r1
 800a648:	bf88      	it	hi
 800a64a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a64e:	eba1 010e 	sub.w	r1, r1, lr
 800a652:	4465      	add	r5, ip
 800a654:	4642      	mov	r2, r8
 800a656:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a65a:	3c01      	subs	r4, #1
 800a65c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a660:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a664:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a668:	d1dc      	bne.n	800a624 <__ieee754_sqrt+0xdc>
 800a66a:	4319      	orrs	r1, r3
 800a66c:	d01b      	beq.n	800a6a6 <__ieee754_sqrt+0x15e>
 800a66e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a6ec <__ieee754_sqrt+0x1a4>
 800a672:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a6f0 <__ieee754_sqrt+0x1a8>
 800a676:	e9da 0100 	ldrd	r0, r1, [sl]
 800a67a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a67e:	f7f5 fdaf 	bl	80001e0 <__aeabi_dsub>
 800a682:	e9da 8900 	ldrd	r8, r9, [sl]
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f6 f9db 	bl	8000a48 <__aeabi_dcmple>
 800a692:	b140      	cbz	r0, 800a6a6 <__ieee754_sqrt+0x15e>
 800a694:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a698:	e9da 0100 	ldrd	r0, r1, [sl]
 800a69c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6a0:	d10e      	bne.n	800a6c0 <__ieee754_sqrt+0x178>
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	4625      	mov	r5, r4
 800a6a6:	1073      	asrs	r3, r6, #1
 800a6a8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6ac:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a6b0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a6b4:	086b      	lsrs	r3, r5, #1
 800a6b6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a6ba:	e759      	b.n	800a570 <__ieee754_sqrt+0x28>
 800a6bc:	4690      	mov	r8, r2
 800a6be:	e7c1      	b.n	800a644 <__ieee754_sqrt+0xfc>
 800a6c0:	f7f5 fd90 	bl	80001e4 <__adddf3>
 800a6c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	f7f6 f9b0 	bl	8000a34 <__aeabi_dcmplt>
 800a6d4:	b120      	cbz	r0, 800a6e0 <__ieee754_sqrt+0x198>
 800a6d6:	1cab      	adds	r3, r5, #2
 800a6d8:	bf08      	it	eq
 800a6da:	3601      	addeq	r6, #1
 800a6dc:	3502      	adds	r5, #2
 800a6de:	e7e2      	b.n	800a6a6 <__ieee754_sqrt+0x15e>
 800a6e0:	1c6b      	adds	r3, r5, #1
 800a6e2:	f023 0501 	bic.w	r5, r3, #1
 800a6e6:	e7de      	b.n	800a6a6 <__ieee754_sqrt+0x15e>
 800a6e8:	7ff00000 	.word	0x7ff00000
 800a6ec:	0800a860 	.word	0x0800a860
 800a6f0:	0800a858 	.word	0x0800a858

0800a6f4 <_init>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr

0800a700 <_fini>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	bf00      	nop
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr
